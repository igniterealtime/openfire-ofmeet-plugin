{"version":3,"file":"external_api.min.js","mappings":"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","sources":["webpack://JitsiMeetExternalAPI/webpack/universalModuleDefinition","webpack://JitsiMeetExternalAPI/./node_modules/@jitsi/js-utils/jitsi-local-storage/index.js","webpack://JitsiMeetExternalAPI/./node_modules/@jitsi/js-utils/json.js","webpack://JitsiMeetExternalAPI/./react/features/base/util/parseURLParams.ts","webpack://JitsiMeetExternalAPI/./react/features/base/util/uri.ts","webpack://JitsiMeetExternalAPI/./node_modules/@jitsi/js-utils/transport/postis.js","webpack://JitsiMeetExternalAPI/./node_modules/@jitsi/js-utils/transport/PostMessageTransportBackend.js","webpack://JitsiMeetExternalAPI/./node_modules/@jitsi/js-utils/transport/constants.js","webpack://JitsiMeetExternalAPI/./node_modules/@jitsi/js-utils/transport/Transport.js","webpack://JitsiMeetExternalAPI/./modules/API/constants.js","webpack://JitsiMeetExternalAPI/./react/features/base/util/helpers.ts","webpack://JitsiMeetExternalAPI/./modules/transport/index.js","webpack://JitsiMeetExternalAPI/./modules/API/external/functions.js","webpack://JitsiMeetExternalAPI/./modules/API/external/external_api.js","webpack://JitsiMeetExternalAPI/./modules/API/external/index.js","webpack://JitsiMeetExternalAPI/./node_modules/@braintree/sanitize-url/dist/constants.js","webpack://JitsiMeetExternalAPI/./node_modules/@braintree/sanitize-url/dist/index.js","webpack://JitsiMeetExternalAPI/./node_modules/@hapi/bourne/lib/index.js","webpack://JitsiMeetExternalAPI/./node_modules/@jitsi/logger/lib/LogCollector.js","webpack://JitsiMeetExternalAPI/./node_modules/@jitsi/logger/lib/Logger.js","webpack://JitsiMeetExternalAPI/./node_modules/@jitsi/logger/lib/index.js","webpack://JitsiMeetExternalAPI/./node_modules/events/events.js","webpack://JitsiMeetExternalAPI/webpack/bootstrap","webpack://JitsiMeetExternalAPI/webpack/runtime/compat get default export","webpack://JitsiMeetExternalAPI/webpack/runtime/define property getters","webpack://JitsiMeetExternalAPI/webpack/runtime/hasOwnProperty shorthand","webpack://JitsiMeetExternalAPI/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetExternalAPI\"] = factory();\n\telse\n\t\troot[\"JitsiMeetExternalAPI\"] = factory();\n})(self, () => {\nreturn ","import EventEmitter from 'events';\n\n/**\n * Dummy implementation of Storage interface.\n */\nclass DummyLocalStorage extends EventEmitter {\n\n    /**\n     * The object used for storage.\n     */\n    _storage = {};\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage = {};\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return Object.keys(this._storage).length;\n    }\n\n    /**\n     * Will return that key's value associated to the passed key name.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {*} - The key value.\n     */\n    getItem(keyName) {\n        return this._storage[keyName];\n    }\n\n    /**\n     * When passed a key name and value, will add that key to the storage,\n     * or update that key's value if it already exists.\n     *\n     * @param {string} keyName - The key name.\n     * @param {*} keyValue - The key value.\n     * @returns {void}\n     */\n    setItem(keyName, keyValue) {\n        this._storage[keyName] = keyValue;\n    }\n\n    /**\n     * When passed a key name, will remove that key from the storage.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {void}\n     */\n    removeItem(keyName) {\n        delete this._storage[keyName];\n    }\n\n    /**\n     * When passed a number n, this method will return the name of the nth key in the storage.\n     *\n     * @param {number} idx - The index of the key.\n     * @returns {string} - The nth key name.\n     */\n    key(n) {\n        const keys = Object.keys(this._storage);\n\n        if (keys.length <= n) {\n            return undefined;\n        }\n\n        return keys[n];\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @param {Array<string>} ignore - Array with keys from the local storage to be ignored.\n     * @returns {string} - The serialized content.\n     */\n    serialize(ignore = []) {\n        if (ignore.length === 0) {\n            return JSON.stringify(this._storage);\n        }\n\n        const storageCopy = { ...this._storage };\n\n        ignore.forEach(key => {\n            delete storageCopy[key];\n        });\n\n        return JSON.stringify(storageCopy);\n    }\n}\n\n/**\n * Wrapper class for browser's local storage object.\n */\nclass JitsiLocalStorage extends EventEmitter {\n    /**\n     * @constructor\n     * @param {Storage} storage browser's local storage object.\n     */\n    constructor() {\n        super();\n\n        try {\n            this._storage = window.localStorage;\n            this._localStorageDisabled = false;\n        } catch (ignore) {\n            // localStorage throws an exception.\n        }\n\n        if (!this._storage) { // Handles the case when window.localStorage is undefined or throws an exception.\n            console.warn('Local storage is disabled.');\n            this._storage = new DummyLocalStorage();\n            this._localStorageDisabled = true;\n        }\n    }\n\n    /**\n     * Returns true if window.localStorage is disabled and false otherwise.\n     *\n     * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\n     */\n    isLocalStorageDisabled() {\n        return this._localStorageDisabled;\n    }\n\n    /**\n     * Switch between window.localStorage and DummyLocalStorage.\n     */\n    setLocalStorageDisabled(value) {\n        this._localStorageDisabled = value;\n\n        try {\n            this._storage = value ? new DummyLocalStorage() : window.localStorage;\n        } catch (ignore) {\n            // localStorage throws an exception.\n        }\n\n        if (!this._storage) {\n            this._storage = new DummyLocalStorage();\n        }\n    }\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage.clear();\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return this._storage.length;\n    }\n\n    /**\n     * Returns that passed key's value.\n     * @param {string} keyName the name of the key you want to retrieve\n     * the value of.\n     * @returns {String|null} the value of the key. If the key does not exist,\n     * null is returned.\n     */\n    getItem(keyName) {\n        return this._storage.getItem(keyName);\n    }\n\n    /**\n     * Adds a key to the storage, or update key's value if it already exists.\n     * @param {string} keyName - the name of the key you want to create/update.\n     * @param {string} keyValue - the value you want to give the key you are\n     * creating/updating.\n     * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\n     */\n    setItem(keyName, keyValue, dontEmitChangedEvent = false) {\n        this._storage.setItem(keyName, keyValue);\n\n        if (!dontEmitChangedEvent) {\n            this.emit('changed');\n        }\n    }\n\n    /**\n     * Remove a key from the storage.\n     * @param {string} keyName the name of the key you want to remove.\n     */\n    removeItem(keyName) {\n        this._storage.removeItem(keyName);\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the name of the nth key in the list, or null if n is greater\n     * than or equal to the number of key/value pairs in the object.\n     *\n     * @param {number} i - The index of the key in the list.\n     * @returns {string}\n     */\n    key(i) {\n        return this._storage.key(i);\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @param {Array<string>} ignore - Array with keys from the local storage to be ignored.\n     * @returns {string} - The serialized content.\n     */\n    serialize(ignore = []) {\n        if (this.isLocalStorageDisabled()) {\n            return this._storage.serialize(ignore);\n        }\n\n        const length = this._storage.length;\n        const localStorageContent = {};\n\n        for (let i = 0; i < length; i++) {\n            const key = this._storage.key(i);\n\n            if (!ignore.includes(key)) {\n                localStorageContent[key] = this._storage.getItem(key);\n            }\n        }\n\n        return JSON.stringify(localStorageContent);\n    }\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();\n","import Bourne from '@hapi/bourne';\n\n/**\n * Safely parse JSON payloads.\n *\n * @param {string} data - The payload to be parsed.\n * @returns The parsed object.\n */\nexport function safeJsonParse(data) {\n    return Bourne.parse(data);\n}\n","// @ts-ignore\nimport { safeJsonParse } from '@jitsi/js-utils/json';\nimport { reportError } from './helpers';\n/**\n * A list if keys to ignore when parsing.\n *\n * @type {string[]}\n */\nconst blacklist = ['__proto__', 'constructor', 'prototype'];\n/**\n * Parses the query/search or fragment/hash parameters out of a specific URL and\n * returns them as a JS object.\n *\n * @param {URL} url - The URL to parse.\n * @param {boolean} dontParse - If falsy, some transformations (for parsing the\n * value as JSON) will be executed.\n * @param {string} source - If {@code 'search'}, the parameters will parsed out\n * of {@code url.search}; otherwise, out of {@code url.hash}.\n * @returns {Object}\n */\nexport function parseURLParams(url, dontParse = false, source = 'hash') {\n    if (!url) {\n        return {};\n    }\n    if (typeof url === 'string') {\n        // eslint-disable-next-line no-param-reassign\n        url = new URL(url);\n    }\n    const paramStr = source === 'search' ? url.search : url.hash;\n    const params = {};\n    const paramParts = paramStr?.substr(1).split('&') || [];\n    // Detect and ignore hash params for hash routers.\n    if (source === 'hash' && paramParts.length === 1) {\n        const firstParam = paramParts[0];\n        if (firstParam.startsWith('/') && firstParam.split('&').length === 1) {\n            return params;\n        }\n    }\n    paramParts.forEach((part) => {\n        const param = part.split('=');\n        const key = param[0];\n        if (!key || key.split('.').some((k) => blacklist.includes(k))) {\n            return;\n        }\n        let value;\n        try {\n            value = param[1];\n            if (!dontParse) {\n                const decoded = decodeURIComponent(value).replace(/\\\\&/, '&');\n                value = decoded === 'undefined' ? undefined : safeJsonParse(decoded);\n            }\n        }\n        catch (e) {\n            reportError(e, `Failed to parse URL parameter value: ${String(value)}`);\n            return;\n        }\n        params[key] = value;\n    });\n    return params;\n}\n","import { sanitizeUrl as _sanitizeUrl } from '@braintree/sanitize-url';\nimport { parseURLParams } from './parseURLParams';\nimport { normalizeNFKC } from './strings';\n/**\n * Http status codes.\n */\nexport var StatusCode;\n(function (StatusCode) {\n    StatusCode[StatusCode[\"PaymentRequired\"] = 402] = \"PaymentRequired\";\n})(StatusCode || (StatusCode = {}));\n/**\n * The app linking scheme.\n * TODO: This should be read from the manifest files later.\n */\nexport const APP_LINK_SCHEME = 'org.jitsi.meet:';\n/**\n * A list of characters to be excluded/removed from the room component/segment\n * of a conference/meeting URI/URL. The list is based on RFC 3986 and the jxmpp\n * library utilized by jicofo.\n */\nconst _ROOM_EXCLUDE_PATTERN = '[\\\\:\\\\?#\\\\[\\\\]@!$&\\'()*+,;=></\"]';\n/**\n * The {@link RegExp} pattern of the authority of a URI.\n *\n * @private\n * @type {string}\n */\nconst _URI_AUTHORITY_PATTERN = '(//[^/?#]+)';\n/**\n * The {@link RegExp} pattern of the path of a URI.\n *\n * @private\n * @type {string}\n */\nconst _URI_PATH_PATTERN = '([^?#]*)';\n/**\n * The {@link RegExp} pattern of the protocol of a URI.\n *\n * FIXME: The URL class exposed by JavaScript will not include the colon in\n * the protocol field. Also in other places (at the time of this writing:\n * the DeepLinkingMobilePage.js) the APP_LINK_SCHEME does not include\n * the double dots, so things are inconsistent.\n *\n * @type {string}\n */\nexport const URI_PROTOCOL_PATTERN = '^([a-z][a-z0-9\\\\.\\\\+-]*:)';\n/**\n * Excludes/removes certain characters from a specific path part which are\n * incompatible with Jitsi Meet on the client and/or server sides. The main\n * use case for this method is to clean up the room name and the tenant.\n *\n * @param {?string} pathPart - The path part to fix.\n * @private\n * @returns {?string}\n */\nfunction _fixPathPart(pathPart) {\n    return pathPart\n        ? pathPart.replace(new RegExp(_ROOM_EXCLUDE_PATTERN, 'g'), '')\n        : pathPart;\n}\n/**\n * Fixes the scheme part of a specific URI (string) so that it contains a\n * well-known scheme such as HTTP(S). For example, the mobile app implements an\n * app-specific URI scheme in addition to Universal Links. The app-specific\n * scheme may precede or replace the well-known scheme. In such a case, dealing\n * with the app-specific scheme only complicates the logic and it is simpler to\n * get rid of it (by translating the app-specific scheme into a well-known\n * scheme).\n *\n * @param {string} uri - The URI (string) to fix the scheme of.\n * @private\n * @returns {string}\n */\nfunction _fixURIStringScheme(uri) {\n    const regex = new RegExp(`${URI_PROTOCOL_PATTERN}+`, 'gi');\n    const match = regex.exec(uri);\n    if (match) {\n        // As an implementation convenience, pick up the last scheme and make\n        // sure that it is a well-known one.\n        let protocol = match[match.length - 1].toLowerCase();\n        if (protocol !== 'http:' && protocol !== 'https:') {\n            protocol = 'https:';\n        }\n        /* eslint-disable no-param-reassign */\n        uri = uri.substring(regex.lastIndex);\n        if (uri.startsWith('//')) {\n            // The specified URL was not a room name only, it contained an\n            // authority.\n            uri = protocol + uri;\n        }\n        /* eslint-enable no-param-reassign */\n    }\n    return uri;\n}\n/**\n * Converts a path to a backend-safe format, by splitting the path '/' processing each part.\n * Properly lowercased and url encoded.\n *\n * @param {string?} path - The path to convert.\n * @returns {string?}\n */\nexport function getBackendSafePath(path) {\n    if (!path) {\n        return path;\n    }\n    return path\n        .split('/')\n        .map(getBackendSafeRoomName)\n        .join('/');\n}\n/**\n * Converts a room name to a backend-safe format. Properly lowercased and url encoded.\n *\n * @param {string?} room - The room name to convert.\n * @returns {string?}\n */\nexport function getBackendSafeRoomName(room) {\n    if (!room) {\n        return room;\n    }\n    /* eslint-disable no-param-reassign */\n    try {\n        // We do not know if we get an already encoded string at this point\n        // as different platforms do it differently, but we need a decoded one\n        // for sure. However since decoding a non-encoded string is a noop, we're safe\n        // doing it here.\n        room = decodeURIComponent(room);\n    }\n    catch (e) {\n        // This can happen though if we get an unencoded string and it contains\n        // some characters that look like an encoded entity, but it's not.\n        // But in this case we're fine going on...\n    }\n    // Normalize the character set.\n    room = normalizeNFKC(room);\n    // Only decoded and normalized strings can be lowercased properly.\n    room = room?.toLowerCase();\n    // But we still need to (re)encode it.\n    room = encodeURIComponent(room ?? '');\n    /* eslint-enable no-param-reassign */\n    // Unfortunately we still need to lowercase it, because encoding a string will\n    // add some uppercase characters, but some backend services\n    // expect it to be full lowercase. However lowercasing an encoded string\n    // doesn't change the string value.\n    return room.toLowerCase();\n}\n/**\n * Gets the (Web application) context root defined by a specific location (URI).\n *\n * @param {Object} location - The location (URI) which defines the (Web\n * application) context root.\n * @public\n * @returns {string} - The (Web application) context root defined by the\n * specified {@code location} (URI).\n */\nexport function getLocationContextRoot({ pathname }) {\n    const contextRootEndIndex = pathname.lastIndexOf('/');\n    return (contextRootEndIndex === -1\n        ? '/'\n        : pathname.substring(0, contextRootEndIndex + 1));\n}\n/**\n * Constructs a new {@code Array} with URL parameter {@code String}s out of a\n * specific {@code Object}.\n *\n * @param {Object} obj - The {@code Object} to turn into URL parameter\n * {@code String}s.\n * @returns {Array<string>} The {@code Array} with URL parameter {@code String}s\n * constructed out of the specified {@code obj}.\n */\nfunction _objectToURLParamsArray(obj = {}) {\n    const params = [];\n    for (const key in obj) { // eslint-disable-line guard-for-in\n        try {\n            params.push(`${key}=${encodeURIComponent(JSON.stringify(obj[key]))}`);\n        }\n        catch (e) {\n            console.warn(`Error encoding ${key}: ${e}`);\n        }\n    }\n    return params;\n}\n/**\n * Parses a specific URI string into an object with the well-known properties of\n * the {@link Location} and/or {@link URL} interfaces implemented by Web\n * browsers. The parsing attempts to be in accord with IETF's RFC 3986.\n *\n * @param {string} str - The URI string to parse.\n * @public\n * @returns {{\n *     hash: string,\n *     host: (string|undefined),\n *     hostname: (string|undefined),\n *     pathname: string,\n *     port: (string|undefined),\n *     protocol: (string|undefined),\n *     search: string\n * }}\n */\nexport function parseStandardURIString(str) {\n    /* eslint-disable no-param-reassign */\n    const obj = {\n        toString: _standardURIToString\n    };\n    let regex;\n    let match;\n    // XXX A URI string as defined by RFC 3986 does not contain any whitespace.\n    // Usually, a browser will have already encoded any whitespace. In order to\n    // avoid potential later problems related to whitespace in URI, strip any\n    // whitespace. Anyway, the Jitsi Meet app is not known to utilize unencoded\n    // whitespace so the stripping is deemed safe.\n    str = str.replace(/\\s/g, '');\n    // protocol\n    regex = new RegExp(URI_PROTOCOL_PATTERN, 'gi');\n    match = regex.exec(str);\n    if (match) {\n        obj.protocol = match[1].toLowerCase();\n        str = str.substring(regex.lastIndex);\n    }\n    // authority\n    regex = new RegExp(`^${_URI_AUTHORITY_PATTERN}`, 'gi');\n    match = regex.exec(str);\n    if (match) {\n        let authority = match[1].substring(/* // */ 2);\n        str = str.substring(regex.lastIndex);\n        // userinfo\n        const userinfoEndIndex = authority.indexOf('@');\n        if (userinfoEndIndex !== -1) {\n            authority = authority.substring(userinfoEndIndex + 1);\n        }\n        obj.host = authority;\n        // port\n        const portBeginIndex = authority.lastIndexOf(':');\n        if (portBeginIndex !== -1) {\n            obj.port = authority.substring(portBeginIndex + 1);\n            authority = authority.substring(0, portBeginIndex);\n        }\n        // hostname\n        obj.hostname = authority;\n    }\n    // pathname\n    regex = new RegExp(`^${_URI_PATH_PATTERN}`, 'gi');\n    match = regex.exec(str);\n    let pathname;\n    if (match) {\n        pathname = match[1];\n        str = str.substring(regex.lastIndex);\n    }\n    if (pathname) {\n        pathname.startsWith('/') || (pathname = `/${pathname}`);\n    }\n    else {\n        pathname = '/';\n    }\n    obj.pathname = pathname;\n    // query\n    if (str.startsWith('?')) {\n        let hashBeginIndex = str.indexOf('#', 1);\n        if (hashBeginIndex === -1) {\n            hashBeginIndex = str.length;\n        }\n        obj.search = str.substring(0, hashBeginIndex);\n        str = str.substring(hashBeginIndex);\n    }\n    else {\n        obj.search = ''; // Google Chrome\n    }\n    // fragment\n    obj.hash = str.startsWith('#') ? str : '';\n    /* eslint-enable no-param-reassign */\n    return obj;\n}\n/**\n * Parses a specific URI which (supposedly) references a Jitsi Meet resource\n * (location).\n *\n * @param {(string|undefined)} uri - The URI to parse which (supposedly)\n * references a Jitsi Meet resource (location).\n * @public\n * @returns {{\n *     contextRoot: string,\n *     hash: string,\n *     host: string,\n *     hostname: string,\n *     pathname: string,\n *     port: string,\n *     protocol: string,\n *     room: (string|undefined),\n *     search: string\n * }}\n */\nexport function parseURIString(uri) {\n    if (typeof uri !== 'string') {\n        return undefined;\n    }\n    const obj = parseStandardURIString(_fixURIStringScheme(uri));\n    // XXX While the components/segments of pathname are URI encoded, Jitsi Meet\n    // on the client and/or server sides still don't support certain characters.\n    obj.pathname = obj.pathname.split('/').map((pathPart) => _fixPathPart(pathPart))\n        .join('/');\n    // Add the properties that are specific to a Jitsi Meet resource (location)\n    // such as contextRoot, room:\n    // contextRoot\n    // @ts-ignore\n    obj.contextRoot = getLocationContextRoot(obj);\n    // The room (name) is the last component/segment of pathname.\n    const { pathname } = obj;\n    const contextRootEndIndex = pathname.lastIndexOf('/');\n    obj.room = pathname.substring(contextRootEndIndex + 1) || undefined;\n    if (contextRootEndIndex > 1) {\n        // The part of the pathname from the beginning to the room name is the tenant.\n        obj.tenant = pathname.substring(1, contextRootEndIndex);\n    }\n    return obj;\n}\n/**\n * Implements {@code href} and {@code toString} for the {@code Object} returned\n * by {@link #parseStandardURIString}.\n *\n * @param {Object} [thiz] - An {@code Object} returned by\n * {@code #parseStandardURIString} if any; otherwise, it is presumed that the\n * function is invoked on such an instance.\n * @returns {string}\n */\nfunction _standardURIToString(thiz) {\n    // @ts-ignore\n    // eslint-disable-next-line @typescript-eslint/no-invalid-this\n    const { hash, host, pathname, protocol, search } = thiz || this;\n    let str = '';\n    protocol && (str += protocol);\n    // TODO userinfo\n    host && (str += `//${host}`);\n    str += pathname || '/';\n    search && (str += search);\n    hash && (str += hash);\n    return str;\n}\n/**\n * Sometimes we receive strings that we don't know if already percent-encoded, or not, due to the\n * various sources we get URLs or room names. This function encapsulates the decoding in a safe way.\n *\n * @param {string} text - The text to decode.\n * @returns {string}\n */\nexport function safeDecodeURIComponent(text) {\n    try {\n        return decodeURIComponent(text);\n    }\n    catch (e) {\n        // The text wasn't encoded.\n    }\n    return text;\n}\n/**\n * Attempts to return a {@code String} representation of a specific\n * {@code Object} which is supposed to represent a URL. Obviously, if a\n * {@code String} is specified, it is returned. If a {@code URL} is specified,\n * its {@code URL#href} is returned. Additionally, an {@code Object} similar to\n * the one accepted by the constructor of Web's ExternalAPI is supported on both\n * mobile/React Native and Web/React.\n *\n * @param {Object|string} obj - The URL to return a {@code String}\n * representation of.\n * @returns {string} - A {@code String} representation of the specified\n * {@code obj} which is supposed to represent a URL.\n */\nexport function toURLString(obj) {\n    let str;\n    switch (typeof obj) {\n        case 'object':\n            if (obj) {\n                if (obj instanceof URL) {\n                    str = obj.href;\n                }\n                else {\n                    str = urlObjectToString(obj);\n                }\n            }\n            break;\n        case 'string':\n            str = String(obj);\n            break;\n    }\n    return str;\n}\n/**\n * Attempts to return a {@code String} representation of a specific\n * {@code Object} similar to the one accepted by the constructor\n * of Web's ExternalAPI.\n *\n * @param {Object} o - The URL to return a {@code String} representation of.\n * @returns {string} - A {@code String} representation of the specified\n * {@code Object}.\n */\nexport function urlObjectToString(o) {\n    // First normalize the given url. It come as o.url or split into o.serverURL\n    // and o.room.\n    let tmp;\n    if (o.serverURL && o.room) {\n        tmp = new URL(o.room, o.serverURL).toString();\n    }\n    else if (o.room) {\n        tmp = o.room;\n    }\n    else {\n        tmp = o.url || '';\n    }\n    const url = parseStandardURIString(_fixURIStringScheme(tmp));\n    // protocol\n    if (!url.protocol) {\n        let protocol = o.protocol || o.scheme;\n        if (protocol) {\n            // Protocol is supposed to be the scheme and the final ':'. Anyway,\n            // do not make a fuss if the final ':' is not there.\n            protocol.endsWith(':') || (protocol += ':');\n            url.protocol = protocol;\n        }\n    }\n    // authority & pathname\n    let { pathname } = url;\n    if (!url.host) {\n        // Web's ExternalAPI domain\n        //\n        // It may be host/hostname and pathname with the latter denoting the\n        // tenant.\n        const domain = o.domain || o.host || o.hostname;\n        if (domain) {\n            const { host, hostname, pathname: contextRoot, port } = parseStandardURIString(\n            // XXX The value of domain in supposed to be host/hostname\n            // and, optionally, pathname. Make sure it is not taken for\n            // a pathname only.\n            _fixURIStringScheme(`${APP_LINK_SCHEME}//${domain}`));\n            // authority\n            if (host) {\n                url.host = host;\n                url.hostname = hostname;\n                url.port = port;\n            }\n            // pathname\n            pathname === '/' && contextRoot !== '/' && (pathname = contextRoot);\n        }\n    }\n    // pathname\n    // Web's ExternalAPI roomName\n    const room = o.roomName || o.room;\n    if (room\n        && (url.pathname.endsWith('/')\n            || !url.pathname.endsWith(`/${room}`))) {\n        pathname.endsWith('/') || (pathname += '/');\n        pathname += room;\n    }\n    url.pathname = pathname;\n    // query/search\n    // Web's ExternalAPI jwt and lang\n    const { jwt, lang, release } = o;\n    const search = new URLSearchParams(url.search);\n    if (jwt) {\n        search.set('jwt', jwt);\n    }\n    const { defaultLanguage } = o.configOverwrite || {};\n    if (lang || defaultLanguage) {\n        search.set('lang', lang || defaultLanguage);\n    }\n    if (release) {\n        search.set('release', release);\n    }\n    const searchString = search.toString();\n    if (searchString) {\n        url.search = `?${searchString}`;\n    }\n    // fragment/hash\n    let { hash } = url;\n    for (const urlPrefix of ['config', 'iceServers', 'interfaceConfig', 'devices', 'userInfo', 'appData']) {\n        const urlParamsArray = _objectToURLParamsArray(o[`${urlPrefix}Overwrite`]\n            || o[urlPrefix]\n            || o[`${urlPrefix}Override`]);\n        if (urlParamsArray.length) {\n            let urlParamsString = `${urlPrefix}.${urlParamsArray.join(`&${urlPrefix}.`)}`;\n            if (hash.length) {\n                urlParamsString = `&${urlParamsString}`;\n            }\n            else {\n                hash = '#';\n            }\n            hash += urlParamsString;\n        }\n    }\n    url.hash = hash;\n    return url.toString() || undefined;\n}\n/**\n * Adds hash params to URL.\n *\n * @param {URL} url - The URL.\n * @param {Object} hashParamsToAdd - A map with the parameters to be set.\n * @returns {URL} - The new URL.\n */\nexport function addHashParamsToURL(url, hashParamsToAdd = {}) {\n    const params = parseURLParams(url);\n    const urlParamsArray = _objectToURLParamsArray({\n        ...params,\n        ...hashParamsToAdd\n    });\n    if (urlParamsArray.length) {\n        url.hash = `#${urlParamsArray.join('&')}`;\n    }\n    return url;\n}\n/**\n * Returns the decoded URI.\n *\n * @param {string} uri - The URI to decode.\n * @returns {string}\n */\nexport function getDecodedURI(uri) {\n    return decodeURI(uri.replace(/^https?:\\/\\//i, ''));\n}\n/**\n * Adds new param to a url string. Checks whether to use '?' or '&' as a separator (checks for already existing params).\n *\n * @param {string} url - The url to modify.\n * @param {string} name - The param name to add.\n * @param {string} value - The value for the param.\n *\n * @returns {string} - The modified url.\n */\nexport function appendURLParam(url, name, value) {\n    const newUrl = new URL(url);\n    newUrl.searchParams.append(name, value);\n    return newUrl.toString();\n}\n/**\n * Adds new hash param to a url string.\n * Checks whether to use '?' or '&' as a separator (checks for already existing params).\n *\n * @param {string} url - The url to modify.\n * @param {string} name - The param name to add.\n * @param {string} value - The value for the param.\n *\n * @returns {string} - The modified url.\n */\nexport function appendURLHashParam(url, name, value) {\n    const newUrl = new URL(url);\n    const dummyUrl = new URL('https://example.com');\n    // Copy current hash-parameters without the '#' as search-parameters.\n    dummyUrl.search = newUrl.hash.substring(1);\n    // Set or update value with the searchParams-API.\n    dummyUrl.searchParams.append(name, value);\n    // Write back as hash parameters.\n    newUrl.hash = dummyUrl.searchParams.toString();\n    return newUrl.toString();\n}\n/**\n * Sanitizes the given URL so that it's safe to use. If it's unsafe, null is returned.\n *\n * @param {string|URL} url - The URL that needs to be sanitized.\n *\n * @returns {URL?} - The sanitized URL, or null otherwise.\n */\nexport function sanitizeUrl(url) {\n    if (!url) {\n        return null;\n    }\n    const urlStr = url.toString();\n    const result = _sanitizeUrl(urlStr);\n    if (result === 'about:blank') {\n        return null;\n    }\n    return new URL(result);\n}\n","/* eslint-disable */\n\nimport { safeJsonParse } from '../json.js';\n\n// Originally: https://github.com/adtile/postis\n//\n// The MIT License\n// \n// Copyright (c) 2015-2015 Adtile Technologies Inc. http://www.adtile.me\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nfunction Postis(options) {\n  var scope = options.scope;\n  var targetWindow = options.window;\n  var windowForEventListening = options.windowForEventListening || window;\n  var allowedOrigin = options.allowedOrigin;\n  var listeners = {};\n  var sendBuffer = [];\n  var listenBuffer = {};\n  var ready = false;\n  var readyMethod = \"__ready__\";\n  var readynessCheck;\n\n  var listener = function(event) {\n    var data;\n    try {\n      data = safeJsonParse(event.data);\n    } catch (e) {\n      return;\n    }\n\n    if (allowedOrigin && event.origin !== allowedOrigin) {\n        return;\n    }\n\n    if (data && data.postis && data.scope === scope) {\n      var listenersForMethod = listeners[data.method];\n      if (listenersForMethod) {\n        for (var i = 0; i < listenersForMethod.length; i++) {\n          listenersForMethod[i].call(null, data.params);\n        }\n      } else {\n        listenBuffer[data.method] = listenBuffer[data.method] || [];\n        listenBuffer[data.method].push(data.params);\n      }\n    }\n  };\n\n  windowForEventListening.addEventListener(\"message\", listener, false);\n\n  var postis = {\n    listen: function (method, callback) {\n      listeners[method] = listeners[method] || [];\n      listeners[method].push(callback);\n\n      var listenBufferForMethod = listenBuffer[method];\n      if (listenBufferForMethod) {\n        var listenersForMethod = listeners[method];\n        for (var i = 0; i < listenersForMethod.length; i++) {\n          for (var j = 0; j < listenBufferForMethod.length; j++) {\n            listenersForMethod[i].call(null, listenBufferForMethod[j]);\n          }\n        }\n      }\n      delete listenBuffer[method];\n    },\n\n    send: function (opts) {\n      var method = opts.method;\n\n      if ((ready || opts.method === readyMethod) && (targetWindow && typeof targetWindow.postMessage === \"function\")) {\n        targetWindow.postMessage(JSON.stringify({\n          postis: true,\n          scope: scope,\n          method: method,\n          params: opts.params\n        }), \"*\");\n      } else {\n        sendBuffer.push(opts);\n      }\n    },\n\n    ready: function (callback) {\n      if (ready) {\n        callback();\n      } else {\n        setTimeout(function () { postis.ready(callback); }, 50);\n      }\n    },\n\n    destroy: function (callback) {\n      clearInterval(readynessCheck);\n      ready = false;\n      if (windowForEventListening && typeof windowForEventListening.removeEventListener === \"function\") {\n        windowForEventListening.removeEventListener(\"message\", listener);\n      }\n      callback && callback();\n    }\n  };\n\n  var readyCheckID = +new Date() + Math.random() + \"\";\n\n  readynessCheck = setInterval(function () {\n    postis.send({\n      method: readyMethod,\n      params: readyCheckID\n    });\n  }, 50);\n\n  postis.listen(readyMethod, function (id) {\n    if (id === readyCheckID) {\n      clearInterval(readynessCheck);\n      ready = true;\n\n      for (var i = 0; i < sendBuffer.length; i++) {\n        postis.send(sendBuffer[i]);\n      }\n      sendBuffer = [];\n    } else {\n      postis.send({\n        method: readyMethod,\n        params: id\n      });\n    }\n  });\n\n  return postis;\n}\n\nexport default Postis;\n","import Postis from './postis.js';\n\n/**\n * The default options for postis.\n *\n * @type {Object}\n */\nconst DEFAULT_POSTIS_OPTIONS = {\n    window: window.opener || window.parent\n};\n\n/**\n * The postis method used for all messages.\n *\n * @type {string}\n */\nconst POSTIS_METHOD_NAME = 'message';\n\n/**\n * Implements message transport using the postMessage API.\n */\nexport default class PostMessageTransportBackend {\n    /**\n     * Creates new PostMessageTransportBackend instance.\n     *\n     * @param {Object} options - Optional parameters for configuration of the\n     * transport.\n     */\n    constructor({ postisOptions } = {}) {\n        // eslint-disable-next-line new-cap\n        this.postis = Postis({\n            ...DEFAULT_POSTIS_OPTIONS,\n            ...postisOptions\n        });\n\n        this._receiveCallback = () => {\n            // Do nothing until a callback is set by the consumer of\n            // PostMessageTransportBackend via setReceiveCallback.\n        };\n\n        this.postis.listen(\n            POSTIS_METHOD_NAME,\n            message => this._receiveCallback(message));\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this.postis.destroy();\n    }\n\n    /**\n     * Sends the passed message.\n     *\n     * @param {Object} message - The message to be sent.\n     * @returns {void}\n     */\n    send(message) {\n        this.postis.send({\n            method: POSTIS_METHOD_NAME,\n            params: message\n        });\n    }\n\n    /**\n     * Sets the callback for receiving data.\n     *\n     * @param {Function} callback - The new callback.\n     * @returns {void}\n     */\n    setReceiveCallback(callback) {\n        this._receiveCallback = callback;\n    }\n}\n","/**\n * The message type for events.\n *\n * @type {string}\n */\nexport const MESSAGE_TYPE_EVENT = 'event';\n\n/**\n * The message type for requests.\n *\n * @type {string}\n */\nexport const MESSAGE_TYPE_REQUEST = 'request';\n\n/**\n * The message type for responses.\n *\n * @type {string}\n */\nexport const MESSAGE_TYPE_RESPONSE = 'response';\n","import {\n    MESSAGE_TYPE_EVENT,\n    MESSAGE_TYPE_REQUEST,\n    MESSAGE_TYPE_RESPONSE\n} from './constants.js';\n\n/**\n* Stores the currnet transport backend that have to be used. Also implements\n* request/response mechanism.\n*/\nexport default class Transport {\n    /**\n     * Creates new instance.\n     *\n     * @param {Object} options - Optional parameters for configuration of the\n     * transport backend.\n     */\n    constructor({ backend } = {}) {\n        /**\n         * Maps an event name and listener that have been added to the Transport\n         * instance.\n         *\n         * @type {Map<string, Function>}\n         */\n        this._listeners = new Map();\n\n        /**\n         * The request ID counter used for the id property of the request. This\n         * property is used to match the responses with the request.\n         *\n         * @type {number}\n         */\n        this._requestID = 0;\n\n        /**\n         * Maps an IDs of the requests and handlers that will process the\n         * responses of those requests.\n         *\n         * @type {Map<number, Function>}\n         */\n        this._responseHandlers = new Map();\n\n        /**\n         * A set with the events and requests that were received but not\n         * processed by any listener. They are later passed on every new\n         * listener until they are processed.\n         *\n         * @type {Set<Object>}\n         */\n        this._unprocessedMessages = new Set();\n\n        /**\n         * Alias.\n         */\n        this.addListener = this.on;\n\n        if (backend) {\n            this.setBackend(backend);\n        }\n    }\n\n    /**\n     * Disposes the current transport backend.\n     *\n     * @returns {void}\n     */\n    _disposeBackend() {\n        if (this._backend) {\n            this._backend.dispose();\n            this._backend = null;\n        }\n    }\n\n    /**\n     * Handles incoming messages from the transport backend.\n     *\n     * @param {Object} message - The message.\n     * @returns {void}\n     */\n    _onMessageReceived(message) {\n        if (message.type === MESSAGE_TYPE_RESPONSE) {\n            const handler = this._responseHandlers.get(message.id);\n\n            if (handler) {\n                handler(message);\n                this._responseHandlers.delete(message.id);\n            }\n        } else if (message.type === MESSAGE_TYPE_REQUEST) {\n            this.emit('request', message.data, (result, error) => {\n                this._backend.send({\n                    type: MESSAGE_TYPE_RESPONSE,\n                    error,\n                    id: message.id,\n                    result\n                });\n            });\n        } else {\n            this.emit('event', message.data);\n        }\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._responseHandlers.clear();\n        this._unprocessedMessages.clear();\n        this.removeAllListeners();\n        this._disposeBackend();\n    }\n\n    /**\n     * Calls each of the listeners registered for the event named eventName, in\n     * the order they were registered, passing the supplied arguments to each.\n     *\n     * @param {string} eventName -  The name of the event.\n     * @returns {boolean} True if the event has been processed by any listener,\n     * false otherwise.\n     */\n    emit(eventName, ...args) {\n        const listenersForEvent = this._listeners.get(eventName);\n        let isProcessed = false;\n\n        if (listenersForEvent && listenersForEvent.size) {\n            listenersForEvent.forEach(listener => {\n                isProcessed = listener(...args) || isProcessed;\n            });\n        }\n\n        if (!isProcessed) {\n            this._unprocessedMessages.add(args);\n        }\n\n        return isProcessed;\n    }\n\n    /**\n     * Adds the listener function to the listeners collection for the event\n     * named eventName.\n     *\n     * @param {string} eventName -  The name of the event.\n     * @param {Function} listener - The listener that will be added.\n     * @returns {Transport} References to the instance of Transport class, so\n     * that calls can be chained.\n     */\n    on(eventName, listener) {\n        let listenersForEvent = this._listeners.get(eventName);\n\n        if (!listenersForEvent) {\n            listenersForEvent = new Set();\n            this._listeners.set(eventName, listenersForEvent);\n        }\n\n        listenersForEvent.add(listener);\n\n        this._unprocessedMessages.forEach(args => {\n            if (listener(...args)) {\n                this._unprocessedMessages.delete(args);\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * Removes all listeners, or those of the specified eventName.\n     *\n     * @param {string} [eventName] - The name of the event. If this parameter is\n     * not specified all listeners will be removed.\n     * @returns {Transport} References to the instance of Transport class, so\n     * that calls can be chained.\n     */\n    removeAllListeners(eventName) {\n        if (eventName) {\n            this._listeners.delete(eventName);\n        } else {\n            this._listeners.clear();\n        }\n\n        return this;\n    }\n\n    /**\n     * Removes the listener function from the listeners collection for the event\n     * named eventName.\n     *\n     * @param {string} eventName -  The name of the event.\n     * @param {Function} listener - The listener that will be removed.\n     * @returns {Transport} References to the instance of Transport class, so\n     * that calls can be chained.\n     */\n    removeListener(eventName, listener) {\n        const listenersForEvent = this._listeners.get(eventName);\n\n        if (listenersForEvent) {\n            listenersForEvent.delete(listener);\n        }\n\n        return this;\n    }\n\n    /**\n     * Sends the passed event.\n     *\n     * @param {Object} event - The event to be sent.\n     * @returns {void}\n     */\n    sendEvent(event = {}) {\n        if (this._backend) {\n            this._backend.send({\n                type: MESSAGE_TYPE_EVENT,\n                data: event\n            });\n        }\n    }\n\n    /**\n     * Sending request.\n     *\n     * @param {Object} request - The request to be sent.\n     * @returns {Promise}\n     */\n    sendRequest(request) {\n        if (!this._backend) {\n            return Promise.reject(new Error('No transport backend defined!'));\n        }\n\n        this._requestID++;\n\n        const id = this._requestID;\n\n        return new Promise((resolve, reject) => {\n            this._responseHandlers.set(id, ({ error, result }) => {\n                if (typeof result !== 'undefined') {\n                    resolve(result);\n\n                // eslint-disable-next-line no-negated-condition\n                } else if (typeof error !== 'undefined') {\n                    reject(error);\n                } else { // no response\n                    reject(new Error('Unexpected response format!'));\n                }\n            });\n\n            try {\n                this._backend.send({\n                    type: MESSAGE_TYPE_REQUEST,\n                    data: request,\n                    id\n                });\n            } catch (error) {\n                this._responseHandlers.delete(id);\n                reject(error);\n            }\n        });\n    }\n\n    /**\n     * Changes the current backend transport.\n     *\n     * @param {Object} backend - The new transport backend that will be used.\n     * @returns {void}\n     */\n    setBackend(backend) {\n        this._disposeBackend();\n\n        this._backend = backend;\n        this._backend.setReceiveCallback(this._onMessageReceived.bind(this));\n    }\n}\n","// XXX The function parseURLParams is exported by the feature base/util (as\r\n// defined in the terminology of react/). However, this file is (very likely)\r\n// bundled in external_api in addition to app.bundle and, consequently, it is\r\n// best to import as little as possible here (rather than the whole feature\r\n// base/util) in order to minimize the amount of source code bundled into\r\n// multiple bundles.\r\nimport { parseURLParams } from '../../react/features/base/util/parseURLParams';\r\n\r\n/**\r\n * JitsiMeetExternalAPI id - unique for a webpage.\r\n * TODO: This shouldn't be computed here.\r\n */\r\nlet _apiID;\r\n\r\ntry {\r\n    _apiID = parseURLParams(window.location).jitsi_meet_external_api_id;\r\n} catch (_) { /* Ignore. */ }\r\n\r\nexport const API_ID = _apiID;\r\n\r\n/**\r\n * The payload name for the datachannel/endpoint text message event.\r\n */\r\nexport const ENDPOINT_TEXT_MESSAGE_NAME = 'endpoint-text-message';\r\n\r\n/**\r\n * The min value that can be set for the assumed bandwidth.\r\n * Setting it to this value means not assuming any bandwidth,\r\n * but rather allowing the estimations to take place.\r\n */\r\nexport const MIN_ASSUMED_BANDWIDTH_BPS = -1;\r\n","/**\n * A helper function that behaves similar to Object.assign, but only reassigns a\n * property in target if it's defined in source.\n *\n * @param {Object} target - The target object to assign the values into.\n * @param {Object} source - The source object.\n * @returns {Object}\n */\nexport function assignIfDefined(target, source) {\n    const to = Object(target);\n    for (const nextKey in source) {\n        if (source.hasOwnProperty(nextKey)) {\n            const value = source[nextKey];\n            if (typeof value !== 'undefined') {\n                to[nextKey] = value;\n            }\n        }\n    }\n    return to;\n}\n/**\n * Creates a deferred object.\n *\n * @returns {{promise, resolve, reject}}\n */\nexport function createDeferred() {\n    const deferred = {};\n    deferred.promise = new Promise((resolve, reject) => {\n        deferred.resolve = resolve;\n        deferred.reject = reject;\n    });\n    return deferred;\n}\nconst MATCH_OPERATOR_REGEXP = /[|\\\\{}()[\\]^$+*?.-]/g;\n/**\n * Escape RegExp special characters.\n *\n * Based on https://github.com/sindresorhus/escape-string-regexp.\n *\n * @param {string} s - The regexp string to escape.\n * @returns {string}\n */\nexport function escapeRegexp(s) {\n    if (typeof s !== 'string') {\n        throw new TypeError('Expected a string');\n    }\n    return s.replace(MATCH_OPERATOR_REGEXP, '\\\\$&');\n}\n/**\n * Returns the base URL of the app.\n *\n * @param {Object} w - Window object to use instead of the built in one.\n * @returns {string}\n */\nexport function getBaseUrl(w = window) {\n    const doc = w.document;\n    const base = doc.querySelector('base');\n    if (base?.href) {\n        return base.href;\n    }\n    const { protocol, host } = w.location;\n    return `${protocol}//${host}`;\n}\n/**\n * Returns the namespace for all global variables, functions, etc that we need.\n *\n * @returns {Object} The namespace.\n *\n * NOTE: After React-ifying everything this should be the only global.\n */\nexport function getJitsiMeetGlobalNS() {\n    if (!window.JitsiMeetJS) {\n        window.JitsiMeetJS = {};\n    }\n    if (!window.JitsiMeetJS.app) {\n        window.JitsiMeetJS.app = {};\n    }\n    return window.JitsiMeetJS.app;\n}\n/**\n * Prints the error and reports it to the global error handler.\n *\n * @param {Error} e - The error object.\n * @param {string} msg - A custom message to print in addition to the error.\n * @returns {void}\n */\nexport function reportError(e, msg = '') {\n    console.error(msg, e);\n    window.onerror?.(msg, undefined, undefined, undefined, e);\n}\n/**\n * Adds alpha to a color css string.\n *\n * @param {string} color - The color string either in rgb... Or #... Format.\n * @param {number} opacity -The opacity(alpha) to apply to the color. Can take a value between 0 and 1, including.\n * @returns {string} - The color with applied alpha.\n */\nexport function setColorAlpha(color, opacity) {\n    if (!color) {\n        return `rgba(0, 0, 0, ${opacity})`;\n    }\n    let b, g, r;\n    try {\n        if (color.startsWith('rgb')) {\n            [r, g, b] = color.split('(')[1].split(')')[0].split(',').map(c => c.trim());\n        }\n        else if (color.startsWith('#')) {\n            if (color.length === 4) {\n                [r, g, b] = parseShorthandColor(color);\n            }\n            else {\n                r = parseInt(color.substring(1, 3), 16);\n                g = parseInt(color.substring(3, 5), 16);\n                b = parseInt(color.substring(5, 7), 16);\n            }\n        }\n        else {\n            return color;\n        }\n        return `rgba(${r}, ${g}, ${b}, ${opacity})`;\n    }\n    catch {\n        return color;\n    }\n}\n/**\n * Gets the hexa rgb values for a shorthand css color.\n *\n * @param {string} color - The shorthand css color.\n * @returns {Array<number>} - Array containing parsed r, g, b values of the color.\n */\nfunction parseShorthandColor(color) {\n    let b, g, r;\n    r = color.substring(1, 2);\n    r += r;\n    r = parseInt(r, 16);\n    g = color.substring(2, 3);\n    g += g;\n    g = parseInt(g, 16);\n    b = color.substring(3, 4);\n    b += b;\n    b = parseInt(b, 16);\n    return [r, g, b];\n}\n/**\n * Sorts an object by a sort function, same functionality as array.sort().\n *\n * @param {Object} object - The data object.\n * @param {Function} callback - The sort function.\n * @returns {void}\n */\nexport function objectSort(object, callback) {\n    return Object.entries(object)\n        .sort(([, a], [, b]) => callback(a, b))\n        .reduce((row, [key, value]) => {\n        return { ...row,\n            [key]: value };\n    }, {});\n}\n","// FIXME: change to '../API' when we update to webpack2. If we do this now all\r\n// files from API modules will be included in external_api.js.\r\nimport { PostMessageTransportBackend, Transport } from '@jitsi/js-utils/transport';\r\n\r\nimport { getJitsiMeetGlobalNS } from '../../react/features/base/util/helpers';\r\nimport { API_ID } from '../API/constants';\r\n\r\n\r\nexport {\r\n    PostMessageTransportBackend,\r\n    Transport\r\n};\r\n\r\n/**\r\n * Option for the default low level transport.\r\n *\r\n * @type {Object}\r\n */\r\nconst postisOptions = {};\r\n\r\nif (typeof API_ID === 'number') {\r\n    postisOptions.scope = `jitsi_meet_external_api_${API_ID}`;\r\n}\r\n\r\n/**\r\n * The instance of Transport class that will be used by Jitsi Meet.\r\n *\r\n * @type {Transport}\r\n */\r\nlet transport;\r\n\r\n/**\r\n * Returns the instance of Transport class that will be used by Jitsi Meet.\r\n *\r\n * @returns {Transport}\r\n */\r\nexport function getJitsiMeetTransport() {\r\n    if (!transport) {\r\n        transport = new Transport({ backend: new PostMessageTransportBackend({ postisOptions }) });\r\n    }\r\n\r\n    return transport;\r\n}\r\n\r\n/**\r\n * Sets the transport to passed transport.\r\n *\r\n * @param {Object} externalTransportBackend - The new transport.\r\n * @returns {void}\r\n */\r\ngetJitsiMeetGlobalNS().setExternalTransportBackend = externalTransportBackend =>\r\n    transport.setBackend(externalTransportBackend);\r\n","import Logger from '@jitsi/logger';\r\n\r\nconst logger = Logger.getLogger(__filename);\r\n\r\n/**\r\n * Returns Promise that resolves with result an list of available devices.\r\n *\r\n * @param {Transport} transport - The @code{Transport} instance responsible for\r\n * the external communication.\r\n * @returns {Promise}\r\n */\r\nexport function getAvailableDevices(transport) {\r\n    return transport.sendRequest({\r\n        type: 'devices',\r\n        name: 'getAvailableDevices'\r\n    }).catch(e => {\r\n        logger.error(e);\r\n\r\n        return {};\r\n    });\r\n}\r\n\r\n/**\r\n * Returns Promise that resolves with current selected devices.\r\n *\r\n * @param {Transport} transport - The @code{Transport} instance responsible for\r\n * the external communication.\r\n * @returns {Promise}\r\n */\r\nexport function getCurrentDevices(transport) {\r\n    return transport.sendRequest({\r\n        type: 'devices',\r\n        name: 'getCurrentDevices'\r\n    }).catch(e => {\r\n        logger.error(e);\r\n\r\n        return {};\r\n    });\r\n}\r\n\r\n/**\r\n * Returns Promise that resolves with true if the device change is available\r\n * and with false if not.\r\n *\r\n * @param {Transport} transport - The @code{Transport} instance responsible for\r\n * the external communication.\r\n * @param {string} [deviceType] - Values - 'output', 'input' or undefined.\r\n * Default - 'input'.\r\n * @returns {Promise}\r\n */\r\nexport function isDeviceChangeAvailable(transport, deviceType) {\r\n    return transport.sendRequest({\r\n        deviceType,\r\n        type: 'devices',\r\n        name: 'isDeviceChangeAvailable'\r\n    });\r\n}\r\n\r\n/**\r\n * Returns Promise that resolves with true if the device list is available\r\n * and with false if not.\r\n *\r\n * @param {Transport} transport - The @code{Transport} instance responsible for\r\n * the external communication.\r\n * @returns {Promise}\r\n */\r\nexport function isDeviceListAvailable(transport) {\r\n    return transport.sendRequest({\r\n        type: 'devices',\r\n        name: 'isDeviceListAvailable'\r\n    });\r\n}\r\n\r\n/**\r\n * Returns Promise that resolves with true if multiple audio input is supported\r\n * and with false if not.\r\n *\r\n * @param {Transport} transport - The @code{Transport} instance responsible for\r\n * the external communication.\r\n * @returns {Promise}\r\n */\r\nexport function isMultipleAudioInputSupported(transport) {\r\n    return transport.sendRequest({\r\n        type: 'devices',\r\n        name: 'isMultipleAudioInputSupported'\r\n    });\r\n}\r\n\r\n/**\r\n * Sets the audio input device to the one with the label or id that is passed.\r\n *\r\n * @param {Transport} transport - The @code{Transport} instance responsible for\r\n * the external communication.\r\n * @param {string} label - The label of the new device.\r\n * @param {string} id - The id of the new device.\r\n * @returns {Promise}\r\n */\r\nexport function setAudioInputDevice(transport, label, id) {\r\n    return _setDevice(transport, {\r\n        id,\r\n        kind: 'audioinput',\r\n        label\r\n    });\r\n}\r\n\r\n/**\r\n * Sets the audio output device to the one with the label or id that is passed.\r\n *\r\n * @param {Transport} transport - The @code{Transport} instance responsible for\r\n * the external communication.\r\n * @param {string} label - The label of the new device.\r\n * @param {string} id - The id of the new device.\r\n * @returns {Promise}\r\n */\r\nexport function setAudioOutputDevice(transport, label, id) {\r\n    return _setDevice(transport, {\r\n        id,\r\n        kind: 'audiooutput',\r\n        label\r\n    });\r\n}\r\n\r\n/**\r\n * Sets the currently used device to the one that is passed.\r\n *\r\n * @param {Transport} transport - The @code{Transport} instance responsible for\r\n * the external communication.\r\n * @param {Object} device - The new device to be used.\r\n * @returns {Promise}\r\n */\r\nfunction _setDevice(transport, device) {\r\n    return transport.sendRequest({\r\n        type: 'devices',\r\n        name: 'setDevice',\r\n        device\r\n    });\r\n}\r\n\r\n/**\r\n * Sets the video input device to the one with the label or id that is passed.\r\n *\r\n * @param {Transport} transport - The @code{Transport} instance responsible for\r\n * the external communication.\r\n * @param {string} label - The label of the new device.\r\n * @param {string} id - The id of the new device.\r\n * @returns {Promise}\r\n */\r\nexport function setVideoInputDevice(transport, label, id) {\r\n    return _setDevice(transport, {\r\n        id,\r\n        kind: 'videoinput',\r\n        label\r\n    });\r\n}\r\n","import { jitsiLocalStorage } from '@jitsi/js-utils/jitsi-local-storage';\r\nimport EventEmitter from 'events';\r\n\r\nimport { urlObjectToString } from '../../../react/features/base/util/uri';\r\nimport {\r\n    PostMessageTransportBackend,\r\n    Transport\r\n} from '../../transport';\r\n\r\nimport {\r\n    getAvailableDevices,\r\n    getCurrentDevices,\r\n    isDeviceChangeAvailable,\r\n    isDeviceListAvailable,\r\n    isMultipleAudioInputSupported,\r\n    setAudioInputDevice,\r\n    setAudioOutputDevice,\r\n    setVideoInputDevice\r\n} from './functions';\r\n\r\nconst ALWAYS_ON_TOP_FILENAMES = [\r\n    'css/all.css', 'libs/alwaysontop.min.js'\r\n];\r\n\r\n/**\r\n * Maps the names of the commands expected by the API with the name of the\r\n * commands expected by jitsi-meet.\r\n */\r\nconst commands = {\r\n    addBreakoutRoom: 'add-breakout-room',\r\n    answerKnockingParticipant: 'answer-knocking-participant',\r\n    approveVideo: 'approve-video',\r\n    askToUnmute: 'ask-to-unmute',\r\n    autoAssignToBreakoutRooms: 'auto-assign-to-breakout-rooms',\r\n    avatarUrl: 'avatar-url',\r\n    cancelPrivateChat: 'cancel-private-chat',\r\n    closeBreakoutRoom: 'close-breakout-room',\r\n    displayName: 'display-name',\r\n    endConference: 'end-conference',\r\n    email: 'email',\r\n    grantModerator: 'grant-moderator',\r\n    hangup: 'video-hangup',\r\n    hideNotification: 'hide-notification',\r\n    initiatePrivateChat: 'initiate-private-chat',\r\n    joinBreakoutRoom: 'join-breakout-room',\r\n    localSubject: 'local-subject',\r\n    kickParticipant: 'kick-participant',\r\n    muteEveryone: 'mute-everyone',\r\n    overwriteConfig: 'overwrite-config',\r\n    overwriteNames: 'overwrite-names',\r\n    password: 'password',\r\n    pinParticipant: 'pin-participant',\r\n    rejectParticipant: 'reject-participant',\r\n    removeBreakoutRoom: 'remove-breakout-room',\r\n    resizeFilmStrip: 'resize-film-strip',\r\n    resizeLargeVideo: 'resize-large-video',\r\n    sendCameraFacingMode: 'send-camera-facing-mode-message',\r\n    sendChatMessage: 'send-chat-message',\r\n    sendEndpointTextMessage: 'send-endpoint-text-message',\r\n    sendParticipantToRoom: 'send-participant-to-room',\r\n    sendTones: 'send-tones',\r\n    setAssumedBandwidthBps: 'set-assumed-bandwidth-bps',\r\n    setFollowMe: 'set-follow-me',\r\n    setLargeVideoParticipant: 'set-large-video-participant',\r\n    setMediaEncryptionKey: 'set-media-encryption-key',\r\n    setNoiseSuppressionEnabled: 'set-noise-suppression-enabled',\r\n    setParticipantVolume: 'set-participant-volume',\r\n    setSubtitles: 'set-subtitles',\r\n    setTileView: 'set-tile-view',\r\n    setVideoQuality: 'set-video-quality',\r\n    showNotification: 'show-notification',\r\n    startRecording: 'start-recording',\r\n    startShareVideo: 'start-share-video',\r\n    stopRecording: 'stop-recording',\r\n    stopShareVideo: 'stop-share-video',\r\n    subject: 'subject',\r\n    submitFeedback: 'submit-feedback',\r\n    toggleAudio: 'toggle-audio',\r\n    toggleCamera: 'toggle-camera',\r\n    toggleCameraMirror: 'toggle-camera-mirror',\r\n    toggleChat: 'toggle-chat',\r\n    toggleE2EE: 'toggle-e2ee',\r\n    toggleFilmStrip: 'toggle-film-strip',\r\n    toggleLobby: 'toggle-lobby',\r\n    toggleModeration: 'toggle-moderation',\r\n    toggleNoiseSuppression: 'toggle-noise-suppression',\r\n    toggleParticipantsPane: 'toggle-participants-pane',\r\n    toggleRaiseHand: 'toggle-raise-hand',\r\n    toggleShareScreen: 'toggle-share-screen',\r\n    toggleSubtitles: 'toggle-subtitles',\r\n    toggleTileView: 'toggle-tile-view',\r\n    toggleVirtualBackgroundDialog: 'toggle-virtual-background',\r\n    toggleVideo: 'toggle-video',\r\n    toggleWhiteboard: 'toggle-whiteboard'\r\n};\r\n\r\n/**\r\n * Maps the names of the events expected by the API with the name of the\r\n * events expected by jitsi-meet.\r\n */\r\nconst events = {\r\n    'avatar-changed': 'avatarChanged',\r\n    'audio-availability-changed': 'audioAvailabilityChanged',\r\n    'audio-mute-status-changed': 'audioMuteStatusChanged',\r\n    'audio-or-video-sharing-toggled': 'audioOrVideoSharingToggled',\r\n    'breakout-rooms-updated': 'breakoutRoomsUpdated',\r\n    'browser-support': 'browserSupport',\r\n    'camera-error': 'cameraError',\r\n    'chat-updated': 'chatUpdated',\r\n    'compute-pressure-changed': 'computePressureChanged',\r\n    'content-sharing-participants-changed': 'contentSharingParticipantsChanged',\r\n    'data-channel-closed': 'dataChannelClosed',\r\n    'data-channel-opened': 'dataChannelOpened',\r\n    'device-list-changed': 'deviceListChanged',\r\n    'display-name-change': 'displayNameChange',\r\n    'dominant-speaker-changed': 'dominantSpeakerChanged',\r\n    'email-change': 'emailChange',\r\n    'error-occurred': 'errorOccurred',\r\n    'endpoint-text-message-received': 'endpointTextMessageReceived',\r\n    'face-landmark-detected': 'faceLandmarkDetected',\r\n    'feedback-submitted': 'feedbackSubmitted',\r\n    'feedback-prompt-displayed': 'feedbackPromptDisplayed',\r\n    'filmstrip-display-changed': 'filmstripDisplayChanged',\r\n    'incoming-message': 'incomingMessage',\r\n    'knocking-participant': 'knockingParticipant',\r\n    'log': 'log',\r\n    'mic-error': 'micError',\r\n    'moderation-participant-approved': 'moderationParticipantApproved',\r\n    'moderation-participant-rejected': 'moderationParticipantRejected',\r\n    'moderation-status-changed': 'moderationStatusChanged',\r\n    'mouse-enter': 'mouseEnter',\r\n    'mouse-leave': 'mouseLeave',\r\n    'mouse-move': 'mouseMove',\r\n    'non-participant-message-received': 'nonParticipantMessageReceived',\r\n    'notification-triggered': 'notificationTriggered',\r\n    'outgoing-message': 'outgoingMessage',\r\n    'p2p-status-changed': 'p2pStatusChanged',\r\n    'participant-joined': 'participantJoined',\r\n    'participant-kicked-out': 'participantKickedOut',\r\n    'participant-left': 'participantLeft',\r\n    'participant-role-changed': 'participantRoleChanged',\r\n    'participants-pane-toggled': 'participantsPaneToggled',\r\n    'password-required': 'passwordRequired',\r\n    'peer-connection-failure': 'peerConnectionFailure',\r\n    'prejoin-screen-loaded': 'prejoinScreenLoaded',\r\n    'proxy-connection-event': 'proxyConnectionEvent',\r\n    'raise-hand-updated': 'raiseHandUpdated',\r\n    'ready': 'ready',\r\n    'recording-link-available': 'recordingLinkAvailable',\r\n    'recording-status-changed': 'recordingStatusChanged',\r\n    'participant-menu-button-clicked': 'participantMenuButtonClick',\r\n    'video-ready-to-close': 'readyToClose',\r\n    'video-conference-joined': 'videoConferenceJoined',\r\n    'video-conference-left': 'videoConferenceLeft',\r\n    'video-availability-changed': 'videoAvailabilityChanged',\r\n    'video-mute-status-changed': 'videoMuteStatusChanged',\r\n    'video-quality-changed': 'videoQualityChanged',\r\n    'screen-sharing-status-changed': 'screenSharingStatusChanged',\r\n    'subject-change': 'subjectChange',\r\n    'suspend-detected': 'suspendDetected',\r\n    'tile-view-changed': 'tileViewChanged',\r\n    'toolbar-button-clicked': 'toolbarButtonClicked',\r\n    'transcribing-status-changed': 'transcribingStatusChanged',\r\n    'transcription-chunk-received': 'transcriptionChunkReceived',\r\n    'whiteboard-status-changed': 'whiteboardStatusChanged'\r\n};\r\n\r\nconst requests = {\r\n    '_request-desktop-sources': '_requestDesktopSources'\r\n};\r\n\r\n/**\r\n * Last id of api object.\r\n *\r\n * @type {number}\r\n */\r\nlet id = 0;\r\n\r\n/**\r\n * Adds given number to the numberOfParticipants property of given APIInstance.\r\n *\r\n * @param {JitsiMeetExternalAPI} APIInstance - The instance of the API.\r\n * @param {int} number - The number of participants to be added to\r\n * numberOfParticipants property (this parameter can be negative number if the\r\n * numberOfParticipants should be decreased).\r\n * @returns {void}\r\n */\r\nfunction changeParticipantNumber(APIInstance, number) {\r\n    APIInstance._numberOfParticipants += number;\r\n}\r\n\r\n/**\r\n * Generates the URL for the iframe.\r\n *\r\n * @param {string} domain - The domain name of the server that hosts the\r\n * conference.\r\n * @param {string} [options] - Another optional parameters.\r\n * @param {Object} [options.configOverwrite] - Object containing configuration\r\n * options defined in config.js to be overridden.\r\n * @param {Object} [options.interfaceConfigOverwrite] - Object containing\r\n * configuration options defined in interface_config.js to be overridden.\r\n * @param {string} [options.jwt] - The JWT token if needed by jitsi-meet for\r\n * authentication.\r\n * @param {string} [options.lang] - The meeting's default language.\r\n * @param {string} [options.roomName] - The name of the room to join.\r\n * @returns {string} The URL.\r\n */\r\nfunction generateURL(domain, options = {}) {\r\n    return urlObjectToString({\r\n        ...options,\r\n        url: `https://${domain}/#jitsi_meet_external_api_id=${id}`\r\n    });\r\n}\r\n\r\n/**\r\n * Parses the arguments passed to the constructor. If the old format is used\r\n * the function translates the arguments to the new format.\r\n *\r\n * @param {Array} args - The arguments to be parsed.\r\n * @returns {Object} JS object with properties.\r\n */\r\nfunction parseArguments(args) {\r\n    if (!args.length) {\r\n        return {};\r\n    }\r\n\r\n    const firstArg = args[0];\r\n\r\n    switch (typeof firstArg) {\r\n    case 'string': // old arguments format\r\n    case 'undefined': {\r\n        // Not sure which format but we are trying to parse the old\r\n        // format because if the new format is used everything will be undefined\r\n        // anyway.\r\n        const [\r\n            roomName,\r\n            width,\r\n            height,\r\n            parentNode,\r\n            configOverwrite,\r\n            interfaceConfigOverwrite,\r\n            jwt,\r\n            onload,\r\n            lang\r\n        ] = args;\r\n\r\n        return {\r\n            roomName,\r\n            width,\r\n            height,\r\n            parentNode,\r\n            configOverwrite,\r\n            interfaceConfigOverwrite,\r\n            jwt,\r\n            onload,\r\n            lang\r\n        };\r\n    }\r\n    case 'object': // new arguments format\r\n        return args[0];\r\n    default:\r\n        throw new Error('Can\\'t parse the arguments!');\r\n    }\r\n}\r\n\r\n/**\r\n * Compute valid values for height and width. If a number is specified it's\r\n * treated as pixel units. If the value is expressed in px, em, pt or\r\n * percentage, it's used as is.\r\n *\r\n * @param {any} value - The value to be parsed.\r\n * @returns {string|undefined} The parsed value that can be used for setting\r\n * sizes through the style property. If invalid value is passed the method\r\n * returns undefined.\r\n */\r\nfunction parseSizeParam(value) {\r\n    let parsedValue;\r\n\r\n    // This regex parses values of the form 100px, 100em, 100pt, 100vh, 100vw or 100%.\r\n    // Values like 100 or 100px are handled outside of the regex, and\r\n    // invalid values will be ignored and the minimum will be used.\r\n    const re = /([0-9]*\\.?[0-9]+)(em|pt|px|((d|l|s)?v)(h|w)|%)$/;\r\n\r\n    if (typeof value === 'string' && String(value).match(re) !== null) {\r\n        parsedValue = value;\r\n    } else if (typeof value === 'number') {\r\n        parsedValue = `${value}px`;\r\n    }\r\n\r\n    return parsedValue;\r\n}\r\n\r\n\r\n/**\r\n * The IFrame API interface class.\r\n */\r\nexport default class JitsiMeetExternalAPI extends EventEmitter {\r\n    /**\r\n     * Constructs new API instance. Creates iframe and loads Jitsi Meet in it.\r\n     *\r\n     * @param {string} domain - The domain name of the server that hosts the\r\n     * conference.\r\n     * @param {Object} [options] - Optional arguments.\r\n     * @param {string} [options.roomName] - The name of the room to join.\r\n     * @param {number|string} [options.width] - Width of the iframe. Check\r\n     * parseSizeParam for format details.\r\n     * @param {number|string} [options.height] - Height of the iframe. Check\r\n     * parseSizeParam for format details.\r\n     * @param {DOMElement} [options.parentNode] - The node that will contain the\r\n     * iframe.\r\n     * @param {Object} [options.configOverwrite] - Object containing\r\n     * configuration options defined in config.js to be overridden.\r\n     * @param {Object} [options.interfaceConfigOverwrite] - Object containing\r\n     * configuration options defined in interface_config.js to be overridden.\r\n     * @param {IIceServers} [options.iceServers] - Object with rules that will be used to modify/remove the existing\r\n     * ice server configuration.\r\n     * NOTE: This property is currently experimental and may be removed in the future!\r\n     * @param {string} [options.jwt] - The JWT token if needed by jitsi-meet for\r\n     * authentication.\r\n     * @param {string} [options.lang] - The meeting's default language.\r\n     * @param {string} [options.onload] - The onload function that will listen\r\n     * for iframe onload event.\r\n     * @param {Array<Object>} [options.invitees] - Array of objects containing\r\n     * information about new participants that will be invited in the call.\r\n     * @param {Array<Object>} [options.devices] - Array of objects containing\r\n     * information about the initial devices that will be used in the call.\r\n     * @param {Object} [options.userInfo] - Object containing information about\r\n     * the participant opening the meeting.\r\n     * @param {string}  [options.e2eeKey] - The key used for End-to-End encryption.\r\n     * THIS IS EXPERIMENTAL.\r\n     * @param {string}  [options.release] - The key used for specifying release if enabled on the backend.\r\n     * @param {string} [options.sandbox] - Sandbox directive for the created iframe, if desired.\r\n     */\r\n    constructor(domain, ...args) {\r\n        super();\r\n        const {\r\n            roomName = '',\r\n            width = '100%',\r\n            height = '100%',\r\n            parentNode = document.body,\r\n            configOverwrite = {},\r\n            interfaceConfigOverwrite = {},\r\n            jwt = undefined,\r\n            lang = undefined,\r\n            onload = undefined,\r\n            invitees,\r\n            iceServers,\r\n            devices,\r\n            userInfo,\r\n            e2eeKey,\r\n            release,\r\n            sandbox = ''\r\n        } = parseArguments(args);\r\n        const localStorageContent = jitsiLocalStorage.getItem('jitsiLocalStorage');\r\n\r\n        this._parentNode = parentNode;\r\n        this._url = generateURL(domain, {\r\n            configOverwrite,\r\n            iceServers,\r\n            interfaceConfigOverwrite,\r\n            jwt,\r\n            lang,\r\n            roomName,\r\n            devices,\r\n            userInfo,\r\n            appData: {\r\n                localStorageContent\r\n            },\r\n            release\r\n        });\r\n\r\n        this._createIFrame(height, width, sandbox);\r\n\r\n        this._transport = new Transport({\r\n            backend: new PostMessageTransportBackend({\r\n                postisOptions: {\r\n                    allowedOrigin: new URL(this._url).origin,\r\n                    scope: `jitsi_meet_external_api_${id}`,\r\n                    window: this._frame.contentWindow\r\n                }\r\n            })\r\n        });\r\n\r\n        if (Array.isArray(invitees) && invitees.length > 0) {\r\n            this.invite(invitees);\r\n        }\r\n\r\n        this._onload = onload;\r\n        this._tmpE2EEKey = e2eeKey;\r\n        this._isLargeVideoVisible = false;\r\n        this._isPrejoinVideoVisible = false;\r\n        this._numberOfParticipants = 0;\r\n        this._participants = {};\r\n        this._myUserID = undefined;\r\n        this._onStageParticipant = undefined;\r\n        this._setupListeners();\r\n        id++;\r\n    }\r\n\r\n    /**\r\n     * Creates the iframe element.\r\n     *\r\n     * @param {number|string} height - The height of the iframe. Check\r\n     * parseSizeParam for format details.\r\n     * @param {number|string} width - The with of the iframe. Check\r\n     * parseSizeParam for format details.\r\n     * @param {string} sandbox - Sandbox directive for the created iframe, if desired.\r\n     * @returns {void}\r\n     *\r\n     * @private\r\n     */\r\n    _createIFrame(height, width, sandbox) {\r\n        const frameName = `jitsiConferenceFrame${id}`;\r\n\r\n        this._frame = document.createElement('iframe');\r\n        this._frame.allow = [\r\n            'autoplay',\r\n            'camera',\r\n            'clipboard-write',\r\n            'compute-pressure',\r\n            'display-capture',\r\n            'hid',\r\n            'microphone',\r\n            'screen-wake-lock',\r\n            'speaker-selection'\r\n        ].join('; ');\r\n        this._frame.name = frameName;\r\n        this._frame.id = frameName;\r\n        this._setSize(height, width);\r\n        this._frame.setAttribute('allowFullScreen', 'true');\r\n        this._frame.style.border = 0;\r\n\r\n        if (sandbox) {\r\n            this._frame.sandbox = sandbox;\r\n        }\r\n\r\n        this._frame.src = this._url;\r\n\r\n        this._frame = this._parentNode.appendChild(this._frame);\r\n    }\r\n\r\n    /**\r\n     * Returns arrays with the all resources for the always on top feature.\r\n     *\r\n     * @returns {Array<string>}\r\n     */\r\n    _getAlwaysOnTopResources() {\r\n        const iframeWindow = this._frame.contentWindow;\r\n        const iframeDocument = iframeWindow.document;\r\n        let baseURL = '';\r\n        const base = iframeDocument.querySelector('base');\r\n\r\n        if (base && base.href) {\r\n            baseURL = base.href;\r\n        } else {\r\n            const { protocol, host } = iframeWindow.location;\r\n\r\n            baseURL = `${protocol}//${host}`;\r\n        }\r\n\r\n        return ALWAYS_ON_TOP_FILENAMES.map(\r\n            filename => new URL(filename, baseURL).href\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns the formatted display name of a participant.\r\n     *\r\n     * @param {string} participantId - The id of the participant.\r\n     * @returns {string} The formatted display name.\r\n     */\r\n    _getFormattedDisplayName(participantId) {\r\n        const { formattedDisplayName }\r\n            = this._participants[participantId] || {};\r\n\r\n        return formattedDisplayName;\r\n    }\r\n\r\n    /**\r\n     * Returns the id of the on stage participant.\r\n     *\r\n     * @returns {string} - The id of the on stage participant.\r\n     */\r\n    _getOnStageParticipant() {\r\n        return this._onStageParticipant;\r\n    }\r\n\r\n\r\n    /**\r\n     * Getter for the large video element in Jitsi Meet.\r\n     *\r\n     * @returns {HTMLElement|undefined} - The large video.\r\n     */\r\n    _getLargeVideo() {\r\n        const iframe = this.getIFrame();\r\n\r\n        if (!this._isLargeVideoVisible\r\n                || !iframe\r\n                || !iframe.contentWindow\r\n                || !iframe.contentWindow.document) {\r\n            return;\r\n        }\r\n\r\n        return iframe.contentWindow.document.getElementById('largeVideo');\r\n    }\r\n\r\n    /**\r\n     * Getter for the prejoin video element in Jitsi Meet.\r\n     *\r\n     * @returns {HTMLElement|undefined} - The prejoin video.\r\n     */\r\n    _getPrejoinVideo() {\r\n        const iframe = this.getIFrame();\r\n\r\n        if (!this._isPrejoinVideoVisible\r\n                || !iframe\r\n                || !iframe.contentWindow\r\n                || !iframe.contentWindow.document) {\r\n            return;\r\n        }\r\n\r\n        return iframe.contentWindow.document.getElementById('prejoinVideo');\r\n    }\r\n\r\n    /**\r\n     * Getter for participant specific video element in Jitsi Meet.\r\n     *\r\n     * @param {string|undefined} participantId - Id of participant to return the video for.\r\n     *\r\n     * @returns {HTMLElement|undefined} - The requested video. Will return the local video\r\n     * by default if participantId is undefined.\r\n     */\r\n    _getParticipantVideo(participantId) {\r\n        const iframe = this.getIFrame();\r\n\r\n        if (!iframe\r\n                || !iframe.contentWindow\r\n                || !iframe.contentWindow.document) {\r\n            return;\r\n        }\r\n\r\n        if (typeof participantId === 'undefined' || participantId === this._myUserID) {\r\n            return iframe.contentWindow.document.getElementById('localVideo_container');\r\n        }\r\n\r\n        return iframe.contentWindow.document.querySelector(`#participant_${participantId} video`);\r\n    }\r\n\r\n    /**\r\n     * Sets the size of the iframe element.\r\n     *\r\n     * @param {number|string} height - The height of the iframe.\r\n     * @param {number|string} width - The with of the iframe.\r\n     * @returns {void}\r\n     *\r\n     * @private\r\n     */\r\n    _setSize(height, width) {\r\n        const parsedHeight = parseSizeParam(height);\r\n        const parsedWidth = parseSizeParam(width);\r\n\r\n        if (parsedHeight !== undefined) {\r\n            this._height = height;\r\n            this._frame.style.height = parsedHeight;\r\n        }\r\n\r\n        if (parsedWidth !== undefined) {\r\n            this._width = width;\r\n            this._frame.style.width = parsedWidth;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setups listeners that are used internally for JitsiMeetExternalAPI.\r\n     *\r\n     * @returns {void}\r\n     *\r\n     * @private\r\n     */\r\n    _setupListeners() {\r\n        this._transport.on('event', ({ name, ...data }) => {\r\n            const userID = data.id;\r\n\r\n            switch (name) {\r\n            case 'ready': {\r\n                // Fake the iframe onload event because it's not reliable.\r\n                this._onload?.();\r\n\r\n                break;\r\n            }\r\n            case 'video-conference-joined': {\r\n                if (typeof this._tmpE2EEKey !== 'undefined') {\r\n\r\n                    const hexToBytes = hex => {\r\n                        const bytes = [];\r\n\r\n                        for (let c = 0; c < hex.length; c += 2) {\r\n                            bytes.push(parseInt(hex.substring(c, c + 2), 16));\r\n                        }\r\n\r\n                        return bytes;\r\n                    };\r\n\r\n                    this.executeCommand('setMediaEncryptionKey', JSON.stringify({\r\n                        exportedKey: hexToBytes(this._tmpE2EEKey),\r\n                        index: 0\r\n                    }));\r\n\r\n                    this._tmpE2EEKey = undefined;\r\n                }\r\n\r\n                this._myUserID = userID;\r\n                this._participants[userID] = {\r\n                    email: data.email,\r\n                    avatarURL: data.avatarURL\r\n                };\r\n            }\r\n\r\n            // eslint-disable-next-line no-fallthrough\r\n            case 'participant-joined': {\r\n                this._participants[userID] = this._participants[userID] || {};\r\n                this._participants[userID].displayName = data.displayName;\r\n                this._participants[userID].formattedDisplayName\r\n                    = data.formattedDisplayName;\r\n                changeParticipantNumber(this, 1);\r\n                break;\r\n            }\r\n            case 'participant-left':\r\n                changeParticipantNumber(this, -1);\r\n                delete this._participants[userID];\r\n                break;\r\n            case 'display-name-change': {\r\n                const user = this._participants[userID];\r\n\r\n                if (user) {\r\n                    user.displayName = data.displayname;\r\n                    user.formattedDisplayName = data.formattedDisplayName;\r\n                }\r\n                break;\r\n            }\r\n            case 'email-change': {\r\n                const user = this._participants[userID];\r\n\r\n                if (user) {\r\n                    user.email = data.email;\r\n                }\r\n                break;\r\n            }\r\n            case 'avatar-changed': {\r\n                const user = this._participants[userID];\r\n\r\n                if (user) {\r\n                    user.avatarURL = data.avatarURL;\r\n                }\r\n                break;\r\n            }\r\n            case 'on-stage-participant-changed':\r\n                this._onStageParticipant = userID;\r\n                this.emit('largeVideoChanged');\r\n                break;\r\n            case 'large-video-visibility-changed':\r\n                this._isLargeVideoVisible = data.isVisible;\r\n                this.emit('largeVideoChanged');\r\n                break;\r\n            case 'prejoin-screen-loaded':\r\n                this._participants[userID] = {\r\n                    displayName: data.displayName,\r\n                    formattedDisplayName: data.formattedDisplayName\r\n                };\r\n                break;\r\n            case 'on-prejoin-video-changed':\r\n                this._isPrejoinVideoVisible = data.isVisible;\r\n                this.emit('prejoinVideoChanged');\r\n                break;\r\n            case 'video-conference-left':\r\n                changeParticipantNumber(this, -1);\r\n                delete this._participants[this._myUserID];\r\n                break;\r\n            case 'video-quality-changed':\r\n                this._videoQuality = data.videoQuality;\r\n                break;\r\n            case 'breakout-rooms-updated':\r\n                this.updateNumberOfParticipants(data.rooms);\r\n                break;\r\n            case 'local-storage-changed':\r\n                jitsiLocalStorage.setItem('jitsiLocalStorage', data.localStorageContent);\r\n\r\n                // Since this is internal event we don't need to emit it to the consumer of the API.\r\n                return true;\r\n            }\r\n\r\n            const eventName = events[name];\r\n\r\n            if (eventName) {\r\n                this.emit(eventName, data);\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        this._transport.on('request', (request, callback) => {\r\n            const requestName = requests[request.name];\r\n            const data = {\r\n                ...request,\r\n                name: requestName\r\n            };\r\n\r\n            if (requestName) {\r\n                this.emit(requestName, data, callback);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update number of participants based on all rooms.\r\n     *\r\n     * @param {Object} rooms - Rooms available rooms in the conference.\r\n     * @returns {void}\r\n     */\r\n    updateNumberOfParticipants(rooms) {\r\n        if (!rooms || !Object.keys(rooms).length) {\r\n            return;\r\n        }\r\n\r\n        const allParticipants = Object.keys(rooms).reduce((prev, roomItemKey) => {\r\n            if (rooms[roomItemKey]?.participants) {\r\n                return Object.keys(rooms[roomItemKey].participants).length + prev;\r\n            }\r\n\r\n            return prev;\r\n        }, 0);\r\n\r\n        this._numberOfParticipants = allParticipants;\r\n    }\r\n\r\n    /**\r\n     * Returns the rooms info in the conference.\r\n     *\r\n     * @returns {Object} Rooms info.\r\n     */\r\n    async getRoomsInfo() {\r\n        return this._transport.sendRequest({\r\n            name: 'rooms-info'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns whether the conference is P2P.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    isP2pActive() {\r\n        return this._transport.sendRequest({\r\n            name: 'get-p2p-status'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds event listener to Meet Jitsi.\r\n     *\r\n     * @param {string} event - The name of the event.\r\n     * @param {Function} listener - The listener.\r\n     * @returns {void}\r\n     *\r\n     * @deprecated\r\n     * NOTE: This method is not removed for backward comatability purposes.\r\n     */\r\n    addEventListener(event, listener) {\r\n        this.on(event, listener);\r\n    }\r\n\r\n    /**\r\n     * Adds event listeners to Meet Jitsi.\r\n     *\r\n     * @param {Object} listeners - The object key should be the name of\r\n     * the event and value - the listener.\r\n     * Currently we support the following\r\n     * events:\r\n     * {@code log} - receives event notifications whenever information has\r\n     * been logged and has a log level specified within {@code config.apiLogLevels}.\r\n     * The listener will receive object with the following structure:\r\n     * {{\r\n     * logLevel: the message log level\r\n     * arguments: an array of strings that compose the actual log message\r\n     * }}\r\n     * {@code chatUpdated} - receives event notifications about chat state being\r\n     * updated. The listener will receive object with the following structure:\r\n     * {{\r\n     *  'unreadCount': unreadCounter, // the unread message(s) counter,\r\n     *  'isOpen': isOpen, // whether the chat panel is open or not\r\n     * }}\r\n     * {@code incomingMessage} - receives event notifications about incoming\r\n     * messages. The listener will receive object with the following structure:\r\n     * {{\r\n     *  'from': from,//JID of the user that sent the message\r\n     *  'nick': nick,//the nickname of the user that sent the message\r\n     *  'message': txt//the text of the message\r\n     * }}\r\n     * {@code outgoingMessage} - receives event notifications about outgoing\r\n     * messages. The listener will receive object with the following structure:\r\n     * {{\r\n     *  'message': txt//the text of the message\r\n     * }}\r\n     * {@code displayNameChanged} - receives event notifications about display\r\n     * name change. The listener will receive object with the following\r\n     * structure:\r\n     * {{\r\n     * jid: jid,//the JID of the participant that changed his display name\r\n     * displayname: displayName //the new display name\r\n     * }}\r\n     * {@code participantJoined} - receives event notifications about new\r\n     * participant.\r\n     * The listener will receive object with the following structure:\r\n     * {{\r\n     * jid: jid //the jid of the participant\r\n     * }}\r\n     * {@code participantLeft} - receives event notifications about the\r\n     * participant that left the room.\r\n     * The listener will receive object with the following structure:\r\n     * {{\r\n     * jid: jid //the jid of the participant\r\n     * }}\r\n     * {@code videoConferenceJoined} - receives event notifications about the\r\n     * local user has successfully joined the video conference.\r\n     * The listener will receive object with the following structure:\r\n     * {{\r\n     * roomName: room //the room name of the conference\r\n     * }}\r\n     * {@code videoConferenceLeft} - receives event notifications about the\r\n     * local user has left the video conference.\r\n     * The listener will receive object with the following structure:\r\n     * {{\r\n     * roomName: room //the room name of the conference\r\n     * }}\r\n     * {@code screenSharingStatusChanged} - receives event notifications about\r\n     * turning on/off the local user screen sharing.\r\n     * The listener will receive object with the following structure:\r\n     * {{\r\n     * on: on //whether screen sharing is on\r\n     * }}\r\n     * {@code dominantSpeakerChanged} - receives event notifications about\r\n     * change in the dominant speaker.\r\n     * The listener will receive object with the following structure:\r\n     * {{\r\n     * id: participantId //participantId of the new dominant speaker\r\n     * }}\r\n     * {@code suspendDetected} - receives event notifications about detecting suspend event in host computer.\r\n     * {@code readyToClose} - all hangup operations are completed and Jitsi Meet\r\n     * is ready to be disposed.\r\n     * @returns {void}\r\n     *\r\n     * @deprecated\r\n     * NOTE: This method is not removed for backward comatability purposes.\r\n     */\r\n    addEventListeners(listeners) {\r\n        for (const event in listeners) { // eslint-disable-line guard-for-in\r\n            this.addEventListener(event, listeners[event]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Captures the screenshot of the large video.\r\n     *\r\n     * @returns {Promise<string>} - Resolves with a base64 encoded image data of the screenshot\r\n     * if large video is detected, an error otherwise.\r\n     */\r\n    captureLargeVideoScreenshot() {\r\n        return this._transport.sendRequest({\r\n            name: 'capture-largevideo-screenshot'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes the listeners and removes the Jitsi Meet frame.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    dispose() {\r\n        this.emit('_willDispose');\r\n        this._transport.dispose();\r\n        this.removeAllListeners();\r\n        if (this._frame && this._frame.parentNode) {\r\n            this._frame.parentNode.removeChild(this._frame);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes command. The available commands are:\r\n     * {@code displayName} - Sets the display name of the local participant to\r\n     * the value passed in the arguments array.\r\n     * {@code subject} - Sets the subject of the conference, the value passed\r\n     * in the arguments array. Note: Available only for moderator.\r\n     *\r\n     * {@code toggleAudio} - Mutes / unmutes audio with no arguments.\r\n     * {@code toggleVideo} - Mutes / unmutes video with no arguments.\r\n     * {@code toggleFilmStrip} - Hides / shows the filmstrip with no arguments.\r\n     *\r\n     * If the command doesn't require any arguments the parameter should be set\r\n     * to empty array or it may be omitted.\r\n     *\r\n     * @param {string} name - The name of the command.\r\n     * @returns {void}\r\n     */\r\n    executeCommand(name, ...args) {\r\n        if (!(name in commands)) {\r\n            console.error('Not supported command name.');\r\n\r\n            return;\r\n        }\r\n        this._transport.sendEvent({\r\n            data: args,\r\n            name: commands[name]\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Executes commands. The available commands are:\r\n     * {@code displayName} - Sets the display name of the local participant to\r\n     * the value passed in the arguments array.\r\n     * {@code toggleAudio} - Mutes / unmutes audio. No arguments.\r\n     * {@code toggleVideo} - Mutes / unmutes video. No arguments.\r\n     * {@code toggleFilmStrip} - Hides / shows the filmstrip. No arguments.\r\n     * {@code toggleChat} - Hides / shows chat. No arguments.\r\n     * {@code toggleShareScreen} - Starts / stops screen sharing. No arguments.\r\n     *\r\n     * @param {Object} commandList - The object with commands to be executed.\r\n     * The keys of the object are the commands that will be executed and the\r\n     * values are the arguments for the command.\r\n     * @returns {void}\r\n     */\r\n    executeCommands(commandList) {\r\n        for (const key in commandList) { // eslint-disable-line guard-for-in\r\n            this.executeCommand(key, commandList[key]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns Promise that resolves with a list of available devices.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    getAvailableDevices() {\r\n        return getAvailableDevices(this._transport);\r\n    }\r\n\r\n    /**\r\n     * Gets a list of the currently sharing participant id's.\r\n     *\r\n     * @returns {Promise} - Resolves with the list of participant id's currently sharing.\r\n     */\r\n    getContentSharingParticipants() {\r\n        return this._transport.sendRequest({\r\n            name: 'get-content-sharing-participants'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns Promise that resolves with current selected devices.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    getCurrentDevices() {\r\n        return getCurrentDevices(this._transport);\r\n    }\r\n\r\n    /**\r\n     * Returns any custom avatars backgrounds.\r\n     *\r\n     * @returns {Promise} - Resolves with the list of custom avatar backgrounds.\r\n     */\r\n    getCustomAvatarBackgrounds() {\r\n        return this._transport.sendRequest({\r\n            name: 'get-custom-avatar-backgrounds'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the current livestream url.\r\n     *\r\n     * @returns {Promise} - Resolves with the current livestream URL if exists, with\r\n     * undefined if not and rejects on failure.\r\n     */\r\n    getLivestreamUrl() {\r\n        return this._transport.sendRequest({\r\n            name: 'get-livestream-url'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the conference participants information.\r\n     *\r\n     * @returns {Array<Object>} - Returns an array containing participants\r\n     * information like participant id, display name, avatar URL and email.\r\n     */\r\n    getParticipantsInfo() {\r\n        const participantIds = Object.keys(this._participants);\r\n        const participantsInfo = Object.values(this._participants);\r\n\r\n        participantsInfo.forEach((participant, idx) => {\r\n            participant.participantId = participantIds[idx];\r\n        });\r\n\r\n        return participantsInfo;\r\n    }\r\n\r\n    /**\r\n     * Returns the current video quality setting.\r\n     *\r\n     * @returns {number}\r\n     */\r\n    getVideoQuality() {\r\n        return this._videoQuality;\r\n    }\r\n\r\n    /**\r\n     * Check if the audio is available.\r\n     *\r\n     * @returns {Promise} - Resolves with true if the audio available, with\r\n     * false if not and rejects on failure.\r\n     */\r\n    isAudioAvailable() {\r\n        return this._transport.sendRequest({\r\n            name: 'is-audio-available'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns Promise that resolves with true if the device change is available\r\n     * and with false if not.\r\n     *\r\n     * @param {string} [deviceType] - Values - 'output', 'input' or undefined.\r\n     * Default - 'input'.\r\n     * @returns {Promise}\r\n     */\r\n    isDeviceChangeAvailable(deviceType) {\r\n        return isDeviceChangeAvailable(this._transport, deviceType);\r\n    }\r\n\r\n    /**\r\n     * Returns Promise that resolves with true if the device list is available\r\n     * and with false if not.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    isDeviceListAvailable() {\r\n        return isDeviceListAvailable(this._transport);\r\n    }\r\n\r\n    /**\r\n     * Returns Promise that resolves with true if multiple audio input is supported\r\n     * and with false if not.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    isMultipleAudioInputSupported() {\r\n        return isMultipleAudioInputSupported(this._transport);\r\n    }\r\n\r\n    /**\r\n     * Invite people to the call.\r\n     *\r\n     * @param {Array<Object>} invitees - The invitees.\r\n     * @returns {Promise} - Resolves on success and rejects on failure.\r\n     */\r\n    invite(invitees) {\r\n        if (!Array.isArray(invitees) || invitees.length === 0) {\r\n            return Promise.reject(new TypeError('Invalid Argument'));\r\n        }\r\n\r\n        return this._transport.sendRequest({\r\n            name: 'invite',\r\n            invitees\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the audio mute status.\r\n     *\r\n     * @returns {Promise} - Resolves with the audio mute status and rejects on\r\n     * failure.\r\n     */\r\n    isAudioMuted() {\r\n        return this._transport.sendRequest({\r\n            name: 'is-audio-muted'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the audio disabled status.\r\n     *\r\n     * @returns {Promise} - Resolves with the audio disabled status and rejects on\r\n     * failure.\r\n     */\r\n    isAudioDisabled() {\r\n        return this._transport.sendRequest({\r\n            name: 'is-audio-disabled'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the moderation on status on the given mediaType.\r\n     *\r\n     * @param {string} mediaType - The media type for which to check moderation.\r\n     * @returns {Promise} - Resolves with the moderation on status and rejects on\r\n     * failure.\r\n     */\r\n    isModerationOn(mediaType) {\r\n        return this._transport.sendRequest({\r\n            name: 'is-moderation-on',\r\n            mediaType\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns force muted status of the given participant id for the given media type.\r\n     *\r\n     * @param {string} participantId - The id of the participant to check.\r\n     * @param {string} mediaType - The media type for which to check.\r\n     * @returns {Promise} - Resolves with the force muted status and rejects on\r\n     * failure.\r\n     */\r\n    isParticipantForceMuted(participantId, mediaType) {\r\n        return this._transport.sendRequest({\r\n            name: 'is-participant-force-muted',\r\n            participantId,\r\n            mediaType\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns whether the participants pane is open.\r\n     *\r\n     * @returns {Promise} - Resolves with true if the participants pane is open\r\n     * and with false if not.\r\n     */\r\n    isParticipantsPaneOpen() {\r\n        return this._transport.sendRequest({\r\n            name: 'is-participants-pane-open'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns screen sharing status.\r\n     *\r\n     * @returns {Promise} - Resolves with screensharing status and rejects on failure.\r\n     */\r\n    isSharingScreen() {\r\n        return this._transport.sendRequest({\r\n            name: 'is-sharing-screen'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns whether meeting is started silent.\r\n     *\r\n     * @returns {Promise} - Resolves with start silent status.\r\n     */\r\n    isStartSilent() {\r\n        return this._transport.sendRequest({\r\n            name: 'is-start-silent'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the avatar URL of a participant.\r\n     *\r\n     * @param {string} participantId - The id of the participant.\r\n     * @returns {string} The avatar URL.\r\n     */\r\n    getAvatarURL(participantId) {\r\n        const { avatarURL } = this._participants[participantId] || {};\r\n\r\n        return avatarURL;\r\n    }\r\n\r\n    /**\r\n     * Gets the deployment info.\r\n     *\r\n     * @returns {Promise} - Resolves with the deployment info object.\r\n     */\r\n    getDeploymentInfo() {\r\n        return this._transport.sendRequest({\r\n            name: 'deployment-info'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the display name of a participant.\r\n     *\r\n     * @param {string} participantId - The id of the participant.\r\n     * @returns {string} The display name.\r\n     */\r\n    getDisplayName(participantId) {\r\n        const { displayName } = this._participants[participantId] || {};\r\n\r\n        return displayName;\r\n    }\r\n\r\n    /**\r\n     * Returns the email of a participant.\r\n     *\r\n     * @param {string} participantId - The id of the participant.\r\n     * @returns {string} The email.\r\n     */\r\n    getEmail(participantId) {\r\n        const { email } = this._participants[participantId] || {};\r\n\r\n        return email;\r\n    }\r\n\r\n    /**\r\n     * Returns the iframe that loads Jitsi Meet.\r\n     *\r\n     * @returns {HTMLElement} The iframe.\r\n     */\r\n    getIFrame() {\r\n        return this._frame;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of participants in the conference from all rooms. The local\r\n     * participant is included.\r\n     *\r\n     * @returns {int} The number of participants in the conference.\r\n     */\r\n    getNumberOfParticipants() {\r\n        return this._numberOfParticipants;\r\n    }\r\n\r\n    /**\r\n     * Returns array of commands supported by executeCommand().\r\n     *\r\n     * @returns {Array<string>} Array of commands.\r\n     */\r\n    getSupportedCommands() {\r\n        return Object.keys(commands);\r\n    }\r\n\r\n    /**\r\n     * Returns array of events supported by addEventListener().\r\n     *\r\n     * @returns {Array<string>} Array of events.\r\n     */\r\n    getSupportedEvents() {\r\n        return Object.values(events);\r\n    }\r\n\r\n    /**\r\n     * Check if the video is available.\r\n     *\r\n     * @returns {Promise} - Resolves with true if the video available, with\r\n     * false if not and rejects on failure.\r\n     */\r\n    isVideoAvailable() {\r\n        return this._transport.sendRequest({\r\n            name: 'is-video-available'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the audio mute status.\r\n     *\r\n     * @returns {Promise} - Resolves with the audio mute status and rejects on\r\n     * failure.\r\n     */\r\n    isVideoMuted() {\r\n        return this._transport.sendRequest({\r\n            name: 'is-video-muted'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the list of breakout rooms.\r\n     *\r\n     * @returns {Promise} Resolves with the list of breakout rooms.\r\n     */\r\n    listBreakoutRooms() {\r\n        return this._transport.sendRequest({\r\n            name: 'list-breakout-rooms'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the state of availability electron share screen via external api.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    _isNewElectronScreensharingSupported() {\r\n        return this._transport.sendRequest({\r\n            name: '_new_electron_screensharing_supported'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Pins a participant's video on to the stage view.\r\n     *\r\n     * @param {string} participantId - Participant id (JID) of the participant\r\n     * that needs to be pinned on the stage view.\r\n     * @param {string} [videoType] - Indicates the type of thumbnail to be pinned when multistream support is enabled.\r\n     * Accepts \"camera\" or \"desktop\" values. Default is \"camera\". Any invalid values will be ignored and default will\r\n     * be used.\r\n     * @returns {void}\r\n     */\r\n    pinParticipant(participantId, videoType) {\r\n        this.executeCommand('pinParticipant', participantId, videoType);\r\n    }\r\n\r\n    /**\r\n     * Removes event listener.\r\n     *\r\n     * @param {string} event - The name of the event.\r\n     * @returns {void}\r\n     *\r\n     * @deprecated\r\n     * NOTE: This method is not removed for backward comatability purposes.\r\n     */\r\n    removeEventListener(event) {\r\n        this.removeAllListeners(event);\r\n    }\r\n\r\n    /**\r\n     * Removes event listeners.\r\n     *\r\n     * @param {Array<string>} eventList - Array with the names of the events.\r\n     * @returns {void}\r\n     *\r\n     * @deprecated\r\n     * NOTE: This method is not removed for backward comatability purposes.\r\n     */\r\n    removeEventListeners(eventList) {\r\n        eventList.forEach(event => this.removeEventListener(event));\r\n    }\r\n\r\n    /**\r\n     * Resizes the large video container as per the dimensions provided.\r\n     *\r\n     * @param {number} width - Width that needs to be applied on the large video container.\r\n     * @param {number} height - Height that needs to be applied on the large video container.\r\n     * @returns {void}\r\n     */\r\n    resizeLargeVideo(width, height) {\r\n        if (width <= this._width && height <= this._height) {\r\n            this.executeCommand('resizeLargeVideo', width, height);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Passes an event along to the local conference participant to establish\r\n     * or update a direct peer connection. This is currently used for developing\r\n     * wireless screensharing with room integration and it is advised against to\r\n     * use as its api may change.\r\n     *\r\n     * @param {Object} event - An object with information to pass along.\r\n     * @param {Object} event.data - The payload of the event.\r\n     * @param {string} event.from - The jid of the sender of the event. Needed\r\n     * when a reply is to be sent regarding the event.\r\n     * @returns {void}\r\n     */\r\n    sendProxyConnectionEvent(event) {\r\n        this._transport.sendEvent({\r\n            data: [ event ],\r\n            name: 'proxy-connection-event'\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the audio input device to the one with the label or id that is\r\n     * passed.\r\n     *\r\n     * @param {string} label - The label of the new device.\r\n     * @param {string} deviceId - The id of the new device.\r\n     * @returns {Promise}\r\n     */\r\n    setAudioInputDevice(label, deviceId) {\r\n        return setAudioInputDevice(this._transport, label, deviceId);\r\n    }\r\n\r\n    /**\r\n     * Sets the audio output device to the one with the label or id that is\r\n     * passed.\r\n     *\r\n     * @param {string} label - The label of the new device.\r\n     * @param {string} deviceId - The id of the new device.\r\n     * @returns {Promise}\r\n     */\r\n    setAudioOutputDevice(label, deviceId) {\r\n        return setAudioOutputDevice(this._transport, label, deviceId);\r\n    }\r\n\r\n    /**\r\n     * Displays the given participant on the large video. If no participant id is specified,\r\n     * dominant and pinned speakers will be taken into consideration while selecting the\r\n     * the large video participant.\r\n     *\r\n     * @param {string} participantId - Jid of the participant to be displayed on the large video.\r\n     * @param {string} [videoType] - Indicates the type of video to be set when multistream support is enabled.\r\n     * Accepts \"camera\" or \"desktop\" values. Default is \"camera\". Any invalid values will be ignored and default will\r\n     * be used.\r\n     * @returns {void}\r\n     */\r\n    setLargeVideoParticipant(participantId, videoType) {\r\n        this.executeCommand('setLargeVideoParticipant', participantId, videoType);\r\n    }\r\n\r\n    /**\r\n     * Sets the video input device to the one with the label or id that is\r\n     * passed.\r\n     *\r\n     * @param {string} label - The label of the new device.\r\n     * @param {string} deviceId - The id of the new device.\r\n     * @returns {Promise}\r\n     */\r\n    setVideoInputDevice(label, deviceId) {\r\n        return setVideoInputDevice(this._transport, label, deviceId);\r\n    }\r\n\r\n    /**\r\n     * Starts a file recording or streaming session depending on the passed on params.\r\n     * For RTMP streams, `rtmpStreamKey` must be passed on. `rtmpBroadcastID` is optional.\r\n     * For youtube streams, `youtubeStreamKey` must be passed on. `youtubeBroadcastID` is optional.\r\n     * For dropbox recording, recording `mode` should be `file` and a dropbox oauth2 token must be provided.\r\n     * For file recording, recording `mode` should be `file` and optionally `shouldShare` could be passed on.\r\n     * No other params should be passed.\r\n     *\r\n     * @param {Object} options - An object with config options to pass along.\r\n     * @param { string } options.mode - Recording mode, either `file` or `stream`.\r\n     * @param { string } options.dropboxToken - Dropbox oauth2 token.\r\n     * @param { boolean } options.shouldShare - Whether the recording should be shared with the participants or not.\r\n     * Only applies to certain jitsi meet deploys.\r\n     * @param { string } options.rtmpStreamKey - The RTMP stream key.\r\n     * @param { string } options.rtmpBroadcastID - The RTMP broadcast ID.\r\n     * @param { string } options.youtubeStreamKey - The youtube stream key.\r\n     * @param { string } options.youtubeBroadcastID - The youtube broadcast ID.\r\n     * @param {Object } options.extraMetadata - Any extra metadata params for file recording.\r\n     * @returns {void}\r\n     */\r\n    startRecording(options) {\r\n        this.executeCommand('startRecording', options);\r\n    }\r\n\r\n    /**\r\n     * Stops a recording or streaming session that is in progress.\r\n     *\r\n     * @param {string} mode - `file` or `stream`.\r\n     * @returns {void}\r\n     */\r\n    stopRecording(mode) {\r\n        this.executeCommand('stopRecording', mode);\r\n    }\r\n\r\n    /**\r\n     * Sets e2ee enabled/disabled.\r\n     *\r\n     * @param {boolean} enabled - The new value for e2ee enabled.\r\n     * @returns {void}\r\n     */\r\n    toggleE2EE(enabled) {\r\n        this.executeCommand('toggleE2EE', enabled);\r\n    }\r\n\r\n    /**\r\n     * Sets the key and keyIndex for e2ee.\r\n     *\r\n     * @param {Object} keyInfo - Json containing key information.\r\n     * @param {CryptoKey} [keyInfo.encryptionKey] - The encryption key.\r\n     * @param {number} [keyInfo.index] - The index of the encryption key.\r\n     * @returns {void}\r\n     */\r\n    async setMediaEncryptionKey(keyInfo) {\r\n        const { key, index } = keyInfo;\r\n\r\n        if (key) {\r\n            const exportedKey = await crypto.subtle.exportKey('raw', key);\r\n\r\n            this.executeCommand('setMediaEncryptionKey', JSON.stringify({\r\n                exportedKey: Array.from(new Uint8Array(exportedKey)),\r\n                index }));\r\n        } else {\r\n            this.executeCommand('setMediaEncryptionKey', JSON.stringify({\r\n                exportedKey: false,\r\n                index }));\r\n        }\r\n    }\r\n}\r\n","// For legacy purposes, preserve the UMD of the public API of Jitsi Meet\r\n// external API (a.k.a. JitsiMeetExternalAPI).\r\nmodule.exports = require('./external_api').default;\r\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BLANK_URL = exports.relativeFirstCharacters = exports.urlSchemeRegex = exports.ctrlCharactersRegex = exports.htmlCtrlEntityRegex = exports.htmlEntitiesRegex = exports.invalidProtocolRegex = void 0;\nexports.invalidProtocolRegex = /^([^\\w]*)(javascript|data|vbscript)/im;\nexports.htmlEntitiesRegex = /&#(\\w+)(^\\w|;)?/g;\nexports.htmlCtrlEntityRegex = /&(newline|tab);/gi;\nexports.ctrlCharactersRegex = /[\\u0000-\\u001F\\u007F-\\u009F\\u2000-\\u200D\\uFEFF]/gim;\nexports.urlSchemeRegex = /^.+(:|&colon;)/gim;\nexports.relativeFirstCharacters = [\".\", \"/\"];\nexports.BLANK_URL = \"about:blank\";\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sanitizeUrl = void 0;\nvar constants_1 = require(\"./constants\");\nfunction isRelativeUrlWithoutProtocol(url) {\n    return constants_1.relativeFirstCharacters.indexOf(url[0]) > -1;\n}\n// adapted from https://stackoverflow.com/a/29824550/2601552\nfunction decodeHtmlCharacters(str) {\n    var removedNullByte = str.replace(constants_1.ctrlCharactersRegex, \"\");\n    return removedNullByte.replace(constants_1.htmlEntitiesRegex, function (match, dec) {\n        return String.fromCharCode(dec);\n    });\n}\nfunction sanitizeUrl(url) {\n    if (!url) {\n        return constants_1.BLANK_URL;\n    }\n    var sanitizedUrl = decodeHtmlCharacters(url)\n        .replace(constants_1.htmlCtrlEntityRegex, \"\")\n        .replace(constants_1.ctrlCharactersRegex, \"\")\n        .trim();\n    if (!sanitizedUrl) {\n        return constants_1.BLANK_URL;\n    }\n    if (isRelativeUrlWithoutProtocol(sanitizedUrl)) {\n        return sanitizedUrl;\n    }\n    var urlSchemeParseResults = sanitizedUrl.match(constants_1.urlSchemeRegex);\n    if (!urlSchemeParseResults) {\n        return sanitizedUrl;\n    }\n    var urlScheme = urlSchemeParseResults[0];\n    if (constants_1.invalidProtocolRegex.test(urlScheme)) {\n        return constants_1.BLANK_URL;\n    }\n    return sanitizedUrl;\n}\nexports.sanitizeUrl = sanitizeUrl;\n","'use strict';\n\n\nconst internals = {\n    suspectRx: /\"(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])(?:p|\\\\u0070)(?:r|\\\\u0072)(?:o|\\\\u006[Ff])(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])\"\\s*\\:/\n};\n\n\nexports.parse = function (text, ...args) {\n\n    // Normalize arguments\n\n    const firstOptions = typeof args[0] === 'object' && args[0];\n    const reviver = args.length > 1 || !firstOptions ? args[0] : undefined;\n    const options = (args.length > 1 && args[1]) || firstOptions || {};\n\n    // Parse normally, allowing exceptions\n\n    const obj = JSON.parse(text, reviver);\n\n    // options.protoAction: 'error' (default) / 'remove' / 'ignore'\n\n    if (options.protoAction === 'ignore') {\n        return obj;\n    }\n\n    // Ignore null and non-objects\n\n    if (!obj ||\n        typeof obj !== 'object') {\n\n        return obj;\n    }\n\n    // Check original string for potential exploit\n\n    if (!text.match(internals.suspectRx)) {\n        return obj;\n    }\n\n    // Scan result for proto keys\n\n    exports.scan(obj, options);\n\n    return obj;\n};\n\n\nexports.scan = function (obj, options = {}) {\n\n    let next = [obj];\n\n    while (next.length) {\n        const nodes = next;\n        next = [];\n\n        for (const node of nodes) {\n            if (Object.prototype.hasOwnProperty.call(node, '__proto__')) {      // Avoid calling node.hasOwnProperty directly\n                if (options.protoAction !== 'remove') {\n                    throw new SyntaxError('Object contains forbidden prototype property');\n                }\n\n                delete node.__proto__;\n            }\n\n            for (const key in node) {\n                const value = node[key];\n                if (value &&\n                    typeof value === 'object') {\n\n                    next.push(node[key]);\n                }\n            }\n        }\n    }\n};\n\n\nexports.safeParse = function (text, reviver) {\n\n    try {\n        return exports.parse(text, reviver);\n    }\n    catch (ignoreError) {\n        return null;\n    }\n};\n","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.values(Logger.levels).forEach(\n    function (logLevel) {\n        this[logLevel] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) { // jshint ignore:line\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n\n        if (arg instanceof Error) {\n            msg += arg.toString() + ': ' + arg.stack;\n        } else if (this.stringifyObjects && typeof arg === 'object') {\n        // NOTE: We were trying to stringify all error logs before but because of a bug that we were getting the keys\n        // of the log levels which are all with upper case and comparing it with the keys which are all lower case we\n        // were never actually strinfying the error logs. That's why I've removed the check for error logs here.\n        // NOTE: The non-enumerable properties of the objects wouldn't be included in the string after JSON.strigify.\n        // For example Map instance will be translated to '{}'. So I think we have to eventually do something better\n        // for parsing the arguments. But since this option for strigify is part of the public interface and I think\n        // it could be useful in some cases I will it for now.\n            msg += this.stringify(arg);\n        } else {\n            msg += arg;\n        }\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Passes the logs to logStorage.storeLogs in order to store them. If logStorage.storeLogs throws an error, it prints it.\n * Note: We are not retrying to pass the logs to the logStorage if there is an error.\n * @param {string[]} logs - The logs to be stored.\n */\nLogCollector.prototype._storeLogs = function (logs) {\n    try {\n        this.logStorage.storeLogs(logs);\n    } catch (error) {\n        console.error('LogCollector error when calling logStorage.storeLogs(): ', error);\n    }\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    var logStorageReady = false;\n\n    try {\n        logStorageReady = this.logStorage.isReady();\n    } catch (error) {\n        console.error('LogCollector error when calling logStorage.isReady(): ', error);\n    }\n\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (logStorageReady || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (logStorageReady) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this._storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this._storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 3) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            try {\n                l.bind(t).apply(t, fullLogParts);\n            } catch (error) {\n                // It would be nice to send the error to the logger but this could send us into an endless loop.\n                // That's why we use only console for logging here.\n                console.error(\"An error occured when trying to log with one of the available transports\", error);\n            }\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Creates a new Logger, without keeping track of it in the loggers list\n     * @arguments the same as Logger constructor\n     */\n    getUntrackedLogger: function(id, transports, options) {\n        return new Logger(curLevel, id, transports, options);\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(872);\n"],"names":["root","factory","exports","module","define","amd","self","DummyLocalStorage","EventEmitter","constructor","arguments","clear","this","_storage","length","Object","keys","getItem","keyName","setItem","keyValue","removeItem","key","n","serialize","ignore","undefined","JSON","stringify","storageCopy","forEach","jitsiLocalStorage","super","window","localStorage","_localStorageDisabled","console","warn","isLocalStorageDisabled","setLocalStorageDisabled","value","emit","dontEmitChangedEvent","i","localStorageContent","includes","safeJsonParse","data","Bourne","blacklist","StatusCode","_URI_AUTHORITY_PATTERN","_URI_PATH_PATTERN","URI_PROTOCOL_PATTERN","_fixURIStringScheme","uri","regex","RegExp","match","exec","protocol","toLowerCase","substring","lastIndex","startsWith","_objectToURLParamsArray","obj","params","push","encodeURIComponent","e","parseStandardURIString","str","toString","_standardURIToString","pathname","replace","authority","userinfoEndIndex","indexOf","host","portBeginIndex","lastIndexOf","port","hostname","hashBeginIndex","search","hash","thiz","DEFAULT_POSTIS_OPTIONS","opener","parent","POSTIS_METHOD_NAME","PostMessageTransportBackend","postisOptions","postis","options","readynessCheck","scope","targetWindow","windowForEventListening","allowedOrigin","listeners","sendBuffer","listenBuffer","ready","readyMethod","listener","event","origin","listenersForMethod","method","call","addEventListener","listen","callback","listenBufferForMethod","j","send","opts","postMessage","setTimeout","destroy","clearInterval","removeEventListener","readyCheckID","Date","Math","random","setInterval","id","Postis","_receiveCallback","message","dispose","setReceiveCallback","MESSAGE_TYPE_REQUEST","MESSAGE_TYPE_RESPONSE","Transport","backend","_listeners","Map","_requestID","_responseHandlers","_unprocessedMessages","Set","addListener","on","setBackend","_disposeBackend","_backend","_onMessageReceived","type","handler","get","delete","result","error","removeAllListeners","eventName","_len","args","Array","_key","listenersForEvent","isProcessed","size","add","set","removeListener","sendEvent","sendRequest","request","Promise","reject","Error","resolve","_ref","bind","_apiID","url","dontParse","source","URL","paramStr","paramParts","substr","split","firstParam","part","param","some","k","decoded","decodeURIComponent","msg","onerror","reportError","String","parseURLParams","location","jitsi_meet_external_api_id","_","JitsiMeetJS","app","setExternalTransportBackend","externalTransportBackend","transport","logger","Logger","_setDevice","device","name","ALWAYS_ON_TOP_FILENAMES","commands","addBreakoutRoom","answerKnockingParticipant","approveVideo","askToUnmute","autoAssignToBreakoutRooms","avatarUrl","cancelPrivateChat","closeBreakoutRoom","displayName","endConference","email","grantModerator","hangup","hideNotification","initiatePrivateChat","joinBreakoutRoom","localSubject","kickParticipant","muteEveryone","overwriteConfig","overwriteNames","password","pinParticipant","rejectParticipant","removeBreakoutRoom","resizeFilmStrip","resizeLargeVideo","sendCameraFacingMode","sendChatMessage","sendEndpointTextMessage","sendParticipantToRoom","sendTones","setAssumedBandwidthBps","setFollowMe","setLargeVideoParticipant","setMediaEncryptionKey","setNoiseSuppressionEnabled","setParticipantVolume","setSubtitles","setTileView","setVideoQuality","showNotification","startRecording","startShareVideo","stopRecording","stopShareVideo","subject","submitFeedback","toggleAudio","toggleCamera","toggleCameraMirror","toggleChat","toggleE2EE","toggleFilmStrip","toggleLobby","toggleModeration","toggleNoiseSuppression","toggleParticipantsPane","toggleRaiseHand","toggleShareScreen","toggleSubtitles","toggleTileView","toggleVirtualBackgroundDialog","toggleVideo","toggleWhiteboard","events","requests","changeParticipantNumber","APIInstance","number","_numberOfParticipants","parseSizeParam","parsedValue","JitsiMeetExternalAPI","domain","roomName","width","height","parentNode","document","body","configOverwrite","interfaceConfigOverwrite","jwt","lang","onload","invitees","iceServers","devices","userInfo","e2eeKey","release","sandbox","parseArguments","_parentNode","_url","o","tmp","serverURL","room","scheme","endsWith","contextRoot","URLSearchParams","defaultLanguage","searchString","urlPrefix","urlParamsArray","urlParamsString","join","urlObjectToString","generateURL","appData","_createIFrame","_transport","_frame","contentWindow","isArray","invite","_onload","_tmpE2EEKey","_isLargeVideoVisible","_isPrejoinVideoVisible","_participants","_myUserID","_onStageParticipant","_setupListeners","frameName","createElement","allow","_setSize","setAttribute","style","border","src","appendChild","_getAlwaysOnTopResources","iframeWindow","iframeDocument","baseURL","base","querySelector","href","map","filename","_getFormattedDisplayName","participantId","formattedDisplayName","_getOnStageParticipant","_getLargeVideo","iframe","getIFrame","getElementById","_getPrejoinVideo","_getParticipantVideo","parsedHeight","parsedWidth","_height","_width","userID","_this$_onload","hexToBytes","hex","bytes","c","parseInt","executeCommand","exportedKey","index","avatarURL","user","displayname","isVisible","_videoQuality","videoQuality","updateNumberOfParticipants","rooms","requestName","allParticipants","reduce","prev","roomItemKey","_rooms$roomItemKey","participants","getRoomsInfo","isP2pActive","addEventListeners","captureLargeVideoScreenshot","removeChild","_len2","_key2","executeCommands","commandList","getAvailableDevices","catch","getContentSharingParticipants","getCurrentDevices","getCustomAvatarBackgrounds","getLivestreamUrl","getParticipantsInfo","participantIds","participantsInfo","values","participant","idx","getVideoQuality","isAudioAvailable","isDeviceChangeAvailable","deviceType","isDeviceListAvailable","isMultipleAudioInputSupported","TypeError","isAudioMuted","isAudioDisabled","isModerationOn","mediaType","isParticipantForceMuted","isParticipantsPaneOpen","isSharingScreen","isStartSilent","getAvatarURL","getDeploymentInfo","getDisplayName","getEmail","getNumberOfParticipants","getSupportedCommands","getSupportedEvents","isVideoAvailable","isVideoMuted","listBreakoutRooms","_isNewElectronScreensharingSupported","videoType","removeEventListeners","eventList","sendProxyConnectionEvent","setAudioInputDevice","label","deviceId","kind","setAudioOutputDevice","setVideoInputDevice","mode","enabled","keyInfo","crypto","subtle","exportKey","from","Uint8Array","defineProperty","BLANK_URL","relativeFirstCharacters","urlSchemeRegex","ctrlCharactersRegex","htmlCtrlEntityRegex","htmlEntitiesRegex","invalidProtocolRegex","require","internals","parse","text","firstOptions","reviver","protoAction","scan","next","nodes","node","prototype","hasOwnProperty","SyntaxError","__proto__","safeParse","ignoreError","LogCollector","logStorage","stringifyObjects","storeInterval","maxEntryLength","levels","logLevel","_log","apply","storeLogsIntervalID","queue","totalLen","outputCache","someObject","formatLogMessage","len","arg","stack","timestamp","prevMessage","count","_flush","start","_reschedulePublishInterval","clearTimeout","flush","_storeLogs","logs","storeLogs","force","reschedule","logStorageReady","isReady","cachedQueue","stop","consoleTransport","globalTransports","addGlobalTransport","removeGlobalTransport","transportIdx","splice","globalOptions","log","level","slice","callerInfo","disableCallerInfo","methodName","fileLocation","line","column","m","getCallerInfo","transports","concat","t","l","logPrefixes","toISOString","fullLogParts","methods","setGlobalOptions","setLevel","TRACE","DEBUG","INFO","LOG","WARN","ERROR","idLoggers","loggers","curLevel","getLogger","getUntrackedLogger","setLogLevelById","setLogLevel","ReflectOwnKeys","R","Reflect","ReflectApply","target","receiver","Function","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","Number","isNaN","init","once","emitter","errorListener","err","resolver","eventTargetAgnosticAddListener","flags","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","that","_addListener","prepend","existing","warning","create","newListener","unshift","warned","w","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","unwrap","evlistener","arr","ret","unwrapListeners","arrayClone","listenerCount","copy","wrapListener","enumerable","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","context","prependListener","prependOnceListener","list","position","originalListener","shift","pop","spliceOne","off","rawListeners","eventNames","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","__esModule","d","a","definition","prop"],"sourceRoot":""}