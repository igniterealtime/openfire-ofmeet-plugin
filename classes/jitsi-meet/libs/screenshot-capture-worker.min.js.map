{"version":3,"file":"screenshot-capture-worker.min.js","mappings":"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","sources":["webpack://jitsi-meet/./node_modules/pixelmatch/index.js","webpack://jitsi-meet/webpack/bootstrap","webpack://jitsi-meet/webpack/runtime/compat get default export","webpack://jitsi-meet/webpack/runtime/define property getters","webpack://jitsi-meet/webpack/runtime/hasOwnProperty shorthand","webpack://jitsi-meet/./react/features/screenshot-capture/constants.ts","webpack://jitsi-meet/./react/features/screenshot-capture/worker.ts"],"sourcesContent":["'use strict';\n\nmodule.exports = pixelmatch;\n\nconst defaultOptions = {\n    threshold: 0.1,         // matching threshold (0 to 1); smaller is more sensitive\n    includeAA: false,       // whether to skip anti-aliasing detection\n    alpha: 0.1,             // opacity of original image in diff output\n    aaColor: [255, 255, 0], // color of anti-aliased pixels in diff output\n    diffColor: [255, 0, 0], // color of different pixels in diff output\n    diffColorAlt: null,     // whether to detect dark on light differences between img1 and img2 and set an alternative color to differentiate between the two\n    diffMask: false         // draw the diff over a transparent background (a mask)\n};\n\nfunction pixelmatch(img1, img2, output, width, height, options) {\n\n    if (!isPixelData(img1) || !isPixelData(img2) || (output && !isPixelData(output)))\n        throw new Error('Image data: Uint8Array, Uint8ClampedArray or Buffer expected.');\n\n    if (img1.length !== img2.length || (output && output.length !== img1.length))\n        throw new Error('Image sizes do not match.');\n\n    if (img1.length !== width * height * 4) throw new Error('Image data size does not match width/height.');\n\n    options = Object.assign({}, defaultOptions, options);\n\n    // check if images are identical\n    const len = width * height;\n    const a32 = new Uint32Array(img1.buffer, img1.byteOffset, len);\n    const b32 = new Uint32Array(img2.buffer, img2.byteOffset, len);\n    let identical = true;\n\n    for (let i = 0; i < len; i++) {\n        if (a32[i] !== b32[i]) { identical = false; break; }\n    }\n    if (identical) { // fast path if identical\n        if (output && !options.diffMask) {\n            for (let i = 0; i < len; i++) drawGrayPixel(img1, 4 * i, options.alpha, output);\n        }\n        return 0;\n    }\n\n    // maximum acceptable square distance between two colors;\n    // 35215 is the maximum possible value for the YIQ difference metric\n    const maxDelta = 35215 * options.threshold * options.threshold;\n    let diff = 0;\n\n    // compare each pixel of one image against the other one\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n\n            const pos = (y * width + x) * 4;\n\n            // squared YUV distance between colors at this pixel position, negative if the img2 pixel is darker\n            const delta = colorDelta(img1, img2, pos, pos);\n\n            // the color difference is above the threshold\n            if (Math.abs(delta) > maxDelta) {\n                // check it's a real rendering difference or just anti-aliasing\n                if (!options.includeAA && (antialiased(img1, x, y, width, height, img2) ||\n                                           antialiased(img2, x, y, width, height, img1))) {\n                    // one of the pixels is anti-aliasing; draw as yellow and do not count as difference\n                    // note that we do not include such pixels in a mask\n                    if (output && !options.diffMask) drawPixel(output, pos, ...options.aaColor);\n\n                } else {\n                    // found substantial difference not caused by anti-aliasing; draw it as such\n                    if (output) {\n                        drawPixel(output, pos, ...(delta < 0 && options.diffColorAlt || options.diffColor));\n                    }\n                    diff++;\n                }\n\n            } else if (output) {\n                // pixels are similar; draw background as grayscale image blended with white\n                if (!options.diffMask) drawGrayPixel(img1, pos, options.alpha, output);\n            }\n        }\n    }\n\n    // return the number of different pixels\n    return diff;\n}\n\nfunction isPixelData(arr) {\n    // work around instanceof Uint8Array not working properly in some Jest environments\n    return ArrayBuffer.isView(arr) && arr.constructor.BYTES_PER_ELEMENT === 1;\n}\n\n// check if a pixel is likely a part of anti-aliasing;\n// based on \"Anti-aliased Pixel and Intensity Slope Detector\" paper by V. Vysniauskas, 2009\n\nfunction antialiased(img, x1, y1, width, height, img2) {\n    const x0 = Math.max(x1 - 1, 0);\n    const y0 = Math.max(y1 - 1, 0);\n    const x2 = Math.min(x1 + 1, width - 1);\n    const y2 = Math.min(y1 + 1, height - 1);\n    const pos = (y1 * width + x1) * 4;\n    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;\n    let min = 0;\n    let max = 0;\n    let minX, minY, maxX, maxY;\n\n    // go through 8 adjacent pixels\n    for (let x = x0; x <= x2; x++) {\n        for (let y = y0; y <= y2; y++) {\n            if (x === x1 && y === y1) continue;\n\n            // brightness delta between the center pixel and adjacent one\n            const delta = colorDelta(img, img, pos, (y * width + x) * 4, true);\n\n            // count the number of equal, darker and brighter adjacent pixels\n            if (delta === 0) {\n                zeroes++;\n                // if found more than 2 equal siblings, it's definitely not anti-aliasing\n                if (zeroes > 2) return false;\n\n            // remember the darkest pixel\n            } else if (delta < min) {\n                min = delta;\n                minX = x;\n                minY = y;\n\n            // remember the brightest pixel\n            } else if (delta > max) {\n                max = delta;\n                maxX = x;\n                maxY = y;\n            }\n        }\n    }\n\n    // if there are no both darker and brighter pixels among siblings, it's not anti-aliasing\n    if (min === 0 || max === 0) return false;\n\n    // if either the darkest or the brightest pixel has 3+ equal siblings in both images\n    // (definitely not anti-aliased), this pixel is anti-aliased\n    return (hasManySiblings(img, minX, minY, width, height) && hasManySiblings(img2, minX, minY, width, height)) ||\n           (hasManySiblings(img, maxX, maxY, width, height) && hasManySiblings(img2, maxX, maxY, width, height));\n}\n\n// check if a pixel has 3+ adjacent pixels of the same color.\nfunction hasManySiblings(img, x1, y1, width, height) {\n    const x0 = Math.max(x1 - 1, 0);\n    const y0 = Math.max(y1 - 1, 0);\n    const x2 = Math.min(x1 + 1, width - 1);\n    const y2 = Math.min(y1 + 1, height - 1);\n    const pos = (y1 * width + x1) * 4;\n    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;\n\n    // go through 8 adjacent pixels\n    for (let x = x0; x <= x2; x++) {\n        for (let y = y0; y <= y2; y++) {\n            if (x === x1 && y === y1) continue;\n\n            const pos2 = (y * width + x) * 4;\n            if (img[pos] === img[pos2] &&\n                img[pos + 1] === img[pos2 + 1] &&\n                img[pos + 2] === img[pos2 + 2] &&\n                img[pos + 3] === img[pos2 + 3]) zeroes++;\n\n            if (zeroes > 2) return true;\n        }\n    }\n\n    return false;\n}\n\n// calculate color difference according to the paper \"Measuring perceived color difference\n// using YIQ NTSC transmission color space in mobile applications\" by Y. Kotsarenko and F. Ramos\n\nfunction colorDelta(img1, img2, k, m, yOnly) {\n    let r1 = img1[k + 0];\n    let g1 = img1[k + 1];\n    let b1 = img1[k + 2];\n    let a1 = img1[k + 3];\n\n    let r2 = img2[m + 0];\n    let g2 = img2[m + 1];\n    let b2 = img2[m + 2];\n    let a2 = img2[m + 3];\n\n    if (a1 === a2 && r1 === r2 && g1 === g2 && b1 === b2) return 0;\n\n    if (a1 < 255) {\n        a1 /= 255;\n        r1 = blend(r1, a1);\n        g1 = blend(g1, a1);\n        b1 = blend(b1, a1);\n    }\n\n    if (a2 < 255) {\n        a2 /= 255;\n        r2 = blend(r2, a2);\n        g2 = blend(g2, a2);\n        b2 = blend(b2, a2);\n    }\n\n    const y1 = rgb2y(r1, g1, b1);\n    const y2 = rgb2y(r2, g2, b2);\n    const y = y1 - y2;\n\n    if (yOnly) return y; // brightness difference only\n\n    const i = rgb2i(r1, g1, b1) - rgb2i(r2, g2, b2);\n    const q = rgb2q(r1, g1, b1) - rgb2q(r2, g2, b2);\n\n    const delta = 0.5053 * y * y + 0.299 * i * i + 0.1957 * q * q;\n\n    // encode whether the pixel lightens or darkens in the sign\n    return y1 > y2 ? -delta : delta;\n}\n\nfunction rgb2y(r, g, b) { return r * 0.29889531 + g * 0.58662247 + b * 0.11448223; }\nfunction rgb2i(r, g, b) { return r * 0.59597799 - g * 0.27417610 - b * 0.32180189; }\nfunction rgb2q(r, g, b) { return r * 0.21147017 - g * 0.52261711 + b * 0.31114694; }\n\n// blend semi-transparent color with white\nfunction blend(c, a) {\n    return 255 + (c - 255) * a;\n}\n\nfunction drawPixel(output, pos, r, g, b) {\n    output[pos + 0] = r;\n    output[pos + 1] = g;\n    output[pos + 2] = b;\n    output[pos + 3] = 255;\n}\n\nfunction drawGrayPixel(img, i, alpha, output) {\n    const r = img[i + 0];\n    const g = img[i + 1];\n    const b = img[i + 2];\n    const val = blend(rgb2y(r, g, b), alpha * img[i + 3] / 255);\n    drawPixel(output, i, val, val, val);\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\n * Percent of pixels that signal if two images should be considered different.\n */\nexport const PERCENTAGE_LOWER_BOUND = 4;\n/**\n * Number of milliseconds that represent how often screenshots should be taken.\n */\nexport const POLL_INTERVAL = 2000;\n/**\n * SET_TIMEOUT constant is used to set interval and it is set in\n * the id property of the request.data property. TimeMs property must\n * also be set.\n *\n * ```\n * Request.data example:\n * {\n *      id: SET_TIMEOUT,\n *      timeMs: 33\n * }\n * ```\n */\nexport const SET_TIMEOUT = 1;\n/**\n * CLEAR_TIMEOUT constant is used to clear the interval and it is set in\n * the id property of the request.data property.\n *\n * ```\n * {\n *      id: CLEAR_TIMEOUT\n * }\n * ```\n */\nexport const CLEAR_TIMEOUT = 2;\n/**\n * TIMEOUT_TICK constant is used as response and it is set in the id property.\n *\n * ```\n * {\n *      id: TIMEOUT_TICK\n * }\n * ```\n */\nexport const TIMEOUT_TICK = 3;\nexport const SCREENSHOT_QUEUE_LIMIT = 3;\nexport const MAX_FILE_SIZE = 1000000;\n","import pixelmatch from 'pixelmatch';\nimport { CLEAR_TIMEOUT, MAX_FILE_SIZE, PERCENTAGE_LOWER_BOUND, SET_TIMEOUT, TIMEOUT_TICK } from './constants';\nlet timer;\nconst canvas = new OffscreenCanvas(0, 0);\nconst ctx = canvas.getContext('2d');\nlet storedImageData;\n/**\n * Sends Blob with the screenshot to main thread.\n *\n  * @param {ImageData} imageData - The image of the screenshot.\n * @returns {void}\n */\nasync function sendBlob(imageData) {\n    let imageBlob = await canvas.convertToBlob({ type: 'image/jpeg' });\n    if (imageBlob.size > MAX_FILE_SIZE) {\n        const quality = Number((MAX_FILE_SIZE / imageBlob.size).toFixed(2)) * 0.92;\n        imageBlob = await canvas.convertToBlob({ type: 'image/jpeg',\n            quality });\n    }\n    storedImageData = imageData;\n    postMessage({\n        id: TIMEOUT_TICK,\n        imageBlob\n    });\n}\n/**\n * Sends empty message to main thread.\n *\n * @returns {void}\n */\nfunction sendEmpty() {\n    postMessage({\n        id: TIMEOUT_TICK\n    });\n}\n/**\n * Draws the image bitmap on the canvas and checks the difference percent with the previous image\n * if there is no previous image the percentage is not calculated.\n *\n * @param {ImageBitmap} imageBitmap - The image bitmap that is drawn on canvas.\n * @returns {void}\n */\nfunction checkScreenshot(imageBitmap) {\n    const { height, width } = imageBitmap;\n    if (canvas.width !== width) {\n        canvas.width = width;\n    }\n    if (canvas.height !== height) {\n        canvas.height = height;\n    }\n    ctx?.drawImage(imageBitmap, 0, 0, width, height);\n    const imageData = ctx?.getImageData(0, 0, width, height);\n    imageBitmap.close();\n    if (!imageData) {\n        sendEmpty();\n        return;\n    }\n    if (!storedImageData || imageData.data.length !== storedImageData.data.length) {\n        sendBlob(imageData);\n        return;\n    }\n    let numOfPixels = 0;\n    try {\n        numOfPixels = pixelmatch(imageData.data, storedImageData.data, null, width, height);\n    }\n    catch {\n        sendEmpty();\n        return;\n    }\n    const percent = numOfPixels / imageData.data.length * 100;\n    if (percent >= PERCENTAGE_LOWER_BOUND) {\n        sendBlob(imageData);\n    }\n    else {\n        sendEmpty();\n    }\n}\nonmessage = function (request) {\n    switch (request.data.id) {\n        case SET_TIMEOUT: {\n            timer = setTimeout(async () => {\n                const imageBitmap = request.data.imageBitmap;\n                if (imageBitmap) {\n                    checkScreenshot(imageBitmap);\n                }\n                else {\n                    sendEmpty();\n                }\n            }, request.data.timeMs);\n            break;\n        }\n        case CLEAR_TIMEOUT: {\n            if (timer) {\n                clearTimeout(timer);\n            }\n            break;\n        }\n    }\n};\n"],"names":["module","exports","img1","img2","output","width","height","options","isPixelData","Error","length","Object","assign","defaultOptions","len","a32","Uint32Array","buffer","byteOffset","b32","identical","i","diffMask","drawGrayPixel","alpha","maxDelta","threshold","diff","y","x","pos","delta","colorDelta","Math","abs","includeAA","antialiased","drawPixel","diffColorAlt","diffColor","aaColor","arr","ArrayBuffer","isView","constructor","BYTES_PER_ELEMENT","img","x1","y1","x0","max","y0","x2","min","y2","minX","minY","maxX","maxY","zeroes","hasManySiblings","pos2","k","m","yOnly","r1","g1","b1","a1","r2","g2","b2","a2","blend","rgb2y","rgb2i","q","rgb2q","r","g","b","c","a","val","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","definition","key","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","MAX_FILE_SIZE","timer","canvas","OffscreenCanvas","ctx","getContext","storedImageData","async","sendBlob","imageData","imageBlob","convertToBlob","type","size","quality","Number","toFixed","postMessage","id","sendEmpty","onmessage","request","data","setTimeout","imageBitmap","drawImage","getImageData","close","numOfPixels","checkScreenshot","timeMs","clearTimeout"],"sourceRoot":""}