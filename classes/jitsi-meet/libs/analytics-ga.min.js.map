{"version":3,"file":"analytics-ga.min.js","mappings":"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","sources":["webpack://jitsi-meet/./react/features/analytics/handlers/AbstractHandler.ts","webpack://jitsi-meet/./react/features/analytics/handlers/GoogleAnalyticsHandler.ts","webpack://jitsi-meet/./react/features/base/util/helpers.ts"],"sourcesContent":["/**\n * Abstract implementation of analytics handler.\n */\nexport default class AbstractHandler {\n    /**\n     * Creates new instance.\n     *\n     * @param {Object} options - Optional parameters.\n     */\n    constructor(options = {}) {\n        this._enabled = false;\n        this._whiteListedEvents = options.whiteListedEvents;\n        // FIXME:\n        // Keeping the list with the very noisy events so that we don't flood with events whoever hasn't configured\n        // white/black lists yet. We need to solve this issue properly by either making these events not so noisy or\n        // by removing them completely from the code.\n        this._blackListedEvents = [\n            ...(options.blackListedEvents || []),\n            'e2e_rtt', 'rtp.stats', 'rtt.by.region', 'available.device', 'stream.switch.delay', 'ice.state.changed',\n            'ice.duration', 'peer.conn.status.duration'\n        ];\n    }\n    /**\n     * Extracts a name for the event from the event properties.\n     *\n     * @param {Object} event - The analytics event.\n     * @returns {string} - The extracted name.\n     */\n    _extractName(event) {\n        // Page events have a single 'name' field.\n        if (event.type === 'page') {\n            return event.name;\n        }\n        const { action, actionSubject, source } = event;\n        // All events have action, actionSubject, and source fields. All\n        // three fields are required, and often jitsi-meet and\n        // lib-jitsi-meet use the same value when separate values are not\n        // necessary (i.e. event.action == event.actionSubject).\n        // Here we concatenate these three fields, but avoid adding the same\n        // value twice, because it would only make the event's name harder\n        // to read.\n        let name = action;\n        if (actionSubject && actionSubject !== action) {\n            name = `${actionSubject}.${action}`;\n        }\n        if (source && source !== action) {\n            name = `${source}.${name}`;\n        }\n        return name;\n    }\n    /**\n     * Checks if an event should be ignored or not.\n     *\n     * @param {Object} event - The event.\n     * @returns {boolean}\n     */\n    _shouldIgnore(event) {\n        if (!event || !this._enabled) {\n            return true;\n        }\n        const name = this._extractName(event) ?? '';\n        if (Array.isArray(this._whiteListedEvents)) {\n            return this._whiteListedEvents.indexOf(name) === -1;\n        }\n        if (Array.isArray(this._blackListedEvents)) {\n            return this._blackListedEvents.indexOf(name) !== -1;\n        }\n        return false;\n    }\n}\n","/* global ga */\nimport { getJitsiMeetGlobalNS } from '../../base/util/helpers';\nimport AbstractHandler from './AbstractHandler';\n/**\n * Analytics handler for Google Analytics.\n */\nclass GoogleAnalyticsHandler extends AbstractHandler {\n    /**\n     * Creates new instance of the GA analytics handler.\n     *\n     * @param {Object} options - The Google Analytics options.\n     * @param {string} options.googleAnalyticsTrackingId - The GA track id\n     * required by the GA API.\n     */\n    constructor(options) {\n        super(options);\n        this._userProperties = {};\n        if (!options.googleAnalyticsTrackingId) {\n            throw new Error('Failed to initialize Google Analytics handler, no tracking ID');\n        }\n        this._enabled = true;\n        this._initGoogleAnalytics(options);\n    }\n    /**\n     * Initializes the ga object.\n     *\n     * @param {Object} options - The Google Analytics options.\n     * @param {string} options.googleAnalyticsTrackingId - The GA track id\n     * required by the GA API.\n     * @returns {void}\n     */\n    _initGoogleAnalytics(options) {\n        /**\n         * TODO: Keep this local, there's no need to add it to window.\n         */\n        /* eslint-disable */ // @ts-ignore\n        (function (i, s, o, g, r, a, m) {\n            i['GoogleAnalyticsObject'] = r;\n            i[r] = i[r] || function () {\n                // @ts-ignore\n                (i[r].q = i[r].q || []).push(arguments);\n            }, i[r].l = 1 * new Date();\n            a = s.createElement(o), m = s.getElementsByTagName(o)[0];\n            a.async = 1;\n            a.src = g;\n            m.parentNode.insertBefore(a, m);\n        })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');\n        /* eslint-enable */\n        // @ts-ignore\n        ga('create', options.googleAnalyticsTrackingId, 'auto');\n        // @ts-ignore\n        ga('send', 'pageview');\n    }\n    /**\n     * Extracts the integer to use for a Google Analytics event's value field\n     * from a lib-jitsi-meet analytics event.\n     *\n     * @param {Object} event - The lib-jitsi-meet analytics event.\n     * @returns {number} - The integer to use for the 'value' of a Google\n     * analytics event, or NaN if the lib-jitsi-meet event doesn't contain a\n     * suitable value.\n     * @private\n     */\n    _extractValue(event) {\n        let value = event?.attributes?.value;\n        // Try to extract an integer from the \"value\" attribute.\n        value = Math.round(parseFloat(value ?? ''));\n        return value;\n    }\n    /**\n     * Extracts the string to use for a Google Analytics event's label field\n     * from a lib-jitsi-meet analytics event.\n     *\n     * @param {Object} event - The lib-jitsi-meet analytics event.\n     * @returns {string} - The string to use for the 'label' of a Google\n     * analytics event.\n     * @private\n     */\n    _extractLabel(event) {\n        const { attributes = {} } = event;\n        const labelsArray = Object.keys(attributes).map(key => `${key}=${attributes[key]}`);\n        labelsArray.push(this._userPropertiesString);\n        return labelsArray.join('&');\n    }\n    /**\n     * Sets the permanent properties for the current session.\n     *\n     * @param {Object} userProps - The permanent portperties.\n     * @returns {void}\n     */\n    setUserProperties(userProps = {}) {\n        if (!this._enabled) {\n            return;\n        }\n        // The label field is limited to 500B. We will concatenate all\n        // attributes of the event, except the user agent because it may be\n        // lengthy and is probably included from elsewhere.\n        const filter = ['user_agent', 'callstats_name'];\n        this._userPropertiesString\n            = Object.keys(userProps)\n                .filter(key => filter.indexOf(key) === -1)\n                .map(key => `permanent_${key}=${userProps[key]}`)\n                .join('&');\n    }\n    /**\n     * This is the entry point of the API. The function sends an event to\n     * google analytics. The format of the event is described in\n     * analyticsAdapter in lib-jitsi-meet.\n     *\n     * @param {Object} event - The event in the format specified by\n     * lib-jitsi-meet.\n     * @returns {void}\n     */\n    sendEvent(event) {\n        if (this._shouldIgnore(event)) {\n            return;\n        }\n        const gaEvent = {\n            'eventCategory': 'jitsi-meet',\n            'eventAction': this._extractName(event),\n            'eventLabel': this._extractLabel(event)\n        };\n        const value = this._extractValue(event);\n        if (!isNaN(value)) {\n            gaEvent.eventValue = value;\n        }\n        // @ts-ignore\n        ga('send', 'event', gaEvent);\n    }\n}\nconst globalNS = getJitsiMeetGlobalNS();\nglobalNS.analyticsHandlers = globalNS.analyticsHandlers || [];\nglobalNS.analyticsHandlers.push(GoogleAnalyticsHandler);\n","/**\n * A helper function that behaves similar to Object.assign, but only reassigns a\n * property in target if it's defined in source.\n *\n * @param {Object} target - The target object to assign the values into.\n * @param {Object} source - The source object.\n * @returns {Object}\n */\nexport function assignIfDefined(target, source) {\n    const to = Object(target);\n    for (const nextKey in source) {\n        if (source.hasOwnProperty(nextKey)) {\n            const value = source[nextKey];\n            if (typeof value !== 'undefined') {\n                to[nextKey] = value;\n            }\n        }\n    }\n    return to;\n}\n/**\n * Creates a deferred object.\n *\n * @returns {{promise, resolve, reject}}\n */\nexport function createDeferred() {\n    const deferred = {};\n    deferred.promise = new Promise((resolve, reject) => {\n        deferred.resolve = resolve;\n        deferred.reject = reject;\n    });\n    return deferred;\n}\nconst MATCH_OPERATOR_REGEXP = /[|\\\\{}()[\\]^$+*?.-]/g;\n/**\n * Escape RegExp special characters.\n *\n * Based on https://github.com/sindresorhus/escape-string-regexp.\n *\n * @param {string} s - The regexp string to escape.\n * @returns {string}\n */\nexport function escapeRegexp(s) {\n    if (typeof s !== 'string') {\n        throw new TypeError('Expected a string');\n    }\n    return s.replace(MATCH_OPERATOR_REGEXP, '\\\\$&');\n}\n/**\n * Returns the base URL of the app.\n *\n * @param {Object} w - Window object to use instead of the built in one.\n * @returns {string}\n */\nexport function getBaseUrl(w = window) {\n    const doc = w.document;\n    const base = doc.querySelector('base');\n    if (base?.href) {\n        return base.href;\n    }\n    const { protocol, host } = w.location;\n    return `${protocol}//${host}`;\n}\n/**\n * Returns the namespace for all global variables, functions, etc that we need.\n *\n * @returns {Object} The namespace.\n *\n * NOTE: After React-ifying everything this should be the only global.\n */\nexport function getJitsiMeetGlobalNS() {\n    if (!window.JitsiMeetJS) {\n        window.JitsiMeetJS = {};\n    }\n    if (!window.JitsiMeetJS.app) {\n        window.JitsiMeetJS.app = {};\n    }\n    return window.JitsiMeetJS.app;\n}\n/**\n * Prints the error and reports it to the global error handler.\n *\n * @param {Error} e - The error object.\n * @param {string} msg - A custom message to print in addition to the error.\n * @returns {void}\n */\nexport function reportError(e, msg = '') {\n    console.error(msg, e);\n    window.onerror?.(msg, undefined, undefined, undefined, e);\n}\n/**\n * Adds alpha to a color css string.\n *\n * @param {string} color - The color string either in rgb... Or #... Format.\n * @param {number} opacity -The opacity(alpha) to apply to the color. Can take a value between 0 and 1, including.\n * @returns {string} - The color with applied alpha.\n */\nexport function setColorAlpha(color, opacity) {\n    if (!color) {\n        return `rgba(0, 0, 0, ${opacity})`;\n    }\n    let b, g, r;\n    try {\n        if (color.startsWith('rgb')) {\n            [r, g, b] = color.split('(')[1].split(')')[0].split(',').map(c => c.trim());\n        }\n        else if (color.startsWith('#')) {\n            if (color.length === 4) {\n                [r, g, b] = parseShorthandColor(color);\n            }\n            else {\n                r = parseInt(color.substring(1, 3), 16);\n                g = parseInt(color.substring(3, 5), 16);\n                b = parseInt(color.substring(5, 7), 16);\n            }\n        }\n        else {\n            return color;\n        }\n        return `rgba(${r}, ${g}, ${b}, ${opacity})`;\n    }\n    catch {\n        return color;\n    }\n}\n/**\n * Gets the hexa rgb values for a shorthand css color.\n *\n * @param {string} color - The shorthand css color.\n * @returns {Array<number>} - Array containing parsed r, g, b values of the color.\n */\nfunction parseShorthandColor(color) {\n    let b, g, r;\n    r = color.substring(1, 2);\n    r += r;\n    r = parseInt(r, 16);\n    g = color.substring(2, 3);\n    g += g;\n    g = parseInt(g, 16);\n    b = color.substring(3, 4);\n    b += b;\n    b = parseInt(b, 16);\n    return [r, g, b];\n}\n/**\n * Sorts an object by a sort function, same functionality as array.sort().\n *\n * @param {Object} object - The data object.\n * @param {Function} callback - The sort function.\n * @returns {void}\n */\nexport function objectSort(object, callback) {\n    return Object.entries(object)\n        .sort(([, a], [, b]) => callback(a, b))\n        .reduce((row, [key, value]) => {\n        return { ...row,\n            [key]: value };\n    }, {});\n}\n"],"names":["AbstractHandler","constructor","options","this","_enabled","_whiteListedEvents","whiteListedEvents","_blackListedEvents","blackListedEvents","_extractName","event","type","name","action","actionSubject","source","_shouldIgnore","Array","isArray","indexOf","globalNS","window","JitsiMeetJS","app","analyticsHandlers","push","super","_userProperties","googleAnalyticsTrackingId","Error","_initGoogleAnalytics","i","s","o","r","a","m","document","q","arguments","l","Date","createElement","getElementsByTagName","async","src","parentNode","insertBefore","ga","_extractValue","value","attributes","Math","round","parseFloat","_extractLabel","labelsArray","Object","keys","map","key","_userPropertiesString","join","setUserProperties","userProps","filter","sendEvent","gaEvent","isNaN","eventValue"],"sourceRoot":""}