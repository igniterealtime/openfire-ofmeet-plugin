{"version":3,"file":"lib-jitsi-meet.min.js","mappings":"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","sources":["webpack://JitsiMeetJS/webpack/universalModuleDefinition","webpack://JitsiMeetJS/./index.js","webpack://JitsiMeetJS/./node_modules/js-md5/src/md5.js","webpack://JitsiMeetJS/./service/authentication/AuthenticationEvents.ts","webpack://JitsiMeetJS/watchRTC/webpack/universalModuleDefinition","webpack://JitsiMeetJS/watchRTC/src/index.ts","webpack://JitsiMeetJS/watchRTC/src/sdk.ts","webpack://JitsiMeetJS/watchRTC/src/stats.ts","webpack://JitsiMeetJS/watchRTC/src/types.ts","webpack://JitsiMeetJS/watchRTC/src/utils.ts","webpack://JitsiMeetJS/watchRTC/src/version.ts","webpack://JitsiMeetJS/watchRTC/src/watchrtchttp.ts","webpack://JitsiMeetJS/watchRTC/src/watchrtcsocket.ts","webpack://JitsiMeetJS/watchRTC/src/detect-gpu.js","webpack://JitsiMeetJS/watchRTC/Users/yurapostevka/Documents/apps/testrtc/watchrtc-sdk/src/gpu-benchmarks|sync|/^\\.\\/.*$/","webpack://JitsiMeetJS/watchRTC/src/lz-string.js","webpack://JitsiMeetJS/watchRTC/webpack/bootstrap","webpack://JitsiMeetJS/watchRTC/webpack/startup","webpack://JitsiMeetJS/watchRTC/webpack/runtime/global","webpack://JitsiMeetJS/watchRTC/webpack/runtime/hasOwnProperty shorthand","webpack://JitsiMeetJS/./service/xmpp/XMPPEvents.ts","webpack://JitsiMeetJS/./node_modules/jquery/dist/jquery.slim.min.js","webpack://JitsiMeetJS/./node_modules/@jitsi/logger/lib/index.js","webpack://JitsiMeetJS/./service/RTC/VideoType.ts","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./node_modules/@jitsi/logger/lib/LogCollector.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/./service/RTC/RTCEvents.ts","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/./node_modules/strophe.js/dist/strophe.umd.js","webpack://JitsiMeetJS/./node_modules/events/events.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/node_modules/ua-parser-js/src/ua-parser.js","webpack://JitsiMeetJS/./modules/util/RandomUtil.js","webpack://JitsiMeetJS/./node_modules/@hapi/bourne/lib/index.js","webpack://JitsiMeetJS/./node_modules/sdp/sdp.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_listCacheClear.js","webpack://JitsiMeetJS/./node_modules/lodash-es/eq.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_assocIndexOf.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_listCacheDelete.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_ListCache.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_listCacheGet.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_listCacheHas.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_listCacheSet.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_freeGlobal.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_root.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_Symbol.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_getRawTag.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_objectToString.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_baseGetTag.js","webpack://JitsiMeetJS/./node_modules/lodash-es/isObject.js","webpack://JitsiMeetJS/./node_modules/lodash-es/isFunction.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_coreJsData.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_isMasked.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_toSource.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_baseIsNative.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_getNative.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_getValue.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_Map.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_nativeCreate.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_hashGet.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_hashHas.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_Hash.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_hashClear.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_hashDelete.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_hashSet.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_getMapData.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_isKeyable.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_MapCache.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_mapCacheClear.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_mapCacheDelete.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_mapCacheGet.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_mapCacheHas.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_mapCacheSet.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_Stack.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_stackClear.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_stackDelete.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_stackGet.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_stackHas.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_stackSet.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_defineProperty.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_baseAssignValue.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_assignMergeValue.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_baseFor.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_createBaseFor.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_cloneBuffer.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_Uint8Array.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_cloneArrayBuffer.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_cloneTypedArray.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_copyArray.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_baseCreate.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_overArg.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_getPrototype.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_isPrototype.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_initCloneObject.js","webpack://JitsiMeetJS/./node_modules/lodash-es/isObjectLike.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_baseIsArguments.js","webpack://JitsiMeetJS/./node_modules/lodash-es/isArguments.js","webpack://JitsiMeetJS/./node_modules/lodash-es/isArray.js","webpack://JitsiMeetJS/./node_modules/lodash-es/isLength.js","webpack://JitsiMeetJS/./node_modules/lodash-es/isArrayLike.js","webpack://JitsiMeetJS/./node_modules/lodash-es/isBuffer.js","webpack://JitsiMeetJS/./node_modules/lodash-es/stubFalse.js","webpack://JitsiMeetJS/./node_modules/lodash-es/isPlainObject.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_baseIsTypedArray.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_baseUnary.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_nodeUtil.js","webpack://JitsiMeetJS/./node_modules/lodash-es/isTypedArray.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_safeGet.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_assignValue.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_copyObject.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_isIndex.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_arrayLikeKeys.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_baseTimes.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_baseKeysIn.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_nativeKeysIn.js","webpack://JitsiMeetJS/./node_modules/lodash-es/keysIn.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_baseMergeDeep.js","webpack://JitsiMeetJS/./node_modules/lodash-es/isArrayLikeObject.js","webpack://JitsiMeetJS/./node_modules/lodash-es/toPlainObject.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_baseMerge.js","webpack://JitsiMeetJS/./node_modules/lodash-es/identity.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_overRest.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_baseSetToString.js","webpack://JitsiMeetJS/./node_modules/lodash-es/constant.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_shortOut.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_setToString.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_baseRest.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_apply.js","webpack://JitsiMeetJS/./node_modules/lodash-es/merge.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_createAssigner.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_isIterateeCall.js","webpack://JitsiMeetJS/./JitsiConferenceErrors.ts","webpack://JitsiMeetJS/./JitsiConferenceEvents.ts","webpack://JitsiMeetJS/./node_modules/lodash-es/_SetCache.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_setCacheAdd.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_setCacheHas.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_arraySome.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_equalArrays.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_cacheHas.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_mapToArray.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_setToArray.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_equalByTag.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_arrayPush.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_baseGetAllKeys.js","webpack://JitsiMeetJS/./node_modules/lodash-es/stubArray.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_getSymbols.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_arrayFilter.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_nativeKeys.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_baseKeys.js","webpack://JitsiMeetJS/./node_modules/lodash-es/keys.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_getAllKeys.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_equalObjects.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_DataView.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_Promise.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_Set.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_WeakMap.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_getTag.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_baseIsEqualDeep.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_baseIsEqual.js","webpack://JitsiMeetJS/./node_modules/lodash-es/isEqual.js","webpack://JitsiMeetJS/./JitsiTrackEvents.ts","webpack://JitsiMeetJS/./service/statistics/AnalyticsEvents.ts","webpack://JitsiMeetJS/./service/statistics/Events.ts","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/constants.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/BrowserDetection.js","webpack://JitsiMeetJS/./node_modules/@jitsi/rtcstats/events.js","webpack://JitsiMeetJS/./node_modules/@jitsi/rtcstats/rtcstats.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/esm-browser/rng.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/esm-browser/regex.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/esm-browser/validate.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/esm-browser/v4.js","webpack://JitsiMeetJS/./node_modules/@jitsi/rtcstats/constants.js","webpack://JitsiMeetJS/./node_modules/@jitsi/rtcstats/obfuscator.js","webpack://JitsiMeetJS/./node_modules/@jitsi/rtcstats/trace-ws.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/jitsi-local-storage/index.js","webpack://JitsiMeetJS/./modules/util/UsernameGenerator.ts","webpack://JitsiMeetJS/./modules/settings/Settings.ts","webpack://JitsiMeetJS/./modules/util/EventEmitter.ts","webpack://JitsiMeetJS/./modules/RTCStats/DefaulLogStorage.ts","webpack://JitsiMeetJS/./modules/RTCStats/RTCStatsEvents.ts","webpack://JitsiMeetJS/./modules/RTCStats/RTCStats.ts","webpack://JitsiMeetJS/./modules/browser/index.js","webpack://JitsiMeetJS/./modules/browser/BrowserCapabilities.js","webpack://JitsiMeetJS/./modules/watchRTC/WatchRTC.ts","webpack://JitsiMeetJS/./modules/watchRTC/functions.ts","webpack://JitsiMeetJS/./modules/statistics/AnalyticsAdapter.js","webpack://JitsiMeetJS/./modules/statistics/LocalStatsCollector.js","webpack://JitsiMeetJS/./modules/util/MathUtil.ts","webpack://JitsiMeetJS/./modules/statistics/PerformanceObserverStats.js","webpack://JitsiMeetJS/./service/RTC/MediaType.ts","webpack://JitsiMeetJS/./modules/flags/FeatureFlags.ts","webpack://JitsiMeetJS/./modules/statistics/RTPStatsCollector.js","webpack://JitsiMeetJS/./modules/statistics/statistics.js","webpack://JitsiMeetJS/./modules/util/EventEmitterForwarder.ts","webpack://JitsiMeetJS/./JitsiConferenceEventManager.js","webpack://JitsiMeetJS/./modules/statistics/constants.js","webpack://JitsiMeetJS/./JitsiParticipant.ts","webpack://JitsiMeetJS/./JitsiTrackErrors.ts","webpack://JitsiMeetJS/./JitsiTrackError.ts","webpack://JitsiMeetJS/./JitsiConnectionEvents.ts","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/json.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_arrayMap.js","webpack://JitsiMeetJS/./node_modules/lodash-es/isSymbol.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_baseToString.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_unescapeHtmlChar.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_basePropertyOf.js","webpack://JitsiMeetJS/./node_modules/lodash-es/unescape.js","webpack://JitsiMeetJS/./node_modules/lodash-es/toString.js","webpack://JitsiMeetJS/./JitsiConnectionErrors.ts","webpack://JitsiMeetJS/./service/xmpp/XMPPExtensioProtocols.ts","webpack://JitsiMeetJS/./modules/util/Deferred.js","webpack://JitsiMeetJS/./modules/util/Listenable.ts","webpack://JitsiMeetJS/./modules/e2ee/E2EEContext.js","webpack://JitsiMeetJS/./modules/e2ee/KeyHandler.js","webpack://JitsiMeetJS/./modules/e2ee/ExternallyManagedKeyHandler.js","webpack://JitsiMeetJS/./node_modules/lodash-es/now.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_trimmedEndIndex.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_baseTrim.js","webpack://JitsiMeetJS/./node_modules/lodash-es/toNumber.js","webpack://JitsiMeetJS/./node_modules/lodash-es/debounce.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEErrors.ts","webpack://JitsiMeetJS/./modules/e2ee/SAS.ts","webpack://JitsiMeetJS/./modules/e2ee/OlmAdapter.js","webpack://JitsiMeetJS/./modules/e2ee/ManagedKeyHandler.js","webpack://JitsiMeetJS/./modules/e2ee/crypto-utils.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEncryption.js","webpack://JitsiMeetJS/./modules/xmpp/sha1.js","webpack://JitsiMeetJS/./modules/xmpp/Caps.js","webpack://JitsiMeetJS/./service/connectivity/Constants.ts","webpack://JitsiMeetJS/./modules/connectivity/NetworkInfo.ts","webpack://JitsiMeetJS/./modules/util/Retry.ts","webpack://JitsiMeetJS/./modules/xmpp/ResumeTask.ts","webpack://JitsiMeetJS/./modules/xmpp/StropheLastSuccess.ts","webpack://JitsiMeetJS/./modules/xmpp/ConnectionPlugin.ts","webpack://JitsiMeetJS/./modules/xmpp/strophe.ping.ts","webpack://JitsiMeetJS/./modules/xmpp/strophe.stream-management.js","webpack://JitsiMeetJS/./modules/xmpp/XmppConnection.js","webpack://JitsiMeetJS/./modules/xmpp/moderator.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.disco.js","webpack://JitsiMeetJS/./JitsiTranscriptionStatus.ts","webpack://JitsiMeetJS/./modules/xmpp/AVModeration.ts","webpack://JitsiMeetJS/./modules/xmpp/BreakoutRooms.js","webpack://JitsiMeetJS/./modules/xmpp/Lobby.js","webpack://JitsiMeetJS/./modules/xmpp/RoomMetadata.ts","webpack://JitsiMeetJS/./modules/xmpp/ChatRoom.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.emuc.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_arrayEach.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_getSymbolsIn.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_getAllKeysIn.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_initCloneArray.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_cloneRegExp.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_cloneSymbol.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_initCloneByTag.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_cloneDataView.js","webpack://JitsiMeetJS/./node_modules/lodash-es/isMap.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_baseIsMap.js","webpack://JitsiMeetJS/./node_modules/lodash-es/isSet.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_baseIsSet.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_baseClone.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_copySymbolsIn.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_baseAssignIn.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_copySymbols.js","webpack://JitsiMeetJS/./node_modules/lodash-es/_baseAssign.js","webpack://JitsiMeetJS/./node_modules/lodash-es/cloneDeep.js","webpack://JitsiMeetJS/./service/RTC/CodecMimeType.ts","webpack://JitsiMeetJS/./service/RTC/StandardVideoQualitySettings.ts","webpack://JitsiMeetJS/./modules/xmpp/JingleHelperFunctions.ts","webpack://JitsiMeetJS/./service/RTC/MediaDirection.ts","webpack://JitsiMeetJS/./modules/RTC/ScreenObtainer.js","webpack://JitsiMeetJS/./modules/sdp/SDPUtil.js","webpack://JitsiMeetJS/./modules/sdp/SDP.js","webpack://JitsiMeetJS/./modules/sdp/SDPDiffer.js","webpack://JitsiMeetJS/./node_modules/async-es/internal/onlyOnce.js","webpack://JitsiMeetJS/./node_modules/async-es/internal/setImmediate.js","webpack://JitsiMeetJS/./node_modules/async-es/internal/DoublyLinkedList.js","webpack://JitsiMeetJS/./node_modules/async-es/asyncify.js","webpack://JitsiMeetJS/./node_modules/async-es/internal/wrapAsync.js","webpack://JitsiMeetJS/./node_modules/async-es/internal/initialParams.js","webpack://JitsiMeetJS/./node_modules/async-es/internal/queue.js","webpack://JitsiMeetJS/./modules/util/AsyncQueue.ts","webpack://JitsiMeetJS/./node_modules/async-es/queue.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionState.ts","webpack://JitsiMeetJS/./modules/xmpp/JingleSession.js","webpack://JitsiMeetJS/./modules/xmpp/MediaSessionEvents.ts","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionPC.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.jingle.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.logger.ts","webpack://JitsiMeetJS/./modules/xmpp/strophe.rayo.ts","webpack://JitsiMeetJS/./modules/xmpp/strophe.util.ts","webpack://JitsiMeetJS/./modules/xmpp/xmpp.js","webpack://JitsiMeetJS/./authenticateAndUpgradeRole.js","webpack://JitsiMeetJS/./modules/RTC/BridgeChannel.ts","webpack://JitsiMeetJS/./service/RTC/CameraFacingMode.ts","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/utils.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_factory.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://JitsiMeetJS/./modules/RTC/RTCUtils.js","webpack://JitsiMeetJS/./modules/RTC/JitsiTrack.js","webpack://JitsiMeetJS/./modules/RTC/JitsiLocalTrack.js","webpack://JitsiMeetJS/./service/RTC/SignalingEvents.ts","webpack://JitsiMeetJS/./service/RTC/SignalingLayer.ts","webpack://JitsiMeetJS/./modules/sdp/SdpTransformUtil.js","webpack://JitsiMeetJS/./modules/sdp/LocalSdpMunger.js","webpack://JitsiMeetJS/./modules/sdp/RtxModifier.js","webpack://JitsiMeetJS/./modules/sdp/SdpSimulcast.ts","webpack://JitsiMeetJS/./modules/connectivity/TrackStreamingStatus.ts","webpack://JitsiMeetJS/./modules/RTC/JitsiRemoteTrack.js","webpack://JitsiMeetJS/./service/RTC/VideoEncoderScalabilityMode.ts","webpack://JitsiMeetJS/./modules/RTC/TPCUtils.js","webpack://JitsiMeetJS/./modules/RTC/TraceablePeerConnection.js","webpack://JitsiMeetJS/./modules/RTC/RTC.js","webpack://JitsiMeetJS/./service/connectivity/ConnectionQualityEvents.ts","webpack://JitsiMeetJS/./modules/connectivity/ConnectionQuality.js","webpack://JitsiMeetJS/./modules/connectivity/IceFailedHandling.ts","webpack://JitsiMeetJS/./modules/detection/DetectionEvents.ts","webpack://JitsiMeetJS/./modules/detection/NoAudioSignalDetection.js","webpack://JitsiMeetJS/./modules/detection/P2PDominantSpeakerDetection.ts","webpack://JitsiMeetJS/./modules/webaudio/WebAudioUtils.js","webpack://JitsiMeetJS/./modules/detection/TrackVADEmitter.js","webpack://JitsiMeetJS/./modules/detection/VADAudioAnalyser.js","webpack://JitsiMeetJS/./modules/detection/VADNoiseDetection.js","webpack://JitsiMeetJS/./modules/detection/VADTalkMutedDetection.ts","webpack://JitsiMeetJS/./service/e2eping/E2ePingEvents.ts","webpack://JitsiMeetJS/./modules/e2eping/e2eping.ts","webpack://JitsiMeetJS/./modules/event/Jvb121EventGenerator.ts","webpack://JitsiMeetJS/./modules/litemode/LiteModeContext.ts","webpack://JitsiMeetJS/./modules/qualitycontrol/CodecSelection.js","webpack://JitsiMeetJS/./modules/qualitycontrol/ReceiveVideoController.js","webpack://JitsiMeetJS/./modules/qualitycontrol/SendVideoController.js","webpack://JitsiMeetJS/./modules/qualitycontrol/QualityController.ts","webpack://JitsiMeetJS/./modules/recording/recordingXMLUtils.js","webpack://JitsiMeetJS/./modules/recording/JibriSession.ts","webpack://JitsiMeetJS/./modules/recording/RecordingManager.ts","webpack://JitsiMeetJS/./modules/statistics/AvgRTPStatsReporter.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStats.ts","webpack://JitsiMeetJS/./modules/statistics/SpeakerStatsCollector.js","webpack://JitsiMeetJS/./modules/version/ComponentsVersions.ts","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGWConstants.ts","webpack://JitsiMeetJS/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGW.js","webpack://JitsiMeetJS/./modules/xmpp/SignalingLayerImpl.js","webpack://JitsiMeetJS/./service/RTC/BridgeVideoType.ts","webpack://JitsiMeetJS/./JitsiConference.js","webpack://JitsiMeetJS/./JitsiConnection.ts","webpack://JitsiMeetJS/./JitsiMediaDevicesEvents.ts","webpack://JitsiMeetJS/./JitsiMediaDevices.js","webpack://JitsiMeetJS/./modules/detection/ActiveDeviceDetector.js","webpack://JitsiMeetJS/./modules/proxyconnection/CustomSignalingLayer.js","webpack://JitsiMeetJS/./modules/proxyconnection/constants.ts","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionPC.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionService.js","webpack://JitsiMeetJS/./node_modules/@jitsi/precall-test/src/utility/parsedIceCandidate.js","webpack://JitsiMeetJS/./node_modules/@jitsi/precall-test/src/utility/stats/detectbrowser.js","webpack://JitsiMeetJS/./node_modules/@jitsi/precall-test/src/utility/stats/statsadapter.js","webpack://JitsiMeetJS/./node_modules/@jitsi/precall-test/src/utility/stats/getstatshandler.js","webpack://JitsiMeetJS/./node_modules/@jitsi/precall-test/src/turnConnection.js","webpack://JitsiMeetJS/./node_modules/@jitsi/precall-test/src/utility/timestamps.js","webpack://JitsiMeetJS/./node_modules/@jitsi/precall-test/src/tests/turnTest.js","webpack://JitsiMeetJS/./node_modules/@jitsi/precall-test/src/tests/rttTest.js","webpack://JitsiMeetJS/./node_modules/@jitsi/precall-test/src/utility/messageMaker.js","webpack://JitsiMeetJS/./node_modules/@jitsi/precall-test/src/tests/throughputTest.js","webpack://JitsiMeetJS/./node_modules/@jitsi/precall-test/src/tests/lossTest.js","webpack://JitsiMeetJS/./node_modules/@jitsi/precall-test/src/utility/resultsHandler.js","webpack://JitsiMeetJS/./node_modules/@jitsi/precall-test/src/utility/onlineCheck.js","webpack://JitsiMeetJS/./node_modules/@jitsi/precall-test/src/main.js","webpack://JitsiMeetJS/./modules/util/ScriptUtil.ts","webpack://JitsiMeetJS/./modules/webaudio/AudioMixer.js","webpack://JitsiMeetJS/./version.ts","webpack://JitsiMeetJS/./JitsiMeetJS.ts","webpack://JitsiMeetJS/./modules/recording/recordingConstants.ts","webpack://JitsiMeetJS/./modules/statistics/PreCallTest.ts","webpack://JitsiMeetJS/./node_modules/base64-js/index.js","webpack://JitsiMeetJS/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://JitsiMeetJS/./node_modules/@jitsi/logger/lib/Logger.js","webpack://JitsiMeetJS/./service/RTC/Resolutions.ts","webpack://JitsiMeetJS/./service/statistics/constants.ts","webpack://JitsiMeetJS/webpack/bootstrap","webpack://JitsiMeetJS/webpack/runtime/amd options","webpack://JitsiMeetJS/webpack/runtime/compat get default export","webpack://JitsiMeetJS/webpack/runtime/define property getters","webpack://JitsiMeetJS/webpack/runtime/global","webpack://JitsiMeetJS/webpack/runtime/hasOwnProperty shorthand","webpack://JitsiMeetJS/webpack/runtime/make namespace object","webpack://JitsiMeetJS/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetJS\"] = factory();\n\telse\n\t\troot[\"JitsiMeetJS\"] = factory();\n})(self, () => {\nreturn ","const ljm = require('./JitsiMeetJS').default;\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.JitsiMeetJS === 'object'\n            ? { ...window.JitsiMeetJS,\n                ...module }\n            : module);\n}\n\nmodule.exports = _mergeNamespaceAndModule(ljm);\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"watchRTC\"] = factory();\n\telse\n\t\troot[\"watchRTC\"] = factory();\n})(this, function() {\nreturn ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addStateListener = exports.persistentStart = exports.persistentEnd = exports.addStatsListener = exports.disconnect = exports.connect = exports.mapTrack = exports.mapStream = exports.addEvent = exports.enableDataCollection = exports.disableDataCollection = exports.addKeys = exports.setUserRating = exports.addTags = exports.setConfig = exports.init = void 0;\nrequire(\"./types\");\nvar sdk_1 = require(\"./sdk\");\n/**\n * Initialize SDK. Can be called multiple times but it will be initialized only at the first time.\n * Use 'setConfig' function after if you don't have rtcRoomId and rtcPeerId yet.\n * @param watchrtc\n * @param prefixesToWrap\n * @param services\n */\nvar init = function (watchrtcConfig, services) {\n    (0, sdk_1.initSDK)((watchrtcConfig || {}), [\"\"], services);\n};\nexports.init = init;\n/**\n * You also can use watchRTC.setConfig function to set watchRTC configuration after calling init()\n * and before the creation of RTCPeerConnection objects\n */\nvar setConfig = function (watchrtcConfig) {\n    (0, sdk_1.setConfig)(watchrtcConfig);\n};\nexports.setConfig = setConfig;\n/**\n * @deprecated Tags no longer supported. Use addKeys instead\n * Add tags for peer session\n * @param rtcTags[]\n */\nvar addTags = function (\n/** [\"tag1\", \"tag2\", \"tag3\"] */\n_rtcTags) { };\nexports.addTags = addTags;\n/**\n * Set user rating and/or comment for peer session\n * @param rating number from 1 to 5\n * @param comment string\n */\nvar setUserRating = function (\n/** 1 | 2 | 3 | 4 | 5 */\nrating, comment) {\n    (0, sdk_1.setUserRating)(rating, comment);\n};\nexports.setUserRating = setUserRating;\n/**\n * Add keys for peer session\n * @param keys\n */\nvar addKeys = function (\n/** { \"key1\": \"value1\", \"key2\": [\"value2_1\", \"value2_2\"]} */\nkeys) {\n    (0, sdk_1.addKeys)(keys);\n};\nexports.addKeys = addKeys;\n/**\n * Disables data collection\n */\nvar disableDataCollection = function () {\n    (0, sdk_1.disableDataCollection)();\n};\nexports.disableDataCollection = disableDataCollection;\n/**\n * Enables data collection\n */\nvar enableDataCollection = function () {\n    (0, sdk_1.enableDataCollection)();\n};\nexports.enableDataCollection = enableDataCollection;\nvar addEvent = function (event) {\n    (0, sdk_1.addEvent)(event);\n};\nexports.addEvent = addEvent;\n/**\n * Map an incoming stream with a human-readable name\n * @param id The identifier of the stream (streamIdentifier attribute)\n * @param name The human-readable name\n * @deprecated\n */\nvar mapStream = function (id, name) {\n    (0, sdk_1.mapStream)(id, name);\n};\nexports.mapStream = mapStream;\n/**\n * Map an incoming track with a human-readable name\n * @param id The identifier of the track (trackIdentifier attribute)\n * @param name The human-readable name\n */\nvar mapTrack = function (id, name) {\n    (0, sdk_1.mapTrack)(id, name);\n};\nexports.mapTrack = mapTrack;\nvar connect = function () {\n    (0, sdk_1.connect)();\n};\nexports.connect = connect;\nvar disconnect = function () {\n    (0, sdk_1.disconnect)();\n};\nexports.disconnect = disconnect;\nvar addStatsListener = function (listener) {\n    (0, sdk_1.registerOnStatsListener)(listener);\n};\nexports.addStatsListener = addStatsListener;\nvar persistentEnd = function (nailUpCallEnd) {\n    (0, sdk_1.persistentEnd)(nailUpCallEnd);\n};\nexports.persistentEnd = persistentEnd;\nvar persistentStart = function (roomId, peerId) {\n    (0, sdk_1.persistentStart)(roomId, peerId);\n};\nexports.persistentStart = persistentStart;\nvar addStateListener = function (listener) {\n    (0, sdk_1.registerStateListener)(listener);\n};\nexports.addStateListener = addStateListener;\nexports.default = {\n    /**\n     * Initialize SDK. Can be called multiple times but it will be initialized only at the first time.\n     * Use 'setConfig' function after if you don't have rtcRoomId and rtcPeerId yet.\n     * @param watchrtc\n     * @param prefixesToWrap\n     */\n    init: exports.init,\n    /**\n     * @deprecated Tags no longer supported. Use addKeys instead\n     * Add tags for peer session\n     * @param rtcTags[]\n     */\n    addTags: exports.addTags,\n    /**\n     * Set user rating and/or comment for peer session\n     * @param rating number from 1 to 5\n     * @param comment string\n     */\n    setUserRating: exports.setUserRating,\n    /**\n     * Add keys for peer session\n     * @param keys\n     */\n    addKeys: exports.addKeys,\n    /**\n     * You also can use watchRTC.setConfig function to set watchRTC configuration after calling init()\n     * and before the creation of RTCPeerConnection objects\n     */\n    setConfig: exports.setConfig,\n    /**\n     * Disables data collection\n     */\n    disableDataCollection: exports.disableDataCollection,\n    /**\n     * Enables data collection\n     */\n    enableDataCollection: exports.enableDataCollection,\n    addEvent: exports.addEvent,\n    /**\n     * Map an incoming stream with a human-readable name\n     * @param id The identifier of the stream (streamIdentifier attribute)\n     * @param name The human-readable name\n     * @deprecated\n     */\n    mapStream: exports.mapStream,\n    /**\n     * Map an incoming track with a human-readable name\n     * @param id The identifier of the track (trackIdentifier attribute)\n     * @param name The human-readable name\n     */\n    mapTrack: exports.mapTrack,\n    connect: exports.connect,\n    disconnect: exports.disconnect,\n    addStatsListener: exports.addStatsListener,\n    persistentEnd: exports.persistentEnd,\n    persistentStart: exports.persistentStart,\n    addStateListener: exports.addStateListener,\n    qualityrtc: {\n        run: sdk_1.qrtcRun,\n        stop: sdk_1.qrtcStop,\n    },\n};\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.qrtcStop = exports.qrtcRun = exports.persistentStart = exports.persistentEnd = exports.registerStateListener = exports.registerOnStatsListener = exports.disconnect = exports.connect = exports.mapTrack = exports.mapStream = exports.addEvent = exports.enableDataCollection = exports.disableDataCollection = exports.addKeys = exports.setUserRating = exports.setConfig = exports.initSDK = exports.sdkLogWithoutTrace = exports.sdkLog = void 0;\nvar watchrtcsocket_1 = require(\"./watchrtcsocket\");\nvar watchrtchttp_1 = require(\"./watchrtchttp\");\nvar utils_1 = require(\"./utils\");\nvar version_1 = require(\"./version\");\nvar isBrowser = typeof window !== \"undefined\";\nvar globalContext = isBrowser ? window : global;\nvar standardGetstats = true;\nvar isFirefox = isBrowser ? !!globalContext.mozRTCPeerConnection : false;\nvar isSafari = isBrowser\n    ? !isFirefox && globalContext.RTCPeerConnection && !globalContext.navigator.webkitGetUserMedia\n    : false;\n// Data structure for RTCPeerConnection related stuff we need\nvar openChannels = {};\nvar peerconnectioncounter = 0;\nvar connectionData = {};\nvar watchrtcIdentifiers = {\n    rtcRoomId: undefined,\n    rtcPeerId: undefined,\n    projectId: undefined,\n};\nvar watchrtcConfig = null;\nvar http = null;\nvar socket = null;\nvar trace;\nvar lastConnectionOpen = 0; // so we know when was the last active connection seen\nvar getStatsInterval;\nvar tryingToConnectSocket = false;\nvar hardwareInfo;\nvar currentAudioOutputId;\nvar authFailed = false;\nvar reconnectTimerId;\nvar lostConnectionTs = 0;\nvar isManualConnect = false;\nvar isManualDisconnect = false;\nvar getStatsCallback = null;\nvar stateListener = null;\nvar freshConnection = true;\nexports.sdkLog = (0, utils_1.getSdkLogger)(function () { return watchrtcConfig === null || watchrtcConfig === void 0 ? void 0 : watchrtcConfig.logLevel; });\nexports.sdkLogWithoutTrace = (0, utils_1.getSdkLogWithoutTrace)(function () { return watchrtcConfig === null || watchrtcConfig === void 0 ? void 0 : watchrtcConfig.logLevel; });\nvar debugTrack = function (track) {\n    if (track) {\n        return \"\".concat(track.kind, \":\").concat(track.id, \" state:\").concat(track.readyState, \" muted:\").concat(track.muted, \" label:\").concat(track.label);\n    }\n    return \"no track\";\n};\n// Data structure for storing and applying mapTrack\nvar mappedTrack = {};\nvar maybeOpenWebsocketConnection = function (_a) {\n    var _b;\n    var _c = _a.forceRecreate, forceRecreate = _c === void 0 ? false : _c, _d = _a.reconnecting, reconnecting = _d === void 0 ? false : _d, _e = _a.pcId, pcId = _e === void 0 ? \"PC_unknown\" : _e, _f = _a.nailUp, nailUp = _f === void 0 ? false : _f;\n    if (socket === null || socket === void 0 ? void 0 : socket.isDisabledDataCollection()) {\n        (0, exports.sdkLog)(\"debug\", \"maybeOpenWebsocketConnection. disabledDataCollection, ignore [\".concat(pcId, \"]\"));\n        return;\n    }\n    (0, exports.sdkLog)(\"debug\", \"maybeOpenWebsocketConnection called: [\".concat(pcId, \"]\"), {\n        forceRecreate: forceRecreate,\n        reconnecting: reconnecting,\n        isManualDisconnect: isManualDisconnect,\n        isManualConnect: isManualConnect,\n        tryingToConnectSocket: tryingToConnectSocket,\n        watchrtcConfig: JSON.stringify(watchrtcConfig),\n        disabled: socket === null || socket === void 0 ? void 0 : socket.isDisabledDataCollection(),\n        openChannels: JSON.stringify(openChannels),\n    });\n    isManualDisconnect = false;\n    var opened = ((_b = socket === null || socket === void 0 ? void 0 : socket.connection) === null || _b === void 0 ? void 0 : _b.readyState) === globalContext.WebSocket.OPEN;\n    if (opened) {\n        var roomIdOrPeerIdChanged = (0, utils_1.isRoomIdOrPeerIdChanged)(watchrtcIdentifiers, watchrtcConfig);\n        if (roomIdOrPeerIdChanged && forceRecreate) {\n            (0, exports.sdkLog)(\"debug\", \"maybeOpenWebsocketConnection. Closing WS connection. [\".concat(pcId, \"]\"));\n            socket === null || socket === void 0 ? void 0 : socket.close();\n        }\n        else {\n            (0, exports.sdkLog)(\"debug\", \"maybeOpenWebsocketConnection. WS connection already opened [\".concat(pcId, \"]\"));\n            return;\n        }\n    }\n    var connectionCount = (0, utils_1.countOfValidConnections)(openChannels);\n    if (!isManualConnect && connectionCount < 1 && !tryingToConnectSocket) {\n        (0, exports.sdkLog)(\"debug\", \"maybeOpenWebsocketConnection. WS connection not opened - previous connect call not finished or missing peer connection [\".concat(pcId, \"]\"), {\n            openChannels: JSON.stringify(openChannels),\n            connectionCount: connectionCount,\n            tryingToConnectSocket: tryingToConnectSocket,\n            isManualConnect: isManualConnect,\n        });\n        return;\n    }\n    var canConnect = (0, utils_1.validateConfig)(watchrtcConfig);\n    var id = Object.keys(openChannels)[connectionCount - 1]; // not very critical, but for consistency with trace\n    if (!canConnect) {\n        tryingToConnectSocket = false;\n        (0, exports.sdkLog)(\"debug\", \"maybeOpenWebsocketConnection. WS connection not opened - invalid config [\".concat(pcId, \"]\"), {\n            watchrtcConfig: watchrtcConfig,\n        });\n        return;\n    }\n    if (watchrtcConfig.keys) {\n        Object.keys(watchrtcConfig.keys || {}).forEach(function (k) {\n            if (typeof watchrtcConfig.keys[k] === \"string\") {\n                watchrtcConfig.keys[k] = [watchrtcConfig.keys[k]];\n            }\n        });\n    }\n    var useToken = !!watchrtcConfig.rtcToken;\n    var wsConnectionData = (0, utils_1.getConnectionData)(\"ws\", useToken ? watchrtcConfig.rtcToken : watchrtcConfig.rtcApiKey, watchrtcConfig.proxyUrl);\n    if (!socket) {\n        (0, exports.sdkLog)(\"debug\", \"maybeOpenWebsocketConnection. WS socket wasn't initialized [\".concat(pcId, \"]\"));\n    }\n    tryingToConnectSocket = true;\n    lastConnectionOpen = Date.now();\n    (0, exports.sdkLog)(\"debug\", \"maybeOpenWebsocketConnection. Opening websocket connection [\".concat(pcId, \"]\"));\n    startStatsCollection(nailUp);\n    var wsOpeningTimestamp = Date.now();\n    socket === null || socket === void 0 ? void 0 : socket.connect({\n        url: \"\".concat(wsConnectionData.url, \"?\").concat(useToken ? \"token\" : \"apiKey\", \"=\").concat(wsConnectionData.key, \"&timestamp=\").concat(Date.now()),\n        options: { cleanOldTraces: freshConnection },\n        onData: function (data) {\n            var _a;\n            for (var _i = 0, _b = Object.entries(data); _i < _b.length; _i++) {\n                var _c = _b[_i], key = _c[0], value = _c[1];\n                connectionData[key] = value;\n            }\n            watchrtcIdentifiers.projectId = data.projectId;\n            tryingToConnectSocket = false;\n            watchrtcConfig.allowBrowserLogCollection = Boolean(data.collectConsoleLogEnabled);\n            if (!watchrtcConfig.allowBrowserLogCollection) {\n                (0, utils_1.restoreOriginalConsoleMethods)();\n                // clean up collected logs from socket buffer\n                if (socket === null || socket === void 0 ? void 0 : socket.buffer) {\n                    socket.buffer = socket.buffer.filter(function (data) { return data[0] !== \"log\"; });\n                }\n            }\n            else {\n                if (!((_a = watchrtcConfig === null || watchrtcConfig === void 0 ? void 0 : watchrtcConfig.console) === null || _a === void 0 ? void 0 : _a.override) && data.collectConsoleLogLevel) {\n                    (0, utils_1.setConsoleLevel)(data.collectConsoleLogLevel, trace);\n                }\n            }\n            (0, exports.sdkLog)(\"info\", \"Connection established. watchRTCConnectionId: \".concat(data.connectionId, \" sdkVersion:\").concat(version_1.default, \" [\").concat(pcId, \"]\"));\n            if (data.interval !== watchrtcConfig.collectionInterval) {\n                var oldInterval = watchrtcConfig.collectionInterval;\n                watchrtcConfig.collectionInterval = data.interval;\n                resetConnectionState();\n                startStatsCollection();\n                (0, exports.sdkLog)(\"error\", \"Collection interval mismatch - connection state reset\");\n                trace({ data: [\"collectionIntervalChange\", null, { oldInterval: oldInterval }] });\n            }\n            trace({ data: [\"watchrtc\", id, __assign(__assign(__assign({}, watchrtcConfig), data), { sdkVersion: version_1.default })] });\n            if (reconnecting) {\n                (0, exports.sdkLog)(\"debug\", \"websocket onData reconnecting\");\n                trace({ data: [\"reconnect\", null, null] });\n            }\n            if (hardwareInfo) {\n                trace({ data: [\"hardware\", null, hardwareInfo] });\n            }\n            trace({ data: [\"sessionId\", null, globalContext.watchRTCSessionId] });\n        },\n        onError: function (_, type) {\n            (0, exports.sdkLog)(\"debug\", \"websocket onError \".concat(type));\n            if (type === \"auth\") {\n                authFailed = true;\n            }\n            tryingToConnectSocket = false;\n            lastConnectionOpen = 0;\n        },\n        onOpen: function () {\n            freshConnection = false;\n            if (stateListener) {\n                stateListener({ connectionStatus: \"connected\" });\n            }\n            if (reconnecting) {\n                var reconnectDuration = Date.now() - lostConnectionTs;\n                trace({ data: [\"reconnectDuration\", null, reconnectDuration] });\n            }\n            authFailed = false;\n            if (reconnectTimerId) {\n                clearInterval(reconnectTimerId);\n                reconnectTimerId = undefined;\n            }\n            var delta = Date.now() - wsOpeningTimestamp;\n            (0, exports.sdkLog)(\"debug\", \"maybeOpenWebsocketConnection. Connection opened. Opening time - \".concat(delta, \" ms [\").concat(pcId, \"]\"));\n        },\n        onClose: function (closeEvent) {\n            if (stateListener) {\n                stateListener({ connectionStatus: \"disconnected\" });\n            }\n            var code = closeEvent.code, reason = closeEvent.reason, wasClean = closeEvent.wasClean;\n            (0, exports.sdkLog)(\"debug\", \"close event. authFailed: \".concat(authFailed, \" code: \").concat(code, \" reason: \").concat(reason, \" wasClean: \").concat(wasClean, \" reconnectTimerId: \").concat(reconnectTimerId), { authFailed: authFailed, code: code, reason: reason, wasClean: wasClean, reconnectTimerId: reconnectTimerId });\n            if (authFailed) {\n                (0, exports.sdkLog)(\"debug\", \"websocket authFailed\");\n                if (reconnectTimerId) {\n                    clearInterval(reconnectTimerId);\n                }\n            }\n            else if (!reconnectTimerId && !isManualDisconnect) {\n                (0, exports.sdkLog)(\"debug\", \"websocket onClose reconnecting\");\n                lostConnectionTs = Date.now();\n                maybeOpenWebsocketConnection({ reconnecting: true, pcId: pcId });\n                reconnectTimerId = setInterval(function () {\n                    maybeOpenWebsocketConnection({ reconnecting: true, pcId: pcId });\n                }, 30 * 1000);\n            }\n        },\n    });\n};\nvar startStatsCollection = function (nailUp) {\n    if (nailUp === void 0) { nailUp = false; }\n    globalContext.clearInterval(getStatsInterval);\n    if (nailUp) {\n        (0, exports.sdkLog)(\"debug\", \"startStatsCollection - nail up\");\n        var _loop_1 = function (pcInfo) {\n            if (pcInfo.pc.signalingState !== \"closed\") {\n                pcInfo.pc.getStats(null).then(function (res) {\n                    var now = {};\n                    if (standardGetstats || isFirefox || isSafari) {\n                        if (isFirefox) {\n                            res.forEach(function (report) {\n                                now[\"\".concat(report.type, \"_\").concat(report.id)] = report;\n                            });\n                        }\n                        else {\n                            now = (0, utils_1.map2obj)(res);\n                        }\n                    }\n                    else {\n                        now = (0, utils_1.mangleChromeStats)(pcInfo.pc, res);\n                    }\n                    pcInfo.nailUpRef = JSON.parse(JSON.stringify(now));\n                });\n            }\n        };\n        // collect the new reference reports to use\n        for (var _i = 0, _a = Object.values(openChannels); _i < _a.length; _i++) {\n            var pcInfo = _a[_i];\n            _loop_1(pcInfo);\n        }\n    }\n    getStatsInterval = globalContext.setInterval(function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var stats, _i, _a, pcInfo, _b, peer, streams;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        if (!(!isManualConnect && (0, utils_1.countOfValidConnections)(openChannels) === 0)) return [3 /*break*/, 1];\n                        if (watchrtcConfig === null || watchrtcConfig === void 0 ? void 0 : watchrtcConfig.logGetStats) {\n                            (0, exports.sdkLog)(\"debug\", \"getStatsInterval. No valid connections at this time\");\n                        }\n                        // if we don't have any connection for 20 sec we can close the socket\n                        if (lastConnectionOpen && lastConnectionOpen + 20000 < Date.now()) {\n                            freshConnection = true;\n                            globalContext.clearInterval(getStatsInterval);\n                            socket === null || socket === void 0 ? void 0 : socket.close();\n                            (0, exports.sdkLog)(\"info\", \"Last connection closed. watchRTCConnectionId: \".concat(connectionData === null || connectionData === void 0 ? void 0 : connectionData.connectionId, \" sdkVersion: \").concat(version_1.default));\n                        }\n                        return [3 /*break*/, 6];\n                    case 1:\n                        lastConnectionOpen = Date.now();\n                        stats = { connections: {}, streams: {} };\n                        _i = 0, _a = Object.values(openChannels);\n                        _c.label = 2;\n                    case 2:\n                        if (!(_i < _a.length)) return [3 /*break*/, 5];\n                        pcInfo = _a[_i];\n                        if (watchrtcConfig === null || watchrtcConfig === void 0 ? void 0 : watchrtcConfig.logGetStats) {\n                            (0, exports.sdkLogWithoutTrace)(\"debug\", \"getStatsInterval. \".concat(pcInfo.id, \" signalingState: \").concat(pcInfo.pc.signalingState));\n                        }\n                        if (!(pcInfo.pc.signalingState !== \"closed\")) return [3 /*break*/, 4];\n                        return [4 /*yield*/, getStats(pcInfo)];\n                    case 3:\n                        _b = _c.sent(), peer = _b.peer, streams = _b.streams;\n                        stats.connections = __assign(__assign({}, stats.connections), peer);\n                        stats.streams = __assign(__assign({}, stats.streams), streams);\n                        _c.label = 4;\n                    case 4:\n                        _i++;\n                        return [3 /*break*/, 2];\n                    case 5:\n                        if (getStatsCallback) {\n                            getStatsCallback(stats);\n                        }\n                        _c.label = 6;\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    }, watchrtcConfig.collectionInterval);\n};\nvar getStats = function (pcInfo) {\n    return new Promise(function (resolve, __reject) {\n        if (pcInfo) {\n            var id_1 = pcInfo.id, pc_1 = pcInfo.pc, prev_1 = pcInfo.prev, nailUpRef_1 = pcInfo.nailUpRef;\n            if (standardGetstats || isFirefox || isSafari) {\n                pc_1.getStats(null).then(function (res) {\n                    if (watchrtcConfig === null || watchrtcConfig === void 0 ? void 0 : watchrtcConfig.logGetStats) {\n                        (0, exports.sdkLogWithoutTrace)(\"debug\", \"getStats res\", { res: res });\n                    }\n                    var now = {};\n                    if (isFirefox) {\n                        res.forEach(function (report) {\n                            now[\"\".concat(report.type, \"_\").concat(report.id)] = report;\n                        });\n                    }\n                    else {\n                        now = (0, utils_1.map2obj)(res);\n                    }\n                    var base = JSON.parse(JSON.stringify(now)); // our new prev\n                    now = (0, utils_1.applyPatchForRTT)(prev_1, now);\n                    if (nailUpRef_1) {\n                        now = (0, utils_1.subtractNailUpReferenceStats)(nailUpRef_1, now);\n                    }\n                    var data = (0, utils_1.deltaCompression)(prev_1, now);\n                    if (watchrtcConfig === null || watchrtcConfig === void 0 ? void 0 : watchrtcConfig.logGetStats) {\n                        (0, exports.sdkLogWithoutTrace)(\"debug\", \"getStats(null) [\".concat(id_1, \"]\"), { data: data });\n                    }\n                    if ((data === null || data === void 0 ? void 0 : data.timestamp) !== null && (data === null || data === void 0 ? void 0 : data.timestamp) !== -Infinity) {\n                        trace({ data: [\"getstats\", id_1, data] });\n                    }\n                    pcInfo.prev = base;\n                    resolve((0, utils_1.exposeApplicationStatsForPC)(id_1, prev_1, now, mappedTrack));\n                });\n            }\n            else {\n                pc_1.getStats(function (res) {\n                    var now = (0, utils_1.mangleChromeStats)(pc_1, res);\n                    var base = JSON.parse(JSON.stringify(now)); // our new prev\n                    if (nailUpRef_1) {\n                        now = (0, utils_1.subtractNailUpReferenceStats)(nailUpRef_1, now);\n                    }\n                    var data = (0, utils_1.deltaCompression)(prev_1, now);\n                    if (watchrtcConfig === null || watchrtcConfig === void 0 ? void 0 : watchrtcConfig.logGetStats) {\n                        (0, exports.sdkLogWithoutTrace)(\"debug\", \"getStats() [\".concat(id_1, \"]\"), { data: data });\n                    }\n                    if ((data === null || data === void 0 ? void 0 : data.timestamp) !== null && (data === null || data === void 0 ? void 0 : data.timestamp) !== -Infinity) {\n                        trace({ data: [\"getstats\", id_1, data] });\n                    }\n                    pcInfo.prev = base;\n                    resolve((0, utils_1.exposeApplicationStatsForPC)(id_1, prev_1, now, mappedTrack));\n                });\n            }\n        }\n    });\n};\nvar getHardware = function () {\n    setTimeout(function () {\n        // if get hardware take more than 50 ms then do not save it\n        var getHardwareStartTime = Date.now();\n        (0, utils_1.getHardwareInfo)()\n            .then(function (hwInfo) {\n            var getHardwareTime = Date.now() - getHardwareStartTime;\n            if (getHardwareTime <= 50000) {\n                hardwareInfo = hwInfo;\n                (0, exports.sdkLog)(\"debug\", \"getHardware\", { hardwareInfo: hardwareInfo });\n            }\n            else {\n                (0, exports.sdkLog)(\"debug\", \"getHardware failure: getHardwareTime: \".concat(getHardwareTime), { hardwareInfo: hardwareInfo });\n            }\n        })\n            .catch(function (err) {\n            (0, exports.sdkLog)(\"error\", \"Error. Get hardware info: \".concat(err.message));\n        });\n    }, 0);\n};\n/**\n * Initialize SDK.\n * @param watchrtc\n * @param prefixesToWrap\n * @param services\n */\nvar initSDK = function (watchrtc, prefixesToWrap, services) {\n    var _a, _b;\n    var initialized = globalContext.watchRTCInitialized;\n    if (initialized) {\n        (0, exports.sdkLogWithoutTrace)(\"info\", \"init. watchRTC SDK already has been initialized\");\n        return;\n    }\n    if (!globalContext.RTCPeerConnection) {\n        (0, exports.sdkLogWithoutTrace)(\"info\", \"init. RTCPeerConnection does not exist in global globalContext\");\n        return;\n    }\n    var isRTCPeerConnectionNative = globalContext.RTCPeerConnection.toString().indexOf(\"[native code]\") !== -1;\n    if (!isRTCPeerConnectionNative && isBrowser) {\n        (0, exports.sdkLog)(\"info\", \"init. RTCPeerConnection object has been already overridden\");\n    }\n    globalContext.watchRTCInitialized = true;\n    globalContext.watchRTCSessionId = (0, utils_1.generateID)();\n    getHardware();\n    if (isBrowser) {\n        var urlParams = new URLSearchParams(location.search);\n        if (urlParams.has(\"watchrtc\") && urlParams.get(\"watchrtc\") === \"debug\") {\n            watchrtc.logLevel = \"debug\";\n        }\n    }\n    socket = (services === null || services === void 0 ? void 0 : services.socketService) || new watchrtcsocket_1.default();\n    http = (services === null || services === void 0 ? void 0 : services.httpService) || new watchrtchttp_1.default();\n    watchrtc.collectionInterval = (_a = watchrtc.collectionInterval) !== null && _a !== void 0 ? _a : 8000;\n    watchrtc.logLevel = watchrtc.logLevel || \"debug\";\n    watchrtcConfig = watchrtc;\n    watchrtcIdentifiers.rtcRoomId = watchrtcConfig.rtcRoomId;\n    watchrtcIdentifiers.rtcPeerId = watchrtcConfig.rtcPeerId;\n    trace = socket.trace;\n    if (watchrtcConfig.wsUrl) {\n        (0, exports.sdkLog)(\"info\", \"\\\"wsUrl\\\" config property is deprecated. Use \\\"proxyUrl\\\" instead of it\");\n    }\n    if (watchrtcConfig.proxyUrl) {\n        (0, exports.sdkLog)(\"info\", \"\\\"proxyUrl\\\" is used\");\n    }\n    if (watchrtcConfig === null || watchrtcConfig === void 0 ? void 0 : watchrtcConfig.debug) {\n        (0, exports.sdkLog)(\"info\", \"\\\"debug\\\" config property is deprecated. Use \\\"logLevel\\\" instead of it\");\n    }\n    prefixesToWrap.forEach(function (prefix) {\n        if (!globalContext[prefix + \"RTCPeerConnection\"]) {\n            (0, exports.sdkLog)(\"debug\", \"RTCPeerConnection prefixes override failed\");\n            return;\n        }\n        var origPeerConnection = globalContext[prefix + \"RTCPeerConnection\"];\n        var peerconnection = function (config, constraints) {\n            if (config === null || config === void 0 ? void 0 : config.watchrtc) {\n                watchrtcConfig = __assign(__assign({}, watchrtcConfig), config.watchrtc);\n                watchrtcIdentifiers.rtcRoomId = watchrtcConfig.rtcRoomId;\n                watchrtcIdentifiers.rtcPeerId = watchrtcConfig.rtcPeerId;\n            }\n            var pc = new origPeerConnection(config, constraints);\n            var id = \"PC_\" + peerconnectioncounter++;\n            pc.__rtcStatsId = id;\n            openChannels[id] = {\n                id: id,\n                pc: pc,\n                validConnection: false,\n            };\n            if (!config) {\n                config = { nullConfig: true };\n            }\n            config = JSON.parse(JSON.stringify(config)); // deepcopy\n            // don't log credentials\n            ((config && config.iceServers) || []).forEach(function (server) {\n                delete server.credential;\n            });\n            if (config === null || config === void 0 ? void 0 : config.watchrtc) {\n                delete config.watchrtc;\n            }\n            if (isFirefox) {\n                config.browserType = \"moz\";\n            }\n            else {\n                config.browserType = \"webkit\";\n            }\n            (0, exports.sdkLog)(\"debug\", \"new RTCPeerConnection called.\", {\n                config: JSON.stringify(config),\n                constraints: constraints,\n            });\n            trace({ data: [\"create\", id, config] });\n            // TODO: do we want to log constraints here? They are chrome-proprietary.\n            // http://stackoverflow.com/questions/31003928/what-do-each-of-these-experimental-goog-rtcpeerconnectionconstraints-do\n            if (constraints) {\n                trace({ data: [\"constraints\", id, constraints] });\n            }\n            pc.addEventListener(\"icecandidate\", function (e) {\n                (0, exports.sdkLog)(\"debug\", \"onicecandidate id:[\".concat(id, \"], candidate:[\").concat(e.candidate, \"]\"));\n                trace({ data: [\"onicecandidate\", id, e.candidate] });\n            });\n            pc.addEventListener(\"icecandidateerror\", function (e) {\n                (0, exports.sdkLog)(\"debug\", \"onicecandidateerror id:[\".concat(id, \"], error:[\").concat(e.errorCode, \":\").concat(e.errorText, \"]\"));\n                trace({ data: [\"onicecandidateerror\", id, \"\".concat(e.errorCode, \":\").concat(e.errorText)] });\n            });\n            pc.addEventListener(\"addstream\", function (e) {\n                trace({\n                    data: [\n                        \"onaddstream\",\n                        id,\n                        e.stream.id +\n                            \" \" +\n                            e.stream.getTracks().map(function (t) {\n                                return t.kind + \":\" + t.id;\n                            }),\n                    ],\n                });\n            });\n            pc.addEventListener(\"track\", function (e) {\n                trace({\n                    data: [\n                        \"ontrack\",\n                        id,\n                        debugTrack(e.track) +\n                            \" \" +\n                            e.streams.map(function (stream) {\n                                return \"stream:\" + stream.id;\n                            }),\n                    ],\n                });\n                // https://redmine.testrtc.com/issues/7166\n                e.track.addEventListener(\"ended\", function () {\n                    trace({\n                        data: [\n                            \"ontrack\",\n                            id,\n                            debugTrack(e.track) +\n                                \" \" +\n                                e.streams.map(function (stream) {\n                                    return \"stream:\" + stream.id;\n                                }),\n                        ],\n                    });\n                });\n                // Disable mute/umute tracks events: https://redmine.testrtc.com/issues/9240\n                // e.track.addEventListener(\"mute\", () => {\n                //   trace({\n                //     data: [\n                //       \"ontrack\",\n                //       id,\n                //       debugTrack(e.track) +\n                //         \" \" +\n                //         e.streams.map((stream: any) => {\n                //           return \"stream:\" + stream.id;\n                //         }),\n                //     ],\n                //   });\n                // });\n                //\n                // e.track.addEventListener(\"unmute\", () => {\n                //   trace({\n                //     data: [\n                //       \"ontrack\",\n                //       id,\n                //       debugTrack(e.track) +\n                //         \" \" +\n                //         e.streams.map((stream: any) => {\n                //           return \"stream:\" + stream.id;\n                //         }),\n                //     ],\n                //   });\n                // });\n            });\n            pc.addEventListener(\"removestream\", function (e) {\n                trace({\n                    data: [\n                        \"onremovestream\",\n                        id,\n                        e.stream.id +\n                            \" \" +\n                            e.stream.getTracks().map(function (t) {\n                                return t.kind + \":\" + t.id;\n                            }),\n                    ],\n                });\n            });\n            pc.addEventListener(\"signalingstatechange\", function () {\n                if (openChannels[id] && !openChannels[id].validConnection) {\n                    openChannels[id].validConnection = true;\n                    setTimeout(function () {\n                        (0, exports.sdkLog)(\"debug\", \"signalingstatechage. forceRecreate websocket connection[\".concat(id, \"]\"), {\n                            openChannels: JSON.stringify(openChannels),\n                        });\n                        maybeOpenWebsocketConnection({ forceRecreate: true, pcId: id });\n                    }, 5000);\n                }\n                else {\n                    (0, exports.sdkLog)(\"debug\", \"signalingstatechage. WS connection opening not triggered - peer connection not in channels or was already opened [\".concat(id, \"]\"), { openChannels: JSON.stringify(openChannels) });\n                }\n                trace({ data: [\"onsignalingstatechange\", id, pc.signalingState] });\n            });\n            pc.addEventListener(\"iceconnectionstatechange\", function () {\n                (0, exports.sdkLog)(\"debug\", \"oniceconnectionstatechange id:[\".concat(id, \"], state:[\").concat(pc.iceConnectionState, \"]\"));\n                trace({ data: [\"oniceconnectionstatechange\", id, pc.iceConnectionState] });\n            });\n            pc.addEventListener(\"icegatheringstatechange\", function () {\n                (0, exports.sdkLog)(\"debug\", \"onicegatheringstatechange id:[\".concat(id, \"], state:[\").concat(pc.iceGatheringState, \"]\"));\n                trace({ data: [\"onicegatheringstatechange\", id, pc.iceGatheringState] });\n            });\n            pc.addEventListener(\"connectionstatechange\", function () {\n                (0, exports.sdkLog)(\"debug\", \"onconnectionstatechange id:[\".concat(id, \"], state:[\").concat(pc.connectionState, \"]\"));\n                trace({ data: [\"onconnectionstatechange\", id, pc.connectionState] });\n            });\n            pc.addEventListener(\"negotiationneeded\", function () {\n                (0, exports.sdkLog)(\"debug\", \"onnegotiationneeded id:[\".concat(id, \"]\"));\n                trace({ data: [\"onnegotiationneeded\", id, undefined] });\n            });\n            pc.addEventListener(\"datachannel\", function (event) {\n                (0, exports.sdkLog)(\"debug\", \"ondatachannel id:[\".concat(id, \"], data:[\").concat(event.channel.id, \" \").concat(event.channel.label, \"]\"));\n                trace({ data: [\"ondatachannel\", id, [event.channel.id, event.channel.label]] });\n            });\n            // https://redmine.testrtc.com/issues/6529\n            // pc.addEventListener(\"iceconnectionstatechange\", () => {\n            //   if (pc.iceConnectionState === \"connected\") {\n            //     getStats(openChannels[id]);\n            //   }\n            // });\n            (0, exports.sdkLog)(\"debug\", \"RTCPeerConnection override complete [\".concat(id, \"].\"));\n            return pc;\n        };\n        if (\"HTMLMediaElement\" in globalContext && \"setSinkId\" in HTMLMediaElement.prototype) {\n            var nativeMethod_1 = HTMLMediaElement.prototype.setSinkId;\n            HTMLMediaElement.prototype.setSinkId = function () {\n                var selectedDeviceId = arguments[0];\n                navigator.mediaDevices\n                    .enumerateDevices()\n                    .then(function (devices) {\n                    var currentDevice = devices.find(function (_a) {\n                        var deviceId = _a.deviceId;\n                        return deviceId === selectedDeviceId;\n                    });\n                    if (currentDevice && currentDevice.deviceId !== currentAudioOutputId) {\n                        trace({ data: [\"audioOutputChange\", null, currentDevice.label] });\n                    }\n                    currentAudioOutputId = selectedDeviceId;\n                })\n                    .catch(function (error) {\n                    (0, exports.sdkLog)(\"debug\", error.message, { error: error });\n                });\n                return nativeMethod_1.apply(this, arguments);\n            };\n        }\n        // wrap RTCRtpTransceiver.setCodecPreferences\n        if (\"RTCRtpTransceiver\" in globalContext && \"setCodecPreferences\" in globalContext.RTCRtpTransceiver.prototype) {\n            var origRTCRtpTransceiver = globalContext.RTCRtpTransceiver;\n            var nativeMethod_2 = origRTCRtpTransceiver.prototype.setCodecPreferences;\n            origRTCRtpTransceiver.prototype.setCodecPreferences = function () {\n                trace({ data: [\"setCodecPreferences\", this.__pcId, arguments] });\n                return nativeMethod_2.apply(this, arguments);\n            };\n        }\n        // wrap RTCRtpSender.setParameters\n        if (\"RTCRtpSender\" in globalContext && \"setParameters\" in globalContext.RTCRtpSender.prototype) {\n            var origRTCRtpSender = globalContext.RTCRtpSender;\n            var nativeMethod_3 = origRTCRtpSender.prototype.setParameters;\n            origRTCRtpSender.prototype.setParameters = function () {\n                trace({ data: [\"setParameters\", this.__pcId, arguments] });\n                return nativeMethod_3.apply(this, arguments);\n            };\n        }\n        // wrap RTCRtpSender.replaceTrack\n        if (\"RTCRtpSender\" in globalContext && \"replaceTrack\" in globalContext.RTCRtpSender.prototype) {\n            var origRTCRtpSender = globalContext.RTCRtpSender;\n            var nativeMethod_4 = origRTCRtpSender.prototype.replaceTrack;\n            origRTCRtpSender.prototype.replaceTrack = function () {\n                var track = arguments[0];\n                if (track) {\n                    trace({\n                        data: [\"replaceTrack\", this.__pcId, debugTrack(track)],\n                    });\n                    // Check if the label is not the same as previous one - to detect a device change\n                    var originalTrack = this.track;\n                    if (originalTrack && originalTrack.label !== track.label) {\n                        trace({ data: [\"\".concat(track.kind, \"InputChange\"), this.__pcId, track.label] });\n                    }\n                }\n                else {\n                    trace({ data: [\"replaceTrack\", this.__pcId, null] });\n                }\n                return nativeMethod_4.apply(this, arguments);\n            };\n        }\n        // adding pc id to sender for above logic\n        [\"addTransceiver\"].forEach(function (method) {\n            var nativeMethod = origPeerConnection.prototype[method];\n            if (nativeMethod) {\n                origPeerConnection.prototype[method] = function () {\n                    var _this_1 = this;\n                    var streams = \"\";\n                    if (arguments[1] && arguments[1].streams) {\n                        streams = arguments[1].streams.map(function (s) { return \"stream:\" + s.id; }).join(\";\");\n                    }\n                    var trackOrKind = typeof arguments[0] === \"string\"\n                        ? arguments[0]\n                        : arguments[0].kind + \":\" + arguments[0].id + \" \" + arguments[0].label;\n                    var init = arguments[1] ? __assign(__assign({}, arguments[1]), { streams: streams }) : null;\n                    trace({ data: [method, this.__rtcStatsId, [trackOrKind, init]] });\n                    var transceiver = nativeMethod.apply(this, arguments);\n                    transceiver.sender.__pcId = this.__rtcStatsId;\n                    // https://redmine.testrtc.com/issues/7166\n                    var track = arguments[0];\n                    if (typeof track === \"object\") {\n                        trace({\n                            data: [\"onlocaltrack\", this.__rtcStatsId, debugTrack(track)],\n                        });\n                        track.addEventListener(\"ended\", function () {\n                            trace({\n                                data: [\"onlocaltrack\", _this_1.__rtcStatsId, debugTrack(track)],\n                            });\n                        });\n                        // Disable mute/umute tracks events: https://redmine.testrtc.com/issues/9240\n                        // track.addEventListener(\"mute\", () => {\n                        //   trace({\n                        //     data: [\"onlocaltrack\", this.__rtcStatsId, debugTrack(track)],\n                        //   });\n                        // });\n                        //\n                        // track.addEventListener(\"unmute\", () => {\n                        //   trace({\n                        //     data: [\"onlocaltrack\", this.__rtcStatsId, debugTrack(track)],\n                        //   });\n                        // });\n                    }\n                    return transceiver;\n                };\n            }\n        });\n        [\"createDataChannel\", \"restartIce\"].forEach(function (method) {\n            var nativeMethod = origPeerConnection.prototype[method];\n            if (nativeMethod) {\n                origPeerConnection.prototype[method] = function () {\n                    trace({ data: [method, this.__rtcStatsId, arguments] });\n                    return nativeMethod.apply(this, arguments);\n                };\n            }\n        });\n        [\"close\"].forEach(function (method) {\n            var nativeMethod = origPeerConnection.prototype[method];\n            if (nativeMethod) {\n                origPeerConnection.prototype[method] = function () {\n                    trace({ data: [method, this.__rtcStatsId, arguments] });\n                    delete openChannels[this.__rtcStatsId];\n                    isManualDisconnect = true;\n                    (0, exports.sdkLog)(\"debug\", \"on RTCPeerConnection(\".concat(this.__rtcStatsId, \") close\"));\n                    return nativeMethod.apply(this, arguments);\n                };\n            }\n        });\n        [\"addStream\", \"removeStream\"].forEach(function (method) {\n            var nativeMethod = origPeerConnection.prototype[method];\n            if (nativeMethod) {\n                origPeerConnection.prototype[method] = function () {\n                    var _this_1 = this;\n                    var stream = arguments[0];\n                    var streamInfo = stream\n                        .getTracks()\n                        .map(function (t) {\n                        return t.kind + \":\" + t.id;\n                    })\n                        .join(\",\");\n                    trace({ data: [method, this.__rtcStatsId, stream.id + \" \" + streamInfo] });\n                    // https://redmine.testrtc.com/issues/7166\n                    if (method === \"addStream\") {\n                        stream.getTracks().map(function (track) {\n                            trace({\n                                data: [\"onlocaltrack\", _this_1.__rtcStatsId, debugTrack(track) + \" \" + stream.id],\n                            });\n                            track.addEventListener(\"ended\", function () {\n                                trace({\n                                    data: [\"onlocaltrack\", _this_1.__rtcStatsId, debugTrack(track) + \" \" + stream.id],\n                                });\n                            });\n                            // Disable mute/umute tracks events: https://redmine.testrtc.com/issues/9240\n                            // track.addEventListener(\"mute\", () => {\n                            //   trace({\n                            //     data: [\"onlocaltrack\", this.__rtcStatsId, debugTrack(track) + \" \" + stream.id],\n                            //   });\n                            // });\n                            //\n                            // track.addEventListener(\"unmute\", () => {\n                            //   trace({\n                            //     data: [\"onlocaltrack\", this.__rtcStatsId, debugTrack(track) + \" \" + stream.id],\n                            //   });\n                            // });\n                        });\n                    }\n                    return nativeMethod.apply(this, arguments);\n                };\n            }\n        });\n        [\"addTrack\"].forEach(function (method) {\n            var nativeMethod = origPeerConnection.prototype[method];\n            if (nativeMethod) {\n                origPeerConnection.prototype[method] = function () {\n                    var _this_1 = this;\n                    var track = arguments[0];\n                    var streams = [].slice.call(arguments, 1);\n                    trace({\n                        data: [\n                            method,\n                            this.__rtcStatsId,\n                            debugTrack(track) +\n                                \" \" +\n                                (streams\n                                    .map(function (s) {\n                                    return \"stream:\" + s.id;\n                                })\n                                    .join(\";\") || \"-\"),\n                        ],\n                    });\n                    // https://redmine.testrtc.com/issues/7166\n                    trace({\n                        data: [\n                            \"onlocaltrack\",\n                            this.__rtcStatsId,\n                            debugTrack(track) +\n                                \" \" +\n                                streams.map(function (stream) {\n                                    return \"stream:\" + stream.id;\n                                }),\n                        ],\n                    });\n                    track.addEventListener(\"ended\", function () {\n                        trace({\n                            data: [\n                                \"onlocaltrack\",\n                                _this_1.__rtcStatsId,\n                                debugTrack(track) +\n                                    \" \" +\n                                    streams.map(function (stream) {\n                                        return \"stream:\" + stream.id;\n                                    }),\n                            ],\n                        });\n                    });\n                    // Disable mute/umute tracks events: https://redmine.testrtc.com/issues/9240\n                    // track.addEventListener(\"mute\", () => {\n                    //   trace({\n                    //     data: [\n                    //       \"onlocaltrack\",\n                    //       this.__rtcStatsId,\n                    //       debugTrack(track) +\n                    //         \" \" +\n                    //         streams.map((stream: any) => {\n                    //           return \"stream:\" + stream.id;\n                    //         }),\n                    //     ],\n                    //   });\n                    // });\n                    //\n                    // track.addEventListener(\"unmute\", () => {\n                    //   trace({\n                    //     data: [\n                    //       \"onlocaltrack\",\n                    //       this.__rtcStatsId,\n                    //       debugTrack(track) +\n                    //         \" \" +\n                    //         streams.map((stream: any) => {\n                    //           return \"stream:\" + stream.id;\n                    //         }),\n                    //     ],\n                    //   });\n                    // });\n                    var sender = nativeMethod.apply(this, arguments);\n                    sender.__pcId = this.__rtcStatsId;\n                    // Associate the peer id to the existing transceivers\n                    var transceivers = this.getTransceivers();\n                    if (transceivers) {\n                        transceivers.forEach(function (transceiver) {\n                            transceiver.__pcId = _this_1.__rtcStatsId;\n                        });\n                    }\n                    return sender;\n                };\n            }\n        });\n        [\"removeTrack\"].forEach(function (method) {\n            var nativeMethod = origPeerConnection.prototype[method];\n            if (nativeMethod) {\n                origPeerConnection.prototype[method] = function () {\n                    var track = arguments[0].track;\n                    trace({\n                        data: [method, this.__rtcStatsId, track ? debugTrack(track) : \"null\"],\n                    });\n                    return nativeMethod.apply(this, arguments);\n                };\n            }\n        });\n        [\"createOffer\", \"createAnswer\"].forEach(function (method) {\n            var nativeMethod = origPeerConnection.prototype[method];\n            if (nativeMethod) {\n                origPeerConnection.prototype[method] = function () {\n                    var rtcStatsId = this.__rtcStatsId;\n                    var args = arguments;\n                    var opts;\n                    if (arguments.length === 1 && typeof arguments[0] === \"object\") {\n                        opts = arguments[0];\n                    }\n                    else if (arguments.length === 3 && typeof arguments[2] === \"object\") {\n                        opts = arguments[2];\n                    }\n                    trace({ data: [method, this.__rtcStatsId, opts] });\n                    return nativeMethod.apply(this, opts ? [opts] : undefined).then(function (description) {\n                        trace({ data: [method + \"OnSuccess\", rtcStatsId, description] });\n                        if (args.length > 0 && typeof args[0] === \"function\") {\n                            args[0].apply(null, [description]);\n                            return undefined;\n                        }\n                        return description;\n                    }, function (err) {\n                        trace({ data: [method + \"OnFailure\", rtcStatsId, err.toString()] });\n                        if (args.length > 1 && typeof args[1] === \"function\") {\n                            args[1].apply(null, [err]);\n                            return;\n                        }\n                        throw err;\n                    });\n                };\n            }\n        });\n        [\"setLocalDescription\", \"setRemoteDescription\", \"addIceCandidate\"].forEach(function (method) {\n            var nativeMethod = origPeerConnection.prototype[method];\n            if (nativeMethod) {\n                origPeerConnection.prototype[method] = function () {\n                    var rtcStatsId = this.__rtcStatsId;\n                    var args = arguments;\n                    var _this = this;\n                    // because of setLocalDescription(null) sometimes we don't have SDP value\n                    // fippo suggested: Access pc.localDescription.sdp in the successcallback\n                    var needToHandleSDPInSuccessCallback = method === \"setLocalDescription\" && (!args[0] || (args[0] && !args[0].sdp));\n                    trace({\n                        data: [method, this.__rtcStatsId, needToHandleSDPInSuccessCallback ? { parameterless: true } : args[0]],\n                    });\n                    return nativeMethod.apply(this, [args[0]]).then(function () {\n                        trace({\n                            data: [\n                                method + \"OnSuccess\",\n                                rtcStatsId,\n                                needToHandleSDPInSuccessCallback ? _this === null || _this === void 0 ? void 0 : _this.localDescription : undefined,\n                            ],\n                        });\n                        if (args.length >= 2 && typeof args[1] === \"function\") {\n                            args[1].apply(null, []);\n                            return undefined;\n                        }\n                        return undefined;\n                    }, function (err) {\n                        trace({ data: [method + \"OnFailure\", rtcStatsId, err.toString()] });\n                        if (args.length >= 3 && typeof args[2] === \"function\") {\n                            args[2].apply(null, [err]);\n                            return undefined;\n                        }\n                        throw err;\n                    });\n                };\n            }\n        });\n        // wrap static methods. Currently just generateCertificate.\n        if (origPeerConnection.generateCertificate) {\n            Object.defineProperty(peerconnection, \"generateCertificate\", {\n                get: function () {\n                    return arguments.length\n                        ? origPeerConnection.generateCertificate.apply(null, arguments)\n                        : origPeerConnection.generateCertificate;\n                },\n            });\n        }\n        globalContext[prefix + \"RTCPeerConnection\"] = peerconnection;\n        globalContext[prefix + \"RTCPeerConnection\"].prototype = origPeerConnection.prototype;\n        (0, exports.sdkLog)(\"debug\", \"RTCPeerConnection prefixes override complete\");\n    });\n    if (isBrowser) {\n        // getUserMedia wrappers\n        prefixesToWrap.forEach(function (prefix) {\n            var name = prefix + (prefix.length ? \"GetUserMedia\" : \"getUserMedia\");\n            if (!navigator[name]) {\n                return;\n            }\n            var origGetUserMedia = navigator[name].bind(navigator);\n            var gum = function () {\n                trace({ data: [\"getUserMedia\", null, arguments[0]] });\n                var cb = arguments[1];\n                var eb = arguments[2];\n                origGetUserMedia(arguments[0], function (stream) {\n                    // we log the stream id, track ids and tracks readystate since that is ended GUM fails\n                    // to acquire the cam (in chrome)\n                    trace({ data: [\"getUserMediaOnSuccess\", null, (0, utils_1.dumpStream)(stream)] });\n                    if (cb) {\n                        cb(stream);\n                    }\n                }, function (err) {\n                    var errorData = [\"getUserMediaOnFailure\", null, err.name];\n                    trace({ data: errorData });\n                    httpReportError(errorData);\n                    if (eb) {\n                        eb(err);\n                    }\n                });\n            };\n            navigator[name] = gum.bind(navigator);\n        });\n        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n            var origGetUserMedia_1 = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);\n            var gum = function () {\n                trace({ data: [\"navigator.mediaDevices.getUserMedia\", null, arguments[0]] });\n                return origGetUserMedia_1.apply(navigator.mediaDevices, arguments).then(function (stream) {\n                    trace({ data: [\"navigator.mediaDevices.getUserMediaOnSuccess\", null, (0, utils_1.dumpStream)(stream)] });\n                    return stream;\n                }, function (err) {\n                    var errorData = [\"navigator.mediaDevices.getUserMediaOnFailure\", null, err.name];\n                    trace({ data: errorData });\n                    httpReportError(errorData);\n                    return Promise.reject(err);\n                });\n            };\n            navigator.mediaDevices.getUserMedia = gum.bind(navigator.mediaDevices);\n        }\n        // getDisplayMedia\n        if (navigator.mediaDevices && navigator.mediaDevices.getDisplayMedia) {\n            var origGetDisplayMedia_1 = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n            var gdm = function () {\n                trace({ data: [\"navigator.mediaDevices.getDisplayMedia\", null, arguments[0]] });\n                return origGetDisplayMedia_1.apply(navigator.mediaDevices, arguments).then(function (stream) {\n                    trace({ data: [\"navigator.mediaDevices.getDisplayMediaOnSuccess\", null, (0, utils_1.dumpStream)(stream)] });\n                    return stream;\n                }, function (err) {\n                    var errorData = [\"navigator.mediaDevices.getDisplayMediaOnFailure\", null, err.name];\n                    trace({ data: errorData });\n                    httpReportError(errorData);\n                    return Promise.reject(err);\n                });\n            };\n            navigator.mediaDevices.getDisplayMedia = gdm.bind(navigator.mediaDevices);\n        }\n    }\n    if ((_b = watchrtc.console) === null || _b === void 0 ? void 0 : _b.level) {\n        (0, utils_1.setConsoleLevel)(watchrtc.console.level, trace);\n    }\n};\nexports.initSDK = initSDK;\nvar setConfig = function (newWatchrtcConfig) {\n    var _a;\n    var initialized = globalContext.watchRTCInitialized;\n    if (!initialized) {\n        (0, exports.sdkLog)(\"error\", \"SDK is not initialized. Use 'init' function first.\");\n        return;\n    }\n    var collectConsoleDisabled = (watchrtcConfig === null || watchrtcConfig === void 0 ? void 0 : watchrtcConfig.allowBrowserLogCollection) === false;\n    if (!collectConsoleDisabled && ((_a = newWatchrtcConfig === null || newWatchrtcConfig === void 0 ? void 0 : newWatchrtcConfig.console) === null || _a === void 0 ? void 0 : _a.override) === true && newWatchrtcConfig.console.level) {\n        (0, utils_1.setConsoleLevel)(newWatchrtcConfig.console.level, trace);\n    }\n    if (\"collectionInterval\" in newWatchrtcConfig) {\n        delete newWatchrtcConfig.collectionInterval;\n    }\n    watchrtcConfig = __assign(__assign({}, watchrtcConfig), newWatchrtcConfig);\n    watchrtcIdentifiers.rtcRoomId = watchrtcConfig.rtcRoomId;\n    watchrtcIdentifiers.rtcPeerId = watchrtcConfig.rtcPeerId;\n    (0, exports.sdkLog)(\"debug\", \"setConfig\", {\n        newWatchrtcConfig: JSON.stringify(newWatchrtcConfig),\n        watchrtcConfig: JSON.stringify(watchrtcConfig),\n    });\n    maybeOpenWebsocketConnection({});\n};\nexports.setConfig = setConfig;\n/**\n * Set user rating and/or comment for peer session\n * @param rating number from 1 to 5\n * @param comment string\n */\nvar setUserRating = function (\n/** 1 | 2 | 3 | 4 | 5 */\nrating, ratingComment) {\n    var _a;\n    var initialized = globalContext.watchRTCInitialized;\n    if (!initialized) {\n        (0, exports.sdkLog)(\"error\", \"SDK is not initialized. Use 'init' function first.\");\n        return Promise.resolve({ error: \"SDK is not initialized. Use 'init' function first.\" });\n    }\n    var isValidRating = (0, utils_1.validateRating)(rating);\n    if (!isValidRating) {\n        return Promise.resolve({ error: \"Rating is invalid\" });\n    }\n    var opened = ((_a = socket === null || socket === void 0 ? void 0 : socket.connection) === null || _a === void 0 ? void 0 : _a.readyState) === globalContext.WebSocket.OPEN;\n    var data = [\"userRating\", null, { rating: rating, ratingComment: ratingComment }];\n    return new Promise(function (resolve, reject) {\n        var options = { promiseFuncs: { resolve: resolve, reject: reject } };\n        if (opened) {\n            trace({ data: data, options: options });\n        }\n        else {\n            httpTrace.apply(void 0, data).then(function () { return resolve({}); })\n                .catch(function (error) { return resolve({ error: error }); });\n        }\n    });\n};\nexports.setUserRating = setUserRating;\n/**\n * Add keys for peer session\n * @param keys\n */\nvar addKeys = function (\n/** { \"key1\": \"value1\", \"key2\": [\"value2_1\", \"value2_2\"]} */\nkeys) {\n    var _a;\n    var initialized = globalContext.watchRTCInitialized;\n    if (!initialized) {\n        (0, exports.sdkLog)(\"error\", \"SDK is not initialized. Use 'init' function first.\");\n        return;\n    }\n    Object.keys(keys || {}).forEach(function (k) {\n        if (typeof keys[k] === \"string\") {\n            keys[k] = [keys[k]];\n        }\n    });\n    var data = [\"keys\", null, keys];\n    var opened = ((_a = socket === null || socket === void 0 ? void 0 : socket.connection) === null || _a === void 0 ? void 0 : _a.readyState) === globalContext.WebSocket.OPEN;\n    var wasConnected = socket === null || socket === void 0 ? void 0 : socket.wasConnected;\n    return new Promise(function (resolve, reject) {\n        var options = { promiseFuncs: { resolve: resolve, reject: reject } };\n        if (opened) {\n            trace({ data: data, options: options });\n        }\n        else if (!wasConnected) {\n            trace({ data: data, options: options });\n        }\n        else {\n            httpTrace.apply(void 0, data).then(function () { return resolve({}); })\n                .catch(function (error) { return resolve({ error: error }); });\n        }\n    });\n};\nexports.addKeys = addKeys;\nvar disableDataCollection = function () {\n    var initialized = globalContext.watchRTCInitialized;\n    if (!initialized) {\n        (0, exports.sdkLog)(\"error\", \"SDK is not initialized. Use 'init' function first.\");\n        return;\n    }\n    trace({ data: [\"disableDataCollection\", null, null] });\n    socket === null || socket === void 0 ? void 0 : socket.disableDataCollection();\n};\nexports.disableDataCollection = disableDataCollection;\nvar enableDataCollection = function () {\n    var initialized = globalContext.watchRTCInitialized;\n    if (!initialized) {\n        (0, exports.sdkLog)(\"error\", \"SDK is not initialized. Use 'init' function first.\");\n        return;\n    }\n    trace({ data: [\"enableDataCollection\", null, null] });\n    socket === null || socket === void 0 ? void 0 : socket.enableDataCollection();\n};\nexports.enableDataCollection = enableDataCollection;\nvar addEvent = function (event) {\n    var initialized = globalContext.watchRTCInitialized;\n    if (!initialized) {\n        (0, exports.sdkLog)(\"error\", \"addEvent error. SDK is not initialized. Use 'init' function first.\");\n        return;\n    }\n    // const opened = socket?.connection?.readyState === WS.OPEN;\n    // if (!opened && socket?.wasConnected) {\n    //   sdkLog(\"error\", `addEvent error. Connection has been closed.`);\n    //   return;\n    // }\n    var isEventValid = (0, utils_1.validateEvent)(event, openChannels);\n    if (!isEventValid) {\n        return;\n    }\n    // Don't keep `pc` information in event, only extract the id\n    var validatedEvent = __assign({}, event);\n    var source = null;\n    if (validatedEvent.pc) {\n        source = validatedEvent.pc.__rtcStatsId || null;\n        delete validatedEvent.pc;\n    }\n    var data = [\"event\", source, validatedEvent];\n    return new Promise(function (resolve, reject) {\n        var options = { promiseFuncs: { resolve: resolve, reject: reject } };\n        trace({ data: data, options: options });\n    });\n};\nexports.addEvent = addEvent;\nvar mapStream = function (id, name) {\n    var initialized = globalContext.watchRTCInitialized;\n    if (!initialized) {\n        (0, exports.sdkLog)(\"error\", \"mapStream error. SDK is not initialized. Use 'init' function first.\");\n        return;\n    }\n    var isDataValid = !!id && !!name;\n    if (!isDataValid) {\n        return;\n    }\n    var data = [\"mapStream\", null, { id: id, name: name }];\n    (0, exports.sdkLog)(\"info\", \"mapStream method is deprecated. Please use mapTrack instead.\");\n    trace({ data: data });\n};\nexports.mapStream = mapStream;\nvar mapTrack = function (id, name) {\n    var initialized = globalContext.watchRTCInitialized;\n    if (!initialized) {\n        (0, exports.sdkLog)(\"error\", \"mapTrack error. SDK is not initialized. Use 'init' function first.\");\n        return;\n    }\n    var isDataValid = !!id && !!name;\n    if (!isDataValid) {\n        return;\n    }\n    mappedTrack[id] = name;\n    var data = [\"mapTrack\", null, { id: id, name: name }];\n    trace({ data: data });\n};\nexports.mapTrack = mapTrack;\nvar connect = function () {\n    var initialized = globalContext.watchRTCInitialized;\n    if (!initialized) {\n        (0, exports.sdkLog)(\"error\", \"connect error. SDK is not initialized. Use 'init' function first.\");\n        return;\n    }\n    freshConnection = true;\n    isManualConnect = true;\n    (0, exports.sdkLog)(\"debug\", \"manual connect\");\n    maybeOpenWebsocketConnection({});\n};\nexports.connect = connect;\nvar disconnect = function () {\n    var initialized = globalContext.watchRTCInitialized;\n    if (!initialized) {\n        (0, exports.sdkLog)(\"error\", \"disconnect error. SDK is not initialized. Use 'init' function first.\");\n        return;\n    }\n    isManualConnect = false;\n    isManualDisconnect = true;\n    socket === null || socket === void 0 ? void 0 : socket.close();\n    (0, exports.sdkLog)(\"debug\", \"manual disconnect\");\n};\nexports.disconnect = disconnect;\nvar registerOnStatsListener = function (listener) {\n    getStatsCallback = listener;\n};\nexports.registerOnStatsListener = registerOnStatsListener;\nvar registerStateListener = function (listener) {\n    stateListener = listener;\n};\nexports.registerStateListener = registerStateListener;\nvar httpTrace = function () {\n    var _a;\n    var data = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        data[_i] = arguments[_i];\n    }\n    if (!watchrtcIdentifiers.rtcRoomId || !watchrtcIdentifiers.rtcPeerId) {\n        var message = \"Missing configuration parameters rtcPeerId and rtcRoomId to connect\";\n        if (!watchrtcIdentifiers.rtcRoomId && watchrtcIdentifiers.rtcPeerId) {\n            message = \"Missing configuration parameter rtcRoomId to connect\";\n        }\n        else if (!watchrtcIdentifiers.rtcPeerId && watchrtcIdentifiers.rtcRoomId) {\n            message = \"Missing configuration parameter rtcPeerId to connect\";\n        }\n        (0, exports.sdkLog)(\"error\", message);\n        return Promise.reject(message);\n    }\n    if (!watchrtcIdentifiers.projectId && !watchrtcConfig.rtcApiKey) {\n        var message = \"Missing apiKey to enable trace before connection establishment\";\n        (0, exports.sdkLog)(\"info\", message);\n        return Promise.reject(message);\n    }\n    var httpConnectionData = (0, utils_1.getConnectionData)(\"http\", watchrtcConfig.rtcApiKey, watchrtcConfig.proxyUrl);\n    return http\n        ? http.trace.apply(http, __spreadArray([\"\".concat(httpConnectionData.url, \"/trace\"), (_a = watchrtcIdentifiers.projectId) !== null && _a !== void 0 ? _a : httpConnectionData.key, watchrtcIdentifiers.rtcRoomId,\n            watchrtcIdentifiers.rtcPeerId], data, false)) : Promise.reject(\"Invalid configuration of http service\");\n};\nvar httpReportError = function (data) {\n    var apiKey = watchrtcConfig === null || watchrtcConfig === void 0 ? void 0 : watchrtcConfig.rtcApiKey;\n    var rtcRoomId = watchrtcConfig === null || watchrtcConfig === void 0 ? void 0 : watchrtcConfig.rtcRoomId;\n    var rtcPeerId = watchrtcConfig === null || watchrtcConfig === void 0 ? void 0 : watchrtcConfig.rtcPeerId;\n    if (!apiKey || !rtcRoomId || !rtcPeerId) {\n        (0, exports.sdkLog)(\"error\", \"Cannot report an error. Please provide rtcApiKey, rtcRoomId and rtcPeerId \");\n        return;\n    }\n    var httpConnectionData = (0, utils_1.getConnectionData)(\"http\", watchrtcConfig === null || watchrtcConfig === void 0 ? void 0 : watchrtcConfig.rtcApiKey, watchrtcConfig.proxyUrl);\n    data = data || (socket === null || socket === void 0 ? void 0 : socket.buffer) || [];\n    http === null || http === void 0 ? void 0 : http.trace(\"\".concat(httpConnectionData.url, \"/error\"), httpConnectionData.key, rtcRoomId, rtcPeerId, data);\n};\nvar persistentEnd = function (nailUpCallEnd) {\n    var initialized = globalContext.watchRTCInitialized;\n    if (!initialized) {\n        (0, exports.sdkLog)(\"error\", \"persistentEnd error. SDK is not initialized. Use 'init' function first.\");\n        return;\n    }\n    clearInterval(getStatsInterval);\n    isManualConnect = false;\n    isManualDisconnect = true;\n    socket === null || socket === void 0 ? void 0 : socket.close(nailUpCallEnd);\n    (0, exports.sdkLog)(\"debug\", \"persistentEnd. sessionId: \".concat(globalContext.watchRTCSessionId));\n};\nexports.persistentEnd = persistentEnd;\nvar resetConnectionState = function () {\n    var _a;\n    (0, exports.sdkLog)(\"debug\", \"resetConnectionState sessionId: \".concat(globalContext.watchRTCSessionId));\n    for (var _i = 0, _b = Object.values(openChannels); _i < _b.length; _i++) {\n        var channel = _b[_i];\n        channel.prev = null;\n    }\n    if ((_a = socket === null || socket === void 0 ? void 0 : socket.buffer) === null || _a === void 0 ? void 0 : _a.length) {\n        socket.buffer = socket.buffer.filter(function (_a) {\n            var traceType = _a[0];\n            return traceType !== \"getstats\";\n        });\n    }\n};\nvar persistentStart = function (roomId, peerId) {\n    var initialized = globalContext.watchRTCInitialized;\n    if (!initialized) {\n        (0, exports.sdkLog)(\"error\", \"persistentStart error. SDK is not initialized. Use 'init' function first.\");\n        return;\n    }\n    watchrtcConfig = __assign(__assign({}, watchrtcConfig), { rtcRoomId: roomId, rtcPeerId: peerId });\n    watchrtcIdentifiers.rtcRoomId = roomId;\n    watchrtcIdentifiers.rtcPeerId = peerId;\n    resetConnectionState();\n    maybeOpenWebsocketConnection({ nailUp: true });\n    (0, exports.sdkLog)(\"debug\", \"persistentStart. sessionId: \".concat(globalContext.watchRTCSessionId), { watchrtcConfig: watchrtcConfig });\n};\nexports.persistentStart = persistentStart;\n// (globalContext as any).setUserRating = setUserRating;\n// (globalContext as any).addTags = addTags;\n// (globalContext as any).addKeys = addKeys;\n// (globalContext as any).init = initSDK;\n// (globalContext as any).addEvent = addEvent;\n// (globalContext as any).wrtcConnect = connect;\n// (globalContext as any).wrtcDisconnect = disconnect;\n/* QRTC SDK part */\nvar loadJS = function (url) {\n    return new Promise(function (resolve, reject) {\n        var script = document.createElement(\"script\");\n        script.src = url;\n        script.onload = resolve;\n        script.onerror = reject;\n        document.head.appendChild(script);\n    });\n};\nvar loadConfig = function (url) { return __awaiter(void 0, void 0, void 0, function () {\n    var response;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0: return [4 /*yield*/, fetch(url)];\n            case 1:\n                response = _a.sent();\n                return [4 /*yield*/, response.json()];\n            case 2: return [2 /*return*/, _a.sent()];\n        }\n    });\n}); };\nvar qrtcStopRequest = false;\n/*\n    const answer = await watchRTC.qualityrtc.run({\n      options: {\n        // run: \"Location\",\n\n        // if missing, will use default unpkg.com values\n        codeUrl: `http://localhost:8081/lib/main.bundle.js`,\n\n        // should not be passed, and will read from watchRTC server, passing this for development testing\n        configUrl: `https://niceincontact.testrtc.com/.netlify/functions/get-config`\n      },\n      progressCallback});\n\n */\nvar qrtcRun = function (_a) {\n    var options = _a.options, progressCallback = _a.progressCallback;\n    return __awaiter(void 0, void 0, void 0, function () {\n        var answer, codeUrl, queryParams_1, httpConnectionData, isNetlifyRequest, configUrl, _b, configAnswer, codeLoad, qualityRTC, progressCallbackWrapper, configData, netlifyBaseUrl, config;\n        return __generator(this, function (_c) {\n            switch (_c.label) {\n                case 0:\n                    if (!isBrowser) {\n                        (0, exports.sdkLogWithoutTrace)(\"info\", \"Cannot run qualityRTC test in non-browser environment\");\n                        return [2 /*return*/];\n                    }\n                    qrtcStopRequest = false;\n                    // disable WatchRTC SDK data collection while QRTC SDK working\n                    (0, exports.disableDataCollection)();\n                    _c.label = 1;\n                case 1:\n                    _c.trys.push([1, , 4, 5]);\n                    codeUrl = (options === null || options === void 0 ? void 0 : options.codeUrl) || \"https://qualityrtc-sdk.s3.amazonaws.com/\".concat(version_1.default, \"/main.bundle.js\");\n                    queryParams_1 = {};\n                    if (options) {\n                        Object.keys(options || {}).forEach(function (key) {\n                            if (typeof options[key] === \"string\") {\n                                queryParams_1[key] = options[key];\n                            }\n                        });\n                    }\n                    httpConnectionData = (0, utils_1.getConnectionData)(\"http\", watchrtcConfig === null || watchrtcConfig === void 0 ? void 0 : watchrtcConfig.rtcApiKey, watchrtcConfig.proxyUrl);\n                    isNetlifyRequest = !!(options === null || options === void 0 ? void 0 : options.configUrl);\n                    configUrl = isNetlifyRequest\n                        ? \"\".concat(options.configUrl, \"/.netlify/functions/get-config\")\n                        : httpConnectionData.url +\n                            \"/get-qualityrtc-config?apiKey=\".concat(httpConnectionData.key, \"&\").concat(new URLSearchParams(queryParams_1));\n                    console.log(\"runNetworkTest: request to run, loading lib and config\", {\n                        codeUrl: codeUrl,\n                        configUrl: configUrl,\n                    });\n                    return [4 /*yield*/, Promise.all([loadConfig(configUrl), loadJS(codeUrl)])];\n                case 2:\n                    _b = _c.sent(), configAnswer = _b[0], codeLoad = _b[1];\n                    console.log(\"runNetworkTest:JS code & config loaded\", {\n                        codeLoad: codeLoad,\n                        configAnswer: configAnswer,\n                    });\n                    qualityRTC = globalContext.__qualityRTC;\n                    if (!qualityRTC) {\n                        throw new Error(\"runNetworkTest:Failed to load qualityRTC, __qualityRTC is undefined\");\n                    }\n                    progressCallbackWrapper = function (progress) {\n                        if (qrtcStopRequest) {\n                            return false;\n                        }\n                        else if (progressCallback) {\n                            progressCallback(progress);\n                        }\n                        return true;\n                    };\n                    configData = isNetlifyRequest ? configAnswer.config : configAnswer.jsonConfig.config;\n                    netlifyBaseUrl = isNetlifyRequest ? options === null || options === void 0 ? void 0 : options.configUrl : new URL(configAnswer.url).origin;\n                    config = __assign(__assign({}, configData), { isProbe: true, options: __assign(__assign(__assign({}, configData.options), options), { wakeLock: true, netlifyBaseUrl: netlifyBaseUrl }) });\n                    console.log(\"runNetworkTest: code & config loaded, running test\", {\n                        config: config,\n                        configData: configData,\n                        qualityRTC: qualityRTC,\n                        netlifyBaseUrl: netlifyBaseUrl,\n                    });\n                    return [4 /*yield*/, qualityRTC.run({\n                            config: config,\n                            progressCallback: progressCallbackWrapper,\n                        })];\n                case 3:\n                    answer = _c.sent();\n                    console.log(\"runNetworkTest:JS Test completed\", { answer: answer });\n                    return [3 /*break*/, 5];\n                case 4:\n                    (0, exports.enableDataCollection)();\n                    return [7 /*endfinally*/];\n                case 5: return [2 /*return*/, answer];\n            }\n        });\n    });\n};\nexports.qrtcRun = qrtcRun;\nvar qrtcStop = function () {\n    if (!isBrowser) {\n        (0, exports.sdkLogWithoutTrace)(\"info\", \"Cannot run qualityRTC test in non-browser environment\");\n        return;\n    }\n    qrtcStopRequest = true;\n};\nexports.qrtcStop = qrtcStop;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getStreamsFromStats = exports.getTransportFromStats = void 0;\nvar getTransportFromStats = function (id, reports) {\n    if (!reports) {\n        return null;\n    }\n    var reportKeys = Object.keys(reports);\n    var keyPairs = reportKeys.filter(function (reportKey) { return reports[reportKey].type === \"candidate-pair\" && reports[reportKey].nominated; });\n    if (keyPairs.length > 0) {\n        var _a = reports[keyPairs[0]], localCandidateId_1 = _a.localCandidateId, remoteCandidateId_1 = _a.remoteCandidateId;\n        var localCandidateKey = reportKeys.find(function (reportKey) { return reports[reportKey].type === \"local-candidate\" && reports[reportKey].id === localCandidateId_1; });\n        var remoteCandidateKey = reportKeys.find(function (reportKey) { return reports[reportKey].type === \"remote-candidate\" && reports[reportKey].id === remoteCandidateId_1; });\n        if (localCandidateKey && remoteCandidateKey) {\n            var localCandidate = reports[localCandidateKey];\n            var remoteCandidate = reports[remoteCandidateKey];\n            var peer = {};\n            peer[id] = {\n                connection: localCandidate.candidateType === \"relay\" ? \"relay\" : \"direct\",\n                transport: localCandidate.candidateType === \"relay\" ? localCandidate.relayProtocol : \"udp\",\n                address: \"\".concat(remoteCandidate.address, \":\").concat(remoteCandidate.port),\n            };\n            return peer;\n        }\n    }\n    return null;\n};\nexports.getTransportFromStats = getTransportFromStats;\nvar getStreamsFromStats = function (id, previous, current, mappedTrack) {\n    var streams = {};\n    var currentReportsKeys = Object.keys(current);\n    var streamsKeys = currentReportsKeys.filter(function (keys) { return current[keys].type === \"inbound-rtp\" || current[keys].type === \"outbound-rtp\"; });\n    streamsKeys.forEach(function (streamKey) {\n        var currentReport = current[streamKey];\n        var previousReport = previous && streamKey in previous ? previous[streamKey] : null;\n        var direction = currentReport.type === \"inbound-rtp\" ? \"inbound\" : \"outbound\";\n        var kind = currentReport.kind;\n        var currentRemoteReport = currentReport.remoteId in current ? current[currentReport.remoteId] : null;\n        var previousRemoteReport = previousReport && previousReport.remoteId in previous ? previous[previousReport.remoteId] : null;\n        var deltaSeconds = previousReport ? (currentReport.timestamp - previousReport.timestamp) / 1000 : null;\n        var stream = {\n            direction: direction,\n            kind: kind,\n            peerId: id,\n        };\n        // Specific video (in inbound, outbound\n        if (kind === \"video\") {\n            stream.frameWidth = currentReport.frameWidth;\n            stream.frameHeight = currentReport.frameHeight;\n            stream.framerate = currentReport.framesPerSecond;\n        }\n        if (currentReport.type === \"inbound-rtp\") {\n            stream.jitter = currentReport.jitter;\n            // For inbound stream, trackIdentifier is part of the inbound-rtp report\n            stream.mappedName =\n                currentReport.trackIdentifier in mappedTrack ? mappedTrack[currentReport.trackIdentifier] : null;\n            // Compute intermediate values if previous report exists\n            stream.bytesReceived = previousReport ? currentReport.bytesReceived - previousReport.bytesReceived : null;\n            stream.packetsReceived = previousReport ? currentReport.packetsReceived - previousReport.packetsReceived : null;\n            stream.packetsLost = previousReport ? currentReport.packetsLost - previousReport.packetsLost : null;\n            stream.packetsLoss =\n                stream.packetsLost + stream.packetsReceived > 0\n                    ? (stream.packetsLost * 100) / (stream.packetsLost + stream.packetsReceived)\n                    : null;\n            stream.bitrate = deltaSeconds ? (stream.bytesReceived * 8) / deltaSeconds : null;\n            // Compute intermediate stats from remoteId (remoteOutbound);\n            stream.roundTripTime =\n                currentRemoteReport && \"roundTripTime\" in currentRemoteReport ? currentRemoteReport.roundTripTime : null;\n        }\n        else {\n            // Compute intermediate values if previous report exists\n            stream.bytesSent = previousReport ? currentReport.bytesSent - previousReport.bytesSent : null;\n            stream.packetsSent = previousReport ? currentReport.packetsSent - previousReport.packetsSent : null;\n            stream.bitrate = deltaSeconds ? (stream.bytesSent * 8) / deltaSeconds : null;\n            // Compute intermediate stats from remoteId (remoteInbound)\n            stream.roundTripTime =\n                currentRemoteReport && \"roundTripTime\" in currentRemoteReport ? currentRemoteReport.roundTripTime : null;\n            stream.jitter = currentRemoteReport && \"jitter\" in currentRemoteReport ? currentRemoteReport.jitter : null;\n            stream.packetsLost =\n                currentRemoteReport && previousRemoteReport\n                    ? currentRemoteReport.packetsLost - previousRemoteReport.packetsLost\n                    : null;\n            stream.packetsLoss =\n                currentRemoteReport && \"fractionLost\" in currentRemoteReport ? currentRemoteReport.fractionLost : null;\n            // For outbound stream, trackIdentifier is part of the media-source report\n            var mediaSourceKey = currentReportsKeys.find(function (key) { return current[key].id === currentReport.mediaSourceId; });\n            if (mediaSourceKey) {\n                var outboundTrackIdentifier = current[mediaSourceKey].trackIdentifier;\n                stream.mappedName = outboundTrackIdentifier in mappedTrack ? mappedTrack[outboundTrackIdentifier] : null;\n            }\n        }\n        // Compute codec name from codecId (codec)\n        var codecKey = currentReportsKeys.find(function (key) { return current[key].id === currentReport.codecId; });\n        if (codecKey) {\n            var mimeType = current[codecKey].mimeType || \"\";\n            stream.codec = mimeType.includes(\"/\") ? mimeType.split(\"/\")[1] : mimeType;\n        }\n        streams[current[streamKey].id] = stream;\n    });\n    return streams;\n};\nexports.getStreamsFromStats = getStreamsFromStats;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.generateID = exports.subtractNailUpReferenceStats = exports.applyPatchForRTT = exports.exposeApplicationStatsForPC = exports.restoreOriginalConsoleMethods = exports.setConsoleLevel = exports.getHardwareInfo = exports.validateEvent = exports.validateRating = exports.isRoomIdOrPeerIdChanged = exports.countOfValidConnections = exports.validateConfig = exports.getConnectionData = exports.dumpStream = exports.map2obj = exports.mangleChromeStats = exports.deltaCompression = exports.getSdkLogWithoutTrace = exports.getSdkLogger = exports.logPrefix = void 0;\nvar GPU = require(\"./detect-gpu\");\nvar stats_1 = require(\"./stats\");\nvar sdk_1 = require(\"./sdk\");\nvar getCurrTimeStamp = function () {\n    var date = new Date();\n    var dateStr = (\"00\" + (date.getMonth() + 1)).slice(-2) +\n        \"/\" +\n        (\"00\" + date.getDate()).slice(-2) +\n        \"/\" +\n        date.getFullYear() +\n        \" \" +\n        (\"00\" + date.getHours()).slice(-2) +\n        \":\" +\n        (\"00\" + date.getMinutes()).slice(-2) +\n        \":\" +\n        (\"00\" + date.getSeconds()).slice(-2) +\n        \":\" +\n        (\"000\" + date.getMilliseconds()).slice(-3);\n    return dateStr;\n};\nvar logPrefix = function (level) {\n    if (level === void 0) { level = \"info\"; }\n    return level === \"error\"\n        ? [\n            \"\".concat(getCurrTimeStamp(), \" %cwatchRTC %cERROR\"),\n            \"background: \".concat(\"gold\", \"; color: black; padding: 2px 0.5em; border-radius: 0.5em;\"),\n            \"background: \".concat(\"red\", \"; color: white; padding: 2px 0.5em; border-radius: 0.5em;\"),\n        ]\n        : [\n            \"\".concat(getCurrTimeStamp(), \" %cwatchRTC\"),\n            \"background: \".concat(\"gold\", \"; color: black; padding: 2px 0.5em; border-radius: 0.5em;\"),\n        ];\n};\nexports.logPrefix = logPrefix;\nvar logLevels = [\"debug\", \"info\", \"error\"];\nvar sdkLogger = function (log, getLogLevel) {\n    if (log === void 0) { log = console.log; }\n    return function (level, message, object) {\n        var allowed = getLogLevel();\n        var allowedValue = logLevels.indexOf(allowed);\n        var currentValue = logLevels.indexOf(level);\n        if (allowed === \"silent\" || currentValue < allowedValue) {\n            return;\n        }\n        var args = __spreadArray(__spreadArray([], (0, exports.logPrefix)(level), true), [message], false);\n        if (object) {\n            args.push(object);\n        }\n        log.apply(void 0, args);\n    };\n};\nexports.getSdkLogger = sdkLogger.bind(null, console.log);\nexports.getSdkLogWithoutTrace = sdkLogger.bind(null, (_a = console._original_log) !== null && _a !== void 0 ? _a : console.log);\n// apply a delta compression to the stats report. Reduces size by ~90%.\n// To reduce further, report keys could be compressed.\n// Muly: maybe can improve using https://github.com/AsyncBanana/microdiff?utm_source=tldrnewsletter\nvar deltaCompression = function (oldStats, newStats) {\n    oldStats = oldStats || {};\n    newStats = newStats || {};\n    newStats = JSON.parse(JSON.stringify(newStats));\n    Object.keys(newStats).forEach(function (id) {\n        var report = newStats[id];\n        delete report.id;\n        if (!oldStats[id]) {\n            return;\n        }\n        Object.keys(report).forEach(function (name) {\n            if (report.timestamp && typeof report.timestamp === \"string\") {\n                report.timestamp = new Date(report.timestamp).getTime();\n            }\n            if (report[name] === oldStats[id][name]) {\n                delete newStats[id][name];\n            }\n            else if (Array.isArray(report[name])) {\n                // Arrays get serialized if anything changed.\n                if (JSON.stringify(report[name]) === JSON.stringify(oldStats[id][name])) {\n                    delete newStats[id][name];\n                }\n            }\n            if (Object.keys(report).length === 0) {\n                delete newStats[id];\n            }\n            else if (Object.keys(report).length === 1 && report.timestamp) {\n                delete newStats[id];\n            }\n        });\n    });\n    var timestamp = -Infinity;\n    Object.keys(newStats).forEach(function (id) {\n        var report = newStats[id];\n        if (report.timestamp > timestamp) {\n            timestamp = report.timestamp;\n        }\n    });\n    Object.keys(newStats).forEach(function (id) {\n        var report = newStats[id];\n        if (report.timestamp === timestamp) {\n            report.timestamp = 0;\n        }\n    });\n    newStats.timestamp = timestamp;\n    return newStats;\n};\nexports.deltaCompression = deltaCompression;\nvar mangleChromeStats = function (pc, response) {\n    var standardReport = {};\n    var reports = response.result();\n    reports.forEach(function (report) {\n        var standardStats = {\n            id: report.id,\n            timestamp: report.timestamp.getTime(),\n            type: report.type,\n        };\n        report.names().forEach(function (name) {\n            standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n    });\n    return standardReport;\n};\nexports.mangleChromeStats = mangleChromeStats;\n// transforms a maplike to an object. Mostly for getStats +\n// JSON.parse(JSON.stringify())\nvar map2obj = function (m) {\n    if (!m.entries) {\n        return m;\n    }\n    var o = {};\n    m.forEach(function (v, k) {\n        o[k] = v;\n    });\n    return o;\n};\nexports.map2obj = map2obj;\nvar dumpStream = function (stream) {\n    return {\n        id: stream.id,\n        tracks: stream.getTracks().map(function (track) {\n            return {\n                id: track.id,\n                kind: track.kind,\n                label: track.label,\n                enabled: track.enabled,\n                muted: track.muted,\n                readyState: track.readyState, // `live` or `ended`\n            };\n        }),\n    };\n};\nexports.dumpStream = dumpStream;\nvar getConnectionData = function (type, key, proxyURL) {\n    var localUrl = \"\".concat(type == \"ws\" ? \"ws\" : \"http\", \"://localhost:9101\");\n    var staging1Url = \"\".concat(type == \"ws\" ? \"wss\" : \"https\", \"://watchrtc-staging1.testrtc.com\");\n    var staging2Url = \"\".concat(type == \"ws\" ? \"wss\" : \"https\", \"://watchrtc-staging2.testrtc.com\");\n    var productionUrl = \"\".concat(type == \"ws\" ? \"wss\" : \"https\", \"://watchrtc.testrtc.com\");\n    var production1Url = \"\".concat(type == \"ws\" ? \"wss\" : \"https\", \"://watchrtc-app1.testrtc.com\");\n    if (proxyURL && type === \"http\") {\n        if (proxyURL.includes(\"wss://\")) {\n            proxyURL = proxyURL.replace(\"wss://\", \"https://\");\n        }\n        else {\n            proxyURL = proxyURL.replace(\"ws://\", \"http://\");\n        }\n    }\n    var splitted = key.split(\":\");\n    if (key.indexOf(\"local\") !== -1) {\n        return {\n            url: proxyURL || localUrl,\n            key: splitted[1],\n        };\n    }\n    else if (key.indexOf(\"staging1\") !== -1) {\n        return {\n            url: proxyURL || staging1Url,\n            key: splitted[1],\n        };\n    }\n    else if (key.indexOf(\"staging\") !== -1) {\n        return {\n            url: proxyURL || staging2Url,\n            key: splitted[1],\n        };\n    }\n    else if (key.indexOf(\"production1\") !== -1) {\n        return {\n            url: proxyURL || production1Url,\n            key: splitted[1],\n        };\n    }\n    else if (key.indexOf(\"production\") !== -1) {\n        return {\n            url: proxyURL || productionUrl,\n            key: splitted[1],\n        };\n    }\n    else {\n        return {\n            url: proxyURL || productionUrl,\n            key: splitted[0],\n        };\n    }\n};\nexports.getConnectionData = getConnectionData;\nvar validateConfig = function (config) {\n    if (!(config === null || config === void 0 ? void 0 : config.rtcApiKey)) {\n        (0, sdk_1.sdkLog)(\"debug\", \"config.rtcApiKey or config.rtcToken need to be provided.\");\n        return false;\n    }\n    if (!(config === null || config === void 0 ? void 0 : config.rtcRoomId) || !(config === null || config === void 0 ? void 0 : config.rtcPeerId)) {\n        (0, sdk_1.sdkLog)(\"debug\", \"config.rtcRoomId or config.rtcPeerId is empty.\");\n        return false;\n    }\n    return true;\n};\nexports.validateConfig = validateConfig;\nvar countOfValidConnections = function (openChannels) {\n    return Object.keys(openChannels).filter(function (id) { return openChannels[id].validConnection; }).length;\n};\nexports.countOfValidConnections = countOfValidConnections;\nvar isRoomIdOrPeerIdChanged = function (watchrtcIdentifiers, watchrtcConfig) {\n    var changed = false;\n    if (watchrtcConfig.rtcRoomId &&\n        watchrtcIdentifiers.rtcRoomId &&\n        watchrtcIdentifiers.rtcRoomId !== watchrtcConfig.rtcRoomId) {\n        changed = true;\n    }\n    if (watchrtcConfig.rtcPeerId &&\n        watchrtcIdentifiers.rtcPeerId &&\n        watchrtcIdentifiers.rtcPeerId !== watchrtcConfig.rtcPeerId) {\n        changed = true;\n    }\n    if (changed) {\n        (0, sdk_1.sdkLog)(\"debug\", \"maybeOpenWebsocketConnection. rtcRoomId or rtcPeerId has been changed\", {\n            old: {\n                rtcRoomId: watchrtcIdentifiers.rtcRoomId,\n                rtcPeerId: watchrtcIdentifiers.rtcPeerId,\n            },\n            new: {\n                rtcRoomId: watchrtcConfig.rtcRoomId,\n                rtcPeerId: watchrtcConfig.rtcPeerId,\n            },\n        });\n    }\n    return changed;\n};\nexports.isRoomIdOrPeerIdChanged = isRoomIdOrPeerIdChanged;\nvar validateRating = function (rating) {\n    if (!rating) {\n        (0, sdk_1.sdkLog)(\"error\", \"rating parameter is required\");\n        return false;\n    }\n    if (typeof rating !== \"number\" || rating < 1 || rating > 5) {\n        (0, sdk_1.sdkLog)(\"error\", \"rating parameter should be number from 1 to 5\");\n        return false;\n    }\n    return true;\n};\nexports.validateRating = validateRating;\nvar validateEvent = function (event, channels) {\n    if (!event) {\n        (0, sdk_1.sdkLog)(\"error\", \"event parameter is required\");\n        return false;\n    }\n    if (![\"global\", \"local\", \"log\"].includes(event.type)) {\n        (0, sdk_1.sdkLog)(\"error\", \"event.type should be either \\\"global\\\" or \\\"local\\\" or \\\"log\\\"\");\n        return false;\n    }\n    if (event.parameters && typeof event.parameters !== \"object\") {\n        (0, sdk_1.sdkLog)(\"error\", \"event.parameters should be JSON object\\\"\");\n        return false;\n    }\n    if (event.pc && !(event.pc.__rtcStatsId in channels)) {\n        (0, sdk_1.sdkLog)(\"error\", \"event.pc should be a RTCPeerConnection used in the call\\\"\");\n        return false;\n    }\n    return true;\n};\nexports.validateEvent = validateEvent;\nvar getHardwareInfo = function () { return __awaiter(void 0, void 0, void 0, function () {\n    function number_format(num) {\n        return (Math.round(num * 100) / 100).toFixed(2);\n    }\n    var loadBenchmarks, gpuInfo, result, memory;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (typeof window === \"undefined\") {\n                    return [2 /*return*/];\n                }\n                loadBenchmarks = function (fileName) { return __awaiter(void 0, void 0, void 0, function () {\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, new Promise(function (resolve) {\n                                    try {\n                                        var data = require(\"./gpu-benchmarks/\".concat(fileName));\n                                        data.shift();\n                                        return resolve(data);\n                                    }\n                                    catch (err) {\n                                        (0, sdk_1.sdkLog)(\"error\", \"Error. getHardwareInfo. loadBenchmarks\", { err: err.stack, fileName: fileName });\n                                        resolve([]);\n                                    }\n                                })];\n                            case 1: return [2 /*return*/, _a.sent()];\n                        }\n                    });\n                }); };\n                return [4 /*yield*/, GPU.getGPUTier({\n                        override: { loadBenchmarks: loadBenchmarks },\n                    })];\n            case 1:\n                gpuInfo = _a.sent();\n                result = __assign(__assign({}, gpuInfo), { cores_count: window.navigator.hardwareConcurrency });\n                memory = window.performance[\"memory\"];\n                if (memory) {\n                    result.jsHeapSizeLimit = number_format(memory.jsHeapSizeLimit / 1048576);\n                    result.totalJSHeapSize = number_format(memory.totalJSHeapSize / 1048576);\n                    result.usedJSHeapSize = number_format(memory.usedJSHeapSize / 1048576);\n                }\n                return [2 /*return*/, result];\n        }\n    });\n}); };\nexports.getHardwareInfo = getHardwareInfo;\nvar patchConsoleConfig = {\n    originalMethodPrefix: \"_original_\",\n    methodsToPatch: [\"log\", \"debug\", \"info\", \"warn\", \"error\"],\n    level: \"\",\n};\nvar patchConsoleMethod = function (methodName, trace) {\n    var originalMethod = console[methodName];\n    if (!originalMethod) {\n        return;\n    }\n    console[patchConsoleConfig.originalMethodPrefix + methodName] = originalMethod;\n    console[methodName] = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (patchConsoleConfig.level && args.length && trace) {\n            var currentMethodIndex = patchConsoleConfig.methodsToPatch.indexOf(methodName);\n            var configMethodIndex = patchConsoleConfig.methodsToPatch.indexOf(patchConsoleConfig.level);\n            var shouldTraceMethod = currentMethodIndex >= 0 && currentMethodIndex >= configMethodIndex;\n            if (shouldTraceMethod) {\n                var text = stringifyArgs(args);\n                trace({ data: [\"log\", null, { type: methodName, text: text }] });\n            }\n        }\n        originalMethod.apply(console, args);\n    };\n};\nvar setConsoleLevel = function (level, trace) {\n    if (level && patchConsoleConfig.methodsToPatch.includes(level) && level !== patchConsoleConfig.level) {\n        var currentIndex = patchConsoleConfig.methodsToPatch.indexOf(level);\n        var previousIndex = patchConsoleConfig.methodsToPatch.indexOf(patchConsoleConfig.level);\n        if (previousIndex < 0) {\n            for (var _i = 0, _a = patchConsoleConfig.methodsToPatch.slice(currentIndex); _i < _a.length; _i++) {\n                var methodName = _a[_i];\n                patchConsoleMethod(methodName, trace);\n            }\n        }\n        else if (currentIndex < previousIndex) {\n            for (var _b = 0, _c = patchConsoleConfig.methodsToPatch.slice(currentIndex, previousIndex); _b < _c.length; _b++) {\n                var methodName = _c[_b];\n                patchConsoleMethod(methodName, trace);\n            }\n        }\n        patchConsoleConfig.level = level;\n    }\n};\nexports.setConsoleLevel = setConsoleLevel;\nvar restoreOriginalConsoleMethods = function () {\n    if (!(\"console\" in window)) {\n        return;\n    }\n    for (var _i = 0, _a = patchConsoleConfig.methodsToPatch; _i < _a.length; _i++) {\n        var methodName = _a[_i];\n        var originalMethod = console[patchConsoleConfig.originalMethodPrefix + methodName];\n        if (!originalMethod) {\n            continue;\n        }\n        console[methodName] = originalMethod.bind(console);\n        delete console[patchConsoleConfig.originalMethodPrefix + methodName];\n    }\n};\nexports.restoreOriginalConsoleMethods = restoreOriginalConsoleMethods;\nvar exposeApplicationStatsForPC = function (id, previous, current, mappedTradk) {\n    return {\n        peer: (0, stats_1.getTransportFromStats)(id, current),\n        streams: (0, stats_1.getStreamsFromStats)(id, previous, current, mappedTradk),\n    };\n};\nexports.exposeApplicationStatsForPC = exposeApplicationStatsForPC;\nvar stringifyArgs = function (args) {\n    try {\n        return args.map(function (item) { return (typeof item === \"string\" ? item : JSON.stringify(item, replacerFunc())); }).join(\" \");\n    }\n    catch (_a) {\n        // do not log anything to not go into loop\n        // can fail with Illegal Invocation of JSON.stringify\n        // assumption - when customer also uses custom logger and binds another context\n        // so just ignore it\n        return \"\";\n    }\n};\n// avoid \"Converting circular structure to JSON\" error while JSON.stringifying\nvar replacerFunc = function () {\n    var visited = new WeakSet();\n    return function (_key, value) {\n        if (typeof value === \"object\" && value !== null) {\n            if (visited.has(value)) {\n                return;\n            }\n            visited.add(value);\n        }\n        return value;\n    };\n};\nvar applyPatchForRTT = function (oldStats, newStats) {\n    oldStats = oldStats || {};\n    newStats = newStats || {};\n    var hasOldStats = true;\n    if (Object.keys(oldStats).length === 0) {\n        hasOldStats = false;\n    }\n    var keys = Object.keys(newStats);\n    var reportKeys = keys.filter(function (key) { return newStats[key].type === \"remote-outbound-rtp\" || newStats[key].type === \"remote-inbound-rtp\"; });\n    reportKeys.forEach(function (reportKey) {\n        // case for Firefox/Safari\n        if (!(\"roundTripTime\" in newStats[reportKey])) {\n            newStats[reportKey].roundTripTime = NaN;\n        }\n        else {\n            // case Chrome\n            var statsHaveRTTMeasurements = \"roundTripTimeMeasurements\" in newStats[reportKey] &&\n                Boolean(oldStats[reportKey]) &&\n                \"roundTripTimeMeasurements\" in oldStats[reportKey];\n            if (hasOldStats && statsHaveRTTMeasurements) {\n                if (newStats[reportKey].roundTripTimeMeasurements === oldStats[reportKey].roundTripTimeMeasurements) {\n                    newStats[reportKey].roundTripTime = NaN;\n                }\n            }\n        }\n    });\n    return newStats;\n};\nexports.applyPatchForRTT = applyPatchForRTT;\nvar subtractNailUpReferenceStats = function (referenceStats, newStats) {\n    var _loop_1 = function (key, report) {\n        if (key in referenceStats) {\n            var referenceReport_1 = referenceStats[key];\n            switch (report.type) {\n                case \"inbound-rtp\":\n                    [\n                        \"bytesReceived\",\n                        \"packetsReceived\",\n                        \"packetsLost\",\n                        \"framesDecoded\",\n                        \"keyFramesDecoded\",\n                        \"framesRendered\",\n                        \"framesDropped\",\n                        \"qpSum\",\n                        \"totalDecodeTime\",\n                        \"totalInterFrameDelay\",\n                        \"totalSquaredInterFrameDelay\",\n                        \"pauseCount\",\n                        \"totalPausesDuration\",\n                        \"freezeCount\",\n                        \"totalFreezesDuration\",\n                        \"headerBytesReceived\",\n                        \"packetsDiscarded\",\n                        \"fecBytesReceived\",\n                        \"fecPacketsReceived\",\n                        \"fecPacketsDiscarded\",\n                        \"firCount\",\n                        \"pliCount\",\n                        \"totalProcessingDelay\",\n                        \"nackCount\",\n                        \"jitterBufferEmittedCount\",\n                        \"totalSamplesReceived\",\n                        \"concealedSamples\",\n                        \"silentConcealedSamples\",\n                        \"concealmentEvents\",\n                        \"totalAudioEnergy\",\n                        \"totalSamplesDuration\",\n                        \"framesReceived\",\n                        \"framesAssembledFromMultiplePackets\",\n                        \"totalAssemblyTime\",\n                        \"retransmittedPacketsReceived\",\n                        \"retransmittedBytesReceived\",\n                    ].forEach(function (stat) {\n                        if (stat in report) {\n                            report[stat] = Math.max(report[stat] - referenceReport_1[stat], 0);\n                        }\n                    });\n                    break;\n                case \"outbound-rtp\":\n                    [\n                        \"packetsSent\",\n                        \"bytesSent\",\n                        \"headerBytesSent\",\n                        \"retransmittedPacketsSent\",\n                        \"retransmittedBytesSent\",\n                        \"totalEncodedBytesTarget\",\n                        \"framesSent\",\n                        \"hugeFramesSent\",\n                        \"framesEncoded\",\n                        \"keyFramesEncoded\",\n                        \"qpSum\",\n                        \"totalEncodeTime\",\n                        \"totalPacketsSendDelay\",\n                        \"qualityLimitationResolutionChanges\",\n                        \"qualityLimitationDurations\",\n                        \"nackCount\",\n                        \"firCount\",\n                        \"pliCount\",\n                    ].forEach(function (stat) {\n                        if (stat in report) {\n                            if (stat === \"qualityLimitationDurations\") {\n                                report[stat].bandwidth = Math.max(report[stat].bandwidth - referenceReport_1[stat].bandwidth, 0);\n                                report[stat].cpu = Math.max(report[stat].cpu - referenceReport_1[stat].cpu, 0);\n                                report[stat].other = Math.max(report[stat].other - referenceReport_1[stat].other, 0);\n                                report[stat].none = Math.max(report[stat].none - referenceReport_1[stat].none, 0);\n                            }\n                            else {\n                                report[stat] = Math.max(report[stat] - referenceReport_1[stat], 0);\n                            }\n                        }\n                    });\n                    break;\n                case \"remote-inbound-rtp\":\n                    [\"packetsReceived\", \"packetsLost\", \"totalRoundTripTime\", \"roundTripTimeMeasurements\"].forEach(function (stat) {\n                        if (stat in report) {\n                            report[stat] = Math.max(report[stat] - referenceReport_1[stat], 0);\n                        }\n                    });\n                    break;\n                case \"remote-outbound-rtp\":\n                    [\"packetsSent\", \"bytesSent\", \"totalRoundTripTime\", \"roundTripTimeMeasurements\"].forEach(function (stat) {\n                        if (stat in report) {\n                            report[stat] = Math.max(report[stat] - referenceReport_1[stat], 0);\n                        }\n                    });\n                    break;\n                case \"media-source\":\n                    [\n                        \"totalAudioEnergy\",\n                        \"totalSamplesDuration\",\n                        \"droppedSamplesDuration\",\n                        \"droppedSamplesEvents\",\n                        \"totalCaptureDelay\",\n                        \"totalSamplesCaptured\",\n                        \"frames\",\n                    ].forEach(function (stat) {\n                        if (stat in report) {\n                            report[stat] = Math.max(report[stat] - referenceReport_1[stat], 0);\n                        }\n                    });\n                    break;\n                case \"media-playout\":\n                    [\n                        \"synthesizedSamplesDuration\",\n                        \"synthesizedSamplesEvents\",\n                        \"totalSamplesDuration\",\n                        \"totalPlayoutDelay\",\n                        \"totalSamplesCount\",\n                    ].forEach(function (stat) {\n                        if (stat in report) {\n                            report[stat] = Math.max(report[stat] - referenceReport_1[stat], 0);\n                        }\n                    });\n                    break;\n                case \"peer-connection\":\n                    [\"dataChannelsOpened\", \"dataChannelsClosed\"].forEach(function (stat) {\n                        if (stat in report) {\n                            report[stat] = Math.max(report[stat] - referenceReport_1[stat], 0);\n                        }\n                    });\n                    break;\n                case \"data-channel\":\n                    [\"messagesSent\", \"bytesSent\", \"messagesReceived\", \"bytesReceived\"].forEach(function (stat) {\n                        if (stat in report) {\n                            report[stat] = Math.max(report[stat] - referenceReport_1[stat], 0);\n                        }\n                    });\n                    break;\n                case \"transport\":\n                    [\"packetsSent\", \"packetsReceived\", \"bytesSent\", \"bytesReceived\", \"selectedCandidatePairChanges\"].forEach(function (stat) {\n                        if (stat in report) {\n                            report[stat] = Math.max(report[stat] - referenceReport_1[stat], 0);\n                        }\n                    });\n                    break;\n                case \"candidate-pair\":\n                    [\n                        \"packetsSent\",\n                        \"packetsReceived\",\n                        \"bytesSent\",\n                        \"bytesReceived\",\n                        \"totalRoundTripTime\",\n                        \"requestsReceived\",\n                        \"requestsSent\",\n                        \"responsesReceived\",\n                        \"responsesSent\",\n                        \"consentRequestsSent\",\n                        \"packetsDiscardedOnSend\",\n                        \"bytesDiscardedOnSend\",\n                    ].forEach(function (stat) {\n                        if (stat in report) {\n                            report[stat] = Math.max(report[stat] - referenceReport_1[stat], 0);\n                        }\n                    });\n                    break;\n                default:\n                    break;\n            }\n        }\n    };\n    for (var _i = 0, _a = Object.entries(newStats); _i < _a.length; _i++) {\n        var _b = _a[_i], key = _b[0], report = _b[1];\n        _loop_1(key, report);\n    }\n    return newStats;\n};\nexports.subtractNailUpReferenceStats = subtractNailUpReferenceStats;\nvar generateID = function () {\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n};\nexports.generateID = generateID;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = \"1.38.2\";\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar sdk_1 = require(\"./sdk\");\nvar WatchRTCHttp = /** @class */ (function () {\n    function WatchRTCHttp() {\n        if (WatchRTCHttp._instance) {\n            (0, sdk_1.sdkLog)(\"info\", \"WatchRTCSocket instance already created\");\n        }\n        else {\n            WatchRTCHttp._instance = this;\n        }\n    }\n    WatchRTCHttp.prototype.trace = function (url, projectId, rtcRoomId, rtcPeerId) {\n        var data = [];\n        for (var _i = 4; _i < arguments.length; _i++) {\n            data[_i - 4] = arguments[_i];\n        }\n        var args = Array.prototype.slice.call(data);\n        args.push(Date.now());\n        if (args[1] instanceof RTCPeerConnection) {\n            args[1] = args[1].__rtcStatsId;\n        }\n        var response = fetch(url, {\n            method: \"POST\",\n            mode: \"cors\",\n            cache: \"no-cache\",\n            credentials: \"same-origin\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                data: data,\n                projectId: projectId,\n                rtcRoomId: rtcRoomId,\n                rtcPeerId: rtcPeerId,\n            }),\n        });\n        return response\n            .then(function () { return ({}); })\n            .catch(function (err) {\n            (0, sdk_1.sdkLog)(\"error\", err.message, { err: err.stack });\n            return { error: err };\n        });\n    };\n    return WatchRTCHttp;\n}());\nexports.default = WatchRTCHttp;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar sdk_1 = require(\"./sdk\");\nvar LZString = require(\"./lz-string\");\nvar PROTOCOL_VERSION = \"2.0\";\nvar MSG_TIME_DIFF_THRESHLOD = 12 * 60 * 60 * 1000; // 12 hours\nvar isBrowser = typeof window !== \"undefined\";\nvar globalContext = isBrowser ? window : global;\nvar WatchRTCSocket = /** @class */ (function () {\n    function WatchRTCSocket() {\n        var _this_1 = this;\n        this.connection = null;\n        this.wasConnected = false;\n        this.buffer = [];\n        this.sendInterval = 1;\n        this.onClose = function () { };\n        this.dataCollection = true;\n        this.sendPromises = [];\n        this.prevMessageTs = Date.now();\n        this.trace = function (_a) {\n            var data = _a.data, options = _a.options;\n            var args = Array.prototype.slice.call(data);\n            var prevMessageTs = _this_1.prevMessageTs;\n            var now = Date.now();\n            var timeSinceLastMessage = now - prevMessageTs;\n            if (Math.abs(timeSinceLastMessage) >= MSG_TIME_DIFF_THRESHLOD) {\n                _this_1.trace({ data: [\"timeChange\", null, { now: now, prevMessageTs: prevMessageTs, timeSinceLastMessage: timeSinceLastMessage }] });\n            }\n            args.push(now);\n            if (args[1] instanceof RTCPeerConnection) {\n                args[1] = args[1].__rtcStatsId;\n            }\n            if (!WatchRTCSocket._instance.dataCollection) {\n                if (options === null || options === void 0 ? void 0 : options.promiseFuncs) {\n                    options.promiseFuncs.resolve({ error: \"Data collection disabled\" });\n                }\n                return;\n            }\n            // Don't store a new message if the connection is not open and the buffer is full (> 1000 messages)\n            if (!WatchRTCSocket._instance.connection ||\n                WatchRTCSocket._instance.connection.readyState !== globalContext.WebSocket.OPEN) {\n                if (WatchRTCSocket._instance.buffer.length > 1000) {\n                    if (options === null || options === void 0 ? void 0 : options.promiseFuncs) {\n                        options.promiseFuncs.resolve({ error: \"Message buffer size exceeded\" });\n                    }\n                    return;\n                }\n            }\n            // Else, store the message in the buffer\n            WatchRTCSocket._instance.buffer.push(args);\n            if (options === null || options === void 0 ? void 0 : options.promiseFuncs) {\n                WatchRTCSocket._instance.sendPromises.push(options.promiseFuncs);\n            }\n            // If the connection is open and the buffer threshold is reached, send the messages\n            if (WatchRTCSocket._instance.connection &&\n                WatchRTCSocket._instance.connection.readyState === globalContext.WebSocket.OPEN) {\n                if (WatchRTCSocket._instance.buffer.length >= WatchRTCSocket._instance.sendInterval) {\n                    var lines = JSON.stringify(WatchRTCSocket._instance.buffer);\n                    var compressedMessage = LZString.compressToEncodedURIComponent(lines);\n                    (0, sdk_1.sdkLogWithoutTrace)(\"debug\", \"lines: \".concat(lines.length));\n                    (0, sdk_1.sdkLogWithoutTrace)(\"debug\", \"compressedMessage: \".concat(compressedMessage.length));\n                    WatchRTCSocket._instance.buffer = [];\n                    WatchRTCSocket._instance.connection.send(compressedMessage);\n                    WatchRTCSocket._instance.sendPromises.forEach(function (_a) {\n                        var resolve = _a.resolve;\n                        return resolve({});\n                    });\n                    WatchRTCSocket._instance.sendPromises = [];\n                }\n            }\n        };\n        if (WatchRTCSocket._instance) {\n            (0, sdk_1.sdkLog)(\"info\", \"WatchRTCSocket instance already created\");\n        }\n        else {\n            WatchRTCSocket._instance = this;\n        }\n    }\n    WatchRTCSocket.prototype.connect = function (_a) {\n        var url = _a.url, onData = _a.onData, onError = _a.onError, onOpen = _a.onOpen, onClose = _a.onClose, _b = _a.options, options = _b === void 0 ? {} : _b;\n        var cleanOldTraces = options.cleanOldTraces;\n        if (WatchRTCSocket._instance.connection) {\n            WatchRTCSocket._instance.connection.close();\n            WatchRTCSocket._instance.connection = null;\n        }\n        var _this = WatchRTCSocket._instance;\n        if (cleanOldTraces) {\n            // we want to keep last 10 minutes of logs, to prevent old logs timestamp impacting actual session duration\n            var timeThreshold_1 = Date.now() - 10 * 60 * 1000; // 10 min\n            var relevantTraces = _this.buffer.filter(function (data) { return data[3] > timeThreshold_1; });\n            var filteredCount = _this.buffer.length - relevantTraces.length;\n            _this.buffer = relevantTraces;\n            var args = [\"oldTracesCleanup\", null, { filteredCount: filteredCount }, Date.now()];\n            (0, sdk_1.sdkLog)(\"info\", \"watchRTC SDK flushed \".concat(filteredCount, \" messages\"));\n            _this.buffer.push(args);\n        }\n        WatchRTCSocket._instance.connection = new globalContext.WebSocket(url, PROTOCOL_VERSION);\n        WatchRTCSocket._instance.connection.onopen = onOpen || null;\n        WatchRTCSocket._instance.connection.onclose = onClose || null;\n        WatchRTCSocket._instance.connection.onmessage = function (e) {\n            var _a;\n            try {\n                var data = JSON.parse(e.data);\n                if (data.error) {\n                    (_a = _this === null || _this === void 0 ? void 0 : _this.connection) === null || _a === void 0 ? void 0 : _a.close();\n                    _this.connection = null;\n                    (0, sdk_1.sdkLog)(\"error\", \"\\n\" + data.error);\n                    onError(data.error, \"auth\");\n                }\n                else {\n                    if (data.sendInterval) {\n                        WatchRTCSocket._instance.sendInterval = data.sendInterval;\n                    }\n                    onData(data);\n                    WatchRTCSocket._instance.wasConnected = true;\n                }\n            }\n            catch (err) {\n                (0, sdk_1.sdkLog)(\"error\", \"\\n\", { err: err.stack });\n                onError(err.message);\n            }\n        };\n        WatchRTCSocket._instance.connection.onerror = function (e) {\n            (0, sdk_1.sdkLog)(\"error\", \"\\n\", e);\n            onError(e, \"connection\");\n        };\n    };\n    WatchRTCSocket.prototype.close = function (nailUpCallEnd) {\n        var _a, _b;\n        if (nailUpCallEnd && ((_b = (_a = WatchRTCSocket._instance) === null || _a === void 0 ? void 0 : _a.connection) === null || _b === void 0 ? void 0 : _b.readyState) === globalContext.WebSocket.OPEN) {\n            var lines = JSON.stringify([\"nailUpCallEnd\", null, null, Date.now()]);\n            var compressedMessage = LZString.compressToEncodedURIComponent(lines);\n            WatchRTCSocket._instance.connection.send(compressedMessage);\n        }\n        WatchRTCSocket._instance.buffer = [];\n        WatchRTCSocket._instance.sendPromises.forEach(function (_a) {\n            var resolve = _a.resolve;\n            return resolve({ error: \"Connection was close\" });\n        });\n        WatchRTCSocket._instance.sendPromises = [];\n        if (WatchRTCSocket._instance.connection) {\n            WatchRTCSocket._instance.connection.close();\n            WatchRTCSocket._instance.onClose();\n            WatchRTCSocket._instance.connection = null;\n        }\n    };\n    WatchRTCSocket.prototype.disableDataCollection = function () {\n        (0, sdk_1.sdkLog)(\"debug\", \"Data collection disabled.\");\n        WatchRTCSocket._instance.dataCollection = false;\n    };\n    WatchRTCSocket.prototype.enableDataCollection = function () {\n        (0, sdk_1.sdkLog)(\"debug\", \"Data collection enabled.\");\n        WatchRTCSocket._instance.dataCollection = true;\n    };\n    WatchRTCSocket.prototype.isDisabledDataCollection = function () {\n        return !WatchRTCSocket._instance.dataCollection;\n    };\n    return WatchRTCSocket;\n}());\nexports.default = WatchRTCSocket;\n","!(function (e, r) {\n  \"object\" == typeof exports && \"undefined\" != typeof module\n    ? r(exports)\n    : \"function\" == typeof define && define.amd\n    ? define([\"exports\"], r)\n    : r(((e = \"undefined\" != typeof globalThis ? globalThis : e || self).DetectGPU = {}));\n})(this, function (e) {\n  \"use strict\";\n  var r = function (e, n) {\n    return (r =\n      Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array &&\n        function (e, r) {\n          e.__proto__ = r;\n        }) ||\n      function (e, r) {\n        for (var n in r) Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n]);\n      })(e, n);\n  };\n  function n(e, r, n, t) {\n    return new (n || (n = Promise))(function (o, a) {\n      function i(e) {\n        try {\n          u(t.next(e));\n        } catch (e) {\n          a(e);\n        }\n      }\n      function c(e) {\n        try {\n          u(t.throw(e));\n        } catch (e) {\n          a(e);\n        }\n      }\n      function u(e) {\n        var r;\n        e.done\n          ? o(e.value)\n          : ((r = e.value),\n            r instanceof n\n              ? r\n              : new n(function (e) {\n                  e(r);\n                })).then(i, c);\n      }\n      u((t = t.apply(e, r || [])).next());\n    });\n  }\n  function t(e, r) {\n    var n,\n      t,\n      o,\n      a,\n      i = {\n        label: 0,\n        sent: function () {\n          if (1 & o[0]) throw o[1];\n          return o[1];\n        },\n        trys: [],\n        ops: [],\n      };\n    return (\n      (a = { next: c(0), throw: c(1), return: c(2) }),\n      \"function\" == typeof Symbol &&\n        (a[Symbol.iterator] = function () {\n          return this;\n        }),\n      a\n    );\n    function c(a) {\n      return function (c) {\n        return (function (a) {\n          if (n) throw new TypeError(\"Generator is already executing.\");\n          for (; i; )\n            try {\n              if (\n                ((n = 1),\n                t &&\n                  (o = 2 & a[0] ? t.return : a[0] ? t.throw || ((o = t.return) && o.call(t), 0) : t.next) &&\n                  !(o = o.call(t, a[1])).done)\n              )\n                return o;\n              switch (((t = 0), o && (a = [2 & a[0], o.value]), a[0])) {\n                case 0:\n                case 1:\n                  o = a;\n                  break;\n                case 4:\n                  return i.label++, { value: a[1], done: !1 };\n                case 5:\n                  i.label++, (t = a[1]), (a = [0]);\n                  continue;\n                case 7:\n                  (a = i.ops.pop()), i.trys.pop();\n                  continue;\n                default:\n                  if (!((o = i.trys), (o = o.length > 0 && o[o.length - 1]) || (6 !== a[0] && 2 !== a[0]))) {\n                    i = 0;\n                    continue;\n                  }\n                  if (3 === a[0] && (!o || (a[1] > o[0] && a[1] < o[3]))) {\n                    i.label = a[1];\n                    break;\n                  }\n                  if (6 === a[0] && i.label < o[1]) {\n                    (i.label = o[1]), (o = a);\n                    break;\n                  }\n                  if (o && i.label < o[2]) {\n                    (i.label = o[2]), i.ops.push(a);\n                    break;\n                  }\n                  o[2] && i.ops.pop(), i.trys.pop();\n                  continue;\n              }\n              a = r.call(e, i);\n            } catch (e) {\n              (a = [6, e]), (t = 0);\n            } finally {\n              n = o = 0;\n            }\n          if (5 & a[0]) throw a[1];\n          return { value: a[0] ? a[1] : void 0, done: !0 };\n        })([a, c]);\n      };\n    }\n  }\n  var o = [\n    \"geforce 320m\",\n    \"geforce 8600\",\n    \"geforce 8600m gt\",\n    \"geforce 8800 gs\",\n    \"geforce 8800 gt\",\n    \"geforce 9400\",\n    \"geforce 9400m g\",\n    \"geforce 9400m\",\n    \"geforce 9600m gt\",\n    \"geforce 9600m\",\n    \"geforce fx go5200\",\n    \"geforce gt 120\",\n    \"geforce gt 130\",\n    \"geforce gt 330m\",\n    \"geforce gtx 285\",\n    \"google swiftshader\",\n    \"intel g41\",\n    \"intel g45\",\n    \"intel gma 4500mhd\",\n    \"intel gma x3100\",\n    \"intel hd 3000\",\n    \"intel q45\",\n    \"legacy\",\n    \"mali-2\",\n    \"mali-3\",\n    \"mali-4\",\n    \"quadro fx 1500\",\n    \"quadro fx 4\",\n    \"quadro fx 5\",\n    \"radeon hd 2400\",\n    \"radeon hd 2600\",\n    \"radeon hd 4670\",\n    \"radeon hd 4850\",\n    \"radeon hd 4870\",\n    \"radeon hd 5670\",\n    \"radeon hd 5750\",\n    \"radeon hd 6290\",\n    \"radeon hd 6300\",\n    \"radeon hd 6310\",\n    \"radeon hd 6320\",\n    \"radeon hd 6490m\",\n    \"radeon hd 6630m\",\n    \"radeon hd 6750m\",\n    \"radeon hd 6770m\",\n    \"radeon hd 6970m\",\n    \"sgx 543\",\n    \"sgx543\",\n  ];\n  function a(e) {\n    return (e = e\n      .toLowerCase()\n      .replace(/^angle ?\\((.+)\\)*$/, \"$1\")\n      .replace(/\\s(\\d{1,2}gb|direct3d.+$)|\\(r\\)| \\([^)]+\\)$/g, \"\"));\n  }\n  const i = 34962;\n  var c = \"undefined\" == typeof window,\n    u = (function () {\n      if (!c) {\n        var e = window.navigator,\n          r = e.userAgent,\n          n = e.platform,\n          t = e.maxTouchPoints,\n          o = /(iphone|ipod|ipad)/i.test(r),\n          a = \"iPad\" === n || (\"MacIntel\" === n && t > 0 && !window.MSStream);\n        return { isIpad: a, isMobile: /android/i.test(r) || o || a, isSafari12: /Version\\/12.+Safari/.test(r) };\n      }\n    })();\n  function f(e, r, n) {\n    if (!n) return [r];\n    var t,\n      o = (function (e) {\n        var r =\n            \"\\n    precision highp float;\\n    attribute vec3 aPosition;\\n    varying float vvv;\\n    void main() {\\n      vvv = 0.31622776601683794;\\n      gl_Position = vec4(aPosition, 1.0);\\n    }\\n  \",\n          n =\n            \"\\n    precision highp float;\\n    varying float vvv;\\n    void main() {\\n      vec4 enc = vec4(1.0, 255.0, 65025.0, 16581375.0) * vvv;\\n      enc = fract(enc);\\n      enc -= enc.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\\n      gl_FragColor = enc;\\n    }\\n  \",\n          t = e.createShader(35633),\n          o = e.createShader(35632),\n          a = e.createProgram();\n        if (!(o && t && a)) return;\n        e.shaderSource(t, r),\n          e.shaderSource(o, n),\n          e.compileShader(t),\n          e.compileShader(o),\n          e.attachShader(a, t),\n          e.attachShader(a, o),\n          e.linkProgram(a),\n          e.detachShader(a, t),\n          e.detachShader(a, o),\n          e.deleteShader(t),\n          e.deleteShader(o),\n          e.useProgram(a);\n        var c = e.createBuffer();\n        e.bindBuffer(i, c), e.bufferData(i, new Float32Array([-1, -1, 0, 3, -1, 0, -1, 3, 0]), 35044);\n        var u = e.getAttribLocation(a, \"aPosition\");\n        e.vertexAttribPointer(u, 3, 5126, !1, 0, 0),\n          e.enableVertexAttribArray(u),\n          e.clearColor(1, 1, 1, 1),\n          e.clear(16384),\n          e.viewport(0, 0, 1, 1),\n          e.drawArrays(4, 0, 3);\n        var f = new Uint8Array(4);\n        return e.readPixels(0, 0, 1, 1, 6408, 5121, f), e.deleteProgram(a), e.deleteBuffer(c), f.join(\"\");\n      })(e),\n      a = \"801621810\",\n      c = \"8016218135\",\n      f = \"80162181161\",\n      l = (null == u ? void 0 : u.isIpad)\n        ? [\n            [\"a7\", f, 12],\n            [\"a8\", c, 15],\n            [\"a8x\", c, 15],\n            [\"a9\", c, 15],\n            [\"a9x\", c, 15],\n            [\"a10\", c, 15],\n            [\"a10x\", c, 15],\n            [\"a12\", a, 15],\n            [\"a12x\", a, 15],\n            [\"a12z\", a, 15],\n            [\"a14\", a, 15],\n            [\"m1\", a, 15],\n          ]\n        : [\n            [\"a7\", f, 12],\n            [\"a8\", c, 12],\n            [\"a9\", c, 15],\n            [\"a10\", c, 15],\n            [\"a11\", a, 15],\n            [\"a12\", a, 15],\n            [\"a13\", a, 15],\n            [\"a14\", a, 15],\n          ];\n    return (\n      \"80162181255\" === o\n        ? (t = l.filter(function (e) {\n            return e[2] >= 14;\n          }))\n        : (t = l.filter(function (e) {\n            return e[1] === o;\n          })).length || (t = l),\n      t.map(function (e) {\n        var r = e[0];\n        return \"apple \".concat(r, \" gpu\");\n      })\n    );\n  }\n  var l = [],\n    d = [];\n  function s(e, r) {\n    if (e === r) return 0;\n    var n = e;\n    e.length > r.length && ((e = r), (r = n));\n    for (var t = e.length, o = r.length; t > 0 && e.charCodeAt(~-t) === r.charCodeAt(~-o); ) t--, o--;\n    for (var a, i = 0; i < t && e.charCodeAt(i) === r.charCodeAt(i); ) i++;\n    if (((o -= i), 0 === (t -= i))) return o;\n    for (var c, u, f = 0, s = 0, h = 0; s < t; ) (d[s] = e.charCodeAt(i + s)), (l[s] = ++s);\n    for (; h < o; )\n      for (a = r.charCodeAt(i + h), c = h++, f = h, s = 0; s < t; s++)\n        (u = a === d[s] ? c : c + 1), (c = l[s]), (f = l[s] = c > f ? (u > f ? f + 1 : u) : u > c ? c + 1 : u);\n    return f;\n  }\n  function h(e) {\n    return null != e;\n  }\n  var v = (function (e) {\n    function n(r) {\n      var n = this.constructor,\n        t = e.call(this, r) || this;\n      return Object.setPrototypeOf(t, n.prototype), t;\n    }\n    return (\n      (function (e, n) {\n        if (\"function\" != typeof n && null !== n)\n          throw new TypeError(\"Class extends value \" + String(n) + \" is not a constructor or null\");\n        function t() {\n          this.constructor = e;\n        }\n        r(e, n), (e.prototype = null === n ? Object.create(n) : ((t.prototype = n.prototype), new t()));\n      })(n, e),\n      n\n    );\n  })(Error);\n  (e.getGPUTier = function (e) {\n    var r = void 0 === e ? {} : e,\n      i = r.mobileTiers,\n      l = void 0 === i ? [0, 15, 30, 60] : i,\n      d = r.desktopTiers,\n      p = void 0 === d ? [0, 15, 30, 60] : d,\n      g = r.override,\n      m = void 0 === g ? {} : g,\n      b = r.glContext,\n      w = r.failIfMajorPerformanceCaveat,\n      y = void 0 !== w && w,\n      x = r.benchmarksURL,\n      P = void 0 === x ? \"https://unpkg.com/detect-gpu@\".concat(\"4.0.8\", \"/dist/benchmarks\") : x;\n    return n(void 0, void 0, void 0, function () {\n      var e, r, i, d, g, w, x, A, S, _, C, E, L, M, j, B, k, O, T, U, I, D, R, G, N, K;\n      return t(this, function (W) {\n        switch (W.label) {\n          case 0:\n            if (((e = {}), c)) return [2, { tier: 0, type: \"SSR\" }];\n            if (\n              ((r = m.isIpad),\n              (i = void 0 === r ? !!(null == u ? void 0 : u.isIpad) : r),\n              (d = m.isMobile),\n              (g = void 0 === d ? !!(null == u ? void 0 : u.isMobile) : d),\n              (w = m.screenSize),\n              (x = void 0 === w ? window.screen : w),\n              (A = m.loadBenchmarks),\n              (S =\n                void 0 === A\n                  ? function (e) {\n                      return n(void 0, void 0, void 0, function () {\n                        var r;\n                        return t(this, function (n) {\n                          switch (n.label) {\n                            case 0:\n                              return [\n                                4,\n                                fetch(\"\".concat(P, \"/\").concat(e)).then(function (e) {\n                                  return e.json();\n                                }),\n                              ];\n                            case 1:\n                              if (((r = n.sent()), parseInt(r.shift().split(\".\")[0], 10) < 4))\n                                throw new v(\"Detect GPU benchmark data is out of date. Please update to version 4x\");\n                              return [2, r];\n                          }\n                        });\n                      });\n                    }\n                  : A),\n              (_ = m.renderer),\n              (C = function (e) {\n                for (\n                  var r = 0,\n                    n = g\n                      ? [\"adreno\", \"apple\", \"mali-t\", \"mali\", \"nvidia\", \"powervr\"]\n                      : [\"intel\", \"apple\", \"amd\", \"radeon\", \"nvidia\", \"geforce\"];\n                  r < n.length;\n                  r++\n                ) {\n                  var t = n[r];\n                  if (e.includes(t)) return t;\n                }\n              }),\n              (E = function (r) {\n                return n(void 0, void 0, void 0, function () {\n                  var n, o, a, c, u, f, l, d, h, p, m, b, w, y, P, A, _, E, L, M, j, B, k, O, T, U;\n                  return t(this, function (t) {\n                    switch (t.label) {\n                      case 0:\n                        if (!(n = C(r))) return [2];\n                        (o = \"\"\n                          .concat(g ? \"m\" : \"d\", \"-\")\n                          .concat(n)\n                          .concat(i ? \"-ipad\" : \"\", \".json\")),\n                          (a = e[o] = null !== (U = e[o]) && void 0 !== U ? U : S(o)),\n                          (t.label = 1);\n                      case 1:\n                        return t.trys.push([1, 3, , 4]), [4, a];\n                      case 2:\n                        return (c = t.sent()), [3, 4];\n                      case 3:\n                        if ((u = t.sent()) instanceof v) throw u;\n                        return [2];\n                      case 4:\n                        if (\n                          ((f = (function (e) {\n                            var r,\n                              n =\n                                (e = e.replace(/\\([^)]+\\)/, \"\")).match(/\\d+/) ||\n                                e.match(/(\\W|^)([A-Za-z]{1,3})(\\W|$)/g);\n                            return null !== (r = null == n ? void 0 : n.join(\"\").replace(/\\W|amd/g, \"\")) && void 0 !== r\n                              ? r\n                              : \"\";\n                          })(r)),\n                          (l = c.filter(function (e) {\n                            return e[1] === f;\n                          })).length ||\n                            (l = c.filter(function (e) {\n                              return e[0].includes(r);\n                            })),\n                          0 === (d = l.length))\n                        )\n                          return [2];\n                        for (\n                          h =\n                            d > 1\n                              ? l\n                                  .map(function (e) {\n                                    return [e, s(r, e[0])];\n                                  })\n                                  .sort(function (e, r) {\n                                    return e[1] - r[1];\n                                  })[0][0]\n                              : l[0],\n                            p = h[0],\n                            m = h[3],\n                            b = Number.MAX_VALUE,\n                            y = window.devicePixelRatio,\n                            P = x.width * y * x.height * y,\n                            A = 0,\n                            _ = m;\n                          A < _.length;\n                          A++\n                        )\n                          (E = _[A]),\n                            (L = E[0]),\n                            (M = E[1]),\n                            (j = L * M),\n                            (B = Math.abs(P - j)) < b && ((b = B), (w = E));\n                        return w ? ((O = (k = w)[2]), (T = k[3]), [2, [b, O, p, T]]) : [2];\n                    }\n                  });\n                });\n              }),\n              (L = function (e, r, n, t, o) {\n                return { device: o, fps: t, gpu: n, isMobile: g, tier: e, type: r };\n              }),\n              (j = \"\"),\n              _)\n            )\n              (_ = a(_)), (M = [_]);\n            else {\n              if (\n                !(B =\n                  b ||\n                  (function (e, r) {\n                    void 0 === r && (r = !1);\n                    var n = {\n                      alpha: !1,\n                      antialias: !1,\n                      depth: !1,\n                      failIfMajorPerformanceCaveat: r,\n                      powerPreference: \"high-performance\",\n                      stencil: !1,\n                    };\n                    e && delete n.powerPreference;\n                    var t = window.document.createElement(\"canvas\"),\n                      o = t.getContext(\"webgl\", n) || t.getContext(\"experimental-webgl\", n);\n                    return null != o ? o : void 0;\n                  })(null == u ? void 0 : u.isSafari12, y))\n              )\n                return [2, L(0, \"WEBGL_UNSUPPORTED\")];\n              if (\n                ((k = B.getExtension(\"WEBGL_debug_renderer_info\")) && (_ = B.getParameter(k.UNMASKED_RENDERER_WEBGL)),\n                !_)\n              )\n                return [2, L(1, \"FALLBACK\")];\n              (j = _),\n                (_ = a(_)),\n                (M = (function (e, r, n) {\n                  return \"apple gpu\" === r ? f(e, r, n) : [r];\n                })(B, _, g));\n            }\n            return [4, Promise.all(M.map(E))];\n          case 1:\n            if (\n              !(O = W.sent()\n                .filter(h)\n                .sort(function (e, r) {\n                  var n = e[0],\n                    t = void 0 === n ? Number.MAX_VALUE : n,\n                    o = e[1],\n                    a = r[0],\n                    i = void 0 === a ? Number.MAX_VALUE : a,\n                    c = r[1];\n                  return t === i ? o - c : t - i;\n                })).length\n            )\n              return [\n                2,\n                (T = o.find(function (e) {\n                  return _.includes(e);\n                }))\n                  ? L(0, \"BLOCKLISTED\", T)\n                  : L(1, \"FALLBACK\", \"\".concat(_, \" (\").concat(j, \")\")),\n              ];\n            if (((U = O[0]), (I = U[1]), (D = U[2]), (R = U[3]), -1 === I)) return [2, L(0, \"BLOCKLISTED\", D, I, R)];\n            for (G = g ? l : p, N = 0, K = 0; K < G.length; K++) I >= G[K] && (N = K);\n            return [2, L(N, \"BENCHMARK\", D, I, R)];\n        }\n      });\n    });\n  }),\n    Object.defineProperty(e, \"__esModule\", { value: !0 });\n});\n//# sourceMappingURL=detect-gpu.umd.js.map\n","var map = {\n\t\"./d-adreno.json\": 622,\n\t\"./d-amd.json\": 183,\n\t\"./d-apple.json\": 732,\n\t\"./d-geforce.json\": 405,\n\t\"./d-intel.json\": 178,\n\t\"./d-nvidia.json\": 217,\n\t\"./d-radeon.json\": 145,\n\t\"./m-adreno.json\": 921,\n\t\"./m-apple-ipad.json\": 535,\n\t\"./m-apple.json\": 438,\n\t\"./m-intel.json\": 283,\n\t\"./m-mali-t.json\": 327,\n\t\"./m-mali.json\": 538,\n\t\"./m-nvidia.json\": 884,\n\t\"./m-powervr.json\": 214\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 804;","var LZString = (function () {\n  function o(o, r) {\n    if (!t[o]) {\n      t[o] = {};\n      for (var n = 0; n < o.length; n++) t[o][o.charAt(n)] = n;\n    }\n    return t[o][r];\n  }\n  var r = String.fromCharCode,\n    n = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n    e = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\",\n    t = {},\n    i = {\n      compressToBase64: function (o) {\n        if (null == o) return \"\";\n        var r = i._compress(o, 6, function (o) {\n          return n.charAt(o);\n        });\n        switch (r.length % 4) {\n          default:\n          case 0:\n            return r;\n          case 1:\n            return r + \"===\";\n          case 2:\n            return r + \"==\";\n          case 3:\n            return r + \"=\";\n        }\n      },\n      decompressFromBase64: function (r) {\n        return null == r\n          ? \"\"\n          : \"\" == r\n          ? null\n          : i._decompress(r.length, 32, function (e) {\n              return o(n, r.charAt(e));\n            });\n      },\n      compressToUTF16: function (o) {\n        return null == o\n          ? \"\"\n          : i._compress(o, 15, function (o) {\n              return r(o + 32);\n            }) + \" \";\n      },\n      decompressFromUTF16: function (o) {\n        return null == o\n          ? \"\"\n          : \"\" == o\n          ? null\n          : i._decompress(o.length, 16384, function (r) {\n              return o.charCodeAt(r) - 32;\n            });\n      },\n      compressToUint8Array: function (o) {\n        for (\n          var r = i.compress(o), n = new Uint8Array(2 * r.length), e = 0, t = r.length;\n          t > e;\n          e++\n        ) {\n          var s = r.charCodeAt(e);\n          (n[2 * e] = s >>> 8), (n[2 * e + 1] = s % 256);\n        }\n        return n;\n      },\n      decompressFromUint8Array: function (o) {\n        if (null === o || void 0 === o) return i.decompress(o);\n        for (var n = new Array(o.length / 2), e = 0, t = n.length; t > e; e++)\n          n[e] = 256 * o[2 * e] + o[2 * e + 1];\n        var s = [];\n        return (\n          n.forEach(function (o) {\n            s.push(r(o));\n          }),\n          i.decompress(s.join(\"\"))\n        );\n      },\n      compressToEncodedURIComponent: function (o) {\n        return null == o\n          ? \"\"\n          : i._compress(o, 6, function (o) {\n              return e.charAt(o);\n            });\n      },\n      decompressFromEncodedURIComponent: function (r) {\n        return null == r\n          ? \"\"\n          : \"\" == r\n          ? null\n          : ((r = r.replace(/ /g, \"+\")),\n            i._decompress(r.length, 32, function (n) {\n              return o(e, r.charAt(n));\n            }));\n      },\n      compress: function (o) {\n        return i._compress(o, 16, function (o) {\n          return r(o);\n        });\n      },\n      _compress: function (o, r, n) {\n        if (null == o) return \"\";\n        var e,\n          t,\n          i,\n          s = {},\n          p = {},\n          u = \"\",\n          c = \"\",\n          a = \"\",\n          l = 2,\n          f = 3,\n          h = 2,\n          d = [],\n          m = 0,\n          v = 0;\n        for (i = 0; i < o.length; i += 1)\n          if (\n            ((u = o.charAt(i)),\n            Object.prototype.hasOwnProperty.call(s, u) || ((s[u] = f++), (p[u] = !0)),\n            (c = a + u),\n            Object.prototype.hasOwnProperty.call(s, c))\n          )\n            a = c;\n          else {\n            if (Object.prototype.hasOwnProperty.call(p, a)) {\n              if (a.charCodeAt(0) < 256) {\n                for (e = 0; h > e; e++)\n                  (m <<= 1), v == r - 1 ? ((v = 0), d.push(n(m)), (m = 0)) : v++;\n                for (t = a.charCodeAt(0), e = 0; 8 > e; e++)\n                  (m = (m << 1) | (1 & t)),\n                    v == r - 1 ? ((v = 0), d.push(n(m)), (m = 0)) : v++,\n                    (t >>= 1);\n              } else {\n                for (t = 1, e = 0; h > e; e++)\n                  (m = (m << 1) | t), v == r - 1 ? ((v = 0), d.push(n(m)), (m = 0)) : v++, (t = 0);\n                for (t = a.charCodeAt(0), e = 0; 16 > e; e++)\n                  (m = (m << 1) | (1 & t)),\n                    v == r - 1 ? ((v = 0), d.push(n(m)), (m = 0)) : v++,\n                    (t >>= 1);\n              }\n              l--, 0 == l && ((l = Math.pow(2, h)), h++), delete p[a];\n            } else\n              for (t = s[a], e = 0; h > e; e++)\n                (m = (m << 1) | (1 & t)),\n                  v == r - 1 ? ((v = 0), d.push(n(m)), (m = 0)) : v++,\n                  (t >>= 1);\n            l--, 0 == l && ((l = Math.pow(2, h)), h++), (s[c] = f++), (a = String(u));\n          }\n        if (\"\" !== a) {\n          if (Object.prototype.hasOwnProperty.call(p, a)) {\n            if (a.charCodeAt(0) < 256) {\n              for (e = 0; h > e; e++)\n                (m <<= 1), v == r - 1 ? ((v = 0), d.push(n(m)), (m = 0)) : v++;\n              for (t = a.charCodeAt(0), e = 0; 8 > e; e++)\n                (m = (m << 1) | (1 & t)),\n                  v == r - 1 ? ((v = 0), d.push(n(m)), (m = 0)) : v++,\n                  (t >>= 1);\n            } else {\n              for (t = 1, e = 0; h > e; e++)\n                (m = (m << 1) | t), v == r - 1 ? ((v = 0), d.push(n(m)), (m = 0)) : v++, (t = 0);\n              for (t = a.charCodeAt(0), e = 0; 16 > e; e++)\n                (m = (m << 1) | (1 & t)),\n                  v == r - 1 ? ((v = 0), d.push(n(m)), (m = 0)) : v++,\n                  (t >>= 1);\n            }\n            l--, 0 == l && ((l = Math.pow(2, h)), h++), delete p[a];\n          } else\n            for (t = s[a], e = 0; h > e; e++)\n              (m = (m << 1) | (1 & t)),\n                v == r - 1 ? ((v = 0), d.push(n(m)), (m = 0)) : v++,\n                (t >>= 1);\n          l--, 0 == l && ((l = Math.pow(2, h)), h++);\n        }\n        for (t = 2, e = 0; h > e; e++)\n          (m = (m << 1) | (1 & t)), v == r - 1 ? ((v = 0), d.push(n(m)), (m = 0)) : v++, (t >>= 1);\n        for (;;) {\n          if (((m <<= 1), v == r - 1)) {\n            d.push(n(m));\n            break;\n          }\n          v++;\n        }\n        return d.join(\"\");\n      },\n      decompress: function (o) {\n        return null == o\n          ? \"\"\n          : \"\" == o\n          ? null\n          : i._decompress(o.length, 32768, function (r) {\n              return o.charCodeAt(r);\n            });\n      },\n      _decompress: function (o, n, e) {\n        var t,\n          i,\n          s,\n          p,\n          u,\n          c,\n          a,\n          l,\n          f = [],\n          h = 4,\n          d = 4,\n          m = 3,\n          v = \"\",\n          w = [],\n          A = { val: e(0), position: n, index: 1 };\n        for (i = 0; 3 > i; i += 1) f[i] = i;\n        for (p = 0, c = Math.pow(2, 2), a = 1; a != c; )\n          (u = A.val & A.position),\n            (A.position >>= 1),\n            0 == A.position && ((A.position = n), (A.val = e(A.index++))),\n            (p |= (u > 0 ? 1 : 0) * a),\n            (a <<= 1);\n        switch ((t = p)) {\n          case 0:\n            for (p = 0, c = Math.pow(2, 8), a = 1; a != c; )\n              (u = A.val & A.position),\n                (A.position >>= 1),\n                0 == A.position && ((A.position = n), (A.val = e(A.index++))),\n                (p |= (u > 0 ? 1 : 0) * a),\n                (a <<= 1);\n            l = r(p);\n            break;\n          case 1:\n            for (p = 0, c = Math.pow(2, 16), a = 1; a != c; )\n              (u = A.val & A.position),\n                (A.position >>= 1),\n                0 == A.position && ((A.position = n), (A.val = e(A.index++))),\n                (p |= (u > 0 ? 1 : 0) * a),\n                (a <<= 1);\n            l = r(p);\n            break;\n          case 2:\n            return \"\";\n        }\n        for (f[3] = l, s = l, w.push(l); ; ) {\n          if (A.index > o) return \"\";\n          for (p = 0, c = Math.pow(2, m), a = 1; a != c; )\n            (u = A.val & A.position),\n              (A.position >>= 1),\n              0 == A.position && ((A.position = n), (A.val = e(A.index++))),\n              (p |= (u > 0 ? 1 : 0) * a),\n              (a <<= 1);\n          switch ((l = p)) {\n            case 0:\n              for (p = 0, c = Math.pow(2, 8), a = 1; a != c; )\n                (u = A.val & A.position),\n                  (A.position >>= 1),\n                  0 == A.position && ((A.position = n), (A.val = e(A.index++))),\n                  (p |= (u > 0 ? 1 : 0) * a),\n                  (a <<= 1);\n              (f[d++] = r(p)), (l = d - 1), h--;\n              break;\n            case 1:\n              for (p = 0, c = Math.pow(2, 16), a = 1; a != c; )\n                (u = A.val & A.position),\n                  (A.position >>= 1),\n                  0 == A.position && ((A.position = n), (A.val = e(A.index++))),\n                  (p |= (u > 0 ? 1 : 0) * a),\n                  (a <<= 1);\n              (f[d++] = r(p)), (l = d - 1), h--;\n              break;\n            case 2:\n              return w.join(\"\");\n          }\n          if ((0 == h && ((h = Math.pow(2, m)), m++), f[l])) v = f[l];\n          else {\n            if (l !== d) return null;\n            v = s + s.charAt(0);\n          }\n          w.push(v),\n            (f[d++] = s + v.charAt(0)),\n            h--,\n            (s = v),\n            0 == h && ((h = Math.pow(2, m)), m++);\n        }\n      },\n    };\n  return i;\n})();\n\"function\" == typeof define && define.amd\n  ? define(function () {\n      return LZString;\n    })\n  : \"undefined\" != typeof module && null != module && (module.exports = LZString);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(607);\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export enum XMPPEvents {\n\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED = 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS = 'xmpp.audio_muted_by_focus',\n\n    AUTHENTICATION_REQUIRED = 'xmpp.authentication_required',\n\n    /**\n     * Event fired when we receive a message for AV moderation approved for the local participant.\n     */\n    AV_MODERATION_APPROVED = 'xmpp.av_moderation.approved',\n\n    /**\n     * Event fired when the moderation enable/disable changes.\n     */\n    AV_MODERATION_CHANGED = 'xmpp.av_moderation.changed',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED = 'xmpp.av_moderation.participant.approved',\n\n    /**\n     * Event fired when we receive message that a new jid was approved.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED = 'xmpp.av_moderation.participant.rejected',\n\n    /**\n     * Event fired when we receive a message for AV moderation.\n     */\n    AV_MODERATION_RECEIVED = 'xmpp.av_moderation.received',\n\n    /**\n    * Event fired when we receive a message for AV moderation rejected for the local participant.\n    */\n    AV_MODERATION_REJECTED = 'xmpp.av_moderation.rejected',\n\n    /**\n     * Event fired when we receive a message for breakout rooms.\n     */\n    BREAKOUT_ROOMS_EVENT = 'xmpp.breakout-rooms.event',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM = 'xmpp.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED = 'xmpp.breakout-rooms.updated',\n\n    BRIDGE_DOWN = 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED = 'xmpp.callaccepted.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED = 'xmpp.callended.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING = 'xmpp.callincoming.jingle',\n\n    CHAT_ERROR_RECEIVED = 'xmpp.chat_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED = 'xmpp.conference_properties_changed',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED = 'xmpp.conference_timestamp_received',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED = 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED = 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED = 'xmpp.connection.ice.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED = 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the call has been migrated to a different\n    // bridge and that the client needs to be restarted for a successful transition.\n    CONNECTION_RESTARTED = 'xmpp.connection.restart',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED = 'xmpp.connection.restored',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED = 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED = 'xmpp.display_name_changed',\n\n    /**\n     * Event for incoming presence error which is for required display name.\n     */\n    DISPLAY_NAME_REQUIRED = 'xmpp.display_name_required',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED = 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED = 'xmpp.emuc_room_removed',\n\n    ETHERPAD = 'xmpp.etherpad',\n\n    FOCUS_DISCONNECTED = 'xmpp.focus_disconnected',\n\n    FOCUS_LEFT = 'xmpp.focus_left',\n\n    GRACEFUL_SHUTDOWN = 'xmpp.graceful_shutdown',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED = 'xmpp.ice_connection_state_changed',\n\n    // Designates an event indicating that an invite XMPP message in the MUC was\n    // received.\n    INVITE_MESSAGE_RECEIVED = 'xmpp.invite_message_received',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     * TODO: this event contains a typo (xmmp vs xmpp) but it's unlikely this can be changed now\n     */\n    JSON_MESSAGE_RECEIVED = 'xmmp.json_message_received',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initiator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED = 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED = 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET = 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED = 'xmpp.message_received',\n\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\n    MUC_DENIED_ACCESS = 'xmpp.muc_denied access',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED = 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED = 'xmpp.muc_joined',\n\n    // Designates an event indicating that we are currently in process of joining the XMPP MUC.\n    MUC_JOIN_IN_PROGRESS = 'xmpp.muc_join_in_progress',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT = 'xmpp.muc_left',\n\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\n    MUC_LOBBY_MEMBER_JOINED = 'xmpp.muc_lobby_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_LOBBY_MEMBER_LEFT = 'xmpp.muc_lobby_member_left',\n\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\n    MUC_LOBBY_MEMBER_UPDATED = 'xmpp.muc_lobby_member_updated',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED = 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that the MUC members only config has changed.\n    MUC_MEMBERS_ONLY_CHANGED = 'xmpp.muc_members_only_changed',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED = 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED = 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT = 'xmpp.muc_member_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED = 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC visitors support has changed.\n    MUC_VISITORS_SUPPORTED_CHANGED = 'xmpp.muc_visitors_supported_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED = 'xmpp.audio_muted',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTICIPANT_FEATURES_CHANGED = 'xmpp.participant_features_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED = 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note = currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED = 'xmpp.video_type',\n\n    PASSWORD_REQUIRED = 'xmpp.password_required',\n\n    /**\n     * Event fired when we receive a self-presence with permissions.\n     */\n    PERMISSIONS_RECEIVED = 'xmpp.permissions_received',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED = 'xmpp.presence_received',\n    PRESENCE_STATUS = 'xmpp.presence_status',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED = 'xmpp.private_message_received',\n    PROMPT_FOR_LOGIN = 'xmpp.prompt_for_login',\n\n    // Designates an event indicating that a reaction XMPP message in the MUC\n    // was received.\n    REACTION_RECEIVED = 'xmpp.reaction_received',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN = 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED = 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS = 'xmpp.remote_stats',\n\n    RESERVATION_ERROR = 'xmpp.room_reservation_error',\n\n    ROOM_CONNECT_ERROR = 'xmpp.room_connect_error',\n\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR = 'xmpp.room_connect_error.members_only',\n\n    ROOM_CONNECT_NOT_ALLOWED_ERROR = 'xmpp.room_connect_error.not_allowed',\n\n    ROOM_DISCO_INFO_FAILED = 'xmpp.room_disco_info_failed',\n\n    /**\n     * Indicates that we have received a reply to our disco-info request for the room.\n     */\n    ROOM_DISCO_INFO_UPDATED = 'xmpp.room_disco_info_updated',\n\n    ROOM_JOIN_ERROR = 'xmpp.room_join_error',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR = 'xmpp.room_max_users_error',\n\n    /**\n     * Event fired when we receive a message related to room metadata.\n     */\n    ROOM_METADATA_EVENT = 'xmpp.room-metadata.event',\n\n    /**\n     * Event fired when we receive a message related to room metadata.\n     */\n    ROOM_METADATA_UPDATED = 'xmpp.room-metadata.updated',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE = 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE = 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired after receiving the confirmation about session accept.\n     */\n    SESSION_ACCEPT = 'xmpp.session_accept',\n\n    /**\n     * Event fired if we receive an error after sending the session accept.\n     */\n    SESSION_ACCEPT_ERROR = 'xmpp.session_accept_error',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT = 'xmpp.session_accept_timeout',\n\n    SETTINGS_ERROR_RECEIVED = 'xmpp.settings_error_received',\n\n    /**\n     * Event fired when participant joins a meeting without audio.\n     */\n    SILENT_STATUS_CHANGED = 'xmpp.silent_status_changed',\n\n    /**\n     * Event fired after successful sending of jingle source-add.\n     */\n    SOURCE_ADD = 'xmpp.source_add',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-add.\n     */\n    SOURCE_ADD_ERROR = 'xmpp.source_add_error',\n\n    /**\n     * Event fired after successful sending of jingle source-remove.\n     */\n    SOURCE_REMOVE = 'xmpp.source_remove',\n\n    /**\n     * Event fired after receiving an error sending of jingle source-remove.\n     */\n    SOURCE_REMOVE_ERROR = 'xmpp.source_remove_error',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED = 'xmpp.speaker_stats_received',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED = 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED = 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED = 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO = 'xmpp.transportinfo.jingle',\n\n    // Designates an event indicating that the focus has asked us to disable our\n    // camera.\n    VIDEO_MUTED_BY_FOCUS = 'xmpp.video_muted_by_focus',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWStatusConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED = 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWStateConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED = 'xmpp.videoSIPGWSessionStateChanged',\n\n    /**\n     * Event indicating we have received a message from the visitors component.\n     */\n    VISITORS_MESSAGE = 'xmpp.visitors_message',\n\n    /**\n     * Event indicating that our request for promotion was rejected.\n     */\n    VISITORS_REJECTION = 'xmpp.visitors_rejection',\n\n}\n","/*! jQuery v3.6.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-deprecated/ajax-event-alias,-effects,-effects/Tween,-effects/animatedSelector | (c) OpenJS Foundation and other contributors | jquery.org/license */\n!function(e,t){\"use strict\";\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error(\"jQuery requires a window with a document\");return t(e)}:t(e)}(\"undefined\"!=typeof window?window:this,function(g,e){\"use strict\";var t=[],r=Object.getPrototypeOf,s=t.slice,v=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},u=t.push,i=t.indexOf,n={},o=n.toString,y=n.hasOwnProperty,a=y.toString,l=a.call(Object),m={},b=function(e){return\"function\"==typeof e&&\"number\"!=typeof e.nodeType&&\"function\"!=typeof e.item},x=function(e){return null!=e&&e===e.window},w=g.document,c={type:!0,src:!0,nonce:!0,noModule:!0};function C(e,t,n){var r,i,o=(n=n||w).createElement(\"script\");if(o.text=e,t)for(r in c)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function T(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?n[o.call(e)]||\"object\":typeof e}var f=\"3.6.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-deprecated/ajax-event-alias,-effects,-effects/Tween,-effects/animatedSelector\",E=function(e,t){return new E.fn.init(e,t)};function d(e){var t=!!e&&\"length\"in e&&e.length,n=T(e);return!b(e)&&!x(e)&&(\"array\"===n||0===t||\"number\"==typeof t&&0<t&&t-1 in e)}E.fn=E.prototype={jquery:f,constructor:E,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=E.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return E.each(this,e)},map:function(n){return this.pushStack(E.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(E.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(E.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:t.sort,splice:t.splice},E.extend=E.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for(\"boolean\"==typeof a&&(l=a,a=arguments[s]||{},s++),\"object\"==typeof a||b(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],\"__proto__\"!==t&&a!==r&&(l&&r&&(E.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||E.isPlainObject(n)?n:{},i=!1,a[t]=E.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},E.extend({expando:\"jQuery\"+(f+Math.random()).replace(/\\D/g,\"\"),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||\"[object Object]\"!==o.call(e))&&(!(t=r(e))||\"function\"==typeof(n=y.call(t,\"constructor\")&&t.constructor)&&a.call(n)===l)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){C(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(d(e)){for(n=e.length;r<n;r++)if(!1===t.call(e[r],r,e[r]))break}else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(d(Object(e))?E.merge(n,\"string\"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:i.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(d(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return v(a)},guid:1,support:m}),\"function\"==typeof Symbol&&(E.fn[Symbol.iterator]=t[Symbol.iterator]),E.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"),function(e,t){n[\"[object \"+t+\"]\"]=t.toLowerCase()});var p=function(n){var e,p,x,o,i,h,f,g,w,u,l,C,T,a,E,v,s,c,y,A=\"sizzle\"+1*new Date,d=n.document,N=0,r=0,m=ue(),b=ue(),S=ue(),k=ue(),D=function(e,t){return e===t&&(l=!0),0},L={}.hasOwnProperty,t=[],j=t.pop,q=t.push,O=t.push,P=t.slice,H=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},I=\"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",R=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",B=\"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\"+R+\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",M=\"\\\\[\"+R+\"*(\"+B+\")(?:\"+R+\"*([*^$|!~]?=)\"+R+\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\"+B+\"))|)\"+R+\"*\\\\]\",W=\":(\"+B+\")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\"+M+\")*)|.*)\\\\)|)\",F=new RegExp(R+\"+\",\"g\"),$=new RegExp(\"^\"+R+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+R+\"+$\",\"g\"),z=new RegExp(\"^\"+R+\"*,\"+R+\"*\"),_=new RegExp(\"^\"+R+\"*([>+~]|\"+R+\")\"+R+\"*\"),U=new RegExp(R+\"|>\"),V=new RegExp(W),X=new RegExp(\"^\"+B+\"$\"),Q={ID:new RegExp(\"^#(\"+B+\")\"),CLASS:new RegExp(\"^\\\\.(\"+B+\")\"),TAG:new RegExp(\"^(\"+B+\"|[*])\"),ATTR:new RegExp(\"^\"+M),PSEUDO:new RegExp(\"^\"+W),CHILD:new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\"+R+\"*(even|odd|(([+-]|)(\\\\d*)n|)\"+R+\"*(?:([+-]|)\"+R+\"*(\\\\d+)|))\"+R+\"*\\\\)|)\",\"i\"),bool:new RegExp(\"^(?:\"+I+\")$\",\"i\"),needsContext:new RegExp(\"^\"+R+\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\"+R+\"*((?:-\\\\d)?\\\\d*)\"+R+\"*\\\\)|)(?=[^-]|$)\",\"i\")},Y=/HTML$/i,G=/^(?:input|select|textarea|button)$/i,K=/^h\\d$/i,J=/^[^{]+\\{\\s*\\[native \\w/,Z=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,ee=/[+~]/,te=new RegExp(\"\\\\\\\\[\\\\da-fA-F]{1,6}\"+R+\"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\",\"g\"),ne=function(e,t){var n=\"0x\"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,ie=function(e,t){return t?\"\\0\"===e?\"\\ufffd\":e.slice(0,-1)+\"\\\\\"+e.charCodeAt(e.length-1).toString(16)+\" \":\"\\\\\"+e},oe=function(){C()},ae=xe(function(e){return!0===e.disabled&&\"fieldset\"===e.nodeName.toLowerCase()},{dir:\"parentNode\",next:\"legend\"});try{O.apply(t=P.call(d.childNodes),d.childNodes),t[d.childNodes.length].nodeType}catch(e){O={apply:t.length?function(e,t){q.apply(e,P.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function se(t,e,n,r){var i,o,a,s,u,l,c,f=e&&e.ownerDocument,d=e?e.nodeType:9;if(n=n||[],\"string\"!=typeof t||!t||1!==d&&9!==d&&11!==d)return n;if(!r&&(C(e),e=e||T,E)){if(11!==d&&(u=Z.exec(t)))if(i=u[1]){if(9===d){if(!(a=e.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(f&&(a=f.getElementById(i))&&y(e,a)&&a.id===i)return n.push(a),n}else{if(u[2])return O.apply(n,e.getElementsByTagName(t)),n;if((i=u[3])&&p.getElementsByClassName&&e.getElementsByClassName)return O.apply(n,e.getElementsByClassName(i)),n}if(p.qsa&&!k[t+\" \"]&&(!v||!v.test(t))&&(1!==d||\"object\"!==e.nodeName.toLowerCase())){if(c=t,f=e,1===d&&(U.test(t)||_.test(t))){(f=ee.test(t)&&ye(e.parentNode)||e)===e&&p.scope||((s=e.getAttribute(\"id\"))?s=s.replace(re,ie):e.setAttribute(\"id\",s=A)),o=(l=h(t)).length;while(o--)l[o]=(s?\"#\"+s:\":scope\")+\" \"+be(l[o]);c=l.join(\",\")}try{return O.apply(n,f.querySelectorAll(c)),n}catch(e){k(t,!0)}finally{s===A&&e.removeAttribute(\"id\")}}}return g(t.replace($,\"$1\"),e,n,r)}function ue(){var r=[];return function e(t,n){return r.push(t+\" \")>x.cacheLength&&delete e[r.shift()],e[t+\" \"]=n}}function le(e){return e[A]=!0,e}function ce(e){var t=T.createElement(\"fieldset\");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){var n=e.split(\"|\"),r=n.length;while(r--)x.attrHandle[n[r]]=t}function de(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function pe(t){return function(e){return\"input\"===e.nodeName.toLowerCase()&&e.type===t}}function he(n){return function(e){var t=e.nodeName.toLowerCase();return(\"input\"===t||\"button\"===t)&&e.type===n}}function ge(t){return function(e){return\"form\"in e?e.parentNode&&!1===e.disabled?\"label\"in e?\"label\"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ae(e)===t:e.disabled===t:\"label\"in e&&e.disabled===t}}function ve(a){return le(function(o){return o=+o,le(function(e,t){var n,r=a([],e.length,o),i=r.length;while(i--)e[n=r[i]]&&(e[n]=!(t[n]=e[n]))})})}function ye(e){return e&&\"undefined\"!=typeof e.getElementsByTagName&&e}for(e in p=se.support={},i=se.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||\"HTML\")},C=se.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:d;return r!=T&&9===r.nodeType&&r.documentElement&&(a=(T=r).documentElement,E=!i(T),d!=T&&(n=T.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener(\"unload\",oe,!1):n.attachEvent&&n.attachEvent(\"onunload\",oe)),p.scope=ce(function(e){return a.appendChild(e).appendChild(T.createElement(\"div\")),\"undefined\"!=typeof e.querySelectorAll&&!e.querySelectorAll(\":scope fieldset div\").length}),p.attributes=ce(function(e){return e.className=\"i\",!e.getAttribute(\"className\")}),p.getElementsByTagName=ce(function(e){return e.appendChild(T.createComment(\"\")),!e.getElementsByTagName(\"*\").length}),p.getElementsByClassName=J.test(T.getElementsByClassName),p.getById=ce(function(e){return a.appendChild(e).id=A,!T.getElementsByName||!T.getElementsByName(A).length}),p.getById?(x.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute(\"id\")===t}},x.find.ID=function(e,t){if(\"undefined\"!=typeof t.getElementById&&E){var n=t.getElementById(e);return n?[n]:[]}}):(x.filter.ID=function(e){var n=e.replace(te,ne);return function(e){var t=\"undefined\"!=typeof e.getAttributeNode&&e.getAttributeNode(\"id\");return t&&t.value===n}},x.find.ID=function(e,t){if(\"undefined\"!=typeof t.getElementById&&E){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode(\"id\"))&&n.value===e)return[o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode(\"id\"))&&n.value===e)return[o]}return[]}}),x.find.TAG=p.getElementsByTagName?function(e,t){return\"undefined\"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):p.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if(\"*\"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},x.find.CLASS=p.getElementsByClassName&&function(e,t){if(\"undefined\"!=typeof t.getElementsByClassName&&E)return t.getElementsByClassName(e)},s=[],v=[],(p.qsa=J.test(T.querySelectorAll))&&(ce(function(e){var t;a.appendChild(e).innerHTML=\"<a id='\"+A+\"'></a><select id='\"+A+\"-\\r\\\\' msallowcapture=''><option selected=''></option></select>\",e.querySelectorAll(\"[msallowcapture^='']\").length&&v.push(\"[*^$]=\"+R+\"*(?:''|\\\"\\\")\"),e.querySelectorAll(\"[selected]\").length||v.push(\"\\\\[\"+R+\"*(?:value|\"+I+\")\"),e.querySelectorAll(\"[id~=\"+A+\"-]\").length||v.push(\"~=\"),(t=T.createElement(\"input\")).setAttribute(\"name\",\"\"),e.appendChild(t),e.querySelectorAll(\"[name='']\").length||v.push(\"\\\\[\"+R+\"*name\"+R+\"*=\"+R+\"*(?:''|\\\"\\\")\"),e.querySelectorAll(\":checked\").length||v.push(\":checked\"),e.querySelectorAll(\"a#\"+A+\"+*\").length||v.push(\".#.+[+~]\"),e.querySelectorAll(\"\\\\\\f\"),v.push(\"[\\\\r\\\\n\\\\f]\")}),ce(function(e){e.innerHTML=\"<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>\";var t=T.createElement(\"input\");t.setAttribute(\"type\",\"hidden\"),e.appendChild(t).setAttribute(\"name\",\"D\"),e.querySelectorAll(\"[name=d]\").length&&v.push(\"name\"+R+\"*[*^$|!~]?=\"),2!==e.querySelectorAll(\":enabled\").length&&v.push(\":enabled\",\":disabled\"),a.appendChild(e).disabled=!0,2!==e.querySelectorAll(\":disabled\").length&&v.push(\":enabled\",\":disabled\"),e.querySelectorAll(\"*,:x\"),v.push(\",.*:\")})),(p.matchesSelector=J.test(c=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&ce(function(e){p.disconnectedMatch=c.call(e,\"*\"),c.call(e,\"[s!='']:x\"),s.push(\"!=\",W)}),v=v.length&&new RegExp(v.join(\"|\")),s=s.length&&new RegExp(s.join(\"|\")),t=J.test(a.compareDocumentPosition),y=t||J.test(a.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},D=t?function(e,t){if(e===t)return l=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!p.sortDetached&&t.compareDocumentPosition(e)===n?e==T||e.ownerDocument==d&&y(d,e)?-1:t==T||t.ownerDocument==d&&y(d,t)?1:u?H(u,e)-H(u,t):0:4&n?-1:1)}:function(e,t){if(e===t)return l=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e==T?-1:t==T?1:i?-1:o?1:u?H(u,e)-H(u,t):0;if(i===o)return de(e,t);n=e;while(n=n.parentNode)a.unshift(n);n=t;while(n=n.parentNode)s.unshift(n);while(a[r]===s[r])r++;return r?de(a[r],s[r]):a[r]==d?-1:s[r]==d?1:0}),T},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(C(e),p.matchesSelector&&E&&!k[t+\" \"]&&(!s||!s.test(t))&&(!v||!v.test(t)))try{var n=c.call(e,t);if(n||p.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){k(t,!0)}return 0<se(t,T,null,[e]).length},se.contains=function(e,t){return(e.ownerDocument||e)!=T&&C(e),y(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=T&&C(e);var n=x.attrHandle[t.toLowerCase()],r=n&&L.call(x.attrHandle,t.toLowerCase())?n(e,t,!E):void 0;return void 0!==r?r:p.attributes||!E?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},se.escape=function(e){return(e+\"\").replace(re,ie)},se.error=function(e){throw new Error(\"Syntax error, unrecognized expression: \"+e)},se.uniqueSort=function(e){var t,n=[],r=0,i=0;if(l=!p.detectDuplicates,u=!p.sortStable&&e.slice(0),e.sort(D),l){while(t=e[i++])t===e[i]&&(r=n.push(i));while(r--)e.splice(n[r],1)}return u=null,e},o=se.getText=function(e){var t,n=\"\",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if(\"string\"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else while(t=e[r++])n+=o(t);return n},(x=se.selectors={cacheLength:50,createPseudo:le,match:Q,attrHandle:{},find:{},relative:{\">\":{dir:\"parentNode\",first:!0},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:!0},\"~\":{dir:\"previousSibling\"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||\"\").replace(te,ne),\"~=\"===e[2]&&(e[3]=\" \"+e[3]+\" \"),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),\"nth\"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*(\"even\"===e[3]||\"odd\"===e[3])),e[5]=+(e[7]+e[8]||\"odd\"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Q.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||\"\":n&&V.test(n)&&(t=h(n,!0))&&(t=n.indexOf(\")\",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return\"*\"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=m[e+\" \"];return t||(t=new RegExp(\"(^|\"+R+\")\"+e+\"(\"+R+\"|$)\"))&&m(e,function(e){return t.test(\"string\"==typeof e.className&&e.className||\"undefined\"!=typeof e.getAttribute&&e.getAttribute(\"class\")||\"\")})},ATTR:function(n,r,i){return function(e){var t=se.attr(e,n);return null==t?\"!=\"===r:!r||(t+=\"\",\"=\"===r?t===i:\"!=\"===r?t!==i:\"^=\"===r?i&&0===t.indexOf(i):\"*=\"===r?i&&-1<t.indexOf(i):\"$=\"===r?i&&t.slice(-i.length)===i:\"~=\"===r?-1<(\" \"+t.replace(F,\" \")+\" \").indexOf(i):\"|=\"===r&&(t===i||t.slice(0,i.length+1)===i+\"-\"))}},CHILD:function(h,e,t,g,v){var y=\"nth\"!==h.slice(0,3),m=\"last\"!==h.slice(-4),b=\"of-type\"===e;return 1===g&&0===v?function(e){return!!e.parentNode}:function(e,t,n){var r,i,o,a,s,u,l=y!==m?\"nextSibling\":\"previousSibling\",c=e.parentNode,f=b&&e.nodeName.toLowerCase(),d=!n&&!b,p=!1;if(c){if(y){while(l){a=e;while(a=a[l])if(b?a.nodeName.toLowerCase()===f:1===a.nodeType)return!1;u=l=\"only\"===h&&!u&&\"nextSibling\"}return!0}if(u=[m?c.firstChild:c.lastChild],m&&d){p=(s=(r=(i=(o=(a=c)[A]||(a[A]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===N&&r[1])&&r[2],a=s&&c.childNodes[s];while(a=++s&&a&&a[l]||(p=s=0)||u.pop())if(1===a.nodeType&&++p&&a===e){i[h]=[N,s,p];break}}else if(d&&(p=s=(r=(i=(o=(a=e)[A]||(a[A]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===N&&r[1]),!1===p)while(a=++s&&a&&a[l]||(p=s=0)||u.pop())if((b?a.nodeName.toLowerCase()===f:1===a.nodeType)&&++p&&(d&&((i=(o=a[A]||(a[A]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]=[N,p]),a===e))break;return(p-=v)===g||p%g==0&&0<=p/g}}},PSEUDO:function(e,o){var t,a=x.pseudos[e]||x.setFilters[e.toLowerCase()]||se.error(\"unsupported pseudo: \"+e);return a[A]?a(o):1<a.length?(t=[e,e,\"\",o],x.setFilters.hasOwnProperty(e.toLowerCase())?le(function(e,t){var n,r=a(e,o),i=r.length;while(i--)e[n=H(e,r[i])]=!(t[n]=r[i])}):function(e){return a(e,0,t)}):a}},pseudos:{not:le(function(e){var r=[],i=[],s=f(e.replace($,\"$1\"));return s[A]?le(function(e,t,n,r){var i,o=s(e,null,r,[]),a=e.length;while(a--)(i=o[a])&&(e[a]=!(t[a]=i))}):function(e,t,n){return r[0]=e,s(r,null,n,i),r[0]=null,!i.pop()}}),has:le(function(t){return function(e){return 0<se(t,e).length}}),contains:le(function(t){return t=t.replace(te,ne),function(e){return-1<(e.textContent||o(e)).indexOf(t)}}),lang:le(function(n){return X.test(n||\"\")||se.error(\"unsupported lang: \"+n),n=n.replace(te,ne).toLowerCase(),function(e){var t;do{if(t=E?e.lang:e.getAttribute(\"xml:lang\")||e.getAttribute(\"lang\"))return(t=t.toLowerCase())===n||0===t.indexOf(n+\"-\")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===a},focus:function(e){return e===T.activeElement&&(!T.hasFocus||T.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&!!e.checked||\"option\"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return K.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&\"button\"===e.type||\"button\"===t},text:function(e){var t;return\"input\"===e.nodeName.toLowerCase()&&\"text\"===e.type&&(null==(t=e.getAttribute(\"type\"))||\"text\"===t.toLowerCase())},first:ve(function(){return[0]}),last:ve(function(e,t){return[t-1]}),eq:ve(function(e,t,n){return[n<0?n+t:n]}),even:ve(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ve(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ve(function(e,t,n){for(var r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:ve(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=x.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[e]=pe(e);for(e in{submit:!0,reset:!0})x.pseudos[e]=he(e);function me(){}function be(e){for(var t=0,n=e.length,r=\"\";t<n;t++)r+=e[t].value;return r}function xe(s,e,t){var u=e.dir,l=e.next,c=l||u,f=t&&\"parentNode\"===c,d=r++;return e.first?function(e,t,n){while(e=e[u])if(1===e.nodeType||f)return s(e,t,n);return!1}:function(e,t,n){var r,i,o,a=[N,d];if(n){while(e=e[u])if((1===e.nodeType||f)&&s(e,t,n))return!0}else while(e=e[u])if(1===e.nodeType||f)if(i=(o=e[A]||(e[A]={}))[e.uniqueID]||(o[e.uniqueID]={}),l&&l===e.nodeName.toLowerCase())e=e[u]||e;else{if((r=i[c])&&r[0]===N&&r[1]===d)return a[2]=r[2];if((i[c]=a)[2]=s(e,t,n))return!0}return!1}}function we(i){return 1<i.length?function(e,t,n){var r=i.length;while(r--)if(!i[r](e,t,n))return!1;return!0}:i[0]}function Ce(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function Te(p,h,g,v,y,e){return v&&!v[A]&&(v=Te(v)),y&&!y[A]&&(y=Te(y,e)),le(function(e,t,n,r){var i,o,a,s=[],u=[],l=t.length,c=e||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(h||\"*\",n.nodeType?[n]:n,[]),f=!p||!e&&h?c:Ce(c,s,p,n,r),d=g?y||(e?p:l||v)?[]:t:f;if(g&&g(f,d,n,r),v){i=Ce(d,u),v(i,[],n,r),o=i.length;while(o--)(a=i[o])&&(d[u[o]]=!(f[u[o]]=a))}if(e){if(y||p){if(y){i=[],o=d.length;while(o--)(a=d[o])&&i.push(f[o]=a);y(null,d=[],i,r)}o=d.length;while(o--)(a=d[o])&&-1<(i=y?H(e,a):s[o])&&(e[i]=!(t[i]=a))}}else d=Ce(d===t?d.splice(l,d.length):d),y?y(null,t,d,r):O.apply(t,d)})}function Ee(e){for(var i,t,n,r=e.length,o=x.relative[e[0].type],a=o||x.relative[\" \"],s=o?1:0,u=xe(function(e){return e===i},a,!0),l=xe(function(e){return-1<H(i,e)},a,!0),c=[function(e,t,n){var r=!o&&(n||t!==w)||((i=t).nodeType?u(e,t,n):l(e,t,n));return i=null,r}];s<r;s++)if(t=x.relative[e[s].type])c=[xe(we(c),t)];else{if((t=x.filter[e[s].type].apply(null,e[s].matches))[A]){for(n=++s;n<r;n++)if(x.relative[e[n].type])break;return Te(1<s&&we(c),1<s&&be(e.slice(0,s-1).concat({value:\" \"===e[s-2].type?\"*\":\"\"})).replace($,\"$1\"),t,s<n&&Ee(e.slice(s,n)),n<r&&Ee(e=e.slice(n)),n<r&&be(e))}c.push(t)}return we(c)}return me.prototype=x.filters=x.pseudos,x.setFilters=new me,h=se.tokenize=function(e,t){var n,r,i,o,a,s,u,l=b[e+\" \"];if(l)return t?0:l.slice(0);a=e,s=[],u=x.preFilter;while(a){for(o in n&&!(r=z.exec(a))||(r&&(a=a.slice(r[0].length)||a),s.push(i=[])),n=!1,(r=_.exec(a))&&(n=r.shift(),i.push({value:n,type:r[0].replace($,\" \")}),a=a.slice(n.length)),x.filter)!(r=Q[o].exec(a))||u[o]&&!(r=u[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?se.error(e):b(e,s).slice(0)},f=se.compile=function(e,t){var n,v,y,m,b,r,i=[],o=[],a=S[e+\" \"];if(!a){t||(t=h(e)),n=t.length;while(n--)(a=Ee(t[n]))[A]?i.push(a):o.push(a);(a=S(e,(v=o,m=0<(y=i).length,b=0<v.length,r=function(e,t,n,r,i){var o,a,s,u=0,l=\"0\",c=e&&[],f=[],d=w,p=e||b&&x.find.TAG(\"*\",i),h=N+=null==d?1:Math.random()||.1,g=p.length;for(i&&(w=t==T||t||i);l!==g&&null!=(o=p[l]);l++){if(b&&o){a=0,t||o.ownerDocument==T||(C(o),n=!E);while(s=v[a++])if(s(o,t||T,n)){r.push(o);break}i&&(N=h)}m&&((o=!s&&o)&&u--,e&&c.push(o))}if(u+=l,m&&l!==u){a=0;while(s=y[a++])s(c,f,t,n);if(e){if(0<u)while(l--)c[l]||f[l]||(f[l]=j.call(r));f=Ce(f)}O.apply(r,f),i&&!e&&0<f.length&&1<u+y.length&&se.uniqueSort(r)}return i&&(N=h,w=d),c},m?le(r):r))).selector=e}return a},g=se.select=function(e,t,n,r){var i,o,a,s,u,l=\"function\"==typeof e&&e,c=!r&&h(e=l.selector||e);if(n=n||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&\"ID\"===(a=o[0]).type&&9===t.nodeType&&E&&x.relative[o[1].type]){if(!(t=(x.find.ID(a.matches[0].replace(te,ne),t)||[])[0]))return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}i=Q.needsContext.test(e)?0:o.length;while(i--){if(a=o[i],x.relative[s=a.type])break;if((u=x.find[s])&&(r=u(a.matches[0].replace(te,ne),ee.test(o[0].type)&&ye(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&be(o)))return O.apply(n,r),n;break}}}return(l||f(e,c))(r,t,!E,n,!t||ee.test(e)&&ye(t.parentNode)||t),n},p.sortStable=A.split(\"\").sort(D).join(\"\")===A,p.detectDuplicates=!!l,C(),p.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(T.createElement(\"fieldset\"))}),ce(function(e){return e.innerHTML=\"<a href='#'></a>\",\"#\"===e.firstChild.getAttribute(\"href\")})||fe(\"type|href|height|width\",function(e,t,n){if(!n)return e.getAttribute(t,\"type\"===t.toLowerCase()?1:2)}),p.attributes&&ce(function(e){return e.innerHTML=\"<input/>\",e.firstChild.setAttribute(\"value\",\"\"),\"\"===e.firstChild.getAttribute(\"value\")})||fe(\"value\",function(e,t,n){if(!n&&\"input\"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute(\"disabled\")})||fe(I,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),se}(g);E.find=p,E.expr=p.selectors,E.expr[\":\"]=E.expr.pseudos,E.uniqueSort=E.unique=p.uniqueSort,E.text=p.getText,E.isXMLDoc=p.isXML,E.contains=p.contains,E.escapeSelector=p.escape;var h=function(e,t,n){var r=[],i=void 0!==n;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&E(e).is(n))break;r.push(e)}return r},A=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},N=E.expr.match.needsContext;function S(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var k=/^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i;function D(e,n,r){return b(n)?E.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?E.grep(e,function(e){return e===n!==r}):\"string\"!=typeof n?E.grep(e,function(e){return-1<i.call(n,e)!==r}):E.filter(n,e,r)}E.filter=function(e,t,n){var r=t[0];return n&&(e=\":not(\"+e+\")\"),1===t.length&&1===r.nodeType?E.find.matchesSelector(r,e)?[r]:[]:E.find.matches(e,E.grep(t,function(e){return 1===e.nodeType}))},E.fn.extend({find:function(e){var t,n,r=this.length,i=this;if(\"string\"!=typeof e)return this.pushStack(E(e).filter(function(){for(t=0;t<r;t++)if(E.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)E.find(e,i[t],n);return 1<r?E.uniqueSort(n):n},filter:function(e){return this.pushStack(D(this,e||[],!1))},not:function(e){return this.pushStack(D(this,e||[],!0))},is:function(e){return!!D(this,\"string\"==typeof e&&N.test(e)?E(e):e||[],!1).length}});var L,j=/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/;(E.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||L,\"string\"==typeof e){if(!(r=\"<\"===e[0]&&\">\"===e[e.length-1]&&3<=e.length?[null,e,null]:j.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof E?t[0]:t,E.merge(this,E.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:w,!0)),k.test(r[1])&&E.isPlainObject(t))for(r in t)b(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=w.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):b(e)?void 0!==n.ready?n.ready(e):e(E):E.makeArray(e,this)}).prototype=E.fn,L=E(w);var q=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function P(e,t){while((e=e[t])&&1!==e.nodeType);return e}E.fn.extend({has:function(e){var t=E(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(E.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a=\"string\"!=typeof e&&E(e);if(!N.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&E.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?E.uniqueSort(o):o)},index:function(e){return e?\"string\"==typeof e?i.call(E(e),this[0]):i.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),E.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return h(e,\"parentNode\")},parentsUntil:function(e,t,n){return h(e,\"parentNode\",n)},next:function(e){return P(e,\"nextSibling\")},prev:function(e){return P(e,\"previousSibling\")},nextAll:function(e){return h(e,\"nextSibling\")},prevAll:function(e){return h(e,\"previousSibling\")},nextUntil:function(e,t,n){return h(e,\"nextSibling\",n)},prevUntil:function(e,t,n){return h(e,\"previousSibling\",n)},siblings:function(e){return A((e.parentNode||{}).firstChild,e)},children:function(e){return A(e.firstChild)},contents:function(e){return null!=e.contentDocument&&r(e.contentDocument)?e.contentDocument:(S(e,\"template\")&&(e=e.content||e),E.merge([],e.childNodes))}},function(r,i){E.fn[r]=function(e,t){var n=E.map(this,i,e);return\"Until\"!==r.slice(-5)&&(t=e),t&&\"string\"==typeof t&&(n=E.filter(t,n)),1<this.length&&(O[r]||E.uniqueSort(n),q.test(r)&&n.reverse()),this.pushStack(n)}});var H=/[^\\x20\\t\\r\\n\\f]+/g;function I(e){return e}function R(e){throw e}function B(e,t,n,r){var i;try{e&&b(i=e.promise)?i.call(e).done(t).fail(n):e&&b(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}E.Callbacks=function(r){var e,n;r=\"string\"==typeof r?(e=r,n={},E.each(e.match(H)||[],function(e,t){n[t]=!0}),n):E.extend({},r);var i,t,o,a,s=[],u=[],l=-1,c=function(){for(a=a||r.once,o=i=!0;u.length;l=-1){t=u.shift();while(++l<s.length)!1===s[l].apply(t[0],t[1])&&r.stopOnFalse&&(l=s.length,t=!1)}r.memory||(t=!1),i=!1,a&&(s=t?[]:\"\")},f={add:function(){return s&&(t&&!i&&(l=s.length-1,u.push(t)),function n(e){E.each(e,function(e,t){b(t)?r.unique&&f.has(t)||s.push(t):t&&t.length&&\"string\"!==T(t)&&n(t)})}(arguments),t&&!i&&c()),this},remove:function(){return E.each(arguments,function(e,t){var n;while(-1<(n=E.inArray(t,s,n)))s.splice(n,1),n<=l&&l--}),this},has:function(e){return e?-1<E.inArray(e,s):0<s.length},empty:function(){return s&&(s=[]),this},disable:function(){return a=u=[],s=t=\"\",this},disabled:function(){return!s},lock:function(){return a=u=[],t||i||(s=t=\"\"),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),i||c()),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!o}};return f},E.extend({Deferred:function(e){var o=[[\"notify\",\"progress\",E.Callbacks(\"memory\"),E.Callbacks(\"memory\"),2],[\"resolve\",\"done\",E.Callbacks(\"once memory\"),E.Callbacks(\"once memory\"),0,\"resolved\"],[\"reject\",\"fail\",E.Callbacks(\"once memory\"),E.Callbacks(\"once memory\"),1,\"rejected\"]],i=\"pending\",a={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},\"catch\":function(e){return a.then(null,e)},pipe:function(){var i=arguments;return E.Deferred(function(r){E.each(o,function(e,t){var n=b(i[t[4]])&&i[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&b(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+\"With\"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,r){var u=0;function l(i,o,a,s){return function(){var n=this,r=arguments,e=function(){var e,t;if(!(i<u)){if((e=a.apply(n,r))===o.promise())throw new TypeError(\"Thenable self-resolution\");t=e&&(\"object\"==typeof e||\"function\"==typeof e)&&e.then,b(t)?s?t.call(e,l(u,o,I,s),l(u,o,R,s)):(u++,t.call(e,l(u,o,I,s),l(u,o,R,s),l(u,o,I,o.notifyWith))):(a!==I&&(n=void 0,r=[e]),(s||o.resolveWith)(n,r))}},t=s?e:function(){try{e()}catch(e){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(e,t.stackTrace),u<=i+1&&(a!==R&&(n=void 0,r=[e]),o.rejectWith(n,r))}};i?t():(E.Deferred.getStackHook&&(t.stackTrace=E.Deferred.getStackHook()),g.setTimeout(t))}}return E.Deferred(function(e){o[0][3].add(l(0,e,b(r)?r:I,e.notifyWith)),o[1][3].add(l(0,e,b(t)?t:I)),o[2][3].add(l(0,e,b(n)?n:R))}).promise()},promise:function(e){return null!=e?E.extend(e,a):a}},s={};return E.each(o,function(e,t){var n=t[2],r=t[5];a[t[1]]=n.add,r&&n.add(function(){i=r},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+\"With\"](this===s?void 0:this,arguments),this},s[t[0]+\"With\"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){var n=arguments.length,t=n,r=Array(t),i=s.call(arguments),o=E.Deferred(),a=function(t){return function(e){r[t]=this,i[t]=1<arguments.length?s.call(arguments):e,--n||o.resolveWith(r,i)}};if(n<=1&&(B(e,o.done(a(t)).resolve,o.reject,!n),\"pending\"===o.state()||b(i[t]&&i[t].then)))return o.then();while(t--)B(i[t],a(t),o.reject);return o.promise()}});var M=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(e,t){g.console&&g.console.warn&&e&&M.test(e.name)&&g.console.warn(\"jQuery.Deferred exception: \"+e.message,e.stack,t)},E.readyException=function(e){g.setTimeout(function(){throw e})};var W=E.Deferred();function F(){w.removeEventListener(\"DOMContentLoaded\",F),g.removeEventListener(\"load\",F),E.ready()}E.fn.ready=function(e){return W.then(e)[\"catch\"](function(e){E.readyException(e)}),this},E.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--E.readyWait:E.isReady)||(E.isReady=!0)!==e&&0<--E.readyWait||W.resolveWith(w,[E])}}),E.ready.then=W.then,\"complete\"===w.readyState||\"loading\"!==w.readyState&&!w.documentElement.doScroll?g.setTimeout(E.ready):(w.addEventListener(\"DOMContentLoaded\",F),g.addEventListener(\"load\",F));var $=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if(\"object\"===T(n))for(s in i=!0,n)$(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,b(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(E(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},z=/^-ms-/,_=/-([a-z])/g;function U(e,t){return t.toUpperCase()}function V(e){return e.replace(z,\"ms-\").replace(_,U)}var X=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=E.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},X(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if(\"string\"==typeof t)i[V(t)]=n;else for(r in t)i[V(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][V(t)]},access:function(e,t,n){return void 0===t||t&&\"string\"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(V):(t=V(t))in r?[t]:t.match(H)||[]).length;while(n--)delete r[t[n]]}(void 0===t||E.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!E.isEmptyObject(t)}};var Y=new Q,G=new Q,K=/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,J=/[A-Z]/g;function Z(e,t,n){var r,i;if(void 0===n&&1===e.nodeType)if(r=\"data-\"+t.replace(J,\"-$&\").toLowerCase(),\"string\"==typeof(n=e.getAttribute(r))){try{n=\"true\"===(i=n)||\"false\"!==i&&(\"null\"===i?null:i===+i+\"\"?+i:K.test(i)?JSON.parse(i):i)}catch(e){}G.set(e,t,n)}else n=void 0;return n}E.extend({hasData:function(e){return G.hasData(e)||Y.hasData(e)},data:function(e,t,n){return G.access(e,t,n)},removeData:function(e,t){G.remove(e,t)},_data:function(e,t,n){return Y.access(e,t,n)},_removeData:function(e,t){Y.remove(e,t)}}),E.fn.extend({data:function(n,e){var t,r,i,o=this[0],a=o&&o.attributes;if(void 0===n){if(this.length&&(i=G.get(o),1===o.nodeType&&!Y.get(o,\"hasDataAttrs\"))){t=a.length;while(t--)a[t]&&0===(r=a[t].name).indexOf(\"data-\")&&(r=V(r.slice(5)),Z(o,r,i[r]));Y.set(o,\"hasDataAttrs\",!0)}return i}return\"object\"==typeof n?this.each(function(){G.set(this,n)}):$(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=G.get(o,n))?t:void 0!==(t=Z(o,n))?t:void 0;this.each(function(){G.set(this,n,e)})},null,e,1<arguments.length,null,!0)},removeData:function(e){return this.each(function(){G.remove(this,e)})}}),E.extend({queue:function(e,t,n){var r;if(e)return t=(t||\"fx\")+\"queue\",r=Y.get(e,t),n&&(!r||Array.isArray(n)?r=Y.access(e,t,E.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||\"fx\";var n=E.queue(e,t),r=n.length,i=n.shift(),o=E._queueHooks(e,t);\"inprogress\"===i&&(i=n.shift(),r--),i&&(\"fx\"===t&&n.unshift(\"inprogress\"),delete o.stop,i.call(e,function(){E.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+\"queueHooks\";return Y.get(e,n)||Y.access(e,n,{empty:E.Callbacks(\"once memory\").add(function(){Y.remove(e,[t+\"queue\",n])})})}}),E.fn.extend({queue:function(t,n){var e=2;return\"string\"!=typeof t&&(n=t,t=\"fx\",e--),arguments.length<e?E.queue(this[0],t):void 0===n?this:this.each(function(){var e=E.queue(this,t,n);E._queueHooks(this,t),\"fx\"===t&&\"inprogress\"!==e[0]&&E.dequeue(this,t)})},dequeue:function(e){return this.each(function(){E.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||\"fx\",[])},promise:function(e,t){var n,r=1,i=E.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};\"string\"!=typeof e&&(t=e,e=void 0),e=e||\"fx\";while(a--)(n=Y.get(o[a],e+\"queueHooks\"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var ee=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,te=new RegExp(\"^(?:([+-])=|)(\"+ee+\")([a-z%]*)$\",\"i\"),ne=[\"Top\",\"Right\",\"Bottom\",\"Left\"],re=w.documentElement,ie=function(e){return E.contains(e.ownerDocument,e)},oe={composed:!0};re.getRootNode&&(ie=function(e){return E.contains(e.ownerDocument,e)||e.getRootNode(oe)===e.ownerDocument});var ae=function(e,t){return\"none\"===(e=t||e).style.display||\"\"===e.style.display&&ie(e)&&\"none\"===E.css(e,\"display\")};var se={};function ue(e,t){for(var n,r,i,o,a,s,u,l=[],c=0,f=e.length;c<f;c++)(r=e[c]).style&&(n=r.style.display,t?(\"none\"===n&&(l[c]=Y.get(r,\"display\")||null,l[c]||(r.style.display=\"\")),\"\"===r.style.display&&ae(r)&&(l[c]=(u=a=o=void 0,a=(i=r).ownerDocument,s=i.nodeName,(u=se[s])||(o=a.body.appendChild(a.createElement(s)),u=E.css(o,\"display\"),o.parentNode.removeChild(o),\"none\"===u&&(u=\"block\"),se[s]=u)))):\"none\"!==n&&(l[c]=\"none\",Y.set(r,\"display\",n)));for(c=0;c<f;c++)null!=l[c]&&(e[c].style.display=l[c]);return e}E.fn.extend({show:function(){return ue(this,!0)},hide:function(){return ue(this)},toggle:function(e){return\"boolean\"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?E(this).show():E(this).hide()})}});var le,ce,fe=/^(?:checkbox|radio)$/i,de=/<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i,pe=/^$|^module$|\\/(?:java|ecma)script/i;le=w.createDocumentFragment().appendChild(w.createElement(\"div\")),(ce=w.createElement(\"input\")).setAttribute(\"type\",\"radio\"),ce.setAttribute(\"checked\",\"checked\"),ce.setAttribute(\"name\",\"t\"),le.appendChild(ce),m.checkClone=le.cloneNode(!0).cloneNode(!0).lastChild.checked,le.innerHTML=\"<textarea>x</textarea>\",m.noCloneChecked=!!le.cloneNode(!0).lastChild.defaultValue,le.innerHTML=\"<option></option>\",m.option=!!le.lastChild;var he={thead:[1,\"<table>\",\"</table>\"],col:[2,\"<table><colgroup>\",\"</colgroup></table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],_default:[0,\"\",\"\"]};function ge(e,t){var n;return n=\"undefined\"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||\"*\"):\"undefined\"!=typeof e.querySelectorAll?e.querySelectorAll(t||\"*\"):[],void 0===t||t&&S(e,t)?E.merge([e],n):n}function ve(e,t){for(var n=0,r=e.length;n<r;n++)Y.set(e[n],\"globalEval\",!t||Y.get(t[n],\"globalEval\"))}he.tbody=he.tfoot=he.colgroup=he.caption=he.thead,he.th=he.td,m.option||(he.optgroup=he.option=[1,\"<select multiple='multiple'>\",\"</select>\"]);var ye=/<|&#?\\w+;/;function me(e,t,n,r,i){for(var o,a,s,u,l,c,f=t.createDocumentFragment(),d=[],p=0,h=e.length;p<h;p++)if((o=e[p])||0===o)if(\"object\"===T(o))E.merge(d,o.nodeType?[o]:o);else if(ye.test(o)){a=a||f.appendChild(t.createElement(\"div\")),s=(de.exec(o)||[\"\",\"\"])[1].toLowerCase(),u=he[s]||he._default,a.innerHTML=u[1]+E.htmlPrefilter(o)+u[2],c=u[0];while(c--)a=a.lastChild;E.merge(d,a.childNodes),(a=f.firstChild).textContent=\"\"}else d.push(t.createTextNode(o));f.textContent=\"\",p=0;while(o=d[p++])if(r&&-1<E.inArray(o,r))i&&i.push(o);else if(l=ie(o),a=ge(f.appendChild(o),\"script\"),l&&ve(a),n){c=0;while(o=a[c++])pe.test(o.type||\"\")&&n.push(o)}return f}var be=/^([^.]*)(?:\\.(.+)|)/;function xe(){return!0}function we(){return!1}function Ce(e,t){return e===function(){try{return w.activeElement}catch(e){}}()==(\"focus\"===t)}function Te(e,t,n,r,i,o){var a,s;if(\"object\"==typeof t){for(s in\"string\"!=typeof n&&(r=r||n,n=void 0),t)Te(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&(\"string\"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=we;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return E().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=E.guid++)),e.each(function(){E.event.add(this,t,i,r,n)})}function Ee(e,i,o){o?(Y.set(e,i,!1),E.event.add(e,i,{namespace:!1,handler:function(e){var t,n,r=Y.get(this,i);if(1&e.isTrigger&&this[i]){if(r.length)(E.event.special[i]||{}).delegateType&&e.stopPropagation();else if(r=s.call(arguments),Y.set(this,i,r),t=o(this,i),this[i](),r!==(n=Y.get(this,i))||t?Y.set(this,i,!1):n={},r!==n)return e.stopImmediatePropagation(),e.preventDefault(),n&&n.value}else r.length&&(Y.set(this,i,{value:E.event.trigger(E.extend(r[0],E.Event.prototype),r.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Y.get(e,i)&&E.event.add(e,i,xe)}E.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,l,c,f,d,p,h,g,v=Y.get(t);if(X(t)){n.handler&&(n=(o=n).handler,i=o.selector),i&&E.find.matchesSelector(re,i),n.guid||(n.guid=E.guid++),(u=v.events)||(u=v.events=Object.create(null)),(a=v.handle)||(a=v.handle=function(e){return\"undefined\"!=typeof E&&E.event.triggered!==e.type?E.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||\"\").match(H)||[\"\"]).length;while(l--)p=g=(s=be.exec(e[l])||[])[1],h=(s[2]||\"\").split(\".\").sort(),p&&(f=E.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=E.event.special[p]||{},c=E.extend({type:p,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&E.expr.match.needsContext.test(i),namespace:h.join(\".\")},o),(d=u[p])||((d=u[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,h,a)||t.addEventListener&&t.addEventListener(p,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?d.splice(d.delegateCount++,0,c):d.push(c),E.event.global[p]=!0)}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,f,d,p,h,g,v=Y.hasData(e)&&Y.get(e);if(v&&(u=v.events)){l=(t=(t||\"\").match(H)||[\"\"]).length;while(l--)if(p=g=(s=be.exec(t[l])||[])[1],h=(s[2]||\"\").split(\".\").sort(),p){f=E.event.special[p]||{},d=u[p=(r?f.delegateType:f.bindType)||p]||[],s=s[2]&&new RegExp(\"(^|\\\\.)\"+h.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"),a=o=d.length;while(o--)c=d[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&(\"**\"!==r||!c.selector)||(d.splice(o,1),c.selector&&d.delegateCount--,f.remove&&f.remove.call(e,c));a&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,h,v.handle)||E.removeEvent(e,p,v.handle),delete u[p])}else for(p in u)E.event.remove(e,p+t[l],n,r,!0);E.isEmptyObject(u)&&Y.remove(e,\"handle events\")}},dispatch:function(e){var t,n,r,i,o,a,s=new Array(arguments.length),u=E.event.fix(e),l=(Y.get(this,\"events\")||Object.create(null))[u.type]||[],c=E.event.special[u.type]||{};for(s[0]=u,t=1;t<arguments.length;t++)s[t]=arguments[t];if(u.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,u)){a=E.event.handlers.call(this,u,l),t=0;while((i=a[t++])&&!u.isPropagationStopped()){u.currentTarget=i.elem,n=0;while((o=i.handlers[n++])&&!u.isImmediatePropagationStopped())u.rnamespace&&!1!==o.namespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,void 0!==(r=((E.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,u),u.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!(\"click\"===e.type&&1<=e.button))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(\"click\"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+\" \"]&&(a[i]=r.needsContext?-1<E(i,this).index(l):E.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(t,e){Object.defineProperty(E.Event.prototype,t,{enumerable:!0,configurable:!0,get:b(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[E.expando]?e:new E.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return fe.test(t.type)&&t.click&&S(t,\"input\")&&Ee(t,\"click\",xe),!1},trigger:function(e){var t=this||e;return fe.test(t.type)&&t.click&&S(t,\"input\")&&Ee(t,\"click\"),!0},_default:function(e){var t=e.target;return fe.test(t.type)&&t.click&&S(t,\"input\")&&Y.get(t,\"click\")||S(t,\"a\")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},E.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},E.Event=function(e,t){if(!(this instanceof E.Event))return new E.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?xe:we,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&E.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:we,isPropagationStopped:we,isImmediatePropagationStopped:we,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=xe,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=xe,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=xe,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,\"char\":!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},E.event.addProp),E.each({focus:\"focusin\",blur:\"focusout\"},function(t,e){E.event.special[t]={setup:function(){return Ee(this,t,Ce),!1},trigger:function(){return Ee(this,t),!0},_default:function(e){return Y.get(e.target,t)},delegateType:e}}),E.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\",pointerenter:\"pointerover\",pointerleave:\"pointerout\"},function(e,i){E.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||E.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=i),t}}}),E.fn.extend({on:function(e,t,n,r){return Te(this,e,t,n,r)},one:function(e,t,n,r){return Te(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,E(e.delegateTarget).off(r.namespace?r.origType+\".\"+r.namespace:r.origType,r.selector,r.handler),this;if(\"object\"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&\"function\"!=typeof t||(n=t,t=void 0),!1===n&&(n=we),this.each(function(){E.event.remove(this,e,n,t)})}});var Ae=/<script|<style|<link/i,Ne=/checked\\s*(?:[^=]|=\\s*.checked.)/i,Se=/^\\s*<!\\[CDATA\\[|\\]\\]>\\s*$/g;function ke(e,t){return S(e,\"table\")&&S(11!==t.nodeType?t:t.firstChild,\"tr\")&&E(e).children(\"tbody\")[0]||e}function De(e){return e.type=(null!==e.getAttribute(\"type\"))+\"/\"+e.type,e}function Le(e){return\"true/\"===(e.type||\"\").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute(\"type\"),e}function je(e,t){var n,r,i,o,a,s;if(1===t.nodeType){if(Y.hasData(e)&&(s=Y.get(e).events))for(i in Y.remove(t,\"handle events\"),s)for(n=0,r=s[i].length;n<r;n++)E.event.add(t,i,s[i][n]);G.hasData(e)&&(o=G.access(e),a=E.extend({},o),G.set(t,a))}}function qe(n,r,i,o){r=v(r);var e,t,a,s,u,l,c=0,f=n.length,d=f-1,p=r[0],h=b(p);if(h||1<f&&\"string\"==typeof p&&!m.checkClone&&Ne.test(p))return n.each(function(e){var t=n.eq(e);h&&(r[0]=p.call(this,e,t.html())),qe(t,r,i,o)});if(f&&(t=(e=me(r,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(s=(a=E.map(ge(e,\"script\"),De)).length;c<f;c++)u=e,c!==d&&(u=E.clone(u,!0,!0),s&&E.merge(a,ge(u,\"script\"))),i.call(n[c],u,c);if(s)for(l=a[a.length-1].ownerDocument,E.map(a,Le),c=0;c<s;c++)u=a[c],pe.test(u.type||\"\")&&!Y.access(u,\"globalEval\")&&E.contains(l,u)&&(u.src&&\"module\"!==(u.type||\"\").toLowerCase()?E._evalUrl&&!u.noModule&&E._evalUrl(u.src,{nonce:u.nonce||u.getAttribute(\"nonce\")},l):C(u.textContent.replace(Se,\"\"),u,l))}return n}function Oe(e,t,n){for(var r,i=t?E.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||E.cleanData(ge(r)),r.parentNode&&(n&&ie(r)&&ve(ge(r,\"script\")),r.parentNode.removeChild(r));return e}E.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,o,a,s,u,l,c=e.cloneNode(!0),f=ie(e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||E.isXMLDoc(e)))for(a=ge(c),r=0,i=(o=ge(e)).length;r<i;r++)s=o[r],u=a[r],void 0,\"input\"===(l=u.nodeName.toLowerCase())&&fe.test(s.type)?u.checked=s.checked:\"input\"!==l&&\"textarea\"!==l||(u.defaultValue=s.defaultValue);if(t)if(n)for(o=o||ge(e),a=a||ge(c),r=0,i=o.length;r<i;r++)je(o[r],a[r]);else je(e,c);return 0<(a=ge(c,\"script\")).length&&ve(a,!f&&ge(e,\"script\")),c},cleanData:function(e){for(var t,n,r,i=E.event.special,o=0;void 0!==(n=e[o]);o++)if(X(n)){if(t=n[Y.expando]){if(t.events)for(r in t.events)i[r]?E.event.remove(n,r):E.removeEvent(n,r,t.handle);n[Y.expando]=void 0}n[G.expando]&&(n[G.expando]=void 0)}}}),E.fn.extend({detach:function(e){return Oe(this,e,!0)},remove:function(e){return Oe(this,e)},text:function(e){return $(this,function(e){return void 0===e?E.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return qe(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||ke(this,e).appendChild(e)})},prepend:function(){return qe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=ke(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return qe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return qe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(E.cleanData(ge(e,!1)),e.textContent=\"\");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return E.clone(this,e,t)})},html:function(e){return $(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if(\"string\"==typeof e&&!Ae.test(e)&&!he[(de.exec(e)||[\"\",\"\"])[1].toLowerCase()]){e=E.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(E.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return qe(this,arguments,function(e){var t=this.parentNode;E.inArray(this,n)<0&&(E.cleanData(ge(this)),t&&t.replaceChild(e,this))},n)}}),E.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},function(e,a){E.fn[e]=function(e){for(var t,n=[],r=E(e),i=r.length-1,o=0;o<=i;o++)t=o===i?this:this.clone(!0),E(r[o])[a](t),u.apply(n,t.get());return this.pushStack(n)}});var Pe=new RegExp(\"^(\"+ee+\")(?!px)[a-z%]+$\",\"i\"),He=/^--/,Ie=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=g),t.getComputedStyle(e)},Re=function(e,t,n){var r,i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in r=n.call(e),t)e.style[i]=o[i];return r},Be=new RegExp(ne.join(\"|\"),\"i\"),Me=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",We=new RegExp(\"^\"+Me+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+Me+\"+$\",\"g\");function Fe(e,t,n){var r,i,o,a,s=He.test(t),u=e.style;return(n=n||Ie(e))&&(a=n.getPropertyValue(t)||n[t],s&&(a=a.replace(We,\"$1\")),\"\"!==a||ie(e)||(a=E.style(e,t)),!m.pixelBoxStyles()&&Pe.test(a)&&Be.test(t)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=n.width,u.width=r,u.minWidth=i,u.maxWidth=o)),void 0!==a?a+\"\":a}function $e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){u.style.cssText=\"position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0\",l.style.cssText=\"position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%\",re.appendChild(u).appendChild(l);var e=g.getComputedStyle(l);n=\"1%\"!==e.top,s=12===t(e.marginLeft),l.style.right=\"60%\",o=36===t(e.right),r=36===t(e.width),l.style.position=\"absolute\",i=12===t(l.offsetWidth/3),re.removeChild(u),l=null}}function t(e){return Math.round(parseFloat(e))}var n,r,i,o,a,s,u=w.createElement(\"div\"),l=w.createElement(\"div\");l.style&&(l.style.backgroundClip=\"content-box\",l.cloneNode(!0).style.backgroundClip=\"\",m.clearCloneStyle=\"content-box\"===l.style.backgroundClip,E.extend(m,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),s},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,t,n,r;return null==a&&(e=w.createElement(\"table\"),t=w.createElement(\"tr\"),n=w.createElement(\"div\"),e.style.cssText=\"position:absolute;left:-11111px;border-collapse:separate\",t.style.cssText=\"border:1px solid\",t.style.height=\"1px\",n.style.height=\"9px\",n.style.display=\"block\",re.appendChild(e).appendChild(t).appendChild(n),r=g.getComputedStyle(t),a=parseInt(r.height,10)+parseInt(r.borderTopWidth,10)+parseInt(r.borderBottomWidth,10)===t.offsetHeight,re.removeChild(e)),a}}))}();var ze=[\"Webkit\",\"Moz\",\"ms\"],_e=w.createElement(\"div\").style,Ue={};function Ve(e){var t=E.cssProps[e]||Ue[e];return t||(e in _e?e:Ue[e]=function(e){var t=e[0].toUpperCase()+e.slice(1),n=ze.length;while(n--)if((e=ze[n]+t)in _e)return e}(e)||e)}var Xe,Qe,Ye=/^(none|table(?!-c[ea]).+)/,Ge={position:\"absolute\",visibility:\"hidden\",display:\"block\"},Ke={letterSpacing:\"0\",fontWeight:\"400\"};function Je(e,t,n){var r=te.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||\"px\"):t}function Ze(e,t,n,r,i,o){var a=\"width\"===t?1:0,s=0,u=0;if(n===(r?\"border\":\"content\"))return 0;for(;a<4;a+=2)\"margin\"===n&&(u+=E.css(e,n+ne[a],!0,i)),r?(\"content\"===n&&(u-=E.css(e,\"padding\"+ne[a],!0,i)),\"margin\"!==n&&(u-=E.css(e,\"border\"+ne[a]+\"Width\",!0,i))):(u+=E.css(e,\"padding\"+ne[a],!0,i),\"padding\"!==n?u+=E.css(e,\"border\"+ne[a]+\"Width\",!0,i):s+=E.css(e,\"border\"+ne[a]+\"Width\",!0,i));return!r&&0<=o&&(u+=Math.max(0,Math.ceil(e[\"offset\"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))||0),u}function et(e,t,n){var r=Ie(e),i=(!m.boxSizingReliable()||n)&&\"border-box\"===E.css(e,\"boxSizing\",!1,r),o=i,a=Fe(e,t,r),s=\"offset\"+t[0].toUpperCase()+t.slice(1);if(Pe.test(a)){if(!n)return a;a=\"auto\"}return(!m.boxSizingReliable()&&i||!m.reliableTrDimensions()&&S(e,\"tr\")||\"auto\"===a||!parseFloat(a)&&\"inline\"===E.css(e,\"display\",!1,r))&&e.getClientRects().length&&(i=\"border-box\"===E.css(e,\"boxSizing\",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+Ze(e,t,n||(i?\"border\":\"content\"),o,r,a)+\"px\"}E.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Fe(e,\"opacity\");return\"\"===n?\"1\":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=V(t),u=He.test(t),l=e.style;if(u||(t=Ve(s)),a=E.cssHooks[t]||E.cssHooks[s],void 0===n)return a&&\"get\"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];\"string\"===(o=typeof n)&&(i=te.exec(n))&&i[1]&&(n=function(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return E.css(e,t,\"\")},u=s(),l=n&&n[3]||(E.cssNumber[t]?\"\":\"px\"),c=e.nodeType&&(E.cssNumber[t]||\"px\"!==l&&+u)&&te.exec(E.css(e,t));if(c&&c[3]!==l){u/=2,l=l||c[3],c=+u||1;while(a--)E.style(e,t,c+l),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),c/=o;c*=2,E.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}(e,t,i),o=\"number\"),null!=n&&n==n&&(\"number\"!==o||u||(n+=i&&i[3]||(E.cssNumber[s]?\"\":\"px\")),m.clearCloneStyle||\"\"!==n||0!==t.indexOf(\"background\")||(l[t]=\"inherit\"),a&&\"set\"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,a,s=V(t);return He.test(t)||(t=Ve(s)),(a=E.cssHooks[t]||E.cssHooks[s])&&\"get\"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Fe(e,t,r)),\"normal\"===i&&t in Ke&&(i=Ke[t]),\"\"===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),E.each([\"height\",\"width\"],function(e,u){E.cssHooks[u]={get:function(e,t,n){if(t)return!Ye.test(E.css(e,\"display\"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,u,n):Re(e,Ge,function(){return et(e,u,n)})},set:function(e,t,n){var r,i=Ie(e),o=!m.scrollboxSize()&&\"absolute\"===i.position,a=(o||n)&&\"border-box\"===E.css(e,\"boxSizing\",!1,i),s=n?Ze(e,u,n,a,i):0;return a&&o&&(s-=Math.ceil(e[\"offset\"+u[0].toUpperCase()+u.slice(1)]-parseFloat(i[u])-Ze(e,u,\"border\",!1,i)-.5)),s&&(r=te.exec(t))&&\"px\"!==(r[3]||\"px\")&&(e.style[u]=t,t=E.css(e,u)),Je(0,t,s)}}}),E.cssHooks.marginLeft=$e(m.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Fe(e,\"marginLeft\"))||e.getBoundingClientRect().left-Re(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+\"px\"}),E.each({margin:\"\",padding:\"\",border:\"Width\"},function(i,o){E.cssHooks[i+o]={expand:function(e){for(var t=0,n={},r=\"string\"==typeof e?e.split(\" \"):[e];t<4;t++)n[i+ne[t]+o]=r[t]||r[t-2]||r[0];return n}},\"margin\"!==i&&(E.cssHooks[i+o].set=Je)}),E.fn.extend({css:function(e,t){return $(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Ie(e),i=t.length;a<i;a++)o[t[a]]=E.css(e,t[a],!1,r);return o}return void 0!==n?E.style(e,t,n):E.css(e,t)},e,t,1<arguments.length)}}),E.fn.delay=function(r,e){return r=E.fx&&E.fx.speeds[r]||r,e=e||\"fx\",this.queue(e,function(e,t){var n=g.setTimeout(e,r);t.stop=function(){g.clearTimeout(n)}})},Xe=w.createElement(\"input\"),Qe=w.createElement(\"select\").appendChild(w.createElement(\"option\")),Xe.type=\"checkbox\",m.checkOn=\"\"!==Xe.value,m.optSelected=Qe.selected,(Xe=w.createElement(\"input\")).value=\"t\",Xe.type=\"radio\",m.radioValue=\"t\"===Xe.value;var tt,nt=E.expr.attrHandle;E.fn.extend({attr:function(e,t){return $(this,E.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){E.removeAttr(this,e)})}}),E.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return\"undefined\"==typeof e.getAttribute?E.prop(e,t,n):(1===o&&E.isXMLDoc(e)||(i=E.attrHooks[t.toLowerCase()]||(E.expr.match.bool.test(t)?tt:void 0)),void 0!==n?null===n?void E.removeAttr(e,t):i&&\"set\"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+\"\"),n):i&&\"get\"in i&&null!==(r=i.get(e,t))?r:null==(r=E.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&\"radio\"===t&&S(e,\"input\")){var n=e.value;return e.setAttribute(\"type\",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(H);if(i&&1===e.nodeType)while(n=i[r++])e.removeAttribute(n)}}),tt={set:function(e,t,n){return!1===t?E.removeAttr(e,n):e.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\\w+/g),function(e,t){var a=nt[t]||E.find.attr;nt[t]=function(e,t,n){var r,i,o=t.toLowerCase();return n||(i=nt[o],nt[o]=r,r=null!=a(e,t,n)?o:null,nt[o]=i),r}});var rt=/^(?:input|select|textarea|button)$/i,it=/^(?:a|area)$/i;function ot(e){return(e.match(H)||[]).join(\" \")}function at(e){return e.getAttribute&&e.getAttribute(\"class\")||\"\"}function st(e){return Array.isArray(e)?e:\"string\"==typeof e&&e.match(H)||[]}E.fn.extend({prop:function(e,t){return $(this,E.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[E.propFix[e]||e]})}}),E.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&E.isXMLDoc(e)||(t=E.propFix[t]||t,i=E.propHooks[t]),void 0!==n?i&&\"set\"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&\"get\"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=E.find.attr(e,\"tabindex\");return t?parseInt(t,10):rt.test(e.nodeName)||it.test(e.nodeName)&&e.href?0:-1}}},propFix:{\"for\":\"htmlFor\",\"class\":\"className\"}}),m.optSelected||(E.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),E.each([\"tabIndex\",\"readOnly\",\"maxLength\",\"cellSpacing\",\"cellPadding\",\"rowSpan\",\"colSpan\",\"useMap\",\"frameBorder\",\"contentEditable\"],function(){E.propFix[this.toLowerCase()]=this}),E.fn.extend({addClass:function(t){var e,n,r,i,o,a;return b(t)?this.each(function(e){E(this).addClass(t.call(this,e,at(this)))}):(e=st(t)).length?this.each(function(){if(r=at(this),n=1===this.nodeType&&\" \"+ot(r)+\" \"){for(o=0;o<e.length;o++)i=e[o],n.indexOf(\" \"+i+\" \")<0&&(n+=i+\" \");a=ot(n),r!==a&&this.setAttribute(\"class\",a)}}):this},removeClass:function(t){var e,n,r,i,o,a;return b(t)?this.each(function(e){E(this).removeClass(t.call(this,e,at(this)))}):arguments.length?(e=st(t)).length?this.each(function(){if(r=at(this),n=1===this.nodeType&&\" \"+ot(r)+\" \"){for(o=0;o<e.length;o++){i=e[o];while(-1<n.indexOf(\" \"+i+\" \"))n=n.replace(\" \"+i+\" \",\" \")}a=ot(n),r!==a&&this.setAttribute(\"class\",a)}}):this:this.attr(\"class\",\"\")},toggleClass:function(t,n){var e,r,i,o,a=typeof t,s=\"string\"===a||Array.isArray(t);return b(t)?this.each(function(e){E(this).toggleClass(t.call(this,e,at(this),n),n)}):\"boolean\"==typeof n&&s?n?this.addClass(t):this.removeClass(t):(e=st(t),this.each(function(){if(s)for(o=E(this),i=0;i<e.length;i++)r=e[i],o.hasClass(r)?o.removeClass(r):o.addClass(r);else void 0!==t&&\"boolean\"!==a||((r=at(this))&&Y.set(this,\"__className__\",r),this.setAttribute&&this.setAttribute(\"class\",r||!1===t?\"\":Y.get(this,\"__className__\")||\"\"))}))},hasClass:function(e){var t,n,r=0;t=\" \"+e+\" \";while(n=this[r++])if(1===n.nodeType&&-1<(\" \"+ot(at(n))+\" \").indexOf(t))return!0;return!1}});var ut=/\\r/g;E.fn.extend({val:function(n){var r,e,i,t=this[0];return arguments.length?(i=b(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=i?n.call(this,e,E(this).val()):n)?t=\"\":\"number\"==typeof t?t+=\"\":Array.isArray(t)&&(t=E.map(t,function(e){return null==e?\"\":e+\"\"})),(r=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&\"set\"in r&&void 0!==r.set(this,t,\"value\")||(this.value=t))})):t?(r=E.valHooks[t.type]||E.valHooks[t.nodeName.toLowerCase()])&&\"get\"in r&&void 0!==(e=r.get(t,\"value\"))?e:\"string\"==typeof(e=t.value)?e.replace(ut,\"\"):null==e?\"\":e:void 0}}),E.extend({valHooks:{option:{get:function(e){var t=E.find.attr(e,\"value\");return null!=t?t:ot(E.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a=\"select-one\"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!S(n.parentNode,\"optgroup\"))){if(t=E(n).val(),a)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=E.makeArray(t),a=i.length;while(a--)((r=i[a]).selected=-1<E.inArray(E.valHooks.option.get(r),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),E.each([\"radio\",\"checkbox\"],function(){E.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<E.inArray(E(e).val(),t)}},m.checkOn||(E.valHooks[this].get=function(e){return null===e.getAttribute(\"value\")?\"on\":e.value})}),m.focusin=\"onfocusin\"in g;var lt=/^(?:focusinfocus|focusoutblur)$/,ct=function(e){e.stopPropagation()};E.extend(E.event,{trigger:function(e,t,n,r){var i,o,a,s,u,l,c,f,d=[n||w],p=y.call(e,\"type\")?e.type:e,h=y.call(e,\"namespace\")?e.namespace.split(\".\"):[];if(o=f=a=n=n||w,3!==n.nodeType&&8!==n.nodeType&&!lt.test(p+E.event.triggered)&&(-1<p.indexOf(\".\")&&(p=(h=p.split(\".\")).shift(),h.sort()),u=p.indexOf(\":\")<0&&\"on\"+p,(e=e[E.expando]?e:new E.Event(p,\"object\"==typeof e&&e)).isTrigger=r?2:3,e.namespace=h.join(\".\"),e.rnamespace=e.namespace?new RegExp(\"(^|\\\\.)\"+h.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:E.makeArray(t,[e]),c=E.event.special[p]||{},r||!c.trigger||!1!==c.trigger.apply(n,t))){if(!r&&!c.noBubble&&!x(n)){for(s=c.delegateType||p,lt.test(s+p)||(o=o.parentNode);o;o=o.parentNode)d.push(o),a=o;a===(n.ownerDocument||w)&&d.push(a.defaultView||a.parentWindow||g)}i=0;while((o=d[i++])&&!e.isPropagationStopped())f=o,e.type=1<i?s:c.bindType||p,(l=(Y.get(o,\"events\")||Object.create(null))[e.type]&&Y.get(o,\"handle\"))&&l.apply(o,t),(l=u&&o[u])&&l.apply&&X(o)&&(e.result=l.apply(o,t),!1===e.result&&e.preventDefault());return e.type=p,r||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(d.pop(),t)||!X(n)||u&&b(n[p])&&!x(n)&&((a=n[u])&&(n[u]=null),E.event.triggered=p,e.isPropagationStopped()&&f.addEventListener(p,ct),n[p](),e.isPropagationStopped()&&f.removeEventListener(p,ct),E.event.triggered=void 0,a&&(n[u]=a)),e.result}},simulate:function(e,t,n){var r=E.extend(new E.Event,n,{type:e,isSimulated:!0});E.event.trigger(r,null,t)}}),E.fn.extend({trigger:function(e,t){return this.each(function(){E.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return E.event.trigger(e,t,n,!0)}}),m.focusin||E.each({focus:\"focusin\",blur:\"focusout\"},function(n,r){var i=function(e){E.event.simulate(r,e.target,E.event.fix(e))};E.event.special[r]={setup:function(){var e=this.ownerDocument||this.document||this,t=Y.access(e,r);t||e.addEventListener(n,i,!0),Y.access(e,r,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=Y.access(e,r)-1;t?Y.access(e,r,t):(e.removeEventListener(n,i,!0),Y.remove(e,r))}}}),E.parseXML=function(e){var t,n;if(!e||\"string\"!=typeof e)return null;try{t=(new g.DOMParser).parseFromString(e,\"text/xml\")}catch(e){}return n=t&&t.getElementsByTagName(\"parsererror\")[0],t&&!n||E.error(\"Invalid XML: \"+(n?E.map(n.childNodes,function(e){return e.textContent}).join(\"\\n\"):e)),t};var ft,dt=/\\[\\]$/,pt=/\\r?\\n/g,ht=/^(?:submit|button|image|reset|file)$/i,gt=/^(?:input|select|textarea|keygen)/i;function vt(n,e,r,i){var t;if(Array.isArray(e))E.each(e,function(e,t){r||dt.test(n)?i(n,t):vt(n+\"[\"+(\"object\"==typeof t&&null!=t?e:\"\")+\"]\",t,r,i)});else if(r||\"object\"!==T(e))i(n,e);else for(t in e)vt(n+\"[\"+t+\"]\",e[t],r,i)}E.param=function(e,t){var n,r=[],i=function(e,t){var n=b(t)?t():t;r[r.length]=encodeURIComponent(e)+\"=\"+encodeURIComponent(null==n?\"\":n)};if(null==e)return\"\";if(Array.isArray(e)||e.jquery&&!E.isPlainObject(e))E.each(e,function(){i(this.name,this.value)});else for(n in e)vt(n,e[n],t,i);return r.join(\"&\")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=E.prop(this,\"elements\");return e?E.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!E(this).is(\":disabled\")&&gt.test(this.nodeName)&&!ht.test(e)&&(this.checked||!fe.test(e))}).map(function(e,t){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,function(e){return{name:t.name,value:e.replace(pt,\"\\r\\n\")}}):{name:t.name,value:n.replace(pt,\"\\r\\n\")}}).get()}}),E.fn.extend({wrapAll:function(e){var t;return this[0]&&(b(e)&&(e=e.call(this[0])),t=E(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return b(n)?this.each(function(e){E(this).wrapInner(n.call(this,e))}):this.each(function(){var e=E(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=b(t);return this.each(function(e){E(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not(\"body\").each(function(){E(this).replaceWith(this.childNodes)}),this}}),E.expr.pseudos.hidden=function(e){return!E.expr.pseudos.visible(e)},E.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},m.createHTMLDocument=((ft=w.implementation.createHTMLDocument(\"\").body).innerHTML=\"<form></form><form></form>\",2===ft.childNodes.length),E.parseHTML=function(e,t,n){return\"string\"!=typeof e?[]:(\"boolean\"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((r=(t=w.implementation.createHTMLDocument(\"\")).createElement(\"base\")).href=w.location.href,t.head.appendChild(r)):t=w),o=!n&&[],(i=k.exec(e))?[t.createElement(i[1])]:(i=me([e],t,o),o&&o.length&&E(o).remove(),E.merge([],i.childNodes)));var r,i,o},E.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l=E.css(e,\"position\"),c=E(e),f={};\"static\"===l&&(e.style.position=\"relative\"),s=c.offset(),o=E.css(e,\"top\"),u=E.css(e,\"left\"),(\"absolute\"===l||\"fixed\"===l)&&-1<(o+u).indexOf(\"auto\")?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),b(t)&&(t=t.call(e,n,E.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),\"using\"in t?t.using.call(e,f):c.css(f)}},E.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){E.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if(\"fixed\"===E.css(r,\"position\"))t=r.getBoundingClientRect();else{t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;while(e&&(e===n.body||e===n.documentElement)&&\"static\"===E.css(e,\"position\"))e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=E(e).offset()).top+=E.css(e,\"borderTopWidth\",!0),i.left+=E.css(e,\"borderLeftWidth\",!0))}return{top:t.top-i.top-E.css(r,\"marginTop\",!0),left:t.left-i.left-E.css(r,\"marginLeft\",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&\"static\"===E.css(e,\"position\"))e=e.offsetParent;return e||re})}}),E.each({scrollLeft:\"pageXOffset\",scrollTop:\"pageYOffset\"},function(t,i){var o=\"pageYOffset\"===i;E.fn[t]=function(e){return $(this,function(e,t,n){var r;if(x(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===n)return r?r[i]:e[t];r?r.scrollTo(o?r.pageXOffset:n,o?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),E.each([\"top\",\"left\"],function(e,n){E.cssHooks[n]=$e(m.pixelPosition,function(e,t){if(t)return t=Fe(e,n),Pe.test(t)?E(e).position()[n]+\"px\":t})}),E.each({Height:\"height\",Width:\"width\"},function(a,s){E.each({padding:\"inner\"+a,content:s,\"\":\"outer\"+a},function(r,o){E.fn[o]=function(e,t){var n=arguments.length&&(r||\"boolean\"!=typeof e),i=r||(!0===e||!0===t?\"margin\":\"border\");return $(this,function(e,t,n){var r;return x(e)?0===o.indexOf(\"outer\")?e[\"inner\"+a]:e.document.documentElement[\"client\"+a]:9===e.nodeType?(r=e.documentElement,Math.max(e.body[\"scroll\"+a],r[\"scroll\"+a],e.body[\"offset\"+a],r[\"offset\"+a],r[\"client\"+a])):void 0===n?E.css(e,t,i):E.style(e,t,n,i)},s,n?e:void 0,n)}})}),E.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,\"**\"):this.off(t,e||\"**\",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),E.each(\"blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu\".split(\" \"),function(e,n){E.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}});var yt=/^[\\s\\uFEFF\\xA0]+|([^\\s\\uFEFF\\xA0])[\\s\\uFEFF\\xA0]+$/g;E.proxy=function(e,t){var n,r,i;if(\"string\"==typeof t&&(n=e[t],t=e,e=n),b(e))return r=s.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||E.guid++,i},E.holdReady=function(e){e?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=S,E.isFunction=b,E.isWindow=x,E.camelCase=V,E.type=T,E.now=Date.now,E.isNumeric=function(e){var t=E.type(e);return(\"number\"===t||\"string\"===t)&&!isNaN(e-parseFloat(e))},E.trim=function(e){return null==e?\"\":(e+\"\").replace(yt,\"$1\")},\"function\"==typeof define&&define.amd&&define(\"jquery\",[],function(){return E});var mt=g.jQuery,bt=g.$;return E.noConflict=function(e){return g.$===E&&(g.$=bt),e&&g.jQuery===E&&(g.jQuery=mt),E},\"undefined\"==typeof e&&(g.jQuery=g.$=E),E});\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Creates a new Logger, without keeping track of it in the loggers list\n     * @arguments the same as Logger constructor\n     */\n    getUntrackedLogger: function(id, transports, options) {\n        return new Logger(curLevel, id, transports, options);\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","/**\n * Enumeration of the video types\n */\nexport enum VideoType {\n\n    /**\n     * The camera video type.\n     */\n    CAMERA = 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP = 'desktop',\n\n    /**\n     * The high fps desktop video type.\n     */\n    DESKTOP_HIGH_FPS = 'desktop_high_fps'\n}\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.values(Logger.levels).forEach(\n    function (logLevel) {\n        this[logLevel] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) { // jshint ignore:line\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n\n        if (arg instanceof Error) {\n            msg += arg.toString() + ': ' + arg.stack;\n        } else if (this.stringifyObjects && typeof arg === 'object') {\n        // NOTE: We were trying to stringify all error logs before but because of a bug that we were getting the keys\n        // of the log levels which are all with upper case and comparing it with the keys which are all lower case we\n        // were never actually strinfying the error logs. That's why I've removed the check for error logs here.\n        // NOTE: The non-enumerable properties of the objects wouldn't be included in the string after JSON.strigify.\n        // For example Map instance will be translated to '{}'. So I think we have to eventually do something better\n        // for parsing the arguments. But since this option for strigify is part of the public interface and I think\n        // it could be useful in some cases I will it for now.\n            msg += this.stringify(arg);\n        } else {\n            msg += arg;\n        }\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Passes the logs to logStorage.storeLogs in order to store them. If logStorage.storeLogs throws an error, it prints it.\n * Note: We are not retrying to pass the logs to the logStorage if there is an error.\n * @param {string[]} logs - The logs to be stored.\n */\nLogCollector.prototype._storeLogs = function (logs) {\n    try {\n        this.logStorage.storeLogs(logs);\n    } catch (error) {\n        console.error('LogCollector error when calling logStorage.storeLogs(): ', error);\n    }\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    var logStorageReady = false;\n\n    try {\n        logStorageReady = this.logStorage.isReady();\n    } catch (error) {\n        console.error('LogCollector error when calling logStorage.isReady(): ', error);\n    }\n\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (logStorageReady || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (logStorageReady) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this._storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this._storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","export enum RTCEvents {\n    /**\n     * Designates an event indicating that the audio output device has changed.\n     */\n    AUDIO_OUTPUT_DEVICE_CHANGED = 'rtc.audio_output_device_changed',\n\n    /**\n     * Designates an event indicating that some audio SSRCs that have already been signaled will now map to new remote\n     * sources.\n     */\n    AUDIO_SSRCS_REMAPPED = 'rtc.audio_ssrcs_remapped',\n\n    /**\n     * Designates an event indicating that the bridge bandwidth estimation stats have been received.\n     */\n    BRIDGE_BWE_STATS_RECEIVED = 'rtc.bridge_bwe_stats_received',\n\n    /**\n     * Indicates that the data channel has been closed.\n     */\n    DATA_CHANNEL_CLOSED = 'rtc.data_channel_closed',\n\n    /**\n     * Indicates that the data channel has been opened.\n     */\n    DATA_CHANNEL_OPEN = 'rtc.data_channel_open',\n\n    /**\n     * Indicates that the list with available devices is now available.\n     */\n    DEVICE_LIST_AVAILABLE = 'rtc.device_list_available',\n\n    /**\n     * Indicates that the list with available devices has changed.\n     */\n    DEVICE_LIST_CHANGED = 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE = 'rtc.device_list_will_change',\n\n    /**\n     * Indicates that the dominant speaker has changed.\n     */\n    DOMINANT_SPEAKER_CHANGED = 'rtc.dominant_speaker_changed',\n\n    /**\n     * Indicates that the connection status of the endpoint has changed.\n     */\n    ENDPOINT_CONN_STATUS_CHANGED = 'rtc.endpoint_conn_status_changed',\n\n    /**\n     * Indicates that a message from another participant is received on data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED = 'rtc.endpoint_message_received',\n\n    /**\n     * Indicates that the remote endpoint stats have been received on data channel.\n     */\n    ENDPOINT_STATS_RECEIVED = 'rtc.endpoint_stats_received',\n\n    /**\n     * Indicates that the list of sources currently being forwarded by the bridge has changed.\n     */\n    FORWARDED_SOURCES_CHANGED = 'rtc.forwarded_sources_changed',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED = 'rtc.lastn_value_changed',\n\n    /**\n     * The max enabled resolution of a local video track was changed.\n     */\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED = 'rtc.local_track_max_enabled_resolution_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED = 'rtc.local_ufrag_changed',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED = 'rtc.permissions_changed',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED = 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE = 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED = 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE = 'rtc.remote_track_unmute',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED = 'rtc.remote_ufrag_changed',\n\n    /**\n     * Indicates that sender constraints requested by the bridge for this endpoint have changed.\n     */\n    SENDER_VIDEO_CONSTRAINTS_CHANGED = 'rtc.sender_video_constraints_changed',\n\n    /**\n     * Designates an event indicating that some video SSRCs that have already been signaled will now map to new remote\n     * sources.\n     */\n    VIDEO_SSRCS_REMAPPED = 'rtc.video_ssrcs_remapped'\n}\n\nexport const BRIDGE_BWE_STATS_RECEIVED = RTCEvents.BRIDGE_BWE_STATS_RECEIVED;\nexport const DATA_CHANNEL_OPEN = RTCEvents.DATA_CHANNEL_OPEN;\nexport const DATA_CHANNEL_CLOSED = RTCEvents.DATA_CHANNEL_CLOSED;\nexport const ENDPOINT_CONN_STATUS_CHANGED = RTCEvents.ENDPOINT_CONN_STATUS_CHANGED;\nexport const DOMINANT_SPEAKER_CHANGED = RTCEvents.DOMINANT_SPEAKER_CHANGED;\nexport const FORWARDED_SOURCES_CHANGED = RTCEvents.FORWARDED_SOURCES_CHANGED;\nexport const PERMISSIONS_CHANGED = RTCEvents.PERMISSIONS_CHANGED;\nexport const SENDER_VIDEO_CONSTRAINTS_CHANGED = RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED;\nexport const LASTN_VALUE_CHANGED = RTCEvents.LASTN_VALUE_CHANGED;\nexport const LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED = RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED;\nexport const REMOTE_TRACK_ADDED = RTCEvents.REMOTE_TRACK_ADDED;\nexport const REMOTE_TRACK_MUTE = RTCEvents.REMOTE_TRACK_MUTE;\nexport const REMOTE_TRACK_REMOVED = RTCEvents.REMOTE_TRACK_REMOVED;\nexport const REMOTE_TRACK_UNMUTE = RTCEvents.REMOTE_TRACK_UNMUTE;\nexport const AUDIO_OUTPUT_DEVICE_CHANGED = RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED;\nexport const DEVICE_LIST_CHANGED = RTCEvents.DEVICE_LIST_CHANGED;\nexport const DEVICE_LIST_WILL_CHANGE = RTCEvents.DEVICE_LIST_WILL_CHANGE;\nexport const DEVICE_LIST_AVAILABLE = RTCEvents.DEVICE_LIST_AVAILABLE;\nexport const ENDPOINT_MESSAGE_RECEIVED = RTCEvents.ENDPOINT_MESSAGE_RECEIVED;\nexport const ENDPOINT_STATS_RECEIVED = RTCEvents.ENDPOINT_STATS_RECEIVED;\nexport const LOCAL_UFRAG_CHANGED = RTCEvents.LOCAL_UFRAG_CHANGED;\nexport const REMOTE_UFRAG_CHANGED = RTCEvents.REMOTE_UFRAG_CHANGED;\nexport const VIDEO_SSRCS_REMAPPED = RTCEvents.VIDEO_SSRCS_REMAPPED;\nexport const AUDIO_SSRCS_REMAPPED = RTCEvents.AUDIO_SSRCS_REMAPPED;\n\n// TODO: this was a pre-ES6 module using module.exports = RTCEvents which doesn't translate well\n// it is used in a number of places and should be updated to use the named export\n\nexport default RTCEvents;\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n            typeof define === 'function' && define.amd ? define(['exports'], factory) :\n            (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.strophe = {}));\n})(this, (function (exports) { 'use strict';\n\n            var global$1 = typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {};\n\n            /*\n             * This module provides uniform\n             * Shims APIs and globals that are not present in all JS environments,\n             * the most common example for Strophe being browser APIs like WebSocket\n             * and DOM that don't exist under nodejs.\n             *\n             * Usually these will be supplied in nodejs by conditionally requiring a\n             * NPM module that provides a compatible implementation.\n             */\n\n            /* global global */\n\n            /**\n             * WHATWG WebSockets API\n             * https://www.w3.org/TR/websockets/\n             *\n             * Interface to use the web socket protocol\n             *\n             * Used implementations:\n             * - supported browsers: built-in in WebSocket global\n             *   https://developer.mozilla.org/en-US/docs/Web/API/WebSocket#Browser_compatibility\n             * - nodejs: use standard-compliant 'ws' module\n             *   https://www.npmjs.com/package/ws\n             */\n            function getWebSocketImplementation() {\n              let WebSocketImplementation = global$1.WebSocket;\n\n              if (typeof WebSocketImplementation === 'undefined') {\n                throw new Error('WebSocket global not found!');\n              }\n\n              return WebSocketImplementation;\n            }\n\n            const WebSocket = getWebSocketImplementation();\n            /**\n             * DOMParser\n             * https://w3c.github.io/DOM-Parsing/#the-domparser-interface\n             *\n             * Interface to parse XML strings into Document objects\n             *\n             * Used implementations:\n             * - supported browsers: built-in in DOMParser global\n             *   https://developer.mozilla.org/en-US/docs/Web/API/DOMParser#Browser_compatibility\n             * - nodejs: use '@xmldom/xmldom' module\n             *   https://www.npmjs.com/package/@xmldom/xmldom\n             */\n\n            function getDOMParserImplementation() {\n              let DOMParserImplementation = global$1.DOMParser;\n\n              if (typeof DOMParserImplementation === 'undefined') {\n                throw new Error('DOMParser global not found!');\n              }\n\n              return DOMParserImplementation;\n            }\n\n            const DOMParser = getDOMParserImplementation();\n            /**\n             *  Gets IE xml doc object. Used by getDummyXMLDocument shim.\n             *\n             *  Returns:\n             *    A Microsoft XML DOM Object\n             *  See Also:\n             *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n             */\n\n            function _getIEXmlDom() {\n              const docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n              for (let d = 0; d < docStrings.length; d++) {\n                try {\n                  // eslint-disable-next-line no-undef\n                  const doc = new ActiveXObject(docStrings[d]);\n                  return doc;\n                } catch (e) {// Try next one\n                }\n              }\n            }\n            /**\n             * Creates a dummy XML DOM document to serve as an element and text node generator.\n             *\n             * Used implementations:\n             *  - IE < 10: avoid using createDocument() due to a memory leak, use ie-specific\n             *    workaround\n             *  - other supported browsers: use document's createDocument\n             *  - nodejs: use '@xmldom/xmldom'\n             */\n\n\n            function getDummyXMLDOMDocument() {\n              // nodejs\n              if (typeof document === 'undefined') {\n                try {\n                  const DOMImplementation = getDOMParserImplementation();\n                  return new DOMImplementation().createDocument('jabber:client', 'strophe', null);\n                } catch (err) {\n                  throw new Error('You must install the \"@xmldom/xmldom\" package to use Strophe in nodejs.');\n                }\n              } // IE < 10\n\n\n              if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                const doc = _getIEXmlDom();\n\n                doc.appendChild(doc.createElement('strophe'));\n                return doc;\n              } // All other supported browsers\n\n\n              return document.implementation.createDocument('jabber:client', 'strophe', null);\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            const safe_add$1 = function (x, y) {\n              const lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            const bit_rol = function (num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            const str2binl = function (str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              const bin = [];\n\n              for (let i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            const binl2str = function (bin) {\n              let str = \"\";\n\n              for (let i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            const binl2hex = function (binarray) {\n              const hex_tab = \"0123456789abcdef\";\n              let str = \"\";\n\n              for (let i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            const md5_cmn = function (q, a, b, x, s, t) {\n              return safe_add$1(bit_rol(safe_add$1(safe_add$1(a, q), safe_add$1(x, t)), s), b);\n            };\n\n            const md5_ff = function (a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            const md5_gg = function (a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            const md5_hh = function (a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            const md5_ii = function (a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            const core_md5 = function (x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              let a = 1732584193;\n              let b = -271733879;\n              let c = -1732584194;\n              let d = 271733878;\n              let olda, oldb, oldc, oldd;\n\n              for (let i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            const MD5 = {\n              hexdigest: function (s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function (s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /** Class: Strophe.SASLMechanism\n             *\n             *  Encapsulates an SASL authentication mechanism.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      SCRAM-SHA-1 - 60\n             *      PLAIN       - 50\n             *      OAUTHBEARER - 40\n             *      X-OAUTH2    - 30\n             *      ANONYMOUS   - 20\n             *      EXTERNAL    - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n            class SASLMechanism {\n              /**\n               * PrivateConstructor: Strophe.SASLMechanism\n               * SASL auth mechanism abstraction.\n               *\n               *  Parameters:\n               *    (String) name - SASL Mechanism name.\n               *    (Boolean) isClientFirst - If client should send response first without challenge.\n               *    (Number) priority - Priority.\n               *\n               *  Returns:\n               *    A new Strophe.SASLMechanism object.\n               */\n              constructor(name, isClientFirst, priority) {\n                /** PrivateVariable: mechname\n                 *  Mechanism name.\n                 */\n                this.mechname = name;\n                /** PrivateVariable: isClientFirst\n                 *  If client sends response without initial server challenge.\n                 */\n\n                this.isClientFirst = isClientFirst;\n                /** Variable: priority\n                 *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n                 *  Users may override this to prioritize mechanisms differently.\n                 *\n                 *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n                 *\n                 *  > Strophe.SASLPlain.priority = Strophe.SASLSHA1.priority;\n                 *\n                 *  See <SASL mechanisms> for a list of available mechanisms.\n                 *\n                 */\n\n                this.priority = priority;\n              }\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n\n\n              test() {\n                // eslint-disable-line class-methods-use-this\n                return true;\n              }\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n\n\n              onStart(connection) {\n                this._connection = connection;\n              }\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge.\n               *\n               *  By deafult, if the client is expected to send data first (isClientFirst === true),\n               *  this method is called with `challenge` as null on the first call,\n               *  unless `clientChallenge` is overridden in the relevant subclass.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n\n\n              onChallenge(connection, challenge) {\n                // eslint-disable-line\n                throw new Error(\"You should implement challenge handling!\");\n              }\n              /** PrivateFunction: clientChallenge\n               *  Called by the protocol implementation if the client is expected to send\n               *  data first in the authentication exchange (i.e. isClientFirst === true).\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n\n\n              clientChallenge(connection) {\n                if (!this.isClientFirst) {\n                  throw new Error(\"clientChallenge should not be called if isClientFirst is false!\");\n                }\n\n                return this.onChallenge(connection);\n              }\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n\n\n              onFailure() {\n                this._connection = null;\n              }\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n\n\n              onSuccess() {\n                this._connection = null;\n              }\n\n            }\n\n            class SASLAnonymous extends SASLMechanism {\n              /** PrivateConstructor: SASLAnonymous\n               *  SASL ANONYMOUS authentication.\n               */\n              constructor() {\n                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'ANONYMOUS';\n                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 20;\n                super(mechname, isClientFirst, priority);\n              }\n\n              test(connection) {\n                // eslint-disable-line class-methods-use-this\n                return connection.authcid === null;\n              }\n\n            }\n\n            class SASLExternal extends SASLMechanism {\n              /** PrivateConstructor: SASLExternal\n               *  SASL EXTERNAL authentication.\n               *\n               *  The EXTERNAL mechanism allows a client to request the server to use\n               *  credentials established by means external to the mechanism to\n               *  authenticate the client. The external means may be, for instance,\n               *  TLS services.\n               */\n              constructor() {\n                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'EXTERNAL';\n                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n                super(mechname, isClientFirst, priority);\n              }\n\n              onChallenge(connection) {\n                // eslint-disable-line class-methods-use-this\n\n                /** According to XEP-178, an authzid SHOULD NOT be presented when the\n                 * authcid contained or implied in the client certificate is the JID (i.e.\n                 * authzid) with which the user wants to log in as.\n                 *\n                 * To NOT send the authzid, the user should therefore set the authcid equal\n                 * to the JID when instantiating a new Strophe.Connection object.\n                 */\n                return connection.authcid === connection.authzid ? '' : connection.authzid;\n              }\n\n            }\n\n            const utils = {\n              utf16to8: function (str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function (cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (const cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    let expires = '';\n                    let domain = '';\n                    let path = '';\n                    const cookieObj = cookies[cookieName];\n                    const isObj = typeof cookieObj === \"object\";\n                    const cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            class SASLOAuthBearer extends SASLMechanism {\n              /** PrivateConstructor: SASLOAuthBearer\n               *  SASL OAuth Bearer authentication.\n               */\n              constructor() {\n                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'OAUTHBEARER';\n                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 40;\n                super(mechname, isClientFirst, priority);\n              }\n\n              test(connection) {\n                // eslint-disable-line class-methods-use-this\n                return connection.pass !== null;\n              }\n\n              onChallenge(connection) {\n                // eslint-disable-line class-methods-use-this\n                let auth_str = 'n,';\n\n                if (connection.authcid !== null) {\n                  auth_str = auth_str + 'a=' + connection.authzid;\n                }\n\n                auth_str = auth_str + ',';\n                auth_str = auth_str + \"\\u0001\";\n                auth_str = auth_str + 'auth=Bearer ';\n                auth_str = auth_str + connection.pass;\n                auth_str = auth_str + \"\\u0001\";\n                auth_str = auth_str + \"\\u0001\";\n                return utils.utf16to8(auth_str);\n              }\n\n            }\n\n            class SASLPlain extends SASLMechanism {\n              /** PrivateConstructor: SASLPlain\n               *  SASL PLAIN authentication.\n               */\n              constructor() {\n                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'PLAIN';\n                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;\n                super(mechname, isClientFirst, priority);\n              }\n\n              test(connection) {\n                // eslint-disable-line class-methods-use-this\n                return connection.authcid !== null;\n              }\n\n              onChallenge(connection) {\n                // eslint-disable-line class-methods-use-this\n                const {\n                  authcid,\n                  authzid,\n                  domain,\n                  pass\n                } = connection;\n\n                if (!domain) {\n                  throw new Error(\"SASLPlain onChallenge: domain is not defined!\");\n                } // Only include authzid if it differs from authcid.\n                // See: https://tools.ietf.org/html/rfc6120#section-6.3.8\n\n\n                let auth_str = authzid !== `${authcid}@${domain}` ? authzid : '';\n                auth_str = auth_str + \"\\u0000\";\n                auth_str = auth_str + authcid;\n                auth_str = auth_str + \"\\u0000\";\n                auth_str = auth_str + pass;\n                return utils.utf16to8(auth_str);\n              }\n\n            }\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n                e = safe_add(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            const SHA1 = {\n              b64_hmac_sha1: function (key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function (s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function (key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function (s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            class SASLSHA1 extends SASLMechanism {\n              /** PrivateConstructor: SASLSHA1\n               *  SASL SCRAM SHA 1 authentication.\n               */\n              constructor() {\n                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'SCRAM-SHA-1';\n                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60;\n                super(mechname, isClientFirst, priority);\n              }\n\n              test(connection) {\n                // eslint-disable-line class-methods-use-this\n                return connection.authcid !== null;\n              }\n\n              onChallenge(connection, challenge) {\n                // eslint-disable-line class-methods-use-this\n                let nonce, salt, iter, Hi, U, U_old, i, k;\n                let responseText = \"c=biws,\";\n                let authMessage = `${connection._sasl_data[\"client-first-message-bare\"]},${challenge},`;\n                const cnonce = connection._sasl_data.cnonce;\n                const attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  const matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.slice(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                const pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                const clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                const serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                const clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              }\n\n              clientChallenge(connection, test_cnonce) {\n                // eslint-disable-line class-methods-use-this\n                const cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n                let auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n                auth_str += \",r=\";\n                auth_str += cnonce;\n                connection._sasl_data.cnonce = cnonce;\n                connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n                auth_str = \"n,,\" + auth_str;\n                return auth_str;\n              }\n\n            }\n\n            class SASLXOAuth2 extends SASLMechanism {\n              /** PrivateConstructor: SASLXOAuth2\n               *  SASL X-OAuth2 authentication.\n               */\n              constructor() {\n                let mechname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'X-OAUTH2';\n                let isClientFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;\n                super(mechname, isClientFirst, priority);\n              }\n\n              test(connection) {\n                // eslint-disable-line class-methods-use-this\n                return connection.pass !== null;\n              }\n\n              onChallenge(connection) {\n                // eslint-disable-line class-methods-use-this\n                let auth_str = '\\u0000';\n\n                if (connection.authcid !== null) {\n                  auth_str = auth_str + connection.authzid;\n                }\n\n                auth_str = auth_str + \"\\u0000\";\n                auth_str = auth_str + connection.pass;\n                return utils.utf16to8(auth_str);\n              }\n\n            }\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2018, OGG, LLC\n            */\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n            const Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"1.5.0\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag(tag) {\n                  for (let i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (let i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n\n                validCSS(style) {\n                  for (let i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11,\n                ATTACHFAIL: 12\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild(elem, elemName, func) {\n                for (let i = 0; i < elem.childNodes.length; i++) {\n                  const childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = getDummyXMLDOMDocument();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                const node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (let a = 1; a < arguments.length; a++) {\n                  const arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (typeof arg === \"object\" && typeof arg.sort === \"function\") {\n                    for (let i = 0; i < arg.length; i++) {\n                      const attr = arg[i];\n\n                      if (typeof attr === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (typeof arg === \"object\") {\n                    for (const k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode(html) {\n                let node; //ensure text is escaped\n\n                if (DOMParser) {\n                  const parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                let str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (let i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement(elem) {\n                let el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (let i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (let i = 0; i < elem.childNodes.length; i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml(elem) {\n                let el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  const tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (let i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        const attribute = Strophe.XHTML.attributes[tag][i];\n                        let value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && typeof value === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          const css = [];\n                          const cssAttrs = value.split(';');\n\n                          for (let j = 0; j < cssAttrs.length; j++) {\n                            const attr = cssAttrs[j].split(':');\n                            const cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              const cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (let i = 0; i < elem.childNodes.length; i++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (let i = 0; i < elem.childNodes.length; i++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (let i = 0; i < elem.childNodes.length; i++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid(jid) {\n                const bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  const parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                const s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log(level, msg) {\n                if (level === this.LogLevel.FATAL) {\n                  var _console;\n\n                  (_console = console) === null || _console === void 0 ? void 0 : _console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                const names = [...Array(elem.attributes.length).keys()].map(i => elem.attributes[i].nodeName);\n                names.sort();\n                let result = names.reduce((a, n) => `${a} ${n}=\"${Strophe.xmlescape(elem.attributes.getNamedItem(n).value)}\"`, `<${elem.nodeName}`);\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (let i = 0; i < elem.childNodes.length; i++) {\n                    const child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = class Builder {\n              constructor(name, attrs) {\n                // Set correct namespace for jabber:client elements\n                if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                  if (attrs && !attrs.xmlns) {\n                    attrs.xmlns = Strophe.NS.CLIENT;\n                  } else if (!attrs) {\n                    attrs = {\n                      xmlns: Strophe.NS.CLIENT\n                    };\n                  }\n                } // Holds the tree being built.\n\n\n                this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n                this.node = this.nodeTree;\n              }\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n\n\n              tree() {\n                return this.nodeTree;\n              }\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n\n\n              toString() {\n                return Strophe.serialize(this.nodeTree);\n              }\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n\n\n              up() {\n                this.node = this.node.parentNode;\n                return this;\n              }\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n\n\n              root() {\n                this.node = this.nodeTree;\n                return this;\n              }\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n\n\n              attrs(moreattrs) {\n                for (const k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              }\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n\n\n              c(name, attrs, text) {\n                const child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              }\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n\n\n              cnode(elem) {\n                let impNode;\n                const xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                const newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              }\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n\n\n              t(text) {\n                const child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              }\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n\n\n              h(html) {\n                const fragment = Strophe.xmlGenerator().createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                const xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace(elem) {\n                let elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch(elem) {\n                let nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, elem => {\n                    if (this.getNamespace(elem) === this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch(elem) {\n                let from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                const elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run(elem) {\n                let result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            Strophe.TimedHandler = class TimedHandler {\n              /** PrivateConstructor: Strophe.TimedHandler\n               *  Create and initialize a new Strophe.TimedHandler object.\n               *\n               *  Parameters:\n               *    (Integer) period - The number of milliseconds to wait before the\n               *      handler is called.\n               *    (Function) handler - The callback to run when the handler fires.  This\n               *      function should take no arguments.\n               *\n               *  Returns:\n               *    A new Strophe.TimedHandler object.\n               */\n              constructor(period, handler) {\n                this.period = period;\n                this.handler = handler;\n                this.lastCalled = new Date().getTime();\n                this.user = true;\n              }\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n\n\n              run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              }\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n\n\n              reset() {\n                this.lastCalled = new Date().getTime();\n              }\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n\n\n              toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL SCRAM-SHA-1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA-1 - 60\n             *      PLAIN       - 50\n             *      OAUTHBEARER - 40\n             *      X-OAUTH2    - 30\n             *      ANONYMOUS   - 20\n             *      EXTERNAL    - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  protocol:\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  worker:\n             *\n             *  Set this option to URL from where the shared worker script should be loaded.\n             *\n             *  To run the websocket connection inside a shared worker.\n             *  This allows you to share a single websocket-based connection between\n             *  multiple Strophe.Connection instances, for example one per browser tab.\n             *\n             *  The script to use is the one in `src/shared-connection-worker.js`.\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = class Connection {\n              constructor(service, options) {\n                // The service URL\n                this.service = service; // Configuration options\n\n                this.options = options || {};\n                this.setProtocol();\n                /* The connected JID. */\n\n                this.jid = \"\";\n                /* the JIDs domain */\n\n                this.domain = null;\n                /* stream:features */\n\n                this.features = null; // SASL\n\n                this._sasl_data = {};\n                this.do_bind = false;\n                this.do_session = false;\n                this.mechanisms = {}; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.protocolErrorHandlers = {\n                  'HTTP': {},\n                  'websocket': {}\n                };\n                this._idleTimeout = null;\n                this._disconnectTimeout = null;\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.do_authentication = true;\n                this.paused = false;\n                this.restored = false;\n                this._data = [];\n                this._uniqueId = 0;\n                this._sasl_success_handler = null;\n                this._sasl_failure_handler = null;\n                this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n                this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n                this._idleTimeout = setTimeout(() => this._onIdle(), 100);\n                utils.addCookies(this.options.cookies);\n                this.registerSASLMechanisms(this.options.mechanisms); // A client must always respond to incoming IQ \"set\" and \"get\" stanzas.\n                // See https://datatracker.ietf.org/doc/html/rfc6120#section-8.2.3\n                //\n                // This is a fallback handler which gets called when no other handler\n                // was called for a received IQ \"set\" or \"get\".\n\n                this.iqFallbackHandler = new Strophe.Handler(iq => this.send($iq({\n                  type: 'error',\n                  id: iq.getAttribute('id')\n                }).c('error', {\n                  'type': 'cancel'\n                }).c('service-unavailable', {\n                  'xmlns': Strophe.NS.STANZAS\n                })), null, 'iq', ['get', 'set']); // initialize plugins\n\n                for (const k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    const F = function () {};\n\n                    F.prototype = Strophe._connectionPlugins[k];\n                    this[k] = new F();\n                    this[k].init(this);\n                  }\n                }\n              }\n              /** Function: setProtocol\n               *  Select protocal based on this.options or this.service\n               */\n\n\n              setProtocol() {\n                const proto = this.options.protocol || \"\";\n\n                if (this.options.worker) {\n                  this._proto = new Strophe.WorkerWebsocket(this);\n                } else if (this.service.indexOf(\"ws:\") === 0 || this.service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                  this._proto = new Strophe.Websocket(this);\n                } else {\n                  this._proto = new Strophe.Bosh(this);\n                }\n              }\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n\n\n              reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              }\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n\n\n              pause() {\n                this.paused = true;\n              }\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n\n\n              resume() {\n                this.paused = false;\n              }\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n\n\n              getUniqueId(suffix) {\n                // eslint-disable-line class-methods-use-this\n                const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  const r = Math.random() * 16 | 0,\n                        v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              }\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n\n\n              addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              }\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should NOT be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               *     (Integer) disconnection_timeout - The optional disconnection timeout\n               *      in milliseconds before _doDisconnect will be called.\n               */\n\n\n              connect(jid, pass, callback, wait, hold, route, authcid) {\n                let disconnection_timeout = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 3000;\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false;\n                this.disconnection_timeout = disconnection_timeout; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              }\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n\n\n              attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto._attach) {\n                  return this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  const error = new Error('The \"attach\" method is not available for your connection protocol');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              }\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n\n\n              restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  const error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              }\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n\n\n              _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              }\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n\n\n              xmlInput(elem) {\n                // eslint-disable-line\n                return;\n              }\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n\n\n              xmlOutput(elem) {\n                // eslint-disable-line\n                return;\n              }\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n\n\n              rawInput(data) {\n                // eslint-disable-line\n                return;\n              }\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n\n\n              rawOutput(data) {\n                // eslint-disable-line\n                return;\n              }\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n\n\n              nextValidRid(rid) {\n                // eslint-disable-line\n                return;\n              }\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n\n\n              send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (let i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              }\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n\n\n              flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              }\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n\n\n              sendPresence(elem, callback, errback, timeout) {\n                let timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                let id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  const handler = this.addHandler(stanza => {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      this.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, () => {\n                      // get rid of normal handler\n                      this.deleteHandler(handler); // call errback on timeout with null stanza\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              }\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n\n\n              sendIQ(elem, callback, errback, timeout) {\n                let timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                let id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  const handler = this.addHandler(stanza => {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      this.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    const iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      const error = new Error(`Got bad IQ type of ${iqtype}`);\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, () => {\n                      // get rid of normal handler\n                      this.deleteHandler(handler); // call errback on timeout with null stanza\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              }\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n\n\n              _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  const error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              }\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n\n\n              _sendRestart() {\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(() => this._onIdle(), 100);\n              }\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n\n\n              addTimedHandler(period, handler) {\n                const thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              }\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n\n\n              deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              }\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n\n\n              addHandler(handler, ns, name, type, id, from, options) {\n                const hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              }\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n\n\n              deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                const i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              }\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n\n\n              registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(m => this.registerSASLMechanism(m));\n              }\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n\n\n              registerSASLMechanism(Mechanism) {\n                const mechanism = new Mechanism();\n                this.mechanisms[mechanism.mechname] = mechanism;\n              }\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n\n\n              disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                if (reason) {\n                  Strophe.warn(\"Disconnect was called because: \" + reason);\n                } else {\n                  Strophe.info(\"Disconnect was called\");\n                }\n\n                if (this.connected) {\n                  let pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(this.disconnection_timeout, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              }\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n\n\n              _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (const k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    const plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(`${k} plugin caused an exception changing status: ${err}`);\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(`User connection callback caused an exception: ${e}`);\n                  }\n                }\n              }\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n\n\n              _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              }\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n\n\n              _dataRecv(req, raw) {\n                const elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  const hand = this.removeHandlers.pop();\n                  const i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                const type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  let cond = elem.getAttribute(\"condition\");\n                  const conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, child => {\n                  const matches = [];\n                  this.handlers = this.handlers.reduce((handlers, handler) => {\n                    try {\n                      if (handler.isMatch(child) && (this.authenticated || !handler.user)) {\n                        if (handler.run(child)) {\n                          handlers.push(handler);\n                        }\n\n                        matches.push(handler);\n                      } else {\n                        handlers.push(handler);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n\n                    return handlers;\n                  }, []); // If no handler was fired for an incoming IQ with type=\"set\",\n                  // then we return an IQ error stanza with service-unavailable.\n\n                  if (!matches.length && this.iqFallbackHandler.isMatch(child)) {\n                    this.iqFallbackHandler.run(child);\n                  }\n                });\n              }\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n\n\n              _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                let bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                const conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                let hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                const matched = Array.from(bodyWrap.getElementsByTagName(\"mechanism\")).map(m => this.mechanisms[m.textContent]).filter(m => m);\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              }\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n\n\n              sortMechanismsByPriority(mechanisms) {\n                // eslint-disable-line class-methods-use-this\n                // Sorting mechanisms according to priority.\n                for (let i = 0; i < mechanisms.length - 1; ++i) {\n                  let higher = i;\n\n                  for (let j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].priority > mechanisms[higher].priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    const swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              }\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n\n\n              authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              }\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n\n\n              _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                let mechanism_found = false;\n\n                for (let i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = mechanisms[i];\n\n                  this._sasl_mechanism.onStart(this);\n\n                  const request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.mechname\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    const response = this._sasl_mechanism.clientChallenge(this);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              }\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n\n\n              _sasl_challenge_cb(elem) {\n                const challenge = atob(Strophe.getText(elem));\n\n                const response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                const stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              }\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n\n\n              _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              }\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _onLegacyAuthIQResult(elem) {\n                // eslint-disable-line no-unused-vars\n                // build plaintext auth iq\n                const iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              }\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _sasl_success_cb(elem) {\n                if (this._sasl_data[\"server-signature\"]) {\n                  let serverSignature;\n                  const success = atob(Strophe.getText(elem));\n                  const attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  const matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                const streamfeature_handlers = [];\n\n                const wrapper = (handlers, elem) => {\n                  while (handlers.length) {\n                    this.deleteHandler(handlers.pop());\n                  }\n\n                  this._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(elem => wrapper(streamfeature_handlers, elem), null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(elem => wrapper(streamfeature_handlers, elem), Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              }\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (let i = 0; i < elem.childNodes.length; i++) {\n                  const child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              }\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n\n\n              bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, `Strophe.Connection.prototype.bind called but \"do_bind\" is false`);\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                const resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              }\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  const conflict = elem.getElementsByTagName(\"conflict\");\n                  let condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                const bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  const jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.authenticated = true;\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              }\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n\n\n              _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(`Strophe.Connection.prototype._establishSession ` + `called but apparently ${Strophe.NS.SESSION} wasn't advertised by the server`);\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              }\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this.authenticated = false;\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              }\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              }\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              }\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n\n\n              _addSysTimedHandler(period, handler) {\n                const thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              }\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n\n\n              _addSysHandler(handler, ns, name, type, id) {\n                const hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              }\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n\n\n              _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              }\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n\n\n              _onIdle() {\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  const thand = this.removeTimeds.pop();\n                  const i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                const now = new Date().getTime();\n                const newList = [];\n\n                for (let i = 0; i < this.timedHandlers.length; i++) {\n                  const thand = this.timedHandlers[i];\n\n                  if (this.authenticated || !thand.user) {\n                    const since = thand.lastCalled + thand.period;\n\n                    if (since - now <= 0) {\n                      if (thand.run()) {\n                        newList.push(thand);\n                      }\n                    } else {\n                      newList.push(thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(() => this._onIdle(), 100);\n                }\n              }\n\n            };\n            Strophe.SASLMechanism = SASLMechanism;\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous   - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain       - SASL PLAIN authentication.\n             *  Strophe.SASLSHA1        - SASL SCRAM-SHA-1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal    - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2     - SASL X-OAuth2 authentication\n             */\n\n            Strophe.SASLAnonymous = SASLAnonymous;\n            Strophe.SASLPlain = SASLPlain;\n            Strophe.SASLSHA1 = SASLSHA1;\n            Strophe.SASLOAuthBearer = SASLOAuthBearer;\n            Strophe.SASLExternal = SASLExternal;\n            Strophe.SASLXOAuth2 = SASLXOAuth2;\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            Strophe.Request = class Request {\n              /** PrivateConstructor: Strophe.Request\n               *  Create and initialize a new Strophe.Request object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data to be sent in the request.\n               *    (Function) func - The function that will be called when the\n               *      XMLHttpRequest readyState changes.\n               *    (Integer) rid - The BOSH rid attribute associated with this request.\n               *    (Integer) sends - The number of times this same request has been sent.\n               */\n              constructor(elem, func, rid, sends) {\n                this.id = ++Strophe._requestId;\n                this.xmlData = elem;\n                this.data = Strophe.serialize(elem); // save original function in case we need to make a new request\n                // from this one.\n\n                this.origFunc = func;\n                this.func = func;\n                this.rid = rid;\n                this.date = NaN;\n                this.sends = sends || 0;\n                this.abort = false;\n                this.dead = null;\n\n                this.age = function () {\n                  if (!this.date) {\n                    return 0;\n                  }\n\n                  const now = new Date();\n                  return (now - this.date) / 1000;\n                };\n\n                this.timeDead = function () {\n                  if (!this.dead) {\n                    return 0;\n                  }\n\n                  const now = new Date();\n                  return (now - this.dead) / 1000;\n                };\n\n                this.xhr = this._newXHR();\n              }\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n\n\n              getResponse() {\n                let node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe.error(\"invalid response received\");\n                    Strophe.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe.error(\"responseXML: \" + Strophe.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe.error(\"responseText: \" + this.xhr.responseText);\n                    const error = new Error();\n                    error.name = Strophe.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              }\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n\n\n              _newXHR() {\n                let xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe.Bosh = class Bosh {\n              constructor(connection) {\n                this._conn = connection;\n                /* request id for body tags */\n\n                this.rid = Math.floor(Math.random() * 4294967295);\n                /* The current session ID. */\n\n                this.sid = null; // default BOSH values\n\n                this.hold = 1;\n                this.wait = 60;\n                this.window = 5;\n                this.errors = 0;\n                this.inactivity = null;\n                this.lastResponseHeaders = null;\n                this._requests = [];\n              }\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n\n\n              _buildBody() {\n                const bodyWrap = $build('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              }\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n\n\n              _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              }\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n\n\n              _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                const body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                const _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              }\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n\n\n              _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe.Status.ATTACHED, null);\n              }\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n\n\n              _restore(jid, callback, wait, hold, wind) {\n                const session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe.getBareJidFromJid(session.jid) === Strophe.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe.getNodeFromJid(jid) === null && Strophe.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  const error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              }\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n\n\n              _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              }\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n\n\n              _connect_cb(bodyWrap) {\n                const typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  let cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe.error(\"BOSH-Connection failed: \" + cond);\n                  const conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                const wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                const hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                const wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                const inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              }\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n\n\n              _disconnect(pres) {\n                this._sendTerminate(pres);\n              }\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n\n\n              _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              }\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n\n\n              _emptyQueue() {\n                return this._requests.length === 0;\n              }\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n\n\n              _callProtocolErrorHandlers(req) {\n                const reqStatus = Bosh._getRequestStatus(req);\n\n                const err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              }\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n\n\n              _hitError(reqStatus) {\n                this.errors++;\n                Strophe.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              }\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n\n\n              _no_auth_received(callback) {\n                Strophe.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                const body = this._buildBody();\n\n                this._requests.push(new Strophe.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              }\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n\n\n              _onDisconnectTimeout() {\n                this._abortAllRequests();\n              }\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n\n\n              _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  const req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              }\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n\n\n              _onIdle() {\n                const data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  const body = this._buildBody();\n\n                  for (let i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  const time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe.TIMEOUT * this.wait)) {\n                    Strophe.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              }\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n\n\n              static _getRequestStatus(req, def) {\n                let reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              }\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n\n\n              _onRequestStateChange(func, req) {\n                Strophe.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                const reqStatus = Bosh._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this._conn.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                const reqIs0 = this._requests[0] === req;\n                const reqIs1 = this._requests[1] === req;\n                const valid_request = reqStatus > 0 && reqStatus < 500;\n                const too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"giving-up\");\n                }\n              }\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n\n\n              _processRequest(i) {\n                let req = this._requests[i];\n\n                const reqStatus = Bosh._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                const time_elapsed = req.age();\n                const primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe.TIMEOUT * this.wait);\n                const secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait);\n                const server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe.error(`Request ${this._requests[i].id} timed out (secondary), restarting`);\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    const content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  const sendFunc = () => {\n                    req.date = new Date();\n\n                    if (this._conn.options.customHeaders) {\n                      const headers = this._conn.options.customHeaders;\n\n                      for (const header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    const backoff = Math.min(Math.floor(Strophe.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              }\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n\n\n              _removeRequest(req) {\n                Strophe.debug(\"removing request\");\n\n                for (let i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              }\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n\n\n              _restartRequest(i) {\n                const req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              }\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n\n\n              _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              }\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n\n\n              _sendTerminate(pres) {\n                Strophe.debug(\"_sendTerminate was called\");\n\n                const body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                const req = new Strophe.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              }\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n\n\n              _send() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(() => this._conn._onIdle(), 100);\n              }\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n\n\n              _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              }\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n\n\n              _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n\n            };\n            /** Variable: strip\n             *\n             *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n             *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n             *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n             *\n             *  > Strophe.Bosh.prototype.strip = \"body\";\n             *\n             *  This will enable stripping of the body tag in both\n             *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n             */\n\n            Strophe.Bosh.prototype.strip = null;\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            Strophe.Websocket = class Websocket {\n              /** PrivateConstructor: Strophe.Websocket\n               *  Create and initialize a Strophe.WebSocket object.\n               *  Currently only sets the connection Object.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n               *\n               *  Returns:\n               *    A new Strophe.WebSocket object.\n               */\n              constructor(connection) {\n                this._conn = connection;\n                this.strip = \"wrapper\";\n                const service = connection.service;\n\n                if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                  // If the service is not an absolute URL, assume it is a path and put the absolute\n                  // URL together from options, current URL and the path.\n                  let new_service = \"\";\n\n                  if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                    new_service += \"ws\";\n                  } else {\n                    new_service += \"wss\";\n                  }\n\n                  new_service += \"://\" + window.location.host;\n\n                  if (service.indexOf(\"/\") !== 0) {\n                    new_service += window.location.pathname + service;\n                  } else {\n                    new_service += service;\n                  }\n\n                  connection.service = new_service;\n                }\n              }\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n\n\n              _buildStream() {\n                return $build(\"open\", {\n                  \"xmlns\": Strophe.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              }\n              /** PrivateFunction: _checkStreamError\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n\n\n              _checkStreamError(bodyWrap, connectstatus) {\n                let errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                const error = errors[0];\n                let condition = \"\";\n                let text = \"\";\n                const ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (let i = 0; i < error.childNodes.length; i++) {\n                  const e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                let errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              }\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n\n\n              _reset() {\n                // eslint-disable-line class-methods-use-this\n                return;\n              }\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n\n\n              _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket();\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n\n                this.socket.onopen = () => this._onOpen();\n\n                this.socket.onerror = e => this._onError(e);\n\n                this.socket.onclose = e => this._onClose(e); // Gets replaced with this._onMessage once _onInitialMessage is called\n\n\n                this.socket.onmessage = message => this._onInitialMessage(message);\n              }\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n\n\n              _connect_cb(bodyWrap) {\n                const error = this._checkStreamError(bodyWrap, Strophe.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe.Status.CONNFAIL;\n                }\n              }\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n\n\n              _handleStreamStart(message) {\n                let error = false; // Check for errors in the <open /> tag\n\n                const ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                const ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              }\n              /** PrivateFunction: _onInitialMessage\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n\n\n              _onInitialMessage(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  const data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  const streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  const parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  const see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    const service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    const isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  this._replaceMessageHandler();\n\n                  const string = this._streamWrap(message.data);\n\n                  const elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              }\n              /** PrivateFunction: _replaceMessageHandler\n               *\n               * Called by _onInitialMessage in order to replace itself with the general message handler.\n               * This method is overridden by Strophe.WorkerWebsocket, which manages a\n               * websocket connection via a service worker and doesn't have direct access\n               * to the socket.\n               */\n\n\n              _replaceMessageHandler() {\n                this.socket.onmessage = m => this._onMessage(m);\n              }\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n\n\n              _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  const close = $build(\"close\", {\n                    \"xmlns\": Strophe.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  const closeString = Strophe.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                setTimeout(() => this._conn._doDisconnect(), 0);\n              }\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n\n\n              _doDisconnect() {\n                Strophe.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              }\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n\n\n              _streamWrap(stanza) {\n                // eslint-disable-line class-methods-use-this\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              }\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n\n\n              _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              }\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n\n\n              _emptyQueue() {\n                // eslint-disable-line class-methods-use-this\n                return true;\n              }\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               */\n\n\n              _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe.debug(\"Websocket closed\");\n                }\n              }\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n\n\n              _no_auth_received(callback) {\n                Strophe.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              }\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n\n\n              _onDisconnectTimeout() {} // eslint-disable-line class-methods-use-this\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n\n\n              _abortAllRequests() {} // eslint-disable-line class-methods-use-this\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n\n\n              _onError(error) {\n                Strophe.error(\"Websocket error \" + JSON.stringify(error));\n\n                this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              }\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n\n\n              _onIdle() {\n                const data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (let i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      let stanza;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      const rawStanza = Strophe.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              }\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n\n\n              _onMessage(message) {\n                let elem; // check for closing stream\n\n                const close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  const data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._checkStreamError(elem, Strophe.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              }\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n\n\n              _onOpen() {\n                Strophe.debug(\"Websocket open\");\n\n                const start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                const startString = Strophe.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              }\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n\n\n              _reqToData(stanza) {\n                // eslint-disable-line class-methods-use-this\n                return stanza;\n              }\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n\n\n              _send() {\n                this._conn.flush();\n              }\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n\n\n              _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2020, JC Brand\n            */\n            const lmap = {};\n            lmap['debug'] = Strophe.LogLevel.DEBUG;\n            lmap['info'] = Strophe.LogLevel.INFO;\n            lmap['warn'] = Strophe.LogLevel.WARN;\n            lmap['error'] = Strophe.LogLevel.ERROR;\n            lmap['fatal'] = Strophe.LogLevel.FATAL;\n            /** Class: Strophe.WorkerWebsocket\n             *  _Private_ helper class that handles a websocket connection inside a shared worker.\n             */\n\n            Strophe.WorkerWebsocket = class WorkerWebsocket extends Strophe.Websocket {\n              /** PrivateConstructor: Strophe.WorkerWebsocket\n               *  Create and initialize a Strophe.WorkerWebsocket object.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - The Strophe.Connection\n               *\n               *  Returns:\n               *    A new Strophe.WorkerWebsocket object.\n               */\n              constructor(connection) {\n                super(connection);\n                this._conn = connection;\n                this.worker = new SharedWorker(this._conn.options.worker, 'Strophe XMPP Connection');\n\n                this.worker.onerror = e => {\n                  var _console;\n\n                  (_console = console) === null || _console === void 0 ? void 0 : _console.error(e);\n                  Strophe.log(Strophe.LogLevel.ERROR, `Shared Worker Error: ${e}`);\n                };\n              }\n\n              get socket() {\n                return {\n                  'send': str => this.worker.port.postMessage(['send', str])\n                };\n              }\n\n              _connect() {\n                this._messageHandler = m => this._onInitialMessage(m);\n\n                this.worker.port.start();\n\n                this.worker.port.onmessage = ev => this._onWorkerMessage(ev);\n\n                this.worker.port.postMessage(['_connect', this._conn.service, this._conn.jid]);\n              }\n\n              _attach(callback) {\n                this._messageHandler = m => this._onMessage(m);\n\n                this._conn.connect_callback = callback;\n                this.worker.port.start();\n\n                this.worker.port.onmessage = ev => this._onWorkerMessage(ev);\n\n                this.worker.port.postMessage(['_attach', this._conn.service]);\n              }\n\n              _attachCallback(status, jid) {\n                if (status === Strophe.Status.ATTACHED) {\n                  this._conn.jid = jid;\n                  this._conn.authenticated = true;\n                  this._conn.connected = true;\n                  this._conn.restored = true;\n\n                  this._conn._changeConnectStatus(Strophe.Status.ATTACHED);\n                } else if (status === Strophe.Status.ATTACHFAIL) {\n                  this._conn.authenticated = false;\n                  this._conn.connected = false;\n                  this._conn.restored = false;\n\n                  this._conn._changeConnectStatus(Strophe.Status.ATTACHFAIL);\n                }\n              }\n\n              _disconnect(readyState, pres) {\n                pres && this._conn.send(pres);\n                const close = $build(\"close\", {\n                  \"xmlns\": Strophe.NS.FRAMING\n                });\n\n                this._conn.xmlOutput(close.tree());\n\n                const closeString = Strophe.serialize(close);\n\n                this._conn.rawOutput(closeString);\n\n                this.worker.port.postMessage(['send', closeString]);\n\n                this._conn._doDisconnect();\n              }\n\n              _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe.debug(\"Websocket closed\");\n                }\n              }\n\n              _closeSocket() {\n                this.worker.port.postMessage(['_closeSocket']);\n              }\n              /** PrivateFunction: _replaceMessageHandler\n               *\n               * Called by _onInitialMessage in order to replace itself with the general message handler.\n               * This method is overridden by Strophe.WorkerWebsocket, which manages a\n               * websocket connection via a service worker and doesn't have direct access\n               * to the socket.\n               */\n\n\n              _replaceMessageHandler() {\n                this._messageHandler = m => this._onMessage(m);\n              }\n              /** PrivateFunction: _onWorkerMessage\n               * _Private_ function that handles messages received from the service worker\n               */\n\n\n              _onWorkerMessage(ev) {\n                const {\n                  data\n                } = ev;\n                const method_name = data[0];\n\n                if (method_name === '_onMessage') {\n                  this._messageHandler(data[1]);\n                } else if (method_name in this) {\n                  try {\n                    this[method_name].apply(this, ev.data.slice(1));\n                  } catch (e) {\n                    Strophe.log(Strophe.LogLevel.ERROR, e);\n                  }\n                } else if (method_name === 'log') {\n                  const level = data[1];\n                  const msg = data[2];\n                  Strophe.log(lmap[level], msg);\n                } else {\n                  Strophe.log(Strophe.LogLevel.ERROR, `Found unhandled service worker message: ${data}`);\n                }\n              }\n\n            };\n\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n            global$1.Strophe = core.Strophe;\n            const {\n              b64_sha1\n            } = SHA1;\n\n            exports.$build = $build;\n            exports.$iq = $iq;\n            exports.$msg = $msg;\n            exports.$pres = $pres;\n            exports.Strophe = Strophe;\n            exports.b64_sha1 = b64_sha1;\n\n            Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/////////////////////////////////////////////////////////////////////////////////\n/* UAParser.js v1.0.35\n   Copyright © 2012-2021 Faisal Salman <f@faisalman.com>\n   MIT License *//*\n   Detect Browser, Engine, OS, CPU, and Device type/model from User-Agent data.\n   Supports browser & node.js environment. \n   Demo   : https://faisalman.github.io/ua-parser-js\n   Source : https://github.com/faisalman/ua-parser-js */\n/////////////////////////////////////////////////////////////////////////////////\n\n(function (window, undefined) {\n\n    'use strict';\n\n    //////////////\n    // Constants\n    /////////////\n\n\n    var LIBVERSION  = '1.0.35',\n        EMPTY       = '',\n        UNKNOWN     = '?',\n        FUNC_TYPE   = 'function',\n        UNDEF_TYPE  = 'undefined',\n        OBJ_TYPE    = 'object',\n        STR_TYPE    = 'string',\n        MAJOR       = 'major',\n        MODEL       = 'model',\n        NAME        = 'name',\n        TYPE        = 'type',\n        VENDOR      = 'vendor',\n        VERSION     = 'version',\n        ARCHITECTURE= 'architecture',\n        CONSOLE     = 'console',\n        MOBILE      = 'mobile',\n        TABLET      = 'tablet',\n        SMARTTV     = 'smarttv',\n        WEARABLE    = 'wearable',\n        EMBEDDED    = 'embedded',\n        UA_MAX_LENGTH = 350;\n\n    var AMAZON  = 'Amazon',\n        APPLE   = 'Apple',\n        ASUS    = 'ASUS',\n        BLACKBERRY = 'BlackBerry',\n        BROWSER = 'Browser',\n        CHROME  = 'Chrome',\n        EDGE    = 'Edge',\n        FIREFOX = 'Firefox',\n        GOOGLE  = 'Google',\n        HUAWEI  = 'Huawei',\n        LG      = 'LG',\n        MICROSOFT = 'Microsoft',\n        MOTOROLA  = 'Motorola',\n        OPERA   = 'Opera',\n        SAMSUNG = 'Samsung',\n        SHARP   = 'Sharp',\n        SONY    = 'Sony',\n        VIERA   = 'Viera',\n        XIAOMI  = 'Xiaomi',\n        ZEBRA   = 'Zebra',\n        FACEBOOK    = 'Facebook',\n        CHROMIUM_OS = 'Chromium OS',\n        MAC_OS  = 'Mac OS';\n\n    ///////////\n    // Helper\n    //////////\n\n    var extend = function (regexes, extensions) {\n            var mergedRegexes = {};\n            for (var i in regexes) {\n                if (extensions[i] && extensions[i].length % 2 === 0) {\n                    mergedRegexes[i] = extensions[i].concat(regexes[i]);\n                } else {\n                    mergedRegexes[i] = regexes[i];\n                }\n            }\n            return mergedRegexes;\n        },\n        enumerize = function (arr) {\n            var enums = {};\n            for (var i=0; i<arr.length; i++) {\n                enums[arr[i].toUpperCase()] = arr[i];\n            }\n            return enums;\n        },\n        has = function (str1, str2) {\n            return typeof str1 === STR_TYPE ? lowerize(str2).indexOf(lowerize(str1)) !== -1 : false;\n        },\n        lowerize = function (str) {\n            return str.toLowerCase();\n        },\n        majorize = function (version) {\n            return typeof(version) === STR_TYPE ? version.replace(/[^\\d\\.]/g, EMPTY).split('.')[0] : undefined;\n        },\n        trim = function (str, len) {\n            if (typeof(str) === STR_TYPE) {\n                str = str.replace(/^\\s\\s*/, EMPTY);\n                return typeof(len) === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);\n            }\n    };\n\n    ///////////////\n    // Map helper\n    //////////////\n\n    var rgxMapper = function (ua, arrays) {\n\n            var i = 0, j, k, p, q, matches, match;\n\n            // loop through all regexes maps\n            while (i < arrays.length && !matches) {\n\n                var regex = arrays[i],       // even sequence (0,2,4,..)\n                    props = arrays[i + 1];   // odd sequence (1,3,5,..)\n                j = k = 0;\n\n                // try matching uastring with regexes\n                while (j < regex.length && !matches) {\n\n                    if (!regex[j]) { break; }\n                    matches = regex[j++].exec(ua);\n\n                    if (!!matches) {\n                        for (p = 0; p < props.length; p++) {\n                            match = matches[++k];\n                            q = props[p];\n                            // check if given property is actually array\n                            if (typeof q === OBJ_TYPE && q.length > 0) {\n                                if (q.length === 2) {\n                                    if (typeof q[1] == FUNC_TYPE) {\n                                        // assign modified match\n                                        this[q[0]] = q[1].call(this, match);\n                                    } else {\n                                        // assign given value, ignore regex match\n                                        this[q[0]] = q[1];\n                                    }\n                                } else if (q.length === 3) {\n                                    // check whether function or regex\n                                    if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {\n                                        // call function (usually string mapper)\n                                        this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined;\n                                    } else {\n                                        // sanitize match using given regex\n                                        this[q[0]] = match ? match.replace(q[1], q[2]) : undefined;\n                                    }\n                                } else if (q.length === 4) {\n                                        this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined;\n                                }\n                            } else {\n                                this[q] = match ? match : undefined;\n                            }\n                        }\n                    }\n                }\n                i += 2;\n            }\n        },\n\n        strMapper = function (str, map) {\n\n            for (var i in map) {\n                // check if current value is array\n                if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {\n                    for (var j = 0; j < map[i].length; j++) {\n                        if (has(map[i][j], str)) {\n                            return (i === UNKNOWN) ? undefined : i;\n                        }\n                    }\n                } else if (has(map[i], str)) {\n                    return (i === UNKNOWN) ? undefined : i;\n                }\n            }\n            return str;\n    };\n\n    ///////////////\n    // String map\n    //////////////\n\n    // Safari < 3.0\n    var oldSafariMap = {\n            '1.0'   : '/8',\n            '1.2'   : '/1',\n            '1.3'   : '/3',\n            '2.0'   : '/412',\n            '2.0.2' : '/416',\n            '2.0.3' : '/417',\n            '2.0.4' : '/419',\n            '?'     : '/'\n        },\n        windowsVersionMap = {\n            'ME'        : '4.90',\n            'NT 3.11'   : 'NT3.51',\n            'NT 4.0'    : 'NT4.0',\n            '2000'      : 'NT 5.0',\n            'XP'        : ['NT 5.1', 'NT 5.2'],\n            'Vista'     : 'NT 6.0',\n            '7'         : 'NT 6.1',\n            '8'         : 'NT 6.2',\n            '8.1'       : 'NT 6.3',\n            '10'        : ['NT 6.4', 'NT 10.0'],\n            'RT'        : 'ARM'\n    };\n\n    //////////////\n    // Regex map\n    /////////////\n\n    var regexes = {\n\n        browser : [[\n\n            /\\b(?:crmo|crios)\\/([\\w\\.]+)/i                                      // Chrome for Android/iOS\n            ], [VERSION, [NAME, 'Chrome']], [\n            /edg(?:e|ios|a)?\\/([\\w\\.]+)/i                                       // Microsoft Edge\n            ], [VERSION, [NAME, 'Edge']], [\n\n            // Presto based\n            /(opera mini)\\/([-\\w\\.]+)/i,                                        // Opera Mini\n            /(opera [mobiletab]{3,6})\\b.+version\\/([-\\w\\.]+)/i,                 // Opera Mobi/Tablet\n            /(opera)(?:.+version\\/|[\\/ ]+)([\\w\\.]+)/i                           // Opera\n            ], [NAME, VERSION], [\n            /opios[\\/ ]+([\\w\\.]+)/i                                             // Opera mini on iphone >= 8.0\n            ], [VERSION, [NAME, OPERA+' Mini']], [\n            /\\bopr\\/([\\w\\.]+)/i                                                 // Opera Webkit\n            ], [VERSION, [NAME, OPERA]], [\n\n            // Mixed\n            /(kindle)\\/([\\w\\.]+)/i,                                             // Kindle\n            /(lunascape|maxthon|netfront|jasmine|blazer)[\\/ ]?([\\w\\.]*)/i,      // Lunascape/Maxthon/Netfront/Jasmine/Blazer\n            // Trident based\n            /(avant |iemobile|slim)(?:browser)?[\\/ ]?([\\w\\.]*)/i,               // Avant/IEMobile/SlimBrowser\n            /(ba?idubrowser)[\\/ ]?([\\w\\.]+)/i,                                  // Baidu Browser\n            /(?:ms|\\()(ie) ([\\w\\.]+)/i,                                         // Internet Explorer\n\n            // Webkit/KHTML based                                               // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon\n            /(flock|rockmelt|midori|epiphany|silk|skyfire|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|qq|duckduckgo)\\/([-\\w\\.]+)/i,\n                                                                                // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ, aka ShouQ\n            /(heytap|ovi)browser\\/([\\d\\.]+)/i,                                  // Heytap/Ovi\n            /(weibo)__([\\d\\.]+)/i                                               // Weibo\n            ], [NAME, VERSION], [\n            /(?:\\buc? ?browser|(?:juc.+)ucweb)[\\/ ]?([\\w\\.]+)/i                 // UCBrowser\n            ], [VERSION, [NAME, 'UC'+BROWSER]], [\n            /microm.+\\bqbcore\\/([\\w\\.]+)/i,                                     // WeChat Desktop for Windows Built-in Browser\n            /\\bqbcore\\/([\\w\\.]+).+microm/i\n            ], [VERSION, [NAME, 'WeChat(Win) Desktop']], [\n            /micromessenger\\/([\\w\\.]+)/i                                        // WeChat\n            ], [VERSION, [NAME, 'WeChat']], [\n            /konqueror\\/([\\w\\.]+)/i                                             // Konqueror\n            ], [VERSION, [NAME, 'Konqueror']], [\n            /trident.+rv[: ]([\\w\\.]{1,9})\\b.+like gecko/i                       // IE11\n            ], [VERSION, [NAME, 'IE']], [\n            /ya(?:search)?browser\\/([\\w\\.]+)/i                                  // Yandex\n            ], [VERSION, [NAME, 'Yandex']], [\n            /(avast|avg)\\/([\\w\\.]+)/i                                           // Avast/AVG Secure Browser\n            ], [[NAME, /(.+)/, '$1 Secure '+BROWSER], VERSION], [\n            /\\bfocus\\/([\\w\\.]+)/i                                               // Firefox Focus\n            ], [VERSION, [NAME, FIREFOX+' Focus']], [\n            /\\bopt\\/([\\w\\.]+)/i                                                 // Opera Touch\n            ], [VERSION, [NAME, OPERA+' Touch']], [\n            /coc_coc\\w+\\/([\\w\\.]+)/i                                            // Coc Coc Browser\n            ], [VERSION, [NAME, 'Coc Coc']], [\n            /dolfin\\/([\\w\\.]+)/i                                                // Dolphin\n            ], [VERSION, [NAME, 'Dolphin']], [\n            /coast\\/([\\w\\.]+)/i                                                 // Opera Coast\n            ], [VERSION, [NAME, OPERA+' Coast']], [\n            /miuibrowser\\/([\\w\\.]+)/i                                           // MIUI Browser\n            ], [VERSION, [NAME, 'MIUI '+BROWSER]], [\n            /fxios\\/([-\\w\\.]+)/i                                                // Firefox for iOS\n            ], [VERSION, [NAME, FIREFOX]], [\n            /\\bqihu|(qi?ho?o?|360)browser/i                                     // 360\n            ], [[NAME, '360 '+BROWSER]], [\n            /(oculus|samsung|sailfish|huawei)browser\\/([\\w\\.]+)/i\n            ], [[NAME, /(.+)/, '$1 '+BROWSER], VERSION], [                      // Oculus/Samsung/Sailfish/Huawei Browser\n            /(comodo_dragon)\\/([\\w\\.]+)/i                                       // Comodo Dragon\n            ], [[NAME, /_/g, ' '], VERSION], [\n            /(electron)\\/([\\w\\.]+) safari/i,                                    // Electron-based App\n            /(tesla)(?: qtcarbrowser|\\/(20\\d\\d\\.[-\\w\\.]+))/i,                   // Tesla\n            /m?(qqbrowser|baiduboxapp|2345Explorer)[\\/ ]?([\\w\\.]+)/i            // QQBrowser/Baidu App/2345 Browser\n            ], [NAME, VERSION], [\n            /(metasr)[\\/ ]?([\\w\\.]+)/i,                                         // SouGouBrowser\n            /(lbbrowser)/i,                                                     // LieBao Browser\n            /\\[(linkedin)app\\]/i                                                // LinkedIn App for iOS & Android\n            ], [NAME], [\n\n            // WebView\n            /((?:fban\\/fbios|fb_iab\\/fb4a)(?!.+fbav)|;fbav\\/([\\w\\.]+);)/i       // Facebook App for iOS & Android\n            ], [[NAME, FACEBOOK], VERSION], [\n            /(kakao(?:talk|story))[\\/ ]([\\w\\.]+)/i,                             // Kakao App\n            /(naver)\\(.*?(\\d+\\.[\\w\\.]+).*\\)/i,                                  // Naver InApp\n            /safari (line)\\/([\\w\\.]+)/i,                                        // Line App for iOS\n            /\\b(line)\\/([\\w\\.]+)\\/iab/i,                                        // Line App for Android\n            /(chromium|instagram)[\\/ ]([-\\w\\.]+)/i                              // Chromium/Instagram\n            ], [NAME, VERSION], [\n            /\\bgsa\\/([\\w\\.]+) .*safari\\//i                                      // Google Search Appliance on iOS\n            ], [VERSION, [NAME, 'GSA']], [\n            /musical_ly(?:.+app_?version\\/|_)([\\w\\.]+)/i                        // TikTok\n            ], [VERSION, [NAME, 'TikTok']], [\n\n            /headlesschrome(?:\\/([\\w\\.]+)| )/i                                  // Chrome Headless\n            ], [VERSION, [NAME, CHROME+' Headless']], [\n\n            / wv\\).+(chrome)\\/([\\w\\.]+)/i                                       // Chrome WebView\n            ], [[NAME, CHROME+' WebView'], VERSION], [\n\n            /droid.+ version\\/([\\w\\.]+)\\b.+(?:mobile safari|safari)/i           // Android Browser\n            ], [VERSION, [NAME, 'Android '+BROWSER]], [\n\n            /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\\/v?([\\w\\.]+)/i       // Chrome/OmniWeb/Arora/Tizen/Nokia\n            ], [NAME, VERSION], [\n\n            /version\\/([\\w\\.\\,]+) .*mobile\\/\\w+ (safari)/i                      // Mobile Safari\n            ], [VERSION, [NAME, 'Mobile Safari']], [\n            /version\\/([\\w(\\.|\\,)]+) .*(mobile ?safari|safari)/i                // Safari & Safari Mobile\n            ], [VERSION, NAME], [\n            /webkit.+?(mobile ?safari|safari)(\\/[\\w\\.]+)/i                      // Safari < 3.0\n            ], [NAME, [VERSION, strMapper, oldSafariMap]], [\n\n            /(webkit|khtml)\\/([\\w\\.]+)/i\n            ], [NAME, VERSION], [\n\n            // Gecko based\n            /(navigator|netscape\\d?)\\/([-\\w\\.]+)/i                              // Netscape\n            ], [[NAME, 'Netscape'], VERSION], [\n            /mobile vr; rv:([\\w\\.]+)\\).+firefox/i                               // Firefox Reality\n            ], [VERSION, [NAME, FIREFOX+' Reality']], [\n            /ekiohf.+(flow)\\/([\\w\\.]+)/i,                                       // Flow\n            /(swiftfox)/i,                                                      // Swiftfox\n            /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\\/ ]?([\\w\\.\\+]+)/i,\n                                                                                // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror/Klar\n            /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\\/([-\\w\\.]+)$/i,\n                                                                                // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix\n            /(firefox)\\/([\\w\\.]+)/i,                                            // Other Firefox-based\n            /(mozilla)\\/([\\w\\.]+) .+rv\\:.+gecko\\/\\d+/i,                         // Mozilla\n\n            // Other\n            /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\\. ]?browser)[-\\/ ]?v?([\\w\\.]+)/i,\n                                                                                // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir/Obigo/Mosaic/Go/ICE/UP.Browser\n            /(links) \\(([\\w\\.]+)/i,                                             // Links\n            /panasonic;(viera)/i                                                // Panasonic Viera\n            ], [NAME, VERSION], [\n            \n            /(cobalt)\\/([\\w\\.]+)/i                                              // Cobalt\n            ], [NAME, [VERSION, /master.|lts./, \"\"]]\n        ],\n\n        cpu : [[\n\n            /(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\\)]/i                     // AMD64 (x64)\n            ], [[ARCHITECTURE, 'amd64']], [\n\n            /(ia32(?=;))/i                                                      // IA32 (quicktime)\n            ], [[ARCHITECTURE, lowerize]], [\n\n            /((?:i[346]|x)86)[;\\)]/i                                            // IA32 (x86)\n            ], [[ARCHITECTURE, 'ia32']], [\n\n            /\\b(aarch64|arm(v?8e?l?|_?64))\\b/i                                 // ARM64\n            ], [[ARCHITECTURE, 'arm64']], [\n\n            /\\b(arm(?:v[67])?ht?n?[fl]p?)\\b/i                                   // ARMHF\n            ], [[ARCHITECTURE, 'armhf']], [\n\n            // PocketPC mistakenly identified as PowerPC\n            /windows (ce|mobile); ppc;/i\n            ], [[ARCHITECTURE, 'arm']], [\n\n            /((?:ppc|powerpc)(?:64)?)(?: mac|;|\\))/i                            // PowerPC\n            ], [[ARCHITECTURE, /ower/, EMPTY, lowerize]], [\n\n            /(sun4\\w)[;\\)]/i                                                    // SPARC\n            ], [[ARCHITECTURE, 'sparc']], [\n\n            /((?:avr32|ia64(?=;))|68k(?=\\))|\\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\\b|pa-risc)/i\n                                                                                // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC\n            ], [[ARCHITECTURE, lowerize]]\n        ],\n\n        device : [[\n\n            //////////////////////////\n            // MOBILES & TABLETS\n            /////////////////////////\n\n            // Samsung\n            /\\b(sch-i[89]0\\d|shw-m380s|sm-[ptx]\\w{2,4}|gt-[pn]\\d{2,4}|sgh-t8[56]9|nexus 10)/i\n            ], [MODEL, [VENDOR, SAMSUNG], [TYPE, TABLET]], [\n            /\\b((?:s[cgp]h|gt|sm)-\\w+|sc[g-]?[\\d]+a?|galaxy nexus)/i,\n            /samsung[- ]([-\\w]+)/i,\n            /sec-(sgh\\w+)/i\n            ], [MODEL, [VENDOR, SAMSUNG], [TYPE, MOBILE]], [\n\n            // Apple\n            /(?:\\/|\\()(ip(?:hone|od)[\\w, ]*)(?:\\/|;)/i                          // iPod/iPhone\n            ], [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]], [\n            /\\((ipad);[-\\w\\),; ]+apple/i,                                       // iPad\n            /applecoremedia\\/[\\w\\.]+ \\((ipad)/i,\n            /\\b(ipad)\\d\\d?,\\d\\d?[;\\]].+ios/i\n            ], [MODEL, [VENDOR, APPLE], [TYPE, TABLET]], [\n            /(macintosh);/i\n            ], [MODEL, [VENDOR, APPLE]], [\n\n            // Sharp\n            /\\b(sh-?[altvz]?\\d\\d[a-ekm]?)/i\n            ], [MODEL, [VENDOR, SHARP], [TYPE, MOBILE]], [\n\n            // Huawei\n            /\\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\\d{2})\\b(?!.+d\\/s)/i\n            ], [MODEL, [VENDOR, HUAWEI], [TYPE, TABLET]], [\n            /(?:huawei|honor)([-\\w ]+)[;\\)]/i,\n            /\\b(nexus 6p|\\w{2,4}e?-[atu]?[ln][\\dx][012359c][adn]?)\\b(?!.+d\\/s)/i\n            ], [MODEL, [VENDOR, HUAWEI], [TYPE, MOBILE]], [\n\n            // Xiaomi\n            /\\b(poco[\\w ]+)(?: bui|\\))/i,                                       // Xiaomi POCO\n            /\\b; (\\w+) build\\/hm\\1/i,                                           // Xiaomi Hongmi 'numeric' models\n            /\\b(hm[-_ ]?note?[_ ]?(?:\\d\\w)?) bui/i,                             // Xiaomi Hongmi\n            /\\b(redmi[\\-_ ]?(?:note|k)?[\\w_ ]+)(?: bui|\\))/i,                   // Xiaomi Redmi\n            /\\b(mi[-_ ]?(?:a\\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\\d?\\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\\))/i // Xiaomi Mi\n            ], [[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, MOBILE]], [\n            /\\b(mi[-_ ]?(?:pad)(?:[\\w_ ]+))(?: bui|\\))/i                        // Mi Pad tablets\n            ],[[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, TABLET]], [\n\n            // OPPO\n            /; (\\w+) bui.+ oppo/i,\n            /\\b(cph[12]\\d{3}|p(?:af|c[al]|d\\w|e[ar])[mt]\\d0|x9007|a101op)\\b/i\n            ], [MODEL, [VENDOR, 'OPPO'], [TYPE, MOBILE]], [\n\n            // Vivo\n            /vivo (\\w+)(?: bui|\\))/i,\n            /\\b(v[12]\\d{3}\\w?[at])(?: bui|;)/i\n            ], [MODEL, [VENDOR, 'Vivo'], [TYPE, MOBILE]], [\n\n            // Realme\n            /\\b(rmx[12]\\d{3})(?: bui|;|\\))/i\n            ], [MODEL, [VENDOR, 'Realme'], [TYPE, MOBILE]], [\n\n            // Motorola\n            /\\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\\b[\\w ]+build\\//i,\n            /\\bmot(?:orola)?[- ](\\w*)/i,\n            /((?:moto[\\w\\(\\) ]+|xt\\d{3,4}|nexus 6)(?= bui|\\)))/i\n            ], [MODEL, [VENDOR, MOTOROLA], [TYPE, MOBILE]], [\n            /\\b(mz60\\d|xoom[2 ]{0,2}) build\\//i\n            ], [MODEL, [VENDOR, MOTOROLA], [TYPE, TABLET]], [\n\n            // LG\n            /((?=lg)?[vl]k\\-?\\d{3}) bui| 3\\.[-\\w; ]{10}lg?-([06cv9]{3,4})/i\n            ], [MODEL, [VENDOR, LG], [TYPE, TABLET]], [\n            /(lm(?:-?f100[nv]?|-[\\w\\.]+)(?= bui|\\))|nexus [45])/i,\n            /\\blg[-e;\\/ ]+((?!browser|netcast|android tv)\\w+)/i,\n            /\\blg-?([\\d\\w]+) bui/i\n            ], [MODEL, [VENDOR, LG], [TYPE, MOBILE]], [\n\n            // Lenovo\n            /(ideatab[-\\w ]+)/i,\n            /lenovo ?(s[56]000[-\\w]+|tab(?:[\\w ]+)|yt[-\\d\\w]{6}|tb[-\\d\\w]{6})/i\n            ], [MODEL, [VENDOR, 'Lenovo'], [TYPE, TABLET]], [\n\n            // Nokia\n            /(?:maemo|nokia).*(n900|lumia \\d+)/i,\n            /nokia[-_ ]?([-\\w\\.]*)/i\n            ], [[MODEL, /_/g, ' '], [VENDOR, 'Nokia'], [TYPE, MOBILE]], [\n\n            // Google\n            /(pixel c)\\b/i                                                      // Google Pixel C\n            ], [MODEL, [VENDOR, GOOGLE], [TYPE, TABLET]], [\n            /droid.+; (pixel[\\daxl ]{0,6})(?: bui|\\))/i                         // Google Pixel\n            ], [MODEL, [VENDOR, GOOGLE], [TYPE, MOBILE]], [\n\n            // Sony\n            /droid.+ (a?\\d[0-2]{2}so|[c-g]\\d{4}|so[-gl]\\w+|xq-a\\w[4-7][12])(?= bui|\\).+chrome\\/(?![1-6]{0,1}\\d\\.))/i\n            ], [MODEL, [VENDOR, SONY], [TYPE, MOBILE]], [\n            /sony tablet [ps]/i,\n            /\\b(?:sony)?sgp\\w+(?: bui|\\))/i\n            ], [[MODEL, 'Xperia Tablet'], [VENDOR, SONY], [TYPE, TABLET]], [\n\n            // OnePlus\n            / (kb2005|in20[12]5|be20[12][59])\\b/i,\n            /(?:one)?(?:plus)? (a\\d0\\d\\d)(?: b|\\))/i\n            ], [MODEL, [VENDOR, 'OnePlus'], [TYPE, MOBILE]], [\n\n            // Amazon\n            /(alexa)webm/i,\n            /(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\\))/i,                             // Kindle Fire without Silk / Echo Show\n            /(kf[a-z]+)( bui|\\)).+silk\\//i                                      // Kindle Fire HD\n            ], [MODEL, [VENDOR, AMAZON], [TYPE, TABLET]], [\n            /((?:sd|kf)[0349hijorstuw]+)( bui|\\)).+silk\\//i                     // Fire Phone\n            ], [[MODEL, /(.+)/g, 'Fire Phone $1'], [VENDOR, AMAZON], [TYPE, MOBILE]], [\n\n            // BlackBerry\n            /(playbook);[-\\w\\),; ]+(rim)/i                                      // BlackBerry PlayBook\n            ], [MODEL, VENDOR, [TYPE, TABLET]], [\n            /\\b((?:bb[a-f]|st[hv])100-\\d)/i,\n            /\\(bb10; (\\w+)/i                                                    // BlackBerry 10\n            ], [MODEL, [VENDOR, BLACKBERRY], [TYPE, MOBILE]], [\n\n            // Asus\n            /(?:\\b|asus_)(transfo[prime ]{4,10} \\w+|eeepc|slider \\w+|nexus 7|padfone|p00[cj])/i\n            ], [MODEL, [VENDOR, ASUS], [TYPE, TABLET]], [\n            / (z[bes]6[027][012][km][ls]|zenfone \\d\\w?)\\b/i\n            ], [MODEL, [VENDOR, ASUS], [TYPE, MOBILE]], [\n\n            // HTC\n            /(nexus 9)/i                                                        // HTC Nexus 9\n            ], [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]], [\n            /(htc)[-;_ ]{1,2}([\\w ]+(?=\\)| bui)|\\w+)/i,                         // HTC\n\n            // ZTE\n            /(zte)[- ]([\\w ]+?)(?: bui|\\/|\\))/i,\n            /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\\.))|sony(?!-bra))[-_ ]?([-\\w]*)/i         // Alcatel/GeeksPhone/Nexian/Panasonic/Sony\n            ], [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]], [\n\n            // Acer\n            /droid.+; ([ab][1-7]-?[0178a]\\d\\d?)/i\n            ], [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]], [\n\n            // Meizu\n            /droid.+; (m[1-5] note) bui/i,\n            /\\bmz-([-\\w]{2,})/i\n            ], [MODEL, [VENDOR, 'Meizu'], [TYPE, MOBILE]], [\n\n            // MIXED\n            /(blackberry|benq|palm(?=\\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\\w]*)/i,\n                                                                                // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron\n            /(hp) ([\\w ]+\\w)/i,                                                 // HP iPAQ\n            /(asus)-?(\\w+)/i,                                                   // Asus\n            /(microsoft); (lumia[\\w ]+)/i,                                      // Microsoft Lumia\n            /(lenovo)[-_ ]?([-\\w]+)/i,                                          // Lenovo\n            /(jolla)/i,                                                         // Jolla\n            /(oppo) ?([\\w ]+) bui/i                                             // OPPO\n            ], [VENDOR, MODEL, [TYPE, MOBILE]], [\n\n            /(kobo)\\s(ereader|touch)/i,                                         // Kobo\n            /(archos) (gamepad2?)/i,                                            // Archos\n            /(hp).+(touchpad(?!.+tablet)|tablet)/i,                             // HP TouchPad\n            /(kindle)\\/([\\w\\.]+)/i,                                             // Kindle\n            /(nook)[\\w ]+build\\/(\\w+)/i,                                        // Nook\n            /(dell) (strea[kpr\\d ]*[\\dko])/i,                                   // Dell Streak\n            /(le[- ]+pan)[- ]+(\\w{1,9}) bui/i,                                  // Le Pan Tablets\n            /(trinity)[- ]*(t\\d{3}) bui/i,                                      // Trinity Tablets\n            /(gigaset)[- ]+(q\\w{1,9}) bui/i,                                    // Gigaset Tablets\n            /(vodafone) ([\\w ]+)(?:\\)| bui)/i                                   // Vodafone\n            ], [VENDOR, MODEL, [TYPE, TABLET]], [\n\n            /(surface duo)/i                                                    // Surface Duo\n            ], [MODEL, [VENDOR, MICROSOFT], [TYPE, TABLET]], [\n            /droid [\\d\\.]+; (fp\\du?)(?: b|\\))/i                                 // Fairphone\n            ], [MODEL, [VENDOR, 'Fairphone'], [TYPE, MOBILE]], [\n            /(u304aa)/i                                                         // AT&T\n            ], [MODEL, [VENDOR, 'AT&T'], [TYPE, MOBILE]], [\n            /\\bsie-(\\w*)/i                                                      // Siemens\n            ], [MODEL, [VENDOR, 'Siemens'], [TYPE, MOBILE]], [\n            /\\b(rct\\w+) b/i                                                     // RCA Tablets\n            ], [MODEL, [VENDOR, 'RCA'], [TYPE, TABLET]], [\n            /\\b(venue[\\d ]{2,7}) b/i                                            // Dell Venue Tablets\n            ], [MODEL, [VENDOR, 'Dell'], [TYPE, TABLET]], [\n            /\\b(q(?:mv|ta)\\w+) b/i                                              // Verizon Tablet\n            ], [MODEL, [VENDOR, 'Verizon'], [TYPE, TABLET]], [\n            /\\b(?:barnes[& ]+noble |bn[rt])([\\w\\+ ]*) b/i                       // Barnes & Noble Tablet\n            ], [MODEL, [VENDOR, 'Barnes & Noble'], [TYPE, TABLET]], [\n            /\\b(tm\\d{3}\\w+) b/i\n            ], [MODEL, [VENDOR, 'NuVision'], [TYPE, TABLET]], [\n            /\\b(k88) b/i                                                        // ZTE K Series Tablet\n            ], [MODEL, [VENDOR, 'ZTE'], [TYPE, TABLET]], [\n            /\\b(nx\\d{3}j) b/i                                                   // ZTE Nubia\n            ], [MODEL, [VENDOR, 'ZTE'], [TYPE, MOBILE]], [\n            /\\b(gen\\d{3}) b.+49h/i                                              // Swiss GEN Mobile\n            ], [MODEL, [VENDOR, 'Swiss'], [TYPE, MOBILE]], [\n            /\\b(zur\\d{3}) b/i                                                   // Swiss ZUR Tablet\n            ], [MODEL, [VENDOR, 'Swiss'], [TYPE, TABLET]], [\n            /\\b((zeki)?tb.*\\b) b/i                                              // Zeki Tablets\n            ], [MODEL, [VENDOR, 'Zeki'], [TYPE, TABLET]], [\n            /\\b([yr]\\d{2}) b/i,\n            /\\b(dragon[- ]+touch |dt)(\\w{5}) b/i                                // Dragon Touch Tablet\n            ], [[VENDOR, 'Dragon Touch'], MODEL, [TYPE, TABLET]], [\n            /\\b(ns-?\\w{0,9}) b/i                                                // Insignia Tablets\n            ], [MODEL, [VENDOR, 'Insignia'], [TYPE, TABLET]], [\n            /\\b((nxa|next)-?\\w{0,9}) b/i                                        // NextBook Tablets\n            ], [MODEL, [VENDOR, 'NextBook'], [TYPE, TABLET]], [\n            /\\b(xtreme\\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i                  // Voice Xtreme Phones\n            ], [[VENDOR, 'Voice'], MODEL, [TYPE, MOBILE]], [\n            /\\b(lvtel\\-)?(v1[12]) b/i                                           // LvTel Phones\n            ], [[VENDOR, 'LvTel'], MODEL, [TYPE, MOBILE]], [\n            /\\b(ph-1) /i                                                        // Essential PH-1\n            ], [MODEL, [VENDOR, 'Essential'], [TYPE, MOBILE]], [\n            /\\b(v(100md|700na|7011|917g).*\\b) b/i                               // Envizen Tablets\n            ], [MODEL, [VENDOR, 'Envizen'], [TYPE, TABLET]], [\n            /\\b(trio[-\\w\\. ]+) b/i                                              // MachSpeed Tablets\n            ], [MODEL, [VENDOR, 'MachSpeed'], [TYPE, TABLET]], [\n            /\\btu_(1491) b/i                                                    // Rotor Tablets\n            ], [MODEL, [VENDOR, 'Rotor'], [TYPE, TABLET]], [\n            /(shield[\\w ]+) b/i                                                 // Nvidia Shield Tablets\n            ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, TABLET]], [\n            /(sprint) (\\w+)/i                                                   // Sprint Phones\n            ], [VENDOR, MODEL, [TYPE, MOBILE]], [\n            /(kin\\.[onetw]{3})/i                                                // Microsoft Kin\n            ], [[MODEL, /\\./g, ' '], [VENDOR, MICROSOFT], [TYPE, MOBILE]], [\n            /droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\\)/i             // Zebra\n            ], [MODEL, [VENDOR, ZEBRA], [TYPE, TABLET]], [\n            /droid.+; (ec30|ps20|tc[2-8]\\d[kx])\\)/i\n            ], [MODEL, [VENDOR, ZEBRA], [TYPE, MOBILE]], [\n\n            ///////////////////\n            // SMARTTVS\n            ///////////////////\n\n            /smart-tv.+(samsung)/i                                              // Samsung\n            ], [VENDOR, [TYPE, SMARTTV]], [\n            /hbbtv.+maple;(\\d+)/i\n            ], [[MODEL, /^/, 'SmartTV'], [VENDOR, SAMSUNG], [TYPE, SMARTTV]], [\n            /(nux; netcast.+smarttv|lg (netcast\\.tv-201\\d|android tv))/i        // LG SmartTV\n            ], [[VENDOR, LG], [TYPE, SMARTTV]], [\n            /(apple) ?tv/i                                                      // Apple TV\n            ], [VENDOR, [MODEL, APPLE+' TV'], [TYPE, SMARTTV]], [\n            /crkey/i                                                            // Google Chromecast\n            ], [[MODEL, CHROME+'cast'], [VENDOR, GOOGLE], [TYPE, SMARTTV]], [\n            /droid.+aft(\\w)( bui|\\))/i                                          // Fire TV\n            ], [MODEL, [VENDOR, AMAZON], [TYPE, SMARTTV]], [\n            /\\(dtv[\\);].+(aquos)/i,\n            /(aquos-tv[\\w ]+)\\)/i                                               // Sharp\n            ], [MODEL, [VENDOR, SHARP], [TYPE, SMARTTV]],[\n            /(bravia[\\w ]+)( bui|\\))/i                                              // Sony\n            ], [MODEL, [VENDOR, SONY], [TYPE, SMARTTV]], [\n            /(mitv-\\w{5}) bui/i                                                 // Xiaomi\n            ], [MODEL, [VENDOR, XIAOMI], [TYPE, SMARTTV]], [\n            /Hbbtv.*(technisat) (.*);/i                                         // TechniSAT\n            ], [VENDOR, MODEL, [TYPE, SMARTTV]], [\n            /\\b(roku)[\\dx]*[\\)\\/]((?:dvp-)?[\\d\\.]*)/i,                          // Roku\n            /hbbtv\\/\\d+\\.\\d+\\.\\d+ +\\([\\w\\+ ]*; *([\\w\\d][^;]*);([^;]*)/i         // HbbTV devices\n            ], [[VENDOR, trim], [MODEL, trim], [TYPE, SMARTTV]], [\n            /\\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\\b/i                   // SmartTV from Unidentified Vendors\n            ], [[TYPE, SMARTTV]], [\n\n            ///////////////////\n            // CONSOLES\n            ///////////////////\n\n            /(ouya)/i,                                                          // Ouya\n            /(nintendo) ([wids3utch]+)/i                                        // Nintendo\n            ], [VENDOR, MODEL, [TYPE, CONSOLE]], [\n            /droid.+; (shield) bui/i                                            // Nvidia\n            ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, CONSOLE]], [\n            /(playstation [345portablevi]+)/i                                   // Playstation\n            ], [MODEL, [VENDOR, SONY], [TYPE, CONSOLE]], [\n            /\\b(xbox(?: one)?(?!; xbox))[\\); ]/i                                // Microsoft Xbox\n            ], [MODEL, [VENDOR, MICROSOFT], [TYPE, CONSOLE]], [\n\n            ///////////////////\n            // WEARABLES\n            ///////////////////\n\n            /((pebble))app/i                                                    // Pebble\n            ], [VENDOR, MODEL, [TYPE, WEARABLE]], [\n            /(watch)(?: ?os[,\\/]|\\d,\\d\\/)[\\d\\.]+/i                              // Apple Watch\n            ], [MODEL, [VENDOR, APPLE], [TYPE, WEARABLE]], [\n            /droid.+; (glass) \\d/i                                              // Google Glass\n            ], [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]], [\n            /droid.+; (wt63?0{2,3})\\)/i\n            ], [MODEL, [VENDOR, ZEBRA], [TYPE, WEARABLE]], [\n            /(quest( 2| pro)?)/i                                                // Oculus Quest\n            ], [MODEL, [VENDOR, FACEBOOK], [TYPE, WEARABLE]], [\n\n            ///////////////////\n            // EMBEDDED\n            ///////////////////\n\n            /(tesla)(?: qtcarbrowser|\\/[-\\w\\.]+)/i                              // Tesla\n            ], [VENDOR, [TYPE, EMBEDDED]], [\n            /(aeobc)\\b/i                                                        // Echo Dot\n            ], [MODEL, [VENDOR, AMAZON], [TYPE, EMBEDDED]], [\n\n            ////////////////////\n            // MIXED (GENERIC)\n            ///////////////////\n\n            /droid .+?; ([^;]+?)(?: bui|\\) applew).+? mobile safari/i           // Android Phones from Unidentified Vendors\n            ], [MODEL, [TYPE, MOBILE]], [\n            /droid .+?; ([^;]+?)(?: bui|\\) applew).+?(?! mobile) safari/i       // Android Tablets from Unidentified Vendors\n            ], [MODEL, [TYPE, TABLET]], [\n            /\\b((tablet|tab)[;\\/]|focus\\/\\d(?!.+mobile))/i                      // Unidentifiable Tablet\n            ], [[TYPE, TABLET]], [\n            /(phone|mobile(?:[;\\/]| [ \\w\\/\\.]*safari)|pda(?=.+windows ce))/i    // Unidentifiable Mobile\n            ], [[TYPE, MOBILE]], [\n            /(android[-\\w\\. ]{0,9});.+buil/i                                    // Generic Android Device\n            ], [MODEL, [VENDOR, 'Generic']]\n        ],\n\n        engine : [[\n\n            /windows.+ edge\\/([\\w\\.]+)/i                                       // EdgeHTML\n            ], [VERSION, [NAME, EDGE+'HTML']], [\n\n            /webkit\\/537\\.36.+chrome\\/(?!27)([\\w\\.]+)/i                         // Blink\n            ], [VERSION, [NAME, 'Blink']], [\n\n            /(presto)\\/([\\w\\.]+)/i,                                             // Presto\n            /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\\/([\\w\\.]+)/i, // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m/Goanna\n            /ekioh(flow)\\/([\\w\\.]+)/i,                                          // Flow\n            /(khtml|tasman|links)[\\/ ]\\(?([\\w\\.]+)/i,                           // KHTML/Tasman/Links\n            /(icab)[\\/ ]([23]\\.[\\d\\.]+)/i,                                      // iCab\n            /\\b(libweb)/i\n            ], [NAME, VERSION], [\n\n            /rv\\:([\\w\\.]{1,9})\\b.+(gecko)/i                                     // Gecko\n            ], [VERSION, NAME]\n        ],\n\n        os : [[\n\n            // Windows\n            /microsoft (windows) (vista|xp)/i                                   // Windows (iTunes)\n            ], [NAME, VERSION], [\n            /(windows) nt 6\\.2; (arm)/i,                                        // Windows RT\n            /(windows (?:phone(?: os)?|mobile))[\\/ ]?([\\d\\.\\w ]*)/i,            // Windows Phone\n            /(windows)[\\/ ]?([ntce\\d\\. ]+\\w)(?!.+xbox)/i\n            ], [NAME, [VERSION, strMapper, windowsVersionMap]], [\n            /(win(?=3|9|n)|win 9x )([nt\\d\\.]+)/i\n            ], [[NAME, 'Windows'], [VERSION, strMapper, windowsVersionMap]], [\n\n            // iOS/macOS\n            /ip[honead]{2,4}\\b(?:.*os ([\\w]+) like mac|; opera)/i,              // iOS\n            /ios;fbsv\\/([\\d\\.]+)/i,\n            /cfnetwork\\/.+darwin/i\n            ], [[VERSION, /_/g, '.'], [NAME, 'iOS']], [\n            /(mac os x) ?([\\w\\. ]*)/i,\n            /(macintosh|mac_powerpc\\b)(?!.+haiku)/i                             // Mac OS\n            ], [[NAME, MAC_OS], [VERSION, /_/g, '.']], [\n\n            // Mobile OSes\n            /droid ([\\w\\.]+)\\b.+(android[- ]x86|harmonyos)/i                    // Android-x86/HarmonyOS\n            ], [VERSION, NAME], [                                               // Android/WebOS/QNX/Bada/RIM/Maemo/MeeGo/Sailfish OS\n            /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\\/ ]?([\\w\\.]*)/i,\n            /(blackberry)\\w*\\/([\\w\\.]*)/i,                                      // Blackberry\n            /(tizen|kaios)[\\/ ]([\\w\\.]+)/i,                                     // Tizen/KaiOS\n            /\\((series40);/i                                                    // Series 40\n            ], [NAME, VERSION], [\n            /\\(bb(10);/i                                                        // BlackBerry 10\n            ], [VERSION, [NAME, BLACKBERRY]], [\n            /(?:symbian ?os|symbos|s60(?=;)|series60)[-\\/ ]?([\\w\\.]*)/i         // Symbian\n            ], [VERSION, [NAME, 'Symbian']], [\n            /mozilla\\/[\\d\\.]+ \\((?:mobile|tablet|tv|mobile; [\\w ]+); rv:.+ gecko\\/([\\w\\.]+)/i // Firefox OS\n            ], [VERSION, [NAME, FIREFOX+' OS']], [\n            /web0s;.+rt(tv)/i,\n            /\\b(?:hp)?wos(?:browser)?\\/([\\w\\.]+)/i                              // WebOS\n            ], [VERSION, [NAME, 'webOS']], [\n            /watch(?: ?os[,\\/]|\\d,\\d\\/)([\\d\\.]+)/i                              // watchOS\n            ], [VERSION, [NAME, 'watchOS']], [\n\n            // Google Chromecast\n            /crkey\\/([\\d\\.]+)/i                                                 // Google Chromecast\n            ], [VERSION, [NAME, CHROME+'cast']], [\n            /(cros) [\\w]+(?:\\)| ([\\w\\.]+)\\b)/i                                  // Chromium OS\n            ], [[NAME, CHROMIUM_OS], VERSION],[\n\n            // Smart TVs\n            /panasonic;(viera)/i,                                               // Panasonic Viera\n            /(netrange)mmh/i,                                                   // Netrange\n            /(nettv)\\/(\\d+\\.[\\w\\.]+)/i,                                         // NetTV\n\n            // Console\n            /(nintendo|playstation) ([wids345portablevuch]+)/i,                 // Nintendo/Playstation\n            /(xbox); +xbox ([^\\);]+)/i,                                         // Microsoft Xbox (360, One, X, S, Series X, Series S)\n\n            // Other\n            /\\b(joli|palm)\\b ?(?:os)?\\/?([\\w\\.]*)/i,                            // Joli/Palm\n            /(mint)[\\/\\(\\) ]?(\\w*)/i,                                           // Mint\n            /(mageia|vectorlinux)[; ]/i,                                        // Mageia/VectorLinux\n            /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\\/ ]?(?!chrom|package)([-\\w\\.]*)/i,\n                                                                                // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire\n            /(hurd|linux) ?([\\w\\.]*)/i,                                         // Hurd/Linux\n            /(gnu) ?([\\w\\.]*)/i,                                                // GNU\n            /\\b([-frentopcghs]{0,5}bsd|dragonfly)[\\/ ]?(?!amd|[ix346]{1,2}86)([\\w\\.]*)/i, // FreeBSD/NetBSD/OpenBSD/PC-BSD/GhostBSD/DragonFly\n            /(haiku) (\\w+)/i                                                    // Haiku\n            ], [NAME, VERSION], [\n            /(sunos) ?([\\w\\.\\d]*)/i                                             // Solaris\n            ], [[NAME, 'Solaris'], VERSION], [\n            /((?:open)?solaris)[-\\/ ]?([\\w\\.]*)/i,                              // Solaris\n            /(aix) ((\\d)(?=\\.|\\)| )[\\w\\.])*/i,                                  // AIX\n            /\\b(beos|os\\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i, // BeOS/OS2/AmigaOS/MorphOS/OpenVMS/Fuchsia/HP-UX/SerenityOS\n            /(unix) ?([\\w\\.]*)/i                                                // UNIX\n            ], [NAME, VERSION]\n        ]\n    };\n\n    /////////////////\n    // Constructor\n    ////////////////\n\n    var UAParser = function (ua, extensions) {\n\n        if (typeof ua === OBJ_TYPE) {\n            extensions = ua;\n            ua = undefined;\n        }\n\n        if (!(this instanceof UAParser)) {\n            return new UAParser(ua, extensions).getResult();\n        }\n\n        var _navigator = (typeof window !== UNDEF_TYPE && window.navigator) ? window.navigator : undefined;\n        var _ua = ua || ((_navigator && _navigator.userAgent) ? _navigator.userAgent : EMPTY);\n        var _uach = (_navigator && _navigator.userAgentData) ? _navigator.userAgentData : undefined;\n        var _rgxmap = extensions ? extend(regexes, extensions) : regexes;\n        var _isSelfNav = _navigator && _navigator.userAgent == _ua;\n\n        this.getBrowser = function () {\n            var _browser = {};\n            _browser[NAME] = undefined;\n            _browser[VERSION] = undefined;\n            rgxMapper.call(_browser, _ua, _rgxmap.browser);\n            _browser[MAJOR] = majorize(_browser[VERSION]);\n            // Brave-specific detection\n            if (_isSelfNav && _navigator && _navigator.brave && typeof _navigator.brave.isBrave == FUNC_TYPE) {\n                _browser[NAME] = 'Brave';\n            }\n            return _browser;\n        };\n        this.getCPU = function () {\n            var _cpu = {};\n            _cpu[ARCHITECTURE] = undefined;\n            rgxMapper.call(_cpu, _ua, _rgxmap.cpu);\n            return _cpu;\n        };\n        this.getDevice = function () {\n            var _device = {};\n            _device[VENDOR] = undefined;\n            _device[MODEL] = undefined;\n            _device[TYPE] = undefined;\n            rgxMapper.call(_device, _ua, _rgxmap.device);\n            if (_isSelfNav && !_device[TYPE] && _uach && _uach.mobile) {\n                _device[TYPE] = MOBILE;\n            }\n            // iPadOS-specific detection: identified as Mac, but has some iOS-only properties\n            if (_isSelfNav && _device[MODEL] == 'Macintosh' && _navigator && typeof _navigator.standalone !== UNDEF_TYPE && _navigator.maxTouchPoints && _navigator.maxTouchPoints > 2) {\n                _device[MODEL] = 'iPad';\n                _device[TYPE] = TABLET;\n            }\n            return _device;\n        };\n        this.getEngine = function () {\n            var _engine = {};\n            _engine[NAME] = undefined;\n            _engine[VERSION] = undefined;\n            rgxMapper.call(_engine, _ua, _rgxmap.engine);\n            return _engine;\n        };\n        this.getOS = function () {\n            var _os = {};\n            _os[NAME] = undefined;\n            _os[VERSION] = undefined;\n            rgxMapper.call(_os, _ua, _rgxmap.os);\n            if (_isSelfNav && !_os[NAME] && _uach && _uach.platform != 'Unknown') {\n                _os[NAME] = _uach.platform  \n                                    .replace(/chrome os/i, CHROMIUM_OS)\n                                    .replace(/macos/i, MAC_OS);           // backward compatibility\n            }\n            return _os;\n        };\n        this.getResult = function () {\n            return {\n                ua      : this.getUA(),\n                browser : this.getBrowser(),\n                engine  : this.getEngine(),\n                os      : this.getOS(),\n                device  : this.getDevice(),\n                cpu     : this.getCPU()\n            };\n        };\n        this.getUA = function () {\n            return _ua;\n        };\n        this.setUA = function (ua) {\n            _ua = (typeof ua === STR_TYPE && ua.length > UA_MAX_LENGTH) ? trim(ua, UA_MAX_LENGTH) : ua;\n            return this;\n        };\n        this.setUA(_ua);\n        return this;\n    };\n\n    UAParser.VERSION = LIBVERSION;\n    UAParser.BROWSER =  enumerize([NAME, VERSION, MAJOR]);\n    UAParser.CPU = enumerize([ARCHITECTURE]);\n    UAParser.DEVICE = enumerize([MODEL, VENDOR, TYPE, CONSOLE, MOBILE, SMARTTV, TABLET, WEARABLE, EMBEDDED]);\n    UAParser.ENGINE = UAParser.OS = enumerize([NAME, VERSION]);\n\n    ///////////\n    // Export\n    //////////\n\n    // check js environment\n    if (typeof(exports) !== UNDEF_TYPE) {\n        // nodejs env\n        if (typeof module !== UNDEF_TYPE && module.exports) {\n            exports = module.exports = UAParser;\n        }\n        exports.UAParser = UAParser;\n    } else {\n        // requirejs env (optional)\n        if (typeof(define) === FUNC_TYPE && define.amd) {\n            define(function () {\n                return UAParser;\n            });\n        } else if (typeof window !== UNDEF_TYPE) {\n            // browser env\n            window.UAParser = UAParser;\n        }\n    }\n\n    // jQuery/Zepto specific (optional)\n    // Note:\n    //   In AMD env the global scope should be kept clean, but jQuery is an exception.\n    //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,\n    //   and we should catch that.\n    var $ = typeof window !== UNDEF_TYPE && (window.jQuery || window.Zepto);\n    if ($ && !$.ua) {\n        var parser = new UAParser();\n        $.ua = parser.getResult();\n        $.ua.get = function () {\n            return parser.getUA();\n        };\n        $.ua.set = function (ua) {\n            parser.setUA(ua);\n            var result = parser.getResult();\n            for (var prop in result) {\n                $.ua[prop] = result[prop];\n            }\n        };\n    }\n\n})(typeof window === 'object' ? window : this);\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","'use strict';\n\n\nconst internals = {\n    suspectRx: /\"(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])(?:p|\\\\u0070)(?:r|\\\\u0072)(?:o|\\\\u006[Ff])(?:t|\\\\u0074)(?:o|\\\\u006[Ff])(?:_|\\\\u005[Ff])(?:_|\\\\u005[Ff])\"\\s*\\:/\n};\n\n\nexports.parse = function (text, ...args) {\n\n    // Normalize arguments\n\n    const firstOptions = typeof args[0] === 'object' && args[0];\n    const reviver = args.length > 1 || !firstOptions ? args[0] : undefined;\n    const options = (args.length > 1 && args[1]) || firstOptions || {};\n\n    // Parse normally, allowing exceptions\n\n    const obj = JSON.parse(text, reviver);\n\n    // options.protoAction: 'error' (default) / 'remove' / 'ignore'\n\n    if (options.protoAction === 'ignore') {\n        return obj;\n    }\n\n    // Ignore null and non-objects\n\n    if (!obj ||\n        typeof obj !== 'object') {\n\n        return obj;\n    }\n\n    // Check original string for potential exploit\n\n    if (!text.match(internals.suspectRx)) {\n        return obj;\n    }\n\n    // Scan result for proto keys\n\n    exports.scan(obj, options);\n\n    return obj;\n};\n\n\nexports.scan = function (obj, options = {}) {\n\n    let next = [obj];\n\n    while (next.length) {\n        const nodes = next;\n        next = [];\n\n        for (const node of nodes) {\n            if (Object.prototype.hasOwnProperty.call(node, '__proto__')) {      // Avoid calling node.hasOwnProperty directly\n                if (options.protoAction !== 'remove') {\n                    throw new SyntaxError('Object contains forbidden prototype property');\n                }\n\n                delete node.__proto__;\n            }\n\n            for (const key in node) {\n                const value = node[key];\n                if (value &&\n                    typeof value === 'object') {\n\n                    next.push(node[key]);\n                }\n            }\n        }\n    }\n};\n\n\nexports.safeParse = function (text, reviver) {\n\n    try {\n        return exports.parse(text, reviver);\n    }\n    catch (ignoreError) {\n        return null;\n    }\n};\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// Returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// Returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\n// Input can be prefixed with a=.\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\n// This does not include the a= prefix!\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// Sample input:\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substr(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generates a rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses a extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n  };\n};\n\n// Generates an extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses a fmtp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param] !== undefined) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses a RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\n// Parse a ssrc-group line (see RFC 5576). Sample input:\n// a=ssrc-group:semantics 12 34\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// Returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\n// Parses a fingerprint line for DTLS-SRTP.\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substr(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nexport default listCacheClear;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nexport default eq;\n","import eq from './eq.js';\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nexport default assocIndexOf;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nexport default listCacheDelete;\n","import listCacheClear from './_listCacheClear.js';\nimport listCacheDelete from './_listCacheDelete.js';\nimport listCacheGet from './_listCacheGet.js';\nimport listCacheHas from './_listCacheHas.js';\nimport listCacheSet from './_listCacheSet.js';\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nexport default ListCache;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nexport default listCacheGet;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nexport default listCacheHas;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nexport default listCacheSet;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nexport default freeGlobal;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nexport default root;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nexport default Symbol;\n","import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nexport default objectToString;\n","import Symbol from './_Symbol.js';\nimport getRawTag from './_getRawTag.js';\nimport objectToString from './_objectToString.js';\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nexport default baseGetTag;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nexport default isObject;\n","import baseGetTag from './_baseGetTag.js';\nimport isObject from './isObject.js';\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nexport default isFunction;\n","import root from './_root.js';\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nexport default coreJsData;\n","import coreJsData from './_coreJsData.js';\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nexport default isMasked;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nexport default toSource;\n","import isFunction from './isFunction.js';\nimport isMasked from './_isMasked.js';\nimport isObject from './isObject.js';\nimport toSource from './_toSource.js';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nexport default baseIsNative;\n","import baseIsNative from './_baseIsNative.js';\nimport getValue from './_getValue.js';\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nexport default getNative;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nexport default getValue;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nexport default Map;\n","import getNative from './_getNative.js';\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nexport default nativeCreate;\n","import nativeCreate from './_nativeCreate.js';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nexport default hashGet;\n","import nativeCreate from './_nativeCreate.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nexport default hashHas;\n","import hashClear from './_hashClear.js';\nimport hashDelete from './_hashDelete.js';\nimport hashGet from './_hashGet.js';\nimport hashHas from './_hashHas.js';\nimport hashSet from './_hashSet.js';\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nexport default Hash;\n","import nativeCreate from './_nativeCreate.js';\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nexport default hashClear;\n","/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nexport default hashDelete;\n","import nativeCreate from './_nativeCreate.js';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nexport default hashSet;\n","import isKeyable from './_isKeyable.js';\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nexport default getMapData;\n","/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nexport default isKeyable;\n","import mapCacheClear from './_mapCacheClear.js';\nimport mapCacheDelete from './_mapCacheDelete.js';\nimport mapCacheGet from './_mapCacheGet.js';\nimport mapCacheHas from './_mapCacheHas.js';\nimport mapCacheSet from './_mapCacheSet.js';\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nexport default MapCache;\n","import Hash from './_Hash.js';\nimport ListCache from './_ListCache.js';\nimport Map from './_Map.js';\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nexport default mapCacheClear;\n","import getMapData from './_getMapData.js';\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nexport default mapCacheDelete;\n","import getMapData from './_getMapData.js';\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nexport default mapCacheGet;\n","import getMapData from './_getMapData.js';\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nexport default mapCacheHas;\n","import getMapData from './_getMapData.js';\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nexport default mapCacheSet;\n","import ListCache from './_ListCache.js';\nimport stackClear from './_stackClear.js';\nimport stackDelete from './_stackDelete.js';\nimport stackGet from './_stackGet.js';\nimport stackHas from './_stackHas.js';\nimport stackSet from './_stackSet.js';\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\nexport default Stack;\n","import ListCache from './_ListCache.js';\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\nexport default stackClear;\n","/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\nexport default stackDelete;\n","/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\nexport default stackGet;\n","/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\nexport default stackHas;\n","import ListCache from './_ListCache.js';\nimport Map from './_Map.js';\nimport MapCache from './_MapCache.js';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nexport default stackSet;\n","import getNative from './_getNative.js';\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nexport default defineProperty;\n","import defineProperty from './_defineProperty.js';\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nexport default baseAssignValue;\n","import baseAssignValue from './_baseAssignValue.js';\nimport eq from './eq.js';\n\n/**\n * This function is like `assignValue` except that it doesn't assign\n * `undefined` values.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignMergeValue(object, key, value) {\n  if ((value !== undefined && !eq(object[key], value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nexport default assignMergeValue;\n","import createBaseFor from './_createBaseFor.js';\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\nexport default baseFor;\n","/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\nexport default createBaseFor;\n","import root from './_root.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\nexport default cloneBuffer;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Uint8Array = root.Uint8Array;\n\nexport default Uint8Array;\n","import Uint8Array from './_Uint8Array.js';\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\nexport default cloneArrayBuffer;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\nexport default cloneTypedArray;\n","/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nexport default copyArray;\n","import isObject from './isObject.js';\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\nexport default baseCreate;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nexport default overArg;\n","import overArg from './_overArg.js';\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nexport default getPrototype;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nexport default isPrototype;\n","import baseCreate from './_baseCreate.js';\nimport getPrototype from './_getPrototype.js';\nimport isPrototype from './_isPrototype.js';\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\nexport default initCloneObject;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nexport default isObjectLike;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nexport default baseIsArguments;\n","import baseIsArguments from './_baseIsArguments.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nexport default isArguments;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nexport default isArray;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nexport default isLength;\n","import isFunction from './isFunction.js';\nimport isLength from './isLength.js';\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nexport default isArrayLike;\n","import root from './_root.js';\nimport stubFalse from './stubFalse.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nexport default isBuffer;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nexport default stubFalse;\n","import baseGetTag from './_baseGetTag.js';\nimport getPrototype from './_getPrototype.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nexport default isPlainObject;\n","import baseGetTag from './_baseGetTag.js';\nimport isLength from './isLength.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nexport default baseIsTypedArray;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nexport default baseUnary;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nexport default nodeUtil;\n","import baseIsTypedArray from './_baseIsTypedArray.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nexport default isTypedArray;\n","/**\n * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction safeGet(object, key) {\n  if (key === 'constructor' && typeof object[key] === 'function') {\n    return;\n  }\n\n  if (key == '__proto__') {\n    return;\n  }\n\n  return object[key];\n}\n\nexport default safeGet;\n","import baseAssignValue from './_baseAssignValue.js';\nimport eq from './eq.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nexport default assignValue;\n","import assignValue from './_assignValue.js';\nimport baseAssignValue from './_baseAssignValue.js';\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\nexport default copyObject;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nexport default isIndex;\n","import baseTimes from './_baseTimes.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isIndex from './_isIndex.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default arrayLikeKeys;\n","/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nexport default baseTimes;\n","import isObject from './isObject.js';\nimport isPrototype from './_isPrototype.js';\nimport nativeKeysIn from './_nativeKeysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeysIn;\n","/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default nativeKeysIn;\n","import arrayLikeKeys from './_arrayLikeKeys.js';\nimport baseKeysIn from './_baseKeysIn.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nexport default keysIn;\n","import assignMergeValue from './_assignMergeValue.js';\nimport cloneBuffer from './_cloneBuffer.js';\nimport cloneTypedArray from './_cloneTypedArray.js';\nimport copyArray from './_copyArray.js';\nimport initCloneObject from './_initCloneObject.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\nimport isBuffer from './isBuffer.js';\nimport isFunction from './isFunction.js';\nimport isObject from './isObject.js';\nimport isPlainObject from './isPlainObject.js';\nimport isTypedArray from './isTypedArray.js';\nimport safeGet from './_safeGet.js';\nimport toPlainObject from './toPlainObject.js';\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = safeGet(object, key),\n      srcValue = safeGet(source, key),\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n    : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n        isBuff = !isArr && isBuffer(srcValue),\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n    newValue = srcValue;\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      }\n      else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      }\n      else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      }\n      else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      }\n      else {\n        newValue = [];\n      }\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      }\n      else if (!isObject(objValue) || isFunction(objValue)) {\n        newValue = initCloneObject(srcValue);\n      }\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\n\nexport default baseMergeDeep;\n","import isArrayLike from './isArrayLike.js';\nimport isObjectLike from './isObjectLike.js';\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\nexport default isArrayLikeObject;\n","import copyObject from './_copyObject.js';\nimport keysIn from './keysIn.js';\n\n/**\n * Converts `value` to a plain object flattening inherited enumerable string\n * keyed properties of `value` to own properties of the plain object.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Object} Returns the converted plain object.\n * @example\n *\n * function Foo() {\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.assign({ 'a': 1 }, new Foo);\n * // => { 'a': 1, 'b': 2 }\n *\n * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n * // => { 'a': 1, 'b': 2, 'c': 3 }\n */\nfunction toPlainObject(value) {\n  return copyObject(value, keysIn(value));\n}\n\nexport default toPlainObject;\n","import Stack from './_Stack.js';\nimport assignMergeValue from './_assignMergeValue.js';\nimport baseFor from './_baseFor.js';\nimport baseMergeDeep from './_baseMergeDeep.js';\nimport isObject from './isObject.js';\nimport keysIn from './keysIn.js';\nimport safeGet from './_safeGet.js';\n\n/**\n * The base implementation of `_.merge` without support for multiple sources.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} [customizer] The function to customize merged values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMerge(object, source, srcIndex, customizer, stack) {\n  if (object === source) {\n    return;\n  }\n  baseFor(source, function(srcValue, key) {\n    stack || (stack = new Stack);\n    if (isObject(srcValue)) {\n      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n    }\n    else {\n      var newValue = customizer\n        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      if (newValue === undefined) {\n        newValue = srcValue;\n      }\n      assignMergeValue(object, key, newValue);\n    }\n  }, keysIn);\n}\n\nexport default baseMerge;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nexport default identity;\n","import apply from './_apply.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nexport default overRest;\n","import constant from './constant.js';\nimport defineProperty from './_defineProperty.js';\nimport identity from './identity.js';\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nexport default baseSetToString;\n","/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nexport default constant;\n","/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nexport default shortOut;\n","import baseSetToString from './_baseSetToString.js';\nimport shortOut from './_shortOut.js';\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nexport default setToString;\n","import identity from './identity.js';\nimport overRest from './_overRest.js';\nimport setToString from './_setToString.js';\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nexport default baseRest;\n","/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nexport default apply;\n","import baseMerge from './_baseMerge.js';\nimport createAssigner from './_createAssigner.js';\n\n/**\n * This method is like `_.assign` except that it recursively merges own and\n * inherited enumerable string keyed properties of source objects into the\n * destination object. Source properties that resolve to `undefined` are\n * skipped if a destination value exists. Array and plain object properties\n * are merged recursively. Other objects and value types are overridden by\n * assignment. Source objects are applied from left to right. Subsequent\n * sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = {\n *   'a': [{ 'b': 2 }, { 'd': 4 }]\n * };\n *\n * var other = {\n *   'a': [{ 'c': 3 }, { 'e': 5 }]\n * };\n *\n * _.merge(object, other);\n * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n */\nvar merge = createAssigner(function(object, source, srcIndex) {\n  baseMerge(object, source, srcIndex);\n});\n\nexport default merge;\n","import baseRest from './_baseRest.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\nexport default createAssigner;\n","import eq from './eq.js';\nimport isArrayLike from './isArrayLike.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nexport default isIterateeCall;\n","/**\n * The errors for the conference.\n */\n\nexport enum JitsiConferenceErrors {\n\n    /**\n     * Indicates that client must be authenticated to create the conference.\n     */\n    AUTHENTICATION_REQUIRED = 'conference.authenticationRequired',\n\n    /**\n     * Indicates that chat error occurred.\n     */\n    CHAT_ERROR = 'conference.chatError',\n\n    /**\n     * Indicates that a connection error is due to denied access to the room,\n     * occurred after joining a lobby room and access is denied by the room moderators.\n     */\n    CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied',\n\n    /**\n     * Indicates that conference has been destroyed.\n     */\n    CONFERENCE_DESTROYED = 'conference.destroyed',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    CONFERENCE_MAX_USERS = 'conference.max_users',\n\n    /**\n     * Indicates that the client has been forced to restart by jicofo when the\n     * conference was migrated from one bridge to another.\n     */\n    CONFERENCE_RESTARTED = 'conference.restarted',\n\n    /**\n     * Indicates that a connection error occurred when trying to join a conference.\n     */\n    CONNECTION_ERROR = 'conference.connectionError',\n\n    /**\n     * Indicates that the display name is required when joining the room.\n     * There are cases like lobby room where display name is required.\n     * @param {boolean|null} lobby whether the error is because lobby is enabled.\n     */\n    DISPLAY_NAME_REQUIRED = 'conference.display_name_required',\n\n    /**\n     * Indicates that focus error happened.\n     */\n    FOCUS_DISCONNECTED = 'conference.focusDisconnected',\n\n    /**\n     * Indicates that focus left the conference.\n     */\n    FOCUS_LEFT = 'conference.focusLeft',\n\n    /**\n     * Indicates that graceful shutdown happened.\n     */\n    GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown',\n\n    /**\n     * Indicates that the media connection has failed.\n     */\n    ICE_FAILED = 'conference.iceFailed',\n\n    /**\n     * Indicates that the versions of the server side components are incompatible\n     * with the client side.\n     */\n    INCOMPATIBLE_SERVER_VERSIONS = 'conference.incompatible_server_versions',\n\n    /**\n     * Indicates that a connection error is due to not allowed,\n     * occurred when trying to join a conference, only approved members are allowed to join.\n     */\n    MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly',\n\n    /**\n     * Indicates that a connection error is due to not allowed,\n     * occurred when trying to join a conference.\n     */\n    NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed',\n\n    /**\n     * Indicates that offer/answer had failed.\n     */\n    OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed',\n\n    /**\n     * Indicates that password cannot be set for this conference.\n     */\n    PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported',\n\n    /**\n     * Indicates that a password is required in order to join the conference.\n     */\n    PASSWORD_REQUIRED = 'conference.passwordRequired',\n\n    /**\n     * Indicates that reservation system returned error.\n     */\n    RESERVATION_ERROR = 'conference.reservationError',\n\n    /**\n     * Indicates that a settings error occurred.\n     */\n    SETTINGS_ERROR = 'conference.settingsError',\n\n    /**\n     * Indicates that there is no available videobridge.\n     */\n    VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable'\n}\n\n/**\n * Types that are passed for NOT_ALLOWED_ERROR.\n */\nexport enum AUTH_ERROR_TYPES {\n    GENERAL = 'general',\n    NO_MAIN_PARTICIPANTS = 'no-main-participants',\n    NO_VISITORS_LOBBY = 'no-visitors-lobby',\n    PROMOTION_NOT_ALLOWED = 'promotion-not-allowed',\n    ROOM_CREATION_RESTRICTION = 'room-creation-restriction'\n}\n\n// exported for backward compatibility\nexport const AUTHENTICATION_REQUIRED = JitsiConferenceErrors.AUTHENTICATION_REQUIRED;\nexport const CHAT_ERROR = JitsiConferenceErrors.CHAT_ERROR;\nexport const SETTINGS_ERROR = JitsiConferenceErrors.SETTINGS_ERROR;\nexport const CONFERENCE_DESTROYED = JitsiConferenceErrors.CONFERENCE_DESTROYED;\nexport const CONFERENCE_MAX_USERS = JitsiConferenceErrors.CONFERENCE_MAX_USERS;\nexport const CONNECTION_ERROR = JitsiConferenceErrors.CONNECTION_ERROR;\nexport const CONFERENCE_RESTARTED = JitsiConferenceErrors.CONFERENCE_RESTARTED;\nexport const NOT_ALLOWED_ERROR = JitsiConferenceErrors.NOT_ALLOWED_ERROR;\nexport const MEMBERS_ONLY_ERROR = JitsiConferenceErrors.MEMBERS_ONLY_ERROR;\nexport const CONFERENCE_ACCESS_DENIED = JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED;\nexport const DISPLAY_NAME_REQUIRED = JitsiConferenceErrors.DISPLAY_NAME_REQUIRED;\nexport const FOCUS_DISCONNECTED = JitsiConferenceErrors.FOCUS_DISCONNECTED;\nexport const FOCUS_LEFT = JitsiConferenceErrors.FOCUS_LEFT;\nexport const GRACEFUL_SHUTDOWN = JitsiConferenceErrors.GRACEFUL_SHUTDOWN;\nexport const ICE_FAILED = JitsiConferenceErrors.ICE_FAILED;\nexport const INCOMPATIBLE_SERVER_VERSIONS = JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS;\nexport const OFFER_ANSWER_FAILED = JitsiConferenceErrors.OFFER_ANSWER_FAILED;\nexport const PASSWORD_NOT_SUPPORTED = JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED;\nexport const PASSWORD_REQUIRED = JitsiConferenceErrors.PASSWORD_REQUIRED;\nexport const RESERVATION_ERROR = JitsiConferenceErrors.RESERVATION_ERROR;\nexport const VIDEOBRIDGE_NOT_AVAILABLE = JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE;\n","/**\n * The events for the conference.\n */\nexport enum JitsiConferenceEvents {\n\n    /**\n     * Event indicates that the current conference audio input switched between audio\n     * input states,i.e. with or without audio input.\n     */\n    AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed',\n\n    /**\n     * Event indicates that the permission for unmuting audio has changed based on the number of audio senders in the\n     * call and the audio sender limit configured in Jicofo.\n     */\n    AUDIO_UNMUTE_PERMISSIONS_CHANGED = 'conference.audio_unmute_permissions_changed',\n\n    /**\n     * Indicates that authentication status changed.\n     */\n    AUTH_STATUS_CHANGED = 'conference.auth_status_changed',\n\n    /**\n     * The local participant was approved to be able to unmute.\n     * @param {options} event - {\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_APPROVED = 'conference.av_moderation.approved',\n\n    /**\n     * AV Moderation was enabled/disabled. The actor is the participant that is currently in the meeting,\n     * or undefined if that participant has left the meeting.\n     *\n     * @param {options} event - {\n     *     {boolean} enabled,\n     *     {MediaType} mediaType,\n     *     {JitsiParticipant} actor\n     * }.\n     */\n    AV_MODERATION_CHANGED = 'conference.av_moderation.changed',\n\n    /**\n     * AV Moderation, report for user being approved to unmute.\n     * @param {options} event - {\n     *     {JitsiParticipant} participant,\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_PARTICIPANT_APPROVED = 'conference.av_moderation.participant.approved',\n\n    /**\n     * AV Moderation, report for user being blocked to unmute.\n     * @param {options} event - {\n     *     {JitsiParticipant} participant,\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_PARTICIPANT_REJECTED = 'conference.av_moderation.participant.rejected',\n\n    /**\n     * The local participant was blocked to be able to unmute.\n     * @param {options} event - {\n     *     {MediaType} mediaType\n     * }.\n     */\n    AV_MODERATION_REJECTED = 'conference.av_moderation.rejected',\n\n    /**\n     * Fired just before the statistics module is disposed and it's the last chance\n     * to submit some logs to the statistics service before it's disconnected.\n     */\n    BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed',\n\n    /**\n     * Event indicates that the bot participant type changed.\n     */\n    BOT_TYPE_CHANGED = 'conference.bot_type_changed',\n\n    /**\n     * Event fired when a participant is requested to join a given (breakout) room.\n     */\n    BREAKOUT_ROOMS_MOVE_TO_ROOM = 'conference.breakout-rooms.move-to-room',\n\n    /**\n     * Event fired when the breakout rooms data was updated.\n     */\n    BREAKOUT_ROOMS_UPDATED = 'conference.breakout-rooms.updated',\n\n    /**\n     * Event fired when the bandwidth estimation stats are received from the bridge.\n     */\n    BRIDGE_BWE_STATS_RECEIVED = 'conference.bridgeBweStatsReceived',\n\n    /**\n     * UTC conference timestamp when first participant joined.\n     */\n    CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp',\n\n    /**\n     * Indicates that an error occurred.\n     */\n    CONFERENCE_ERROR = 'conference.error',\n\n    /**\n     * Indicates that conference failed.\n     */\n    CONFERENCE_FAILED = 'conference.failed',\n\n    /**\n     * Indicates that conference has been joined. The event does NOT provide any\n     * parameters to its listeners.\n     */\n    CONFERENCE_JOINED = 'conference.joined',\n\n    /**\n     * Indicates that conference is in progress of joining.\n     */\n    CONFERENCE_JOIN_IN_PROGRESS = 'conference.join_in_progress',\n\n    /**\n     * Indicates that conference has been left.\n     */\n    CONFERENCE_LEFT = 'conference.left',\n\n    /**\n     * Indicates that the conference unique identifier has been set.\n     */\n    CONFERENCE_UNIQUE_ID_SET = 'conference.unique_id_set',\n\n    /**\n     * Indicates that the aggregate set of codecs supported by the visitors has changed.\n     */\n    CONFERENCE_VISITOR_CODECS_CHANGED = 'conference.visitor_codecs_changed',\n\n    /**\n     * Indicates that the connection to the conference has been established\n     * XXX This is currently fired when the *ICE* connection enters 'connected'\n     * state for the first time.\n     */\n    CONNECTION_ESTABLISHED = 'conference.connectionEstablished',\n\n    /**\n     * Indicates that the connection to the conference has been interrupted for some\n     * reason.\n     * XXX This is currently fired when the *ICE* connection is interrupted.\n     */\n    CONNECTION_INTERRUPTED = 'conference.connectionInterrupted',\n\n    /**\n     * Indicates that the connection to the conference has been restored.\n     * XXX This is currently fired when the *ICE* connection is restored.\n     */\n    CONNECTION_RESTORED = 'conference.connectionRestored',\n\n    /**\n     * A connection to the video bridge's data channel has been closed.\n     * This event is only emitted in\n     */\n    DATA_CHANNEL_CLOSED = 'conference.dataChannelClosed',\n\n    /**\n     * A connection to the video bridge's data channel has been established.\n     */\n    DATA_CHANNEL_OPENED = 'conference.dataChannelOpened',\n\n    /**\n     * A user has changed it display name\n     */\n    DISPLAY_NAME_CHANGED = 'conference.displayNameChanged',\n\n    /**\n     * The dominant speaker was changed.\n     */\n    DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker',\n\n    /**\n     * Indicates that DTMF support changed.\n     */\n    DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged',\n\n    E2EE_VERIFICATION_AVAILABLE = 'conference.e2ee.verification.available',\n\n    E2EE_VERIFICATION_COMPLETED = 'conference.e2ee.verification.completed',\n\n    E2EE_VERIFICATION_READY = 'conference.e2ee.verification.ready',\n\n    /**\n     * Indicates that the encode time stats for the local video sources has been received.\n     */\n    ENCODE_TIME_STATS_RECEIVED = 'conference.encode_time_stats_received',\n\n    /**\n     * Indicates that a message from another participant is received on data\n     * channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received',\n\n    /**\n     * Indicates that a message for the remote endpoint statistics has been received on the bridge channel.\n     */\n    ENDPOINT_STATS_RECEIVED = 'conference.endpoint_stats_received',\n\n    /**\n     * The forwarded sources set is changed.\n     *\n     * @param {Array<string>} leavingForwardedSources the sourceNames of all the tracks which are leaving forwarded\n     * sources\n     * @param {Array<string>} enteringForwardedSources the sourceNames of all the tracks which are entering forwarded\n     * sources\n     */\n    FORWARDED_SOURCES_CHANGED = 'conference.forwardedSourcesChanged',\n\n    /**\n     * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n     *\n     * Event emitted when conference transits, between one to one and multiparty JVB\n     * conference. If the conference switches to P2P it's neither one to one nor\n     * a multiparty JVB conference, but P2P (the status argument of this event will\n     * be <tt>false</tt>).\n     *\n     * The first argument is a boolean which carries the previous value and\n     * the seconds argument is a boolean with the new status. The event is emitted\n     * only if the previous and the new values are different.\n     *\n     * @type {string}\n     */\n    JVB121_STATUS = 'conference.jvb121Status',\n\n    /**\n     * You are kicked from the conference.\n     * @param {JitsiParticipant} the participant that initiated the kick.\n     */\n    KICKED = 'conference.kicked',\n\n    /**\n     * The Last N set is changed.\n     *\n     * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n     * which are leaving Last N\n     * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n     * which are entering Last N\n     */\n    LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged',\n\n    /**\n     * A new user joined the lobby room.\n     */\n    LOBBY_USER_JOINED = 'conference.lobby.userJoined',\n\n    /**\n     * A user left the lobby room.\n     */\n    LOBBY_USER_LEFT = 'conference.lobby.userLeft',\n\n    /**\n     * A user from the lobby room has been update.\n     */\n    LOBBY_USER_UPDATED = 'conference.lobby.userUpdated',\n\n    /**\n     * Indicates that the room has been locked or unlocked.\n     */\n    LOCK_STATE_CHANGED = 'conference.lock_state_changed',\n\n    /**\n     * Indicates that the conference had changed to members only enabled/disabled.\n     * The first argument of this event is a <tt>boolean</tt> which when set to\n     * <tt>true</tt> means that the conference is running in members only mode.\n     * You may need to use Lobby if supported to ask for permissions to enter the conference.\n     */\n    MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged',\n\n    /**\n     * New text message was received.\n     */\n    MESSAGE_RECEIVED = 'conference.messageReceived',\n\n    /**\n     * Event fired when the conference metadata is updated.\n     */\n    METADATA_UPDATED = 'conference.metadata.updated',\n\n    /**\n     * Event indicates that the current microphone used by the conference is noisy.\n     */\n    NOISY_MIC = 'conference.noisy_mic',\n\n    /**\n     * Indicates that a message from the local user or from the Prosody backend\n     * was received on the data channel.\n     */\n    NON_PARTICIPANT_MESSAGE_RECEIVED = 'conference.non_participant_message_received',\n\n    /**\n     * Event indicates that the current selected input device has no signal\n     */\n    NO_AUDIO_INPUT = 'conference.no_audio_input',\n\n    /**\n     * Indicates that the conference has switched between JVB and P2P connections.\n     * The first argument of this event is a <tt>boolean</tt> which when set to\n     * <tt>true</tt> means that the conference is running on the P2P connection.\n     */\n    P2P_STATUS = 'conference.p2pStatus',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     * TODO: there is a spelling mistake in this event name and associated constants\n     */\n    PARTCIPANT_FEATURES_CHANGED = 'conference.partcipant_features_changed',\n\n    /**\n     * Participant was kicked from the conference.\n     * @param {JitsiParticipant} the participant that initiated the kick.\n     * @param {JitsiParticipant} the participant that was kicked.\n     */\n    PARTICIPANT_KICKED = 'conference.participant_kicked',\n\n    /**\n     * Indicates that a value of a specific property of a specific participant\n     * has changed.\n     */\n    PARTICIPANT_PROPERTY_CHANGED = 'conference.participant_property_changed',\n\n    /**\n     * Indicates the state of sources attached to a given remote participant has changed.\n     */\n    PARTICIPANT_SOURCE_UPDATED = 'conference.participant_source_updated',\n\n    /**\n     * Indicates that the permissions for the local participant were updated.\n     */\n    PERMISSIONS_RECEIVED = 'conference.permissions_received',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged',\n\n    /**\n     * New private text message was received.\n     */\n    PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived',\n\n    /**\n     * The conference properties changed.\n     * @type {string}\n     */\n    PROPERTIES_CHANGED = 'conference.propertiesChanged',\n\n    /**\n     * New reaction was received.\n     */\n    REACTION_RECEIVED = 'conference.reactionReceived',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED = 'conference.recorderStateChanged',\n\n    /**\n     * Indicates that the region of the media server (jitsi-videobridge) that we\n     * are connected to changed (or was initially set).\n     * @type {string} the region.\n     */\n    SERVER_REGION_CHANGED = 'conference.server_region_changed',\n\n    /**\n     * Indicates a user has joined without audio\n     */\n    SILENT_STATUS_CHANGED = 'conference.silentStatusChanged',\n\n    /**\n     * Indicates that start muted settings changed.\n     */\n    START_MUTED_POLICY_CHANGED = 'conference.start_muted_policy_changed',\n\n    /**\n     * Indicates that subject of the conference has changed.\n     */\n    SUBJECT_CHANGED = 'conference.subjectChanged',\n\n    /**\n     * Indicates that DTMF support changed.\n     */\n    SUSPEND_DETECTED = 'conference.suspendDetected',\n\n    /**\n     * Event indicates that local user is talking while he muted himself\n     */\n    TALK_WHILE_MUTED = 'conference.talk_while_muted',\n\n    /**\n     * A new media track was added to the conference. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {JitsiTrack} track the added JitsiTrack\n     */\n    TRACK_ADDED = 'conference.trackAdded',\n\n    /**\n     * Audio levels of a media track ( attached to the conference) was changed.\n     */\n    TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged',\n\n    /**\n     * A media track ( attached to the conference) mute status was changed.\n     * @param {JitsiParticipant|null} the participant that initiated the mute\n     * if it is a remote mute.\n     */\n    TRACK_MUTE_CHANGED = 'conference.trackMuteChanged',\n\n    /**\n     * The media track was removed from the conference. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {JitsiTrack} track the removed JitsiTrack\n     */\n    TRACK_REMOVED = 'conference.trackRemoved',\n\n    /**\n     * The source-add for unmuting of a media track was rejected by Jicofo.\n     *\n     */\n    TRACK_UNMUTE_REJECTED = 'conference.trackUnmuteRejected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED = 'conference.transcriptionStatusChanged',\n\n    /**\n     * A new user joined the conference.\n     */\n    USER_JOINED = 'conference.userJoined',\n\n    /**\n     * A user has left the conference.\n     */\n    USER_LEFT = 'conference.userLeft',\n\n    /**\n     * User role changed.\n     */\n    USER_ROLE_CHANGED = 'conference.roleChanged',\n\n    /**\n     * User status changed.\n     */\n    USER_STATUS_CHANGED = 'conference.statusChanged',\n\n    /**\n     * Indicates that the video codec of the local video track has changed.\n     */\n    VIDEO_CODEC_CHANGED = 'conference.videoCodecChanged',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     * @param {VideoSIPGWConstants} status.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED = 'conference.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * @param {options} event - {\n     *     {string} address,\n     *     {VideoSIPGWConstants} oldState,\n     *     {VideoSIPGWConstants} newState,\n     *     {string} displayName\n     * }.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED = 'conference.videoSIPGWSessionStateChanged',\n\n    /**\n     * Event indicates that the permission for unmuting video has changed based on the number of video senders in the\n     * call and the video sender limit configured in Jicofo.\n     */\n    VIDEO_UNMUTE_PERMISSIONS_CHANGED = 'conference.video_unmute_permissions_changed',\n\n    /**\n     * Event indicating we have received a message from the visitors component.\n     */\n    VISITORS_MESSAGE = 'conference.visitors_message',\n\n    /**\n     * Event indicating that our request for promotion was rejected.\n     */\n    VISITORS_REJECTION = 'conference.visitors_rejection',\n\n    /**\n     * Indicates that the conference has support for visitors.\n     */\n    VISITORS_SUPPORTED_CHANGED = 'conference.visitorsSupported',\n\n    /**\n     * An event(library-private) fired when the conference switches the currently active media session.\n     * @type {string}\n     * @private\n     */\n    _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed',\n\n    /**\n     * An event(library-private) fired when a new media session is added to the conference.\n     * @type {string}\n     * @private\n     */\n    _MEDIA_SESSION_STARTED = 'conference.media_session.started'\n}\n\n// exported for backward compatibility\nexport const _MEDIA_SESSION_STARTED = JitsiConferenceEvents._MEDIA_SESSION_STARTED;\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED;\nexport const AUDIO_INPUT_STATE_CHANGE = JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE;\nexport const AUDIO_UNMUTE_PERMISSIONS_CHANGED = JitsiConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED;\nexport const AUTH_STATUS_CHANGED = JitsiConferenceEvents.AUTH_STATUS_CHANGED;\nexport const AV_MODERATION_APPROVED = JitsiConferenceEvents.AV_MODERATION_APPROVED;\nexport const AV_MODERATION_CHANGED = JitsiConferenceEvents.AV_MODERATION_CHANGED;\nexport const AV_MODERATION_PARTICIPANT_APPROVED = JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED;\nexport const AV_MODERATION_PARTICIPANT_REJECTED = JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED;\nexport const AV_MODERATION_REJECTED = JitsiConferenceEvents.AV_MODERATION_REJECTED;\nexport const BEFORE_STATISTICS_DISPOSED = JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED;\nexport const BOT_TYPE_CHANGED = JitsiConferenceEvents.BOT_TYPE_CHANGED;\nexport const BREAKOUT_ROOMS_MOVE_TO_ROOM = JitsiConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM;\nexport const BREAKOUT_ROOMS_UPDATED = JitsiConferenceEvents.BREAKOUT_ROOMS_UPDATED;\nexport const BRIDGE_BWE_STATS_RECEIVED = JitsiConferenceEvents.BRIDGE_BWE_STATS_RECEIVED;\nexport const CONFERENCE_CREATED_TIMESTAMP = JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP;\nexport const CONFERENCE_ERROR = JitsiConferenceEvents.CONFERENCE_ERROR;\nexport const CONFERENCE_FAILED = JitsiConferenceEvents.CONFERENCE_FAILED;\nexport const CONFERENCE_JOIN_IN_PROGRESS = JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS;\nexport const CONFERENCE_JOINED = JitsiConferenceEvents.CONFERENCE_JOINED;\nexport const CONFERENCE_LEFT = JitsiConferenceEvents.CONFERENCE_LEFT;\nexport const CONFERENCE_UNIQUE_ID_SET = JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET;\nexport const CONFERENCE_VISITOR_CODECS_CHANGED = JitsiConferenceEvents.CONFERENCE_VISITOR_CODECS_CHANGED;\nexport const CONNECTION_ESTABLISHED = JitsiConferenceEvents.CONNECTION_ESTABLISHED;\nexport const CONNECTION_INTERRUPTED = JitsiConferenceEvents.CONNECTION_INTERRUPTED;\nexport const CONNECTION_RESTORED = JitsiConferenceEvents.CONNECTION_RESTORED;\nexport const DATA_CHANNEL_CLOSED = JitsiConferenceEvents.DATA_CHANNEL_CLOSED;\nexport const DATA_CHANNEL_OPENED = JitsiConferenceEvents.DATA_CHANNEL_OPENED;\nexport const DISPLAY_NAME_CHANGED = JitsiConferenceEvents.DISPLAY_NAME_CHANGED;\nexport const DOMINANT_SPEAKER_CHANGED = JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED;\nexport const DTMF_SUPPORT_CHANGED = JitsiConferenceEvents.DTMF_SUPPORT_CHANGED;\nexport const E2EE_VERIFICATION_AVAILABLE = JitsiConferenceEvents.E2EE_VERIFICATION_AVAILABLE;\nexport const E2EE_VERIFICATION_COMPLETED = JitsiConferenceEvents.E2EE_VERIFICATION_COMPLETED;\nexport const E2EE_VERIFICATION_READY = JitsiConferenceEvents.E2EE_VERIFICATION_READY;\nexport const ENCODE_TIME_STATS_RECEIVED = JitsiConferenceEvents.ENCODE_TIME_STATS_RECEIVED;\nexport const ENDPOINT_MESSAGE_RECEIVED = JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED;\nexport const ENDPOINT_STATS_RECEIVED = JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED;\nexport const FORWARDED_SOURCES_CHANGED = JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED;\nexport const JVB121_STATUS = JitsiConferenceEvents.JVB121_STATUS;\nexport const KICKED = JitsiConferenceEvents.KICKED;\nexport const LAST_N_ENDPOINTS_CHANGED = JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED;\nexport const LOBBY_USER_JOINED = JitsiConferenceEvents.LOBBY_USER_JOINED;\nexport const LOBBY_USER_LEFT = JitsiConferenceEvents.LOBBY_USER_LEFT;\nexport const LOBBY_USER_UPDATED = JitsiConferenceEvents.LOBBY_USER_UPDATED;\nexport const LOCK_STATE_CHANGED = JitsiConferenceEvents.LOCK_STATE_CHANGED;\nexport const MEMBERS_ONLY_CHANGED = JitsiConferenceEvents.MEMBERS_ONLY_CHANGED;\nexport const MESSAGE_RECEIVED = JitsiConferenceEvents.MESSAGE_RECEIVED;\nexport const METADATA_UPDATED = JitsiConferenceEvents.METADATA_UPDATED;\nexport const NO_AUDIO_INPUT = JitsiConferenceEvents.NO_AUDIO_INPUT;\nexport const NOISY_MIC = JitsiConferenceEvents.NOISY_MIC;\nexport const NON_PARTICIPANT_MESSAGE_RECEIVED = JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED;\nexport const P2P_STATUS = JitsiConferenceEvents.P2P_STATUS;\nexport const PARTICIPANT_KICKED = JitsiConferenceEvents.PARTICIPANT_KICKED;\nexport const PARTICIPANT_SOURCE_UPDATED = JitsiConferenceEvents.PARTICIPANT_SOURCE_UPDATED;\nexport const PERMISSIONS_RECEIVED = JitsiConferenceEvents.PERMISSIONS_RECEIVED;\nexport const PRIVATE_MESSAGE_RECEIVED = JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED;\nexport const PARTCIPANT_FEATURES_CHANGED = JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED;\nexport const PARTICIPANT_PROPERTY_CHANGED = JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED;\nexport const PHONE_NUMBER_CHANGED = JitsiConferenceEvents.PHONE_NUMBER_CHANGED;\nexport const PROPERTIES_CHANGED = JitsiConferenceEvents.PROPERTIES_CHANGED;\nexport const REACTION_RECEIVED = JitsiConferenceEvents.REACTION_RECEIVED;\nexport const RECORDER_STATE_CHANGED = JitsiConferenceEvents.RECORDER_STATE_CHANGED;\nexport const SERVER_REGION_CHANGED = JitsiConferenceEvents.SERVER_REGION_CHANGED;\nexport const SILENT_STATUS_CHANGED = JitsiConferenceEvents.SILENT_STATUS_CHANGED;\nexport const START_MUTED_POLICY_CHANGED = JitsiConferenceEvents.START_MUTED_POLICY_CHANGED;\nexport const SUBJECT_CHANGED = JitsiConferenceEvents.SUBJECT_CHANGED;\nexport const SUSPEND_DETECTED = JitsiConferenceEvents.SUSPEND_DETECTED;\nexport const TALK_WHILE_MUTED = JitsiConferenceEvents.TALK_WHILE_MUTED;\nexport const TRACK_ADDED = JitsiConferenceEvents.TRACK_ADDED;\nexport const TRACK_AUDIO_LEVEL_CHANGED = JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED;\nexport const TRACK_MUTE_CHANGED = JitsiConferenceEvents.TRACK_MUTE_CHANGED;\nexport const TRACK_REMOVED = JitsiConferenceEvents.TRACK_REMOVED;\nexport const TRACK_UNMUTE_REJECTED = JitsiConferenceEvents.TRACK_UNMUTE_REJECTED;\nexport const TRANSCRIPTION_STATUS_CHANGED = JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED;\nexport const USER_JOINED = JitsiConferenceEvents.USER_JOINED;\nexport const USER_LEFT = JitsiConferenceEvents.USER_LEFT;\nexport const USER_ROLE_CHANGED = JitsiConferenceEvents.USER_ROLE_CHANGED;\nexport const USER_STATUS_CHANGED = JitsiConferenceEvents.USER_STATUS_CHANGED;\nexport const VIDEO_CODEC_CHANGED = JitsiConferenceEvents.VIDEO_CODEC_CHANGED;\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED = JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED;\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED = JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED;\nexport const VIDEO_UNMUTE_PERMISSIONS_CHANGED = JitsiConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED;\nexport const VISITORS_SUPPORTED_CHANGED = JitsiConferenceEvents.VISITORS_SUPPORTED_CHANGED;\nexport const VISITORS_MESSAGE = JitsiConferenceEvents.VISITORS_MESSAGE;\nexport const VISITORS_REJECTION = JitsiConferenceEvents.VISITORS_REJECTION;\n","import MapCache from './_MapCache.js';\nimport setCacheAdd from './_setCacheAdd.js';\nimport setCacheHas from './_setCacheHas.js';\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\nexport default SetCache;\n","/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\nexport default setCacheAdd;\n","/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\nexport default setCacheHas;\n","/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport default arraySome;\n","import SetCache from './_SetCache.js';\nimport arraySome from './_arraySome.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Check that cyclic values are equal.\n  var arrStacked = stack.get(array);\n  var othStacked = stack.get(other);\n  if (arrStacked && othStacked) {\n    return arrStacked == other && othStacked == array;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nexport default equalArrays;\n","/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\nexport default cacheHas;\n","/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\nexport default mapToArray;\n","/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\nexport default setToArray;\n","import Symbol from './_Symbol.js';\nimport Uint8Array from './_Uint8Array.js';\nimport eq from './eq.js';\nimport equalArrays from './_equalArrays.js';\nimport mapToArray from './_mapToArray.js';\nimport setToArray from './_setToArray.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nexport default equalByTag;\n","/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nexport default arrayPush;\n","import arrayPush from './_arrayPush.js';\nimport isArray from './isArray.js';\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\nexport default baseGetAllKeys;\n","/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\nexport default stubArray;\n","import arrayFilter from './_arrayFilter.js';\nimport stubArray from './stubArray.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\nexport default getSymbols;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nexport default arrayFilter;\n","import overArg from './_overArg.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nexport default nativeKeys;\n","import isPrototype from './_isPrototype.js';\nimport nativeKeys from './_nativeKeys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeys;\n","import arrayLikeKeys from './_arrayLikeKeys.js';\nimport baseKeys from './_baseKeys.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nexport default keys;\n","import baseGetAllKeys from './_baseGetAllKeys.js';\nimport getSymbols from './_getSymbols.js';\nimport keys from './keys.js';\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\nexport default getAllKeys;\n","import getAllKeys from './_getAllKeys.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Check that cyclic values are equal.\n  var objStacked = stack.get(object);\n  var othStacked = stack.get(other);\n  if (objStacked && othStacked) {\n    return objStacked == other && othStacked == object;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nexport default equalObjects;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nexport default DataView;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nexport default Promise;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nexport default Set;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nexport default WeakMap;\n","import DataView from './_DataView.js';\nimport Map from './_Map.js';\nimport Promise from './_Promise.js';\nimport Set from './_Set.js';\nimport WeakMap from './_WeakMap.js';\nimport baseGetTag from './_baseGetTag.js';\nimport toSource from './_toSource.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nexport default getTag;\n","import Stack from './_Stack.js';\nimport equalArrays from './_equalArrays.js';\nimport equalByTag from './_equalByTag.js';\nimport equalObjects from './_equalObjects.js';\nimport getTag from './_getTag.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nexport default baseIsEqualDeep;\n","import baseIsEqualDeep from './_baseIsEqualDeep.js';\nimport isObjectLike from './isObjectLike.js';\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\nexport default baseIsEqual;\n","import baseIsEqual from './_baseIsEqual.js';\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nexport default isEqual;\n","export enum JitsiTrackEvents {\n\n    /**\n     * The media track was removed to the conference.\n     */\n    LOCAL_TRACK_STOPPED = 'track.stopped',\n\n    /**\n     * Indicates that the local audio track is not receiving any audio input from\n     * the microphone that is currently selected.\n     */\n    NO_AUDIO_INPUT = 'track.no_audio_input',\n\n    /**\n     * Indicates that the track is not receiving any data even though we expect it\n     * to receive data (i.e. the stream is not stopped).\n     */\n    NO_DATA_FROM_SOURCE = 'track.no_data_from_source',\n\n    /**\n     * Audio levels of a this track was changed.\n     * The first argument is a number with audio level value in range [0, 1].\n     * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n     * connection which measured the audio level (one audio track can be added\n     * to multiple peer connection at the same time). This argument is optional for\n     * local tracks for which we can measure audio level without the peer\n     * connection (the value will be <tt>undefined</tt>).\n     *\n     * NOTE The second argument should be treated as library internal and can be\n     * removed at any time.\n     */\n    TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged',\n\n    /**\n     * The audio output of the track was changed.\n     */\n    TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged',\n\n    /**\n     * A media track mute status was changed.\n     */\n    TRACK_MUTE_CHANGED = 'track.trackMuteChanged',\n\n    /**\n     * Indicates that a new owner has been assigned to a remote track when SSRC rewriting is enabled.\n     */\n    TRACK_OWNER_SET = 'track.owner_set',\n\n    /**\n     * Event fired whenever video track's streaming changes.\n     * First argument is the sourceName of the track and the second is a string indicating if the connection is\n     * currently\n     * - active - the connection is active.\n     * - inactive - the connection is inactive, was intentionally interrupted by the bridge because of low BWE or\n     *   because of the endpoint falling out of last N.\n     * - interrupted - a network problem occurred.\n     * - restoring - the connection was inactive and is restoring now.\n     *\n     * The current status value can be obtained by calling JitsiRemoteTrack.getTrackStreamingStatus().\n     */\n    TRACK_STREAMING_STATUS_CHANGED = 'track.streaming_status_changed',\n\n    /**\n     * The video type(\"camera\" or \"desktop\") of the track was changed.\n     */\n    TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged'\n}\n\n// exported for backward compatibility\nexport const LOCAL_TRACK_STOPPED = JitsiTrackEvents.LOCAL_TRACK_STOPPED;\nexport const TRACK_AUDIO_LEVEL_CHANGED = JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED;\nexport const TRACK_AUDIO_OUTPUT_CHANGED = JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED;\nexport const TRACK_MUTE_CHANGED = JitsiTrackEvents.TRACK_MUTE_CHANGED;\nexport const TRACK_VIDEOTYPE_CHANGED = JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED;\nexport const NO_DATA_FROM_SOURCE = JitsiTrackEvents.NO_DATA_FROM_SOURCE;\nexport const NO_AUDIO_INPUT = JitsiTrackEvents.NO_AUDIO_INPUT;\nexport const TRACK_OWNER_SET = JitsiTrackEvents.TRACK_OWNER_SET;\nexport const TRACK_STREAMING_STATUS_CHANGED = JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\nexport enum AnalyticsEvents {\n\n    /**\n     * The \"action\" value for Jingle events which indicates that the Jingle session\n     * was restarted (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_RESTART = 'restart',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-accept\n     * timed out (TODO: verify/fix the documentation)\n     */\n    ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-initiate\n     * was received.\n     */\n    ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received',\n\n    /**\n     * The \"action\" value for Jingle events which indicates that a session-initiate\n     * not arrived within a timeout (the value is specified in\n     * the {@link JingleSessionPC}.\n     */\n    ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout',\n\n    /**\n     * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n     * the documentation)\n     */\n    ACTION_JINGLE_TERMINATE = 'terminate',\n\n    /**\n     * The \"action\" value for JVB events which indicates that the ICE connection has failed after 3 restart attempts\n     */\n    ACTION_JVB_ICE_FAILED = 'jvb.ice.failed',\n\n    /**\n     * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the\n     * client because the mandatory requirements were not met.\n     */\n    ACTION_P2P_DECLINED = 'decline',\n\n    /**\n     * The \"action\" value for P2P events which indicates that a connection was\n     * established (TODO: verify/fix the documentation)\n     */\n    ACTION_P2P_ESTABLISHED = 'established',\n\n    /**\n     * The \"action\" value for P2P events which indicates that something failed.\n     */\n    ACTION_P2P_FAILED = 'failed',\n\n    /**\n     * The \"action\" value for P2P events which indicates that a switch to\n     * jitsi-videobridge happened.\n     */\n    ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb',\n\n    /**\n     * The name of an event which indicates an available device. We send one such\n     * event per available device once when the available devices are first known,\n     * and every time that they change\n     *\n     * Properties:\n     *      audio_input_device_count: the number of audio input devices available at\n     *          the time the event was sent.\n     *      audio_output_device_count: the number of audio output devices available\n     *          at the time the event was sent.\n     *      video_input_device_count: the number of video input devices available at\n     *          the time the event was sent.\n     *      video_output_device_count: the number of video output devices available\n     *          at the time the event was sent.\n     *      device_id: an identifier of the device described in this event.\n     *      device_group_id:\n     *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n     *          'videooutput'.\n     *      device_label: a string which describes the device.\n     */\n    AVAILABLE_DEVICE = 'available.device',\n\n    /**\n     * This appears to be fired only in certain cases when the XMPP connection\n     * disconnects (and it was intentional?). It is currently never observed to\n     * fire in production.\n     *\n     * TODO: document\n     *\n     * Properties:\n     *      message: an error message\n     */\n    CONNECTION_DISCONNECTED = 'connection.disconnected',\n\n    /**\n     * Indicates that the user of the application provided feedback in terms of a\n     * rating (an integer from 1 to 5) and an optional comment.\n     * Properties:\n     *      value: the user's rating (an integer from 1 to 5)\n     *      comment: the user's comment\n     */\n    FEEDBACK = 'feedback',\n\n    /**\n     * Indicates the duration of a particular phase of the ICE connectivity\n     * establishment.\n     *\n     * Properties:\n     *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n     *      value: the duration in milliseconds.\n     *      p2p: whether the associated ICE connection is p2p or towards a\n     *          jitsi-videobridge\n     *      initiator: whether the local Jingle peer is the initiator or responder\n     *          in the Jingle session. XXX we probably actually care about the ICE\n     *          role (controlling vs controlled), and we assume that this correlates\n     *          with the Jingle initiator.\n     */\n    ICE_DURATION = 'ice.duration',\n\n    /**\n     * Indicates the difference in milliseconds between the ICE establishment time\n     * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n     * P2P connection took 10ms more than JVB connection to establish).\n     *\n     * Properties:\n     *      value: the difference in establishment durations in milliseconds.\n     *\n     */\n    ICE_ESTABLISHMENT_DURATION_DIFF = 'ice.establishment.duration.diff',\n\n    /**\n     * Indicates that the ICE state has changed.\n     *\n     * Properties:\n     *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n     *          'completed', etc).\n     *      value: the time in milliseconds (as reported by\n     *          window.performance.now()) that the state change occurred.\n     *      p2p: whether the associated ICE connection is p2p or towards a\n     *          jitsi-videobridge\n     *      signalingState: The signaling state of the associated PeerConnection\n     *      reconnect: whether the associated Jingle session is in the process of\n     *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n     */\n    ICE_STATE_CHANGED = 'ice.state.changed',\n\n    /**\n     * Indicates that no bytes have been sent for the track.\n     *\n     * Properties:\n     *      mediaType: the media type of the local track ('audio' or 'video').\n     */\n    NO_BYTES_SENT = 'track.no-bytes-sent',\n\n    /**\n     * Indicates that a track was unmuted (?).\n     *\n     * Properties:\n     *      mediaType: the media type of the local track ('audio' or 'video').\n     *      trackType: the type of the track ('local' or 'remote').\n     *      value: TODO: document\n     */\n    TRACK_UNMUTED = 'track.unmuted',\n\n    /**\n     * The constant which identifies an event of type \"operational\".\n     */\n    TYPE_OPERATIONAL = 'operational',\n\n    /**\n     * The constant which identifies an event of type \"page\".\n     */\n    TYPE_PAGE = 'page',\n\n    /**\n     * The constant which identifies an event of type \"track\".\n     */\n    TYPE_TRACK = 'track',\n\n    /**\n     * The constant which identifies an event of type \"ui\".\n     */\n    TYPE_UI = 'ui',\n\n    /**\n     * Indicates that the video codec changed for a local track.\n     *\n     * Properties:\n     *      value: the video codec mimeType.\n     *      videoType: the videoType of local track, whether its 'camera' or 'desktop'.\n     */\n    VIDEO_CODEC_CHANGED = 'quality.video-codec-changed',\n}\n\n// exported for backward compatibility\nexport const TYPE_OPERATIONAL = AnalyticsEvents.TYPE_OPERATIONAL;\nexport const TYPE_PAGE = AnalyticsEvents.TYPE_PAGE;\nexport const TYPE_TRACK = AnalyticsEvents.TYPE_TRACK;\nexport const TYPE_UI = AnalyticsEvents.TYPE_UI;\nexport const ACTION_JINGLE_RESTART = AnalyticsEvents.ACTION_JINGLE_RESTART;\nexport const ACTION_JINGLE_SA_TIMEOUT = AnalyticsEvents.ACTION_JINGLE_SA_TIMEOUT;\nexport const ACTION_JINGLE_SI_RECEIVED = AnalyticsEvents.ACTION_JINGLE_SI_RECEIVED;\nexport const ACTION_JINGLE_SI_TIMEOUT = AnalyticsEvents.ACTION_JINGLE_SI_TIMEOUT;\nexport const ACTION_JINGLE_TERMINATE = AnalyticsEvents.ACTION_JINGLE_TERMINATE;\nexport const ACTION_JVB_ICE_FAILED = AnalyticsEvents.ACTION_JVB_ICE_FAILED;\nexport const ACTION_P2P_DECLINED = AnalyticsEvents.ACTION_P2P_DECLINED;\nexport const ACTION_P2P_ESTABLISHED = AnalyticsEvents.ACTION_P2P_ESTABLISHED;\nexport const ACTION_P2P_FAILED = AnalyticsEvents.ACTION_P2P_FAILED;\nexport const ACTION_P2P_SWITCH_TO_JVB = AnalyticsEvents.ACTION_P2P_SWITCH_TO_JVB;\nexport const AVAILABLE_DEVICE = AnalyticsEvents.AVAILABLE_DEVICE;\nexport const CONNECTION_DISCONNECTED = AnalyticsEvents.CONNECTION_DISCONNECTED;\nexport const FEEDBACK = AnalyticsEvents.FEEDBACK;\nexport const ICE_DURATION = AnalyticsEvents.ICE_DURATION;\nexport const ICE_ESTABLISHMENT_DURATION_DIFF = AnalyticsEvents.ICE_ESTABLISHMENT_DURATION_DIFF;\nexport const ICE_STATE_CHANGED = AnalyticsEvents.ICE_STATE_CHANGED;\nexport const NO_BYTES_SENT = AnalyticsEvents.NO_BYTES_SENT;\nexport const TRACK_UNMUTED = AnalyticsEvents.TRACK_UNMUTED;\nexport const VIDEO_CODEC_CHANGED = AnalyticsEvents.VIDEO_CODEC_CHANGED;\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = () => {\n    return {\n        action: 'bridge.down',\n        actionSubject: 'bridge.down',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent = (errorType: unknown, errorMessage: unknown, details: object) => {\n    return {\n        type: AnalyticsEvents.TYPE_OPERATIONAL,\n        action: 'connection.failed',\n        attributes: {\n            'error_type': errorType,\n            'error_message': errorMessage,\n            ...details\n        }\n    };\n};\n\n/**\n * Creates a conference event.\n *\n * @param action - The action of the event.\n * @param attributes - The attributes to be added to the event.\n */\nexport const createConferenceEvent = (action: string, attributes: object) => {\n    return {\n        action,\n        attributes,\n        source: 'conference',\n        type: AnalyticsEvents.TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = (stage: unknown, attributes: object) => {\n    return {\n        action: 'connection.stage.reached',\n        actionSubject: stage,\n        attributes,\n        source: 'connection.stage.reached',\n        type: AnalyticsEvents.TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = (participantId: unknown, region: unknown, rtt: unknown) => {\n    return {\n        attributes: {\n            'participant_id': participantId,\n            region,\n            rtt\n        },\n        name: 'e2e_rtt',\n        type: AnalyticsEvents.TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = () => {\n    return {\n        action: 'focus.left',\n        actionSubject: 'focus.left',\n        type: AnalyticsEvents.TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n */\nexport const createGetUserMediaEvent = (action: 'error' | 'success' | 'warning' | string, attributes: object = {}) => {\n    return {\n        type: AnalyticsEvents.TYPE_OPERATIONAL,\n        source: 'get.user.media',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event which indicates that the JVB ICE connection has failed event after 3 retries.\n *\n * @param action - The action type of the event.\n * @param attributes - The attributes to be added to the event.\n * @returns - The event object.\n */\nexport const createJvbIceFailedEvent = (action: unknown, attributes: object = {}) => {\n    return {\n        action,\n        attributes,\n        type: AnalyticsEvents.TYPE_OPERATIONAL,\n    };\n};\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n */\nexport const createParticipantConnectionStatusEvent = (attributes: object = {}) => {\n    return {\n        type: AnalyticsEvents.TYPE_OPERATIONAL,\n        source: 'peer.conn.status',\n        action: 'duration',\n        attributes\n    };\n};\n\n/**\n * Creates an event related to remote track streaming status changes.\n *\n * @param attributes the attributes to attach to the event.\n */\nexport const createTrackStreamingStatusEvent = (attributes: object = {}) => {\n    return {\n        type: AnalyticsEvents.TYPE_OPERATIONAL,\n        source: 'track.streaming.status',\n        action: 'duration',\n        attributes\n    };\n};\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = (action: unknown, attributes: object = {}) => {\n    return {\n        type: AnalyticsEvents.TYPE_OPERATIONAL,\n        action,\n        source: 'jingle',\n        attributes\n    };\n};\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = (mediaType: 'audio' | 'video' | string, value: unknown) => {\n    return {\n        attributes: {\n            'media_type': mediaType,\n            value\n        },\n        action: 'track.no.data.from.source',\n        type: AnalyticsEvents.TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = (action: unknown, attributes: object = {}) => {\n    return {\n        type: AnalyticsEvents.TYPE_OPERATIONAL,\n        action,\n        source: 'p2p',\n        attributes\n    };\n};\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = (mediaType: unknown) => {\n    return {\n        type: AnalyticsEvents.TYPE_OPERATIONAL,\n        action: 'remotely.muted',\n        mediaType\n    };\n};\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = (attributes: object) => {\n    return {\n        type: AnalyticsEvents.TYPE_OPERATIONAL,\n        action: 'rtp.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n */\nexport const createRttByRegionEvent = (attributes: object) => {\n    return {\n        type: AnalyticsEvents.TYPE_OPERATIONAL,\n        action: 'rtt.by.region',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n */\nexport const createTransportStatsEvent = (attributes: object) => {\n    return {\n        type: AnalyticsEvents.TYPE_OPERATIONAL,\n        action: 'transport.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param userID - The user id of the affected participant.\n * @param localAudioLevels - The local audio levels.\n * @param remoteAudioLevels - The audio levels received from the participant.\n */\nexport const createAudioOutputProblemEvent\n    = (userID: string, localAudioLevels: unknown, remoteAudioLevels: unknown) => {\n        return {\n            type: AnalyticsEvents.TYPE_OPERATIONAL,\n            action: 'audio.output.problem',\n            attributes: {\n                userID,\n                localAudioLevels,\n                remoteAudioLevels\n            }\n        };\n    };\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param reason - A string which describes the reason for closing the bridge channel.\n */\nexport const createBridgeChannelClosedEvent = (code: string, reason: string) => {\n    return {\n        type: AnalyticsEvents.TYPE_OPERATIONAL,\n        action: 'bridge-channel.error',\n        attributes: {\n            code,\n            reason\n        }\n    };\n};\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = (attributes: object) => createConnectionStageReachedEvent('ttfm', attributes);\n","export enum Events {\n\n    /**\n     * Notifies about audio level in RTP statistics by SSRC.\n     *\n     * @param ssrc - The synchronization source identifier (SSRC) of the\n     * endpoint/participant whose audio level is being reported.\n     * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n     * RTP statistics.\n     * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n     * local endpoint/participant; otherwise, <tt>false</tt>.\n     */\n    AUDIO_LEVEL = 'statistics.audioLevel',\n\n    /**\n     * An event fired just before the statistics module gets disposes and it's\n     * the last chance to submit logs.\n     */\n    BEFORE_DISPOSED = 'statistics.before_disposed',\n\n    /**\n     * An event carrying all statistics by ssrc.\n     */\n    BYTE_SENT_STATS = 'statistics.byte_sent_stats',\n\n    /**\n     * An event carrying connection statistics.\n     *\n     * @param {object} connectionStats - The connection statistics carried by the\n     * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n     * <tt>resolution</tt>, and <tt>transport</tt>.\n     */\n    CONNECTION_STATS = 'statistics.connectionstats',\n\n    /**\n     * An event carrying the encode time stats for all the local video sources.\n     */\n    ENCODE_TIME_STATS = 'statistics.encode_time_stats',\n\n    /**\n     * An event carrying performance stats.\n     */\n    LONG_TASKS_STATS = 'statistics.long_tasks_stats'\n}\n\n// exported for backward compatibility\nexport const AUDIO_LEVEL = Events.AUDIO_LEVEL;\nexport const BEFORE_DISPOSED = Events.BEFORE_DISPOSED;\nexport const BYTE_SENT_STATS = Events.BYTE_SENT_STATS;\nexport const CONNECTION_STATS = Events.CONNECTION_STATS;\nexport const ENCODE_TIME_STATS = Events.ENCODE_TIME_STATS;\nexport const LONG_TASKS_STATS = Events.LONG_TASKS_STATS;\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\n\nexport const CHROME = 'chrome';\n\nexport const FIREFOX = 'firefox';\n\nexport const SAFARI = 'safari';\n\nexport const ELECTRON = 'electron';\n\nexport const REACT_NATIVE = 'react-native';\n\nexport const WEBKIT_BROWSER = 'webkit-browser';\n\n/**\n * Maps the names of the browsers from ua-parser to the internal names defined in\n * ./browsers.js\n */\nexport const PARSER_TO_JITSI_NAME = {\n    'Chrome': CHROME,\n    'Firefox': FIREFOX,\n    'Safari': SAFARI,\n    'Electron': ELECTRON\n};\n\nexport const BLINK = 'blink';\n\nexport const WEBKIT = 'webkit';\n\nexport const GECKO = 'gecko';\n\nexport const ENGINES = {\n    'Blink': BLINK,\n    'WebKit': WEBKIT,\n    'Gecko': GECKO\n};\n","import { UAParser } from 'ua-parser-js';\n\nimport {\n    BLINK,\n    CHROME,\n    ELECTRON,\n    ENGINES,\n    GECKO,\n    PARSER_TO_JITSI_NAME,\n    REACT_NATIVE,\n    SAFARI,\n    WEBKIT\n} from './constants.js';\n\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\nfunction _detectReactNative() {\n    const match\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n    let version;\n\n    // If we're remote debugging a React Native app, it may be treated as\n    // Chrome. Check navigator.product as well and always return some version\n    // even if we can't get the real one.\n\n    if (match || navigator.product === 'ReactNative') {\n        let name;\n\n        if (match && match.length > 2) {\n            name = match[1];\n            version = match[2];\n        }\n        name || (name = 'react-native');\n        version || (version = 'unknown');\n\n        return {\n            name: REACT_NATIVE,\n            version\n        };\n    }\n}\n\n/**\n * Returns the Jitsi recognized name for the browser\n *\n * @param {Object} [browserInfo] - Information about the browser.\n * @param {string} browserInfo.name - The name of the browser.\n * @param {string} browserInfo.version - The version of the browser.\n * @param {string} browserInfo.engine - The engine of the browser.\n * @param {string} browserInfo.engineVersion - The version of the engine of the browser.\n * @param {string} browserInfo.os - The os of the browser.\n * @param {string} browserInfo.osVersion - The os version of the browser.\n * @returns\n */\nfunction _getJitsiBrowserInfo(browserInfo) {\n    return {\n        name: PARSER_TO_JITSI_NAME[browserInfo.name],\n        version: browserInfo.version,\n        engine: ENGINES[browserInfo.engine],\n        engineVersion: browserInfo.engineVersion\n    };\n}\n\n/**\n * Returns information about the current browser.\n * @param {Object} - The parser instance.\n * @returns {Object} - The name and version of the browser.\n */\nfunction _detect(parser) {\n    const reactNativeInfo = _detectReactNative();\n\n    if (reactNativeInfo) {\n        return reactNativeInfo;\n    }\n\n    const { name, version } = parser.getBrowser();\n    const { name: engine, version: engineVersion } = parser.getEngine();\n\n    return _getJitsiBrowserInfo({\n        name,\n        version,\n        engine,\n        engineVersion });\n}\n\n/**\n * Implements browser detection.\n */\nexport default class BrowserDetection {\n    /**\n     * Creates new BrowserDetection instance.\n     *\n     * @param {Object} [browserInfo] - Information about the browser.\n     * @param {string} browserInfo.name - The name of the browser.\n     * @param {string} browserInfo.version - The version of the browser.\n     * @param {string} browserInfo.engine - The engine of the browser.\n     * @param {string} browserInfo.engineVersion - The version of the engine of the browser.\n     * @param {string} browserInfo.os - The os of the browser.\n     * @param {string} browserInfo.osVersion - The os version of the browser.\n     */\n    constructor(browserInfo) {\n        this._parser = new UAParser(navigator.userAgent);\n\n        const {\n            name,\n            version,\n            engine,\n            engineVersion\n        } = browserInfo ? _getJitsiBrowserInfo(browserInfo) : _detect(this._parser);\n\n        this._name = name;\n        this._version = version;\n        this._engine = engine;\n        this._engineVersion = engineVersion;\n    }\n\n    /**\n     * Checks if current browser is Chrome.\n     * @returns {boolean}\n     */\n    isChrome() {\n        // for backward compatibility returns true for all Chromium browsers\n        return this._name === CHROME || this._engine === BLINK;\n    }\n\n    /**\n     * Checks if current browser is Firefox.\n     * @returns {boolean}\n     */\n    isFirefox() {\n        return this._engine === GECKO;\n    }\n\n    /**\n     * Checks if current browser is Safari.\n     * @returns {boolean}\n     */\n    isSafari() {\n        return this._name === SAFARI;\n    }\n\n    /**\n     * Checks if current environment is Electron.\n     * @returns {boolean}\n     */\n    isElectron() {\n        return this._name === ELECTRON;\n    }\n\n    /**\n     * Checks if current environment is React Native.\n     * @returns {boolean}\n     */\n    isReactNative() {\n        return this._name === REACT_NATIVE;\n    }\n\n    /**\n     * Checks if current browser is based on chromium.\n     * @returns {boolean}\n     */\n    isChromiumBased() {\n        return this._engine === BLINK;\n    }\n\n    /**\n     * Checks if current browser is based on webkit.\n     * @returns {boolean}\n     */\n    isWebKitBased() {\n        return this._engine === WEBKIT;\n    }\n\n    /**\n     * Gets current browser name.\n     * @returns {string}\n     */\n    getName() {\n        if (this._name) {\n            return this._name;\n        }\n\n        return this._parser.getBrowser().name;\n    }\n\n    /**\n     * Returns the version of the current browser.\n     * @returns {string}\n     */\n    getVersion() {\n        if (this._version) {\n            return this._version;\n        }\n\n        return this._parser.getBrowser().version;\n    }\n\n    /**\n     * Gets current engine name of the browser.\n     * @returns {string}\n     */\n    getEngine() {\n        return this._engine;\n    }\n\n    /**\n     * Returns the engine version of the current browser.\n     * @returns the engine version\n     */\n    getEngineVersion() {\n        return this._engineVersion;\n    }\n\n    /**\n     * Returns the operating system.\n     */\n    getOS() {\n        return this._parser.getOS().name;\n    }\n\n    /**\n     * Return the os version.\n     */\n    getOSVersion() {\n        return this._parser.getOS().version;\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {number|string} version - The version to compare with.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * greater than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionGreaterThan(version) {\n        if (this._version) {\n            return parseInt(this._version, 10) > parseInt(version, 10);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {number|string} version - The version to compare with.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * lower than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionLessThan(version) {\n        if (this._version) {\n            return parseInt(this._version, 10) < parseInt(version, 10);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {number|string} version - The version to compare with.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * equal to the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     * A loose-equality operator is used here so that it matches the sub-versions as well.\n     */\n    isVersionEqualTo(version) {\n        if (this._version) {\n            return parseInt(this._version, 10) === parseInt(version, 10);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current engine version.\n     *\n     * @param {number|string} version - The version to compare with.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * greater than the passed version and false otherwise. Returns undefined if\n     * the current engine version is unknown.\n     */\n    isEngineVersionGreaterThan(version) {\n        if (this._engineVersion) {\n            return parseInt(this._engineVersion, 10) > parseInt(version, 10);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current engine version.\n     *\n     * @param {number|string} version - The version to compare with.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * lower than the passed version and false otherwise. Returns undefined if\n     * the current engine version is unknown.\n     */\n    isEngineVersionLessThan(version) {\n        if (this._engineVersion) {\n            return parseInt(this._engineVersion, 10) < parseInt(version, 10);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current engine version.\n     *\n     * @param {number|string} version - The version to compare with.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * equal to the passed version and false otherwise. Returns undefined if\n     * the current engine version is unknown.\n     * A loose-equality operator is used here so that it matches the sub-versions as well.\n     */\n    isEngineVersionEqualTo(version) {\n        if (this._engineVersion) {\n            return parseInt(this._engineVersion, 10) === parseInt(version, 10);\n        }\n    }\n}\n","\nexport const PC_STATE_CONNECTED = 'connected';\n\nexport const PC_STATE_DISCONNECTED = 'disconnected';\n\nexport const PC_STATE_FAILED = 'failed';\n\nexport const PC_CON_STATE_CHANGE = 'connectionstatechange';\n\nexport const PC_ICE_CON_STATE_CHANGE = 'iceconnectionstatechange';\n","/* eslint-disable prefer-rest-params */\n/* eslint-disable no-param-reassign */\nimport { BrowserDetection } from '@jitsi/js-utils/browser-detection';\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger('rtctstats');\n\nimport { PC_CON_STATE_CHANGE, PC_ICE_CON_STATE_CHANGE } from './events';\n\n/**\n * transforms a maplike to an object. Mostly for getStats + JSON.parse(JSON.stringify())\n * @param {*} m\n */\nfunction map2obj(m) {\n    if (!m.entries) {\n        return m;\n    }\n    const o = {};\n\n    m.forEach((v, k) => {\n        o[k] = v;\n    });\n\n    return o;\n}\n\n/**\n *\n * @param {*} pc\n * @param {*} response\n */\nfunction mangleChromeStats(pc, response) {\n    const standardReport = {};\n    const reports = response.result();\n\n    reports.forEach(report => {\n        const standardStats = {\n            id: report.id,\n            timestamp: report.timestamp.getTime(),\n            type: report.type\n        };\n\n        report.names().forEach(name => {\n            standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n    });\n\n    return standardReport;\n}\n\n/**\n * Apply a delta compression to the stats report. Reduces size by ~90%.\n * To reduce further, report keys could be compressed.\n * @param {*} oldStats\n * @param {*} newStats\n */\nfunction deltaCompression(oldStats, newStatsArg) {\n    const newStats = JSON.parse(JSON.stringify(newStatsArg));\n\n    // Go through each report of the newly fetches stats entry and compare it with the previous one (old)\n    // If a field value (e.g. ssrc.id) from the new report matches the corresponding one from the old report\n    // delete it.\n    // The new stats entry will be returned thus any reports from the old stats entry that are no longer found\n    // in the new one will me considered as removed.\n    // stats entries are expected to have the following format:\n    // {reportName1: {\n    //    key1: value,\n    //    key2: value2\n    // },\n    // reportName2: {\n    //    key1: value,\n    //    key2, value2,\n    // }}\n\n    Object.keys(newStats).forEach(id => {\n        const report = newStats[id];\n\n        delete report.id;\n        if (!oldStats[id]) {\n            return;\n        }\n        Object.keys(report).forEach(name => {\n            if (report[name] === oldStats[id][name]) {\n                delete newStats[id][name];\n            }\n        });\n    });\n\n    // TODO Snippet bellow adds the last timestamp as a stats level fields, probably used in feature extraction on the\n    // rtcstats-server side, most likely not used anymore, verify if this can be removed.\n    let timestamp = -Infinity;\n\n    Object.keys(newStats).forEach(id => {\n        const report = newStats[id];\n\n        if (report.timestamp > timestamp) {\n            timestamp = report.timestamp;\n        }\n    });\n    Object.keys(newStats).forEach(id => {\n        const report = newStats[id];\n\n        if (report.timestamp === timestamp) {\n            report.timestamp = 0;\n        }\n    });\n    newStats.timestamp = timestamp;\n\n    return newStats;\n}\n\n/**\n *\n * @param {*} stream\n */\nfunction dumpStream(stream) {\n    return {\n        id: stream.id,\n        tracks: stream.getTracks().map(track => {\n            return {\n                id: track.id, // unique identifier (GUID) for the track\n                kind: track.kind, // `audio` or `video`\n                label: track.label, // identified the track source\n                enabled: track.enabled, // application can control it\n                muted: track.muted, // application cannot control it (read-only)\n                readyState: track.readyState // `live` or `ended`\n            };\n        })\n    };\n}\n\n/**\n *\n * @param {*} trace\n * @param {*} getStatsInterval\n * @param {*} prefixesToWrap\n * @param {*} connectionFilter\n */\nexport default function(\n        { statsEntry: sendStatsEntry },\n        { connectionFilter,\n            pollInterval,\n            useLegacy,\n            sendSdp = false,\n            prefixesToWrap = [ '' ],\n            eventCallback }\n) {\n    let peerconnectioncounter = 0;\n\n    const browserDetection = new BrowserDetection();\n    const isFirefox = browserDetection.isFirefox();\n    const isChromiumBased = browserDetection.isChromiumBased();\n    const isWebKitBased = browserDetection.isWebKitBased();\n    const isReactNative = browserDetection.isReactNative();\n\n    // Only initialize rtcstats if it's run in a supported browser\n    if (!(isFirefox || isChromiumBased || isWebKitBased || isReactNative)) {\n        logger.warn('RTCStats unsupported browser.');\n\n        return;\n    }\n\n    prefixesToWrap.forEach(prefix => {\n        if (!window[`${prefix}RTCPeerConnection`]) {\n            return;\n        }\n\n        const OrigPeerConnection = window[`${prefix}RTCPeerConnection`];\n        const peerconnection = function(config, constraints = {}) {\n            // We want to make sure that any potential errors that occur at this point, caused by rtcstats logic,\n            // does not affect the normal flow of any application that might integrate it.\n            const origConfig = { ...config };\n            const { optional = [] } = constraints;\n            let isP2P = false;\n\n            try {\n                // Verify if the connection is configured as P2P\n                optional.some(option => option.rtcStatsSFUP2P === true) && (isP2P = true);\n\n                const pc = new OrigPeerConnection(config, constraints);\n\n                // In case the client wants to skip some rtcstats connections, a filter function can be provided which\n                // will return the original PC object without any strings attached.\n                if (connectionFilter && connectionFilter(config)) {\n                    return pc;\n                }\n\n                const id = `PC_${peerconnectioncounter++}`;\n\n                pc.__rtcStatsId = id;\n\n                if (!config) {\n                    config = { nullConfig: true };\n                }\n\n                config = JSON.parse(JSON.stringify(config)); // deepcopy\n                // don't log credentials\n                ((config && config.iceServers) || []).forEach(server => {\n                    delete server.credential;\n                });\n\n                if (isFirefox) {\n                    config.browserType = 'moz';\n                } else {\n                    config.browserType = 'webkit';\n                }\n\n                sendStatsEntry('create', id, config);\n\n                pc.__dtlsTransport = null;\n\n                // TODO: do we want to log constraints here? They are chrome-proprietary.\n                // eslint-disable-next-line max-len\n                // http://stackoverflow.com/questions/31003928/what-do-each-of-these-experimental-goog-rtcpeerconnectionconstraints-do\n                sendStatsEntry('constraints', id, constraints);\n\n                pc.addEventListener('icecandidate', e => {\n                    sendStatsEntry('onicecandidate', id, e.candidate);\n                });\n                pc.addEventListener('addstream', e => {\n                    sendStatsEntry(\n                        'onaddstream',\n                        id,\n                        `${e.stream.id} ${e.stream.getTracks().map(t => `${t.kind}:${t.id}`)}`\n                    );\n                });\n                pc.addEventListener('track', e => {\n                    sendStatsEntry(\n                        'ontrack',\n                        id,\n                        `${e.track.kind}:${e.track.id} ${e.streams.map(stream => `stream:${stream.id}`)}`\n                    );\n                });\n                pc.addEventListener('removestream', e => {\n                    sendStatsEntry(\n                        'onremovestream',\n                        id,\n                        `${e.stream.id} ${e.stream.getTracks().map(t => `${t.kind}:${t.id}`)}`\n                    );\n                });\n                pc.addEventListener('signalingstatechange', () => {\n                    sendStatsEntry('onsignalingstatechange', id, pc.signalingState);\n                });\n                pc.addEventListener('iceconnectionstatechange', () => {\n                    const { iceConnectionState } = pc;\n\n                    sendStatsEntry('oniceconnectionstatechange', id, iceConnectionState);\n                    eventCallback?.({\n                        type: PC_ICE_CON_STATE_CHANGE,\n                        body: {\n                            pcId: id,\n                            isP2P,\n                            state: iceConnectionState\n                        }\n                    });\n                });\n                pc.addEventListener('icegatheringstatechange', () => {\n                    sendStatsEntry('onicegatheringstatechange', id, pc.iceGatheringState);\n                });\n                pc.addEventListener('connectionstatechange', () => {\n                    const { connectionState } = pc;\n\n                    sendStatsEntry('onconnectionstatechange', id, pc.connectionState);\n                    eventCallback?.({\n                        type: PC_CON_STATE_CHANGE,\n                        body: {\n                            pcId: id,\n                            isP2P,\n                            state: connectionState\n                        }\n                    });\n                });\n                pc.addEventListener('negotiationneeded', () => {\n                    sendStatsEntry('onnegotiationneeded', id, undefined);\n                });\n                pc.addEventListener('datachannel', event => {\n                    sendStatsEntry('ondatachannel', id, [ event.channel.id, event.channel.label ]);\n                });\n\n                let prev = {};\n\n                const getStats = function() {\n                    if (isFirefox || isWebKitBased || isReactNative || ((isChromiumBased && !useLegacy))) {\n                        pc.getStats(null).then(res => {\n                            const now = map2obj(res);\n                            const base = JSON.parse(JSON.stringify(now)); // our new prev\n\n                            sendStatsEntry('getstats', id, deltaCompression(prev, now));\n                            prev = base;\n                        });\n                    } else if (isChromiumBased) {\n                        // for chromium based env we have the option of using the chrome getstats api via the\n                        // useLegacy flag.\n                        pc.getStats(res => {\n                            const now = mangleChromeStats(pc, res);\n                            const base = JSON.parse(JSON.stringify(now)); // our new prev\n\n                            sendStatsEntry('getstats', id, deltaCompression(prev, now));\n                            prev = base;\n                        });\n                    }\n\n                    // If the current env doesn't support any getstats call do nothing.\n                };\n\n                // TODO: do we want one big interval and all peerconnections\n                //    queried in that or one setInterval per PC?\n                //    we have to collect results anyway so...\n                if (pollInterval) {\n                    const interval = window.setInterval(() => {\n                        if (pc.signalingState === 'closed' || pc.iceConnectionState === 'closed') {\n                            window.clearInterval(interval);\n\n                            return;\n                        }\n                        getStats();\n                    }, pollInterval);\n                }\n\n                pc.addEventListener('connectionstatechange', () => {\n                    if ([ 'connected', 'failed' ].includes(pc.connectionState)) {\n                        getStats();\n                    }\n                });\n\n                return pc;\n            } catch (error) {\n                // If something went wrong, return a normal PeerConnection\n                console.error('RTCStats PeerConnection bind failed: ', error);\n\n                return new OrigPeerConnection(origConfig, constraints);\n            }\n        };\n\n        [ 'createDataChannel', 'close' ].forEach(method => {\n            const nativeMethod = OrigPeerConnection.prototype[method];\n\n            if (nativeMethod) {\n                OrigPeerConnection.prototype[method] = function() {\n                    try {\n                        sendStatsEntry(method, this.__rtcStatsId, arguments);\n                    } catch (error) {\n                        console.error(`RTCStats ${method} bind failed: `, error);\n                    }\n\n                    return nativeMethod.apply(this, arguments);\n                };\n            }\n        });\n\n        [ 'addStream', 'removeStream' ].forEach(method => {\n            const nativeMethod = OrigPeerConnection.prototype[method];\n\n            if (nativeMethod) {\n                OrigPeerConnection.prototype[method] = function() {\n                    try {\n                        const stream = arguments[0];\n                        const streamInfo = stream\n                            .getTracks()\n                            .map(t => `${t.kind}:${t.id}`)\n                            .join(',');\n\n                        sendStatsEntry(method, this.__rtcStatsId, `${stream.id} ${streamInfo}`);\n                    } catch (error) {\n                        console.error(`RTCStats ${method} bind failed: `, error);\n                    }\n\n                    return nativeMethod.apply(this, arguments);\n                };\n            }\n        });\n\n        [ 'addTrack' ].forEach(method => {\n            const nativeMethod = OrigPeerConnection.prototype[method];\n\n            if (nativeMethod) {\n                OrigPeerConnection.prototype[method] = function() {\n                    try {\n                        const track = arguments[0];\n                        const streams = [].slice.call(arguments, 1);\n\n                        sendStatsEntry(\n                            method,\n                            this.__rtcStatsId,\n                            `${track.kind}:${track.id} ${streams.map(s => `stream:${s.id}`).join(';') || '-'}`\n                        );\n                    } catch (error) {\n                        console.error(`RTCStats ${method} bind failed: `, error);\n                    }\n\n                    return nativeMethod.apply(this, arguments);\n                };\n            }\n        });\n\n        [ 'removeTrack' ].forEach(method => {\n            const nativeMethod = OrigPeerConnection.prototype[method];\n\n            if (nativeMethod) {\n                OrigPeerConnection.prototype[method] = function() {\n                    try {\n                        const track = arguments[0].track;\n\n                        sendStatsEntry(method, this.__rtcStatsId, track ? `${track.kind}:${track.id}` : 'null');\n                    } catch (error) {\n                        console.error(`RTCStats ${method} bind failed: `, error);\n                    }\n\n                    return nativeMethod.apply(this, arguments);\n                };\n            }\n        });\n\n        [ 'addTransceiver' ].forEach(method => {\n            const nativeMethod = OrigPeerConnection.prototype[method];\n\n            if (nativeMethod) {\n                OrigPeerConnection.prototype[method] = function() {\n                    try {\n                        const trackOrKind = arguments[0];\n                        let opts;\n\n                        if (typeof trackOrKind === 'string') {\n\n                            opts = trackOrKind;\n                        } else {\n                            opts = `${trackOrKind.kind}:${trackOrKind.id}`;\n                        }\n                        if (arguments.length === 2 && typeof arguments[1] === 'object') {\n                            opts += ` ${JSON.stringify(arguments[1])}`;\n                        }\n\n                        sendStatsEntry(method, this.__rtcStatsId, opts);\n                    } catch (error) {\n                        console.error(`RTCStats ${method} bind failed: `, error);\n                    }\n\n                    return nativeMethod.apply(this, arguments);\n                };\n            }\n        });\n\n        [ 'createOffer', 'createAnswer' ].forEach(method => {\n            const nativeMethod = OrigPeerConnection.prototype[method];\n\n            if (nativeMethod) {\n                OrigPeerConnection.prototype[method] = function() {\n                    // The logic here extracts the arguments and establishes if the API\n                    // is callback or Promise based.\n                    const rtcStatsId = this.__rtcStatsId;\n                    const args = arguments;\n                    let opts;\n\n                    if (arguments.length === 1 && typeof arguments[0] === 'object') {\n                        opts = arguments[0];\n                    } else if (arguments.length === 3 && typeof arguments[2] === 'object') {\n                        opts = arguments[2];\n                    }\n\n                    // We can only put a \"barrier\" at this point because the above logic is\n                    // necessary in all cases, if something fails there we can't just bypass it.\n                    try {\n                        sendStatsEntry(method, this.__rtcStatsId, opts);\n                    } catch (error) {\n                        console.error(`RTCStats ${method} bind failed: `, error);\n                    }\n\n                    return nativeMethod.apply(this, opts ? [ opts ] : undefined).then(\n                        description => {\n                            try {\n\n                                const data = sendSdp ? description : '';\n\n                                sendStatsEntry(`${method}OnSuccess`, rtcStatsId, data);\n                            } catch (error) {\n                                console.error(`RTCStats ${method} promise success bind failed: `, error);\n                            }\n\n                            // We can't safely bypass this part of logic because it's necessary for Proxying this\n                            // request. It determines weather the call is callback or promise based.\n                            if (args.length > 0 && typeof args[0] === 'function') {\n                                args[0].apply(null, [ description ]);\n\n                                return undefined;\n                            }\n\n                            return description;\n                        },\n                        err => {\n                            try {\n                                sendStatsEntry(`${method}OnFailure`, rtcStatsId, err.toString());\n                            } catch (error) {\n                                console.error(`RTCStats ${method} promise failure bind failed: `, error);\n                            }\n\n                            // We can't safely bypass this part of logic because it's necessary for\n                            // Proxying this request. It determines weather the call is callback or promise based.\n                            if (args.length > 1 && typeof args[1] === 'function') {\n                                args[1].apply(null, [ err ]);\n\n                                return;\n                            }\n                            throw err;\n                        }\n                    );\n                };\n            }\n        });\n\n        [ 'setLocalDescription', 'setRemoteDescription', 'addIceCandidate' ].forEach(method => {\n            const nativeMethod = OrigPeerConnection.prototype[method];\n\n            if (nativeMethod) {\n                OrigPeerConnection.prototype[method] = function() {\n                    const rtcStatsId = this.__rtcStatsId;\n                    const args = arguments;\n\n                    try {\n                        const data = sendSdp ? args[0] : '';\n\n                        sendStatsEntry(method, this.__rtcStatsId, data);\n                    } catch (error) {\n                        console.error(`RTCStats ${method} bind failed: `, error);\n                    }\n\n                    return nativeMethod.apply(this, [ args[0] ]).then(\n                        () => {\n                            try {\n                                sendStatsEntry(`${method}OnSuccess`, rtcStatsId, undefined);\n                            } catch (error) {\n                                console.error(`RTCStats ${method} promise success bind failed: `, error);\n                            }\n\n                            if (!this.__dtlsTransport && method.endsWith('Description') && !isReactNative) {\n                                this.getSenders().forEach(sender => {\n                                    if (!this.__dtlsTransport && sender.transport) {\n                                        this.__dtlsTransport = sender.transport;\n\n                                        sender.transport.addEventListener('error', error => {\n                                            sendStatsEntry('ondtlserror', rtcStatsId, error);\n                                        });\n\n                                        sender.transport.addEventListener('statechange', () => {\n                                            const newstate = sender.transport.state;\n\n                                            sendStatsEntry('ondtlsstatechange', rtcStatsId, newstate);\n                                        });\n                                    }\n                                });\n                            }\n\n                            // We can't safely bypass this part of logic because it's necessary for\n                            // Proxying this request. It determines weather the call is callback or promise based.\n                            if (args.length >= 2 && typeof args[1] === 'function') {\n                                args[1].apply(null, []);\n\n                                return undefined;\n                            }\n\n                            return undefined;\n                        },\n                        err => {\n                            try {\n                                sendStatsEntry(`${method}OnFailure`, rtcStatsId, err.toString());\n                            } catch (error) {\n                                console.error(`RTCStats ${method} promise failure bind failed: `, error);\n                            }\n\n                            // We can't safely bypass this part of logic because it's necessary for\n                            // Proxying this request. It determines weather the call is callback or promise based\n                            if (args.length >= 3 && typeof args[2] === 'function') {\n                                args[2].apply(null, [ err ]);\n\n                                return undefined;\n                            }\n                            throw err;\n                        }\n                    );\n                };\n            }\n        });\n\n        // wrap static methods. Currently just generateCertificate.\n        if (OrigPeerConnection.generateCertificate) {\n            Object.defineProperty(peerconnection, 'generateCertificate', {\n                get() {\n                    return arguments.length\n                        ? OrigPeerConnection.generateCertificate.apply(null, arguments)\n                        : OrigPeerConnection.generateCertificate;\n                }\n            });\n        }\n        window[`${prefix}RTCPeerConnection`] = peerconnection;\n        window[`${prefix}RTCPeerConnection`].prototype = OrigPeerConnection.prototype;\n    });\n\n    // getUserMedia wrappers\n    prefixesToWrap.forEach(prefix => {\n        const name = prefix + (prefix.length ? 'GetUserMedia' : 'getUserMedia');\n\n        if (!navigator[name]) {\n            return;\n        }\n        const origGetUserMedia = navigator[name].bind(navigator);\n        const gum = function() {\n            try {\n                sendStatsEntry('getUserMedia', null, arguments[0]);\n            } catch (error) {\n                console.error('RTCStats getUserMedia bind failed: ', error);\n            }\n\n            const cb = arguments[1];\n            const eb = arguments[2];\n\n            origGetUserMedia(\n                arguments[0],\n                stream => {\n                    try {\n                        sendStatsEntry('getUserMediaOnSuccess', null, dumpStream(stream));\n                    } catch (error) {\n                        console.error('RTCStats getUserMediaOnSuccess bind failed: ', error);\n                    }\n\n                    // we log the stream id, track ids and tracks readystate since that is ended GUM fails\n                    // to acquire the cam (in chrome)\n                    if (cb) {\n                        cb(stream);\n                    }\n                },\n                err => {\n                    try {\n                        sendStatsEntry('getUserMediaOnFailure', null, err.name);\n                    } catch (error) {\n                        console.error('RTCStats getUserMediaOnFailure bind failed: ', error);\n                    }\n\n                    if (eb) {\n                        eb(err);\n                    }\n                }\n            );\n        };\n\n        navigator[name] = gum.bind(navigator);\n    });\n\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n        const origGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);\n        const gum = function() {\n            try {\n                sendStatsEntry('navigator.mediaDevices.getUserMedia', null, arguments[0]);\n            } catch (error) {\n                console.error('RTCStats navigator.mediaDevices.getUserMedia bind failed: ', error);\n            }\n\n            return origGetUserMedia.apply(navigator.mediaDevices, arguments).then(\n                stream => {\n                    try {\n                        sendStatsEntry('navigator.mediaDevices.getUserMediaOnSuccess', null, dumpStream(stream));\n                    } catch (error) {\n                        console.error('RTCStats navigator.mediaDevices.getUserMediaOnSuccess bind failed: ', error);\n                    }\n\n                    return stream;\n                },\n                err => {\n                    try {\n                        sendStatsEntry('navigator.mediaDevices.getUserMediaOnFailure', null, err.name);\n                    } catch (error) {\n                        console.error('RTCStats navigator.mediaDevices.getUserMediaOnFailure bind failed: ', error);\n                    }\n\n                    return Promise.reject(err);\n                }\n            );\n        };\n\n        navigator.mediaDevices.getUserMedia = gum.bind(navigator.mediaDevices);\n    }\n\n    // getDisplayMedia\n    if (navigator.mediaDevices && navigator.mediaDevices.getDisplayMedia) {\n        const origGetDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        const gdm = function() {\n            try {\n                sendStatsEntry('navigator.mediaDevices.getDisplayMedia', null, arguments[0]);\n            } catch (error) {\n                console.error('RTCStats navigator.mediaDevices.getDisplayMedia bind failed: ', error);\n            }\n\n            return origGetDisplayMedia.apply(navigator.mediaDevices, arguments).then(\n                stream => {\n                    try {\n                        sendStatsEntry('navigator.mediaDevices.getDisplayMediaOnSuccess', null, dumpStream(stream));\n                    } catch (error) {\n                        console.error('RTCStats navigator.mediaDevices.getDisplayMediaOnSuccess bind failed: ', error);\n                    }\n\n                    return stream;\n                },\n                err => {\n                    try {\n                        sendStatsEntry('navigator.mediaDevices.getDisplayMediaOnFailure', null, err.name);\n                    } catch (error) {\n                        console.error('RTCStats navigator.mediaDevices.getDisplayMediaOnFailure bind failed: ', error);\n                    }\n\n                    return Promise.reject(err);\n                }\n            );\n        };\n\n        navigator.mediaDevices.getDisplayMedia = gdm.bind(navigator.mediaDevices);\n    }\n}\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","export const PROTOCOL_ITERATION = '3.1';\n\n// the maximum number of ms allowed for the client to try reconnect\nexport const MAX_RECONNECT_TIME = 600000;\nexport const messageTypes = {\n    SequenceNumber: 'sn'\n};\nexport const CONFERENCE_LEAVE_CODE = 3001;\nexport const DUMP_ERROR_CODE = 3002;\nexport const CUSTOM_ERROR_CODES = [ CONFERENCE_LEAVE_CODE, DUMP_ERROR_CODE ];\n\n// The limit chosen for the buffer so that memory overflows do not happen.\nexport const BUFFER_LIMIT = 1000;\n","// obfuscate ip addresses which should not be stored long-term.\n\nimport SDPUtils from 'sdp';\n\n/**\n * obfuscate ip, keeping address family intact.\n * @param {*} ip\n */\nfunction maskIP(ip) {\n    if (ip.indexOf('[') === 0 || ip.indexOf(':') !== -1) {\n        // IPv6\n        // obfuscate last five bits like Chrome does.\n        return `${ip.split(':').slice(0, 3)\n            .join(':')}:x:x:x:x:x`;\n    }\n\n    const parts = ip.split('.');\n\n    if (parts.length === 4) {\n        parts[3] = 'x';\n\n        return parts.join('.');\n    }\n\n    return ip;\n}\n\n/**\n * Returns a simple IP mask.\n *\n * @returns masked IP.\n */\nfunction obfuscateIP(ip) {\n    if (ip.indexOf('[') === 0 || ip.indexOf(':') !== -1) {\n\n        return 'x:x:x:x:x:x:x:x';\n    }\n\n    return 'x.x.x.x';\n}\n\n/**\n * obfuscate the ip in ice candidates. Does NOT obfuscate the ip of the TURN server to allow\n * selecting/grouping sessions by TURN server.\n * @param {*} candidate\n */\nfunction obfuscateCandidate(candidate) {\n    const cand = SDPUtils.parseCandidate(candidate);\n\n    if (!(cand.type === 'relay' || cand.protocol === 'ssltcp')) {\n        cand.ip = obfuscateIP(cand.ip);\n        cand.address = obfuscateIP(cand.address);\n    }\n    if (cand.relatedAddress) {\n        cand.relatedAddress = obfuscateIP(cand.relatedAddress);\n    }\n\n    return SDPUtils.writeCandidate(cand);\n}\n\n/**\n *\n * @param {*} sdp\n */\nfunction obfuscateSDP(sdp) {\n    const lines = SDPUtils.splitLines(sdp);\n\n    return `${lines\n        .map(line => {\n            // obfuscate a=candidate, c= and a=rtcp\n            if (line.indexOf('a=candidate:') === 0) {\n                return `a=${obfuscateCandidate(line)}`;\n            } else if (line.indexOf('c=') === 0) {\n                return 'c=IN IP4 0.0.0.0';\n            } else if (line.indexOf('a=rtcp:') === 0) {\n                return 'a=rtcp:9 IN IP4 0.0.0.0';\n            }\n\n            return line;\n        })\n        .join('\\r\\n')\n        .trim()}\\r\\n`;\n}\n\n/**\n *\n * @param {*} stats\n */\nfunction obfuscateStats(stats) {\n    Object.keys(stats).forEach(id => {\n        const report = stats[id];\n\n        // TODO Safari and Firefox seem to be sending empty statistic files\n        if (!report) {\n            return;\n        }\n\n        // obfuscate different variants of how the ip is contained in different stats / versions.\n        [ 'ipAddress', 'ip', 'address' ].forEach(address => {\n            if (report[address] && report.candidateType !== 'relay') {\n                report[address] = obfuscateIP(report[address]);\n            }\n        });\n        [ 'googLocalAddress', 'googRemoteAddress' ].forEach(name => {\n            // contains both address and port\n            let port;\n            let ip;\n            let splitBy;\n\n            // These fields also have the port, separate it first and the obfuscate.\n            if (report[name]) {\n                // IPv6 has the following format [1fff:0:a88:85a3::ac1f]:8001\n                // IPv5 has the following format 127.0.0.1:8001\n                if (report[name][0] === '[') {\n                    splitBy = ']:';\n                } else {\n                    splitBy = ':';\n                }\n\n                [ ip, port ] = report[name].split(splitBy);\n\n                report[name] = `${obfuscateIP(ip)}:${port}`;\n            }\n        });\n    });\n}\n\n/**\n * Obfuscates the ip addresses from webrtc statistics.\n * NOTE. The statistics spec is subject to change, consider evaluating which statistics contain IP addresses\n * before usage.\n *\n * @param {*} data\n */\nexport default function(data) {\n    switch (data[0]) {\n    case 'addIceCandidate':\n    case 'onicecandidate':\n        if (data[2] && data[2].candidate) {\n\n            const jsonRepr = data[2];\n\n            jsonRepr.candidate = obfuscateCandidate(jsonRepr.candidate);\n            data[2] = jsonRepr;\n        }\n        break;\n    case 'setLocalDescription':\n    case 'setRemoteDescription':\n    case 'createOfferOnSuccess':\n    case 'createAnswerOnSuccess':\n        if (data[2] && data[2].sdp) {\n            data[2].sdp = obfuscateSDP(data[2].sdp);\n        }\n        break;\n    case 'getStats':\n    case 'getstats':\n        if (data[2]) {\n            obfuscateStats(data[2]);\n        }\n        break;\n    default:\n        break;\n    }\n}\n","/* eslint-disable prefer-rest-params */\nimport { v4 as uuidv4 } from 'uuid';\n\nimport {\n    PROTOCOL_ITERATION,\n    MAX_RECONNECT_TIME,\n    messageTypes,\n    CONFERENCE_LEAVE_CODE,\n    BUFFER_LIMIT,\n    CUSTOM_ERROR_CODES,\n    DUMP_ERROR_CODE\n} from './constants';\nimport obfuscator from './obfuscator';\n\n/**\n * Function that returns the timeout time for the reconnect based on number of attempts.\n *\n * @param {*} reconnectAttempts\n * @returns\n */\nfunction getTimeout(reconnectAttempts) {\n    return ((2 ** reconnectAttempts) * 1000) + Math.floor(Math.random() * 10000);\n}\n\n/**\n *\n * @param {*} endpoint\n * @param {*} onCloseCallback\n * @param {*} pingInterval\n */\nexport default function({ endpoint, meetingFqn, onCloseCallback, useLegacy, obfuscate = true, pingInterval = 30000 }) {\n    // Parent stats session id, used when breakout rooms occur to keep track of the initial stats session id.\n    let parentStatsSessionId;\n\n    // Buffer for storing stats if there is no connection to the server.\n    let buffer = [];\n    let statsSessionId = uuidv4();\n    let connection;\n    let keepAliveInterval;\n\n    // the number of ms spent trying to reconnect to the server.\n    let reconnectSpentTime = 0;\n\n    // flag indicating if data can be sent to the server.\n    let canSendMessage = false;\n\n    // The sequence number of the last stat.\n    let sequenceNumber = 1;\n\n    // Timeout time for the reconnect protocol.\n    let reconnectTimeout;\n\n    // We maintain support for legacy chrome rtcstats just in case we need some critical statistic\n    // only obtainable from that format, ideally we'd remove this in the future.\n    const protocolVersion = useLegacy ? `${PROTOCOL_ITERATION}_LEGACY` : `${PROTOCOL_ITERATION}_STANDARD`;\n\n    // Function setting the timestamp and the sequence number of the entry.\n    const setTransportParams = data => {\n        data.push(new Date().getTime());\n        data.push(sequenceNumber++);\n    };\n\n    // Function sending the message to the server if there is a connection.\n    const sendMessage = msg => {\n        // It creates a copy of the message so that the message from the buffer have the data attribute unstringified\n        const copyMsg = Object.assign({}, msg);\n\n        if (copyMsg.type !== 'identity' && copyMsg.data) {\n            copyMsg.data = JSON.stringify(copyMsg.data);\n        }\n        if (connection && (connection.readyState === WebSocket.OPEN) && canSendMessage) {\n            connection.send(JSON.stringify(copyMsg));\n        }\n    };\n\n    const trace = function(msg) {\n        sendMessage(msg);\n        if (buffer.length < BUFFER_LIMIT && msg.data) {\n            buffer.push(msg);\n        }\n    };\n\n    trace.isConnected = function() {\n        if (!connection) {\n            return false;\n        }\n        const { readyState } = connection;\n\n        return readyState === WebSocket.OPEN;\n    };\n\n    trace.isClosed = function() {\n        if (!connection) {\n            return true;\n        }\n\n        const { readyState } = connection;\n\n        return readyState === WebSocket.CLOSED;\n    };\n\n    trace.identity = function(...data) {\n        setTransportParams(data);\n\n        if (parentStatsSessionId) {\n            data[2].parentStatsSessionId = parentStatsSessionId;\n        }\n\n        const identityMsg = {\n            statsSessionId,\n            type: 'identity',\n            data\n        };\n\n        trace(identityMsg);\n    };\n\n    trace.statsEntry = function(...data) {\n        let myData = data;\n\n        if (obfuscate) {\n            switch (data[0]) {\n            case 'addIceCandidate':\n            case 'onicecandidate':\n            case 'setLocalDescription':\n            case 'setRemoteDescription':\n                // These functions need to original values to work with\n                // so we need a deep copy to do the obfuscation on.\n                myData = JSON.parse(JSON.stringify(myData));\n                break;\n            default:\n                break;\n            }\n\n            // Obfuscate the ips is required.\n            obfuscator(myData);\n        }\n        setTransportParams(myData);\n\n        const statsEntryMsg = {\n            statsSessionId,\n            type: 'stats-entry',\n            data: myData\n        };\n\n        trace(statsEntryMsg);\n    };\n\n    trace.keepAlive = function() {\n\n        const keepaliveMsg = {\n            statsSessionId,\n            type: 'keepalive'\n        };\n\n        trace(keepaliveMsg);\n    };\n\n    trace.close = function() {\n        connection && connection.close(CONFERENCE_LEAVE_CODE);\n    };\n\n    trace.connect = function(isBreakoutRoom, isReconnect = false) {\n        if (isBreakoutRoom && !parentStatsSessionId) {\n            parentStatsSessionId = statsSessionId;\n        }\n        if (parentStatsSessionId) {\n            statsSessionId = uuidv4();\n            buffer.forEach(entry => {\n                entry.statsSessionId = statsSessionId;\n            });\n        }\n        if (connection) {\n            connection.close();\n        }\n\n        connection = new WebSocket(\n            `${endpoint}/${meetingFqn}?statsSessionId=${statsSessionId}&isReconnect=${isReconnect}`,\n            protocolVersion,\n            { headers: { 'User-Agent': navigator.userAgent } }\n        );\n\n        connection.onclose = function(closeEvent) {\n            keepAliveInterval && clearInterval(keepAliveInterval);\n            canSendMessage && (canSendMessage = false);\n\n            onCloseCallback({ code: closeEvent.code,\n                reason: closeEvent.reason });\n\n            // Do not try to reconnect if connection was closed intentionally.\n            if (CUSTOM_ERROR_CODES.includes(closeEvent.code)) {\n                return;\n            }\n\n            if (reconnectSpentTime < MAX_RECONNECT_TIME) {\n                const reconnectTimeoutTimeCandidate = getTimeout(reconnectSpentTime);\n                const reconnectTimeoutTime = reconnectSpentTime + reconnectTimeoutTimeCandidate < MAX_RECONNECT_TIME\n                    ? reconnectTimeoutTimeCandidate\n                    : MAX_RECONNECT_TIME - reconnectSpentTime;\n\n                reconnectSpentTime += reconnectTimeoutTime;\n                reconnectTimeout = setTimeout(() => trace.connect(isBreakoutRoom, true), reconnectTimeoutTime);\n            }\n        };\n\n        connection.onopen = function() {\n            keepAliveInterval = setInterval(trace.keepAlive, pingInterval);\n        };\n\n        connection.onmessage = async function(msg) {\n            const { type, body } = JSON.parse(msg.data);\n\n            // if the server sends back the last sequence number that it has been received.\n            if (type === messageTypes.SequenceNumber) {\n                const { value, state } = body;\n\n                // if there are entries in the buffer\n                if (buffer.length) {\n                    const firstSN = buffer[0].data[4];\n                    const lastSN = buffer[buffer.length - 1].data[4];\n\n                    // messages would not be in order, some messages might be missing\n                    if (value < firstSN - 1 && value > lastSN) {\n                        connection && connection.close(DUMP_ERROR_CODE);\n\n                        return;\n                    }\n\n                    const lastReceivedSNIndex = buffer.findIndex(statsEntry => statsEntry.data[4] === value);\n\n                    buffer = buffer.slice(lastReceivedSNIndex + 1);\n                }\n\n                // this happens when the connection is established\n                if (state === 'initial') {\n                    reconnectTimeout && clearTimeout(reconnectTimeout);\n                    reconnectSpentTime = 0;\n                    canSendMessage = true;\n                    for (let i = 0; i < buffer.length; i++) {\n                        sendMessage(buffer[i]);\n                    }\n                }\n            }\n        };\n    };\n\n    return trace;\n}\n","import EventEmitter from 'events';\n\n/**\n * Dummy implementation of Storage interface.\n */\nclass DummyLocalStorage extends EventEmitter {\n\n    /**\n     * The object used for storage.\n     */\n    _storage = {};\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage = {};\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return Object.keys(this._storage).length;\n    }\n\n    /**\n     * Will return that key's value associated to the passed key name.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {*} - The key value.\n     */\n    getItem(keyName) {\n        return this._storage[keyName];\n    }\n\n    /**\n     * When passed a key name and value, will add that key to the storage,\n     * or update that key's value if it already exists.\n     *\n     * @param {string} keyName - The key name.\n     * @param {*} keyValue - The key value.\n     * @returns {void}\n     */\n    setItem(keyName, keyValue) {\n        this._storage[keyName] = keyValue;\n    }\n\n    /**\n     * When passed a key name, will remove that key from the storage.\n     *\n     * @param {string} keyName - The key name.\n     * @returns {void}\n     */\n    removeItem(keyName) {\n        delete this._storage[keyName];\n    }\n\n    /**\n     * When passed a number n, this method will return the name of the nth key in the storage.\n     *\n     * @param {number} idx - The index of the key.\n     * @returns {string} - The nth key name.\n     */\n    key(n) {\n        const keys = Object.keys(this._storage);\n\n        if (keys.length <= n) {\n            return undefined;\n        }\n\n        return keys[n];\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @param {Array<string>} ignore - Array with keys from the local storage to be ignored.\n     * @returns {string} - The serialized content.\n     */\n    serialize(ignore = []) {\n        if (ignore.length === 0) {\n            return JSON.stringify(this._storage);\n        }\n\n        const storageCopy = { ...this._storage };\n\n        ignore.forEach(key => {\n            delete storageCopy[key];\n        });\n\n        return JSON.stringify(storageCopy);\n    }\n}\n\n/**\n * Wrapper class for browser's local storage object.\n */\nclass JitsiLocalStorage extends EventEmitter {\n    /**\n     * @constructor\n     * @param {Storage} storage browser's local storage object.\n     */\n    constructor() {\n        super();\n\n        try {\n            this._storage = window.localStorage;\n            this._localStorageDisabled = false;\n        } catch (ignore) {\n            // localStorage throws an exception.\n        }\n\n        if (!this._storage) { // Handles the case when window.localStorage is undefined or throws an exception.\n            console.warn('Local storage is disabled.');\n            this._storage = new DummyLocalStorage();\n            this._localStorageDisabled = true;\n        }\n    }\n\n    /**\n     * Returns true if window.localStorage is disabled and false otherwise.\n     *\n     * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\n     */\n    isLocalStorageDisabled() {\n        return this._localStorageDisabled;\n    }\n\n    /**\n     * Switch between window.localStorage and DummyLocalStorage.\n     */\n    setLocalStorageDisabled(value) {\n        this._localStorageDisabled = value;\n\n        try {\n            this._storage = value ? new DummyLocalStorage() : window.localStorage;\n        } catch (ignore) {\n            // localStorage throws an exception.\n        }\n\n        if (!this._storage) {\n            this._storage = new DummyLocalStorage();\n        }\n    }\n\n    /**\n     * Empties all keys out of the storage.\n     *\n     * @returns {void}\n     */\n    clear() {\n        this._storage.clear();\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the number of data items stored in the Storage object.\n     *\n     * @returns {number} - The number of data items stored in the Storage object.\n     */\n    get length() {\n        return this._storage.length;\n    }\n\n    /**\n     * Returns that passed key's value.\n     * @param {string} keyName the name of the key you want to retrieve\n     * the value of.\n     * @returns {String|null} the value of the key. If the key does not exist,\n     * null is returned.\n     */\n    getItem(keyName) {\n        return this._storage.getItem(keyName);\n    }\n\n    /**\n     * Adds a key to the storage, or update key's value if it already exists.\n     * @param {string} keyName - the name of the key you want to create/update.\n     * @param {string} keyValue - the value you want to give the key you are\n     * creating/updating.\n     * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\n     */\n    setItem(keyName, keyValue, dontEmitChangedEvent = false) {\n        this._storage.setItem(keyName, keyValue);\n\n        if (!dontEmitChangedEvent) {\n            this.emit('changed');\n        }\n    }\n\n    /**\n     * Remove a key from the storage.\n     * @param {string} keyName the name of the key you want to remove.\n     */\n    removeItem(keyName) {\n        this._storage.removeItem(keyName);\n        this.emit('changed');\n    }\n\n    /**\n     * Returns the name of the nth key in the list, or null if n is greater\n     * than or equal to the number of key/value pairs in the object.\n     *\n     * @param {number} i - The index of the key in the list.\n     * @returns {string}\n     */\n    key(i) {\n        return this._storage.key(i);\n    }\n\n    /**\n     * Serializes the content of the storage.\n     *\n     * @param {Array<string>} ignore - Array with keys from the local storage to be ignored.\n     * @returns {string} - The serialized content.\n     */\n    serialize(ignore = []) {\n        if (this.isLocalStorageDisabled()) {\n            return this._storage.serialize(ignore);\n        }\n\n        const length = this._storage.length;\n        const localStorageContent = {};\n\n        for (let i = 0; i < length; i++) {\n            const key = this._storage.key(i);\n\n            if (!ignore.includes(key)) {\n                localStorageContent[key] = this._storage.getItem(key);\n            }\n        }\n\n        return JSON.stringify(localStorageContent);\n    }\n}\n\nexport const jitsiLocalStorage = new JitsiLocalStorage();\n","import { randomElement, randomAlphanumStr } from './RandomUtil';\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names: string[] = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername(): string {\n    const name = randomElement(names);\n    const suffix = randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nexport { generateUsername };\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\nimport { getLogger } from '@jitsi/logger';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { generateUsername } from '../util/UsernameGenerator';\n\nconst logger = getLogger('modules/settings/Settings');\n\nlet _callStatsUserName: string | null = null;\n\nlet _machineId: string | null = null;\n\n/**\n *\n */\nexport interface ISettings {\n    _storage: Storage;\n    readonly callStatsUserName: string;\n    init: (externalStorage?: Storage) => void;\n    readonly machineId: string;\n    sessionId: string;\n}\n\nconst Settings: ISettings = {\n    /**\n     * The storage used to store the settings.\n     */\n    _storage: jitsiLocalStorage,\n\n    /**\n     * Initializes the Settings class.\n     *\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\n     * used for storing data instead of jitsiLocalStorage if specified.\n     */\n    init(externalStorage?: Storage): void {\n        this._storage = externalStorage || jitsiLocalStorage;\n    },\n\n    /**\n     * Returns the ID to use for the purposes of stats, saved in localstorage as \"callStatsUserName\".\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName(): string {\n        if (!_callStatsUserName) {\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\n            if (!_callStatsUserName) {\n                _callStatsUserName = _generateStatsId();\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId(): string {\n        if (!_machineId) {\n            const amDid = this._storage.getItem('billingId');\n\n            _machineId = amDid || this._storage.getItem('jitsiMeetId');\n\n            if (amDid) {\n                this._storage.setItem('jitsiMeetId', amDid);\n            } else if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                this._storage.setItem('jitsiMeetId', _machineId);\n            }\n        }\n\n        return _machineId!;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId(): string {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        return this._storage.getItem('sessionId') || '';\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId: string) {\n        if (sessionId) {\n            this._storage.setItem('sessionId', sessionId);\n        } else {\n            this._storage.removeItem('sessionId');\n        }\n    }\n};\n\n/**\n * Generate a random ID to be used for statistics.\n * @returns {string} the random ID\n */\nfunction _generateStatsId() {\n    const username = generateUsername();\n\n    logger.info('generated stats id', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId(): string {\n    const jitsiMeetId = uuidv4().replaceAll('-', '');\n\n    logger.info('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\nexport default Settings;\n","import { EventEmitter as NodeEventEmitter } from 'events';\n\nexport type EventListener = (...args: any[]) => void;\n\n/**\n * The class creates our own EventEmitter instance\n */\nexport default class EventEmitter extends NodeEventEmitter {\n    public addEventListener: typeof NodeEventEmitter.prototype.addListener;\n    public removeEventListener: typeof NodeEventEmitter.prototype.removeListener;\n\n    /**\n     * Creates new instance.\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.removeListener;\n    }\n}\n","import RTCStats from './RTCStats';\n\n/**\n * The default log storage implementation.\n */\nexport default class DefaultLogStorage {\n    private rtcStats: any;\n\n    /**\n     * Creates new instance of <tt>DefaultLogStorage</tt>.\n     * @param rtcStats - The RTCStats instance.\n     */\n    constructor(rtcStats: any) {\n        this.rtcStats = rtcStats;\n    }\n\n\n    /**\n     * The DefaultLogStorage is ready when the RTCStats is ready.\n     *\n     * @returns {boolean} <tt>true</tt> when this storage is ready or\n     * <tt>false</tt> otherwise.\n     */\n    isReady() {\n        return this.rtcStats.isTraceAvailable();\n    }\n\n    /**\n     * Called by the <tt>LogCollector</tt> to store a series of log lines into\n     * batch.\n     *\n     * @param {Array<string|Object>} logEntries - An array containing strings\n     * representing log lines or aggregated lines objects.\n     * @returns {void}\n     */\n    storeLogs(logEntries: Array<string | any>) {\n        RTCStats.sendStatsEntry('logs', null, logEntries);\n    }\n}\n","/**\n * Events emitted by the RTCStats module.\n */\nexport enum RTCStatsEvents {\n\n    /**\n     * Event emitted when any PeerConnection event is triggered.\n     *\n     * @param {object} event - The PeerConnection event.\n     * @param {string} event.type - The event type.\n     * @param {object} event.body - Event body.\n     * @param {string} event.body.isP2P - PeerConnection type.\n     * @param {string} event.body.state - PeerConnection state change which triggered the event.\n     */\n    RTC_STATS_PC_EVENT = 'rtstats_pc_event',\n\n    /**\n     * Event emitted when the websocket connection to the rtcstats server is disconnected.\n     */\n    RTC_STATS_WC_DISCONNECTED = 'rtcstats_ws_disconnected'\n}\n\n// exported for backward compatibility\nexport const RTC_STATS_WC_DISCONNECTED = RTCStatsEvents.RTC_STATS_WC_DISCONNECTED;\nexport const RTC_STATS_PC_EVENT = RTCStatsEvents.RTC_STATS_PC_EVENT;\n","import Logger, { getLogger } from '@jitsi/logger';\nimport rtcstatsInit from '@jitsi/rtcstats/rtcstats';\nimport traceInit from '@jitsi/rtcstats/trace-ws';\n\nimport JitsiConference from '../../JitsiConference';\nimport JitsiConnection from '../../JitsiConnection';\nimport {\n    BEFORE_STATISTICS_DISPOSED,\n    CONFERENCE_CREATED_TIMESTAMP,\n    CONFERENCE_JOINED,\n    CONFERENCE_LEFT,\n    CONFERENCE_UNIQUE_ID_SET\n} from '../../JitsiConferenceEvents';\nimport Settings from '../settings/Settings';\nimport EventEmitter from '../util/EventEmitter';\n\nimport DefaultLogStorage from './DefaulLogStorage';\nimport { RTC_STATS_PC_EVENT, RTC_STATS_WC_DISCONNECTED } from './RTCStatsEvents';\nimport { ITraceOptions } from './interfaces';\n\nconst logger = getLogger('modules/RTCStats/RTCStats');\n\n/**\n * RTCStats Singleton that is initialized only once for the lifetime of the app, subsequent calls to init will be\n * ignored. Config and conference changes are handled by the start method.\n * RTCStats \"proxies\" WebRTC functions such as GUM and RTCPeerConnection by rewriting the global objects.\n * The proxies will then send data to the rtcstats server via the trace object.\n * The initialization procedure must be called once after lib-jitsi-meet is loaded.\n */\nclass RTCStats {\n    public events: EventEmitter = new EventEmitter();\n    public _startedWithNewConnection: boolean = true;\n    private _defaultLogCollector: any = null;\n    private _initialized: boolean = false;\n    private _trace: any = null;\n\n    isTraceAvailable() {\n        return this._trace !== null;\n    }\n\n    /**\n     * A JitsiConnection instance is created before the conference is joined, so even though\n     * we don't have any conference specific data yet, we can initialize the trace module and\n     * send any logs that might of otherwise be missed in case an error occurs between the connection\n     * and conference initialization.\n     *\n     * @param connection - The JitsiConnection instance.\n     * @returns {void}\n     */\n    startWithConnection(connection: JitsiConnection) {\n        const { options } = connection;\n        const name = options?.name ?? '';\n        const {\n            analytics: {\n                rtcstatsEndpoint: endpoint = '',\n                rtcstatsEnabled = false,\n                rtcstatsPollInterval: pollInterval = 10000,\n                rtcstatsSendSdp: sendSdp = false\n            } = {},\n        } = options;\n\n        // Even though we have options being passed to init we need to recheck it as some client (react-native)\n        // don't always re-initialize the module and could create multiple connections with different options.\n        if (!rtcstatsEnabled) return;\n\n        // If rtcstats already initialized, do nothing.\n        // Calling rtcsatsInit multiple times will cause the global objects to be rewritten multiple times,\n        // with unforeseen consequences.\n        if (!this._initialized) {\n            rtcstatsInit(\n                { statsEntry: this.sendStatsEntry.bind(this) },\n                { pollInterval,\n                    useLegacy: false,\n                    sendSdp,\n                    eventCallback: event => this.events.emit(RTC_STATS_PC_EVENT, event) }\n            );\n            this._initialized = true;\n        }\n\n        const traceOptions: ITraceOptions = {\n            endpoint,\n            meetingFqn: name,\n            isBreakoutRoom: false\n        };\n\n        // Can't be a breakout room.\n        this._connectTrace(traceOptions);\n\n        this._defaultLogCollector?.flush();\n\n        this.sendIdentity({\n            confName: name,\n            ...options\n        });\n\n        // This module is tightly tied with the ljm JitsiConnection and JitsiConference flows, technically\n        // the connection isn't associated with a conference, but we still need to have some association for\n        // data that is logged before the conference is joined.\n        // In short the flow is as follows:\n        // 1. Connection is created.\n        // 2. The trace module is initialized and connected to the rtcstats server, so data starts being sent.\n        // 3. Conference is created.\n        // 4. If the trace wasn't already initialized from the connection creation, it will be initialized again.\n        // this will take care of the cases where the connection is created and then multiple conferences are\n        // sequentially joined and left, such as breakout rooms.\n        this._startedWithNewConnection = true;\n    }\n\n    /**\n     * When a conference is about to start, we need to reset the trace module, and initialize it with the\n     * new conference's config. On a normal conference flow this wouldn't be necessary, as the whole page is\n     * reloaded, but in the case of breakout rooms or react native the js context doesn't reload, hence the\n     * RTCStats singleton and its config persists between conferences.\n     *\n     * @param conference - JitsiConference instance that's about to start.\n     * @returns {void}\n     */\n    attachToConference(conference: JitsiConference) {\n        const {\n            options: {\n                config: confConfig = {},\n                name: confName = ''\n            } = {},\n            _statsCurrentId: displayName = ''\n        } = conference;\n\n        const {\n            analytics: {\n                rtcstatsEnabled = false,\n                rtcstatsEndpoint: endpoint = ''\n            } = {}\n        } = confConfig;\n\n        // The statisticsId, statisticsDisplayName and _statsCurrentId (renamed to displayName) fields\n        // that are sent through options might be a bit confusing. Depending on the context, they could\n        // be intermixed inside ljm, for instance _statsCurrentId might refer to the email field which is stored\n        // in statisticsId or it could have the same value as callStatsUserName.\n        // The following is the mapping between the fields, and a short explanation of each:\n        // statisticsId -> email, this is only send by jitsi-meet if enableEmailInStats option is set.\n        // statisticsDisplayName -> nick, this is only send by jitsi-meet if enableDisplayNameInStats option is set.\n        // localId, this is the unique id that is used to track users throughout stats.\n        const localId = Settings?.callStatsUserName ?? '';\n\n        // The new conference config might have rtcstats disabled, so we need to check again.\n        if (!rtcstatsEnabled) {\n            return;\n        }\n\n        // If rtcstats proxy module is not initialized, do nothing.\n        if (!this._initialized) {\n            logger.error('Calling attachToConference before RTCStats proxy module is initialized.');\n\n            return;\n        }\n\n        // When the conference is joined, we need to initialize the trace module with the new conference's config.\n        // The trace module will then connect to the rtcstats server and send the identity data.\n        conference.once(CONFERENCE_JOINED, () => {\n            const isBreakoutRoom = Boolean(conference.getBreakoutRooms()?.isBreakoutRoom());\n            const endpointId = conference.myUserId();\n            const meetingUniqueId = conference.getMeetingUniqueId();\n\n            // Connect to the rtcstats server instance. Stats (data obtained from getstats) won't be send until the\n            // connect successfully initializes, however calls to GUM are recorded in an internal buffer even if not\n            // connected and sent once it is established.\n            if (!this._startedWithNewConnection) {\n                const traceOptions = {\n                    endpoint,\n                    meetingFqn: confName,\n                    isBreakoutRoom\n                };\n\n                this._connectTrace(traceOptions);\n\n                // In cases where the conference was left but the connection was not closed,\n                // logs could get cached, so we flush them as soon as we get a chance after the\n                // conference is joined.\n                this._defaultLogCollector?.flush();\n            }\n\n            const identityData = {\n                ...confConfig,\n                endpointId,\n                confName,\n                displayName,\n                meetingUniqueId,\n                isBreakoutRoom,\n                localId\n            };\n\n            this.sendIdentity(identityData);\n            // Reset the flag, so that the next conference that is joined will have the trace module initialized, such as a breakout room.\n            this._startedWithNewConnection = false;\n        });\n\n        // Note, this will only be called for normal rooms, not breakout rooms.\n        conference.once(CONFERENCE_UNIQUE_ID_SET, meetingUniqueId => {\n            this.sendIdentity({ meetingUniqueId });\n        });\n\n        conference.once(CONFERENCE_LEFT, () => {\n            this.reset();\n        });\n\n        conference.once(CONFERENCE_CREATED_TIMESTAMP, (timestamp: number) => {\n            this.sendStatsEntry('conferenceStartTimestamp', null, timestamp);\n        });\n\n        conference.once(\n            BEFORE_STATISTICS_DISPOSED,\n            () => this._defaultLogCollector?.flush()\n        );\n    }\n\n    /**\n     * Reset and connects the trace module to the s server.\n     *\n     * @param traceOptions - Options for the trace module.\n     * @returns {void}\n     */\n    _connectTrace(traceOptions: ITraceOptions) {\n\n        const traceOptionsComplete = {\n            ...traceOptions,\n            useLegacy: false,\n            onCloseCallback: event => this.events.emit(RTC_STATS_WC_DISCONNECTED, event)\n        };\n\n        const { isBreakoutRoom } = traceOptionsComplete;\n\n        this.reset();\n        this._trace = traceInit(traceOptionsComplete);\n        this._trace.connect(isBreakoutRoom);\n    }\n\n    /**\n     * Sends the identity data to the rtcstats server.\n     *\n     * @param identityData - Identity data to send.\n     * @returns {void}\n     */\n    sendIdentity(identityData) {\n        this._trace?.identity('identity', null, identityData);\n    }\n\n    /**\n     * Resets the trace module by closing the websocket and deleting the object.\n     * After reset, the rtcstats proxy module that tries to send data via `sendStatsEntry`, will no longer\n     * send any data, until the trace module is initialized again. This comes in handy on react-native\n     * where ljm doesn't get reloaded, so we need to switch the trace module between conferences.\n     *\n     * @returns {void}\n     */\n    reset() {\n        // If a trace is connected, flush the remaining logs before closing the connection,\n        // if the trace is not present and we flush the logs will be lost,\n        this._trace && this._defaultLogCollector?.flush();\n        this._trace?.close();\n        this._trace = null;\n    }\n\n    /**\n     * Sends a stats entry to the rtcstats server. This is called by the rtcstats proxy module,\n     * or any other app that wants to send custom stats.\n     *\n     * @param entry - Stats entry to send.\n     * @returns {void}\n     */\n    sendStatsEntry(statsType, pcId, data) {\n        this._trace?.statsEntry(statsType, pcId, data);\n    }\n\n    /**\n     * Creates a new log collector with the default log storage.\n     */\n    getDefaultLogCollector(maxEntryLength: number = 10000) {\n        if (!this._defaultLogCollector) {\n            // If undefined is passed  as maxEntryLength LogCollector will default to 10000 bytes\n            this._defaultLogCollector = new Logger.LogCollector(new DefaultLogStorage(this), { maxEntryLength });\n            this._defaultLogCollector.start();\n        }\n\n        return this._defaultLogCollector;\n    }\n}\n\nexport default new RTCStats();\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","import { BrowserDetection } from '@jitsi/js-utils';\n\n/* Minimum required Chrome / Chromium version. This applies also to derivatives. */\nconst MIN_REQUIRED_CHROME_VERSION = 72;\nconst MIN_REQUIRED_FIREFOX_VERSION = 91;\nconst MIN_REQUIRED_SAFARI_VERSION = 14;\nconst MIN_REQUIRED_IOS_VERSION = 14;\n\n// Starting with iPadOS 13 the actual Safari / iPadOS version is concealed from the UA string and\n// the system pretends to be macOS 10.15.7. Yeah, you read that right.\nconst FROZEN_MACOS_VERSION = '10.15.7';\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from the <tt>PeerConnection</tt> and disposed on video\n     * mute (in order to turn off the camera device). This is needed on Firefox because of the following bug\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=1735951\n     *\n     * @return {boolean} <tt>true</tt> if the current browser supports this strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased() || this.isWebKitBased() || this.isFirefox();\n    }\n\n    /**\n     * Checks if the client is running on an Android browser.\n     *\n     * @returns {boolean}\n     */\n    isAndroidBrowser() {\n        return !this.isReactNative() && this.getOS() === 'Android';\n    }\n\n    /**\n     * Checks if the current platform is iOS.\n     *\n     * @returns {boolean}\n     */\n    isIosBrowser() {\n        return !this.isReactNative() && this.getOS() === 'iOS';\n    }\n\n    /**\n     * Checks if the client is running on a mobile device.\n     */\n    isMobileDevice() {\n        return this.isAndroidBrowser() || this.isIosBrowser() || this.isReactNative();\n    }\n\n    /**\n     * Checks whether current running context is a Trusted Web Application.\n     *\n     * @returns {boolean} Whether the current context is a TWA.\n     */\n    isTwa() {\n        return 'matchMedia' in window && window.matchMedia('(display-mode:standalone)').matches;\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        // First check for WebRTC APIs because some \"security\" extensions are dumb.\n        if (typeof RTCPeerConnection === 'undefined'\n                || !navigator?.mediaDevices?.enumerateDevices || !navigator?.mediaDevices?.getUserMedia) {\n            return false;\n        }\n\n        if (this.isSafari() && this._getSafariVersion() < MIN_REQUIRED_SAFARI_VERSION) {\n            return false;\n        }\n\n        return (this.isChromiumBased() && this.isEngineVersionGreaterThan(MIN_REQUIRED_CHROME_VERSION - 1))\n            || (this.isFirefox() && this.isVersionGreaterThan(MIN_REQUIRED_FIREFOX_VERSION - 1))\n            || this.isReactNative()\n            || this.isWebKitBased();\n    }\n\n    /**\n     * Returns whether the browser is supported for Android\n     * @returns {boolean} true if the browser is supported for Android devices\n     */\n    isSupportedAndroidBrowser() {\n        return this.isChromiumBased() || this.isFirefox();\n    }\n\n    /**\n     * Returns whether the browser is supported for iOS\n     * @returns {boolean} true if the browser is supported for iOS devices\n     */\n    isSupportedIOSBrowser() {\n        // After iPadOS 13 we have no way to know the Safari or iPadOS version, so YOLO.\n        if (!this.isSafari() && this.isWebKitBased() && this.getOSVersion() === FROZEN_MACOS_VERSION) {\n            return true;\n        }\n\n        return this._getSafariVersion() >= MIN_REQUIRED_IOS_VERSION\n                || this._getIOSVersion() >= MIN_REQUIRED_IOS_VERSION;\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return this.isFirefox() && this.isVersionLessThan('68');\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the current browser supports setting codec preferences on the transceiver.\n     * @returns {boolean}\n     */\n    supportsCodecPreferences() {\n        return Boolean(window.RTCRtpTransceiver\n            && 'setCodecPreferences' in window.RTCRtpTransceiver.prototype\n            && window.RTCRtpReceiver\n            && typeof window.RTCRtpReceiver.getCapabilities !== 'undefined')\n\n            // this is not working on Safari because of the following bug\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\n            && !this.isWebKitBased()\n\n            // Calling this API on Firefox is causing freezes when the local endpoint is the answerer.\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=1917800\n            && !this.isFirefox();\n    }\n\n    /**\n     * Checks if the browser supports the new codec selection API, i.e., checks if dictionary member\n     * RTCRtpEncodingParameters.codec as defined in\n     * https://w3c.github.io/webrtc-extensions/#dom-rtcrtpencodingparameters-codec is supported by the browser. It\n     * allows the application to change the current codec used by each RTCRtpSender without a renegotiation.\n     *\n     * @returns {boolean}\n     */\n    supportsCodecSelectionAPI() {\n        return this.isChromiumBased() && this.isEngineVersionGreaterThan(125);\n    }\n\n    /**\n     * Returns true if the browser supports Dependency Descriptor header extension.\n     *\n     * @returns {boolean}\n     */\n    supportsDDExtHeaders() {\n        return !(this.isFirefox() && this.isVersionLessThan('136'));\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports the Long Tasks API that lets us observe\n     * performance measurement events and be notified of tasks that take longer than\n     * 50ms to execute on the main thread.\n     */\n    supportsPerformanceObserver() {\n        return typeof window.PerformanceObserver !== 'undefined'\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\n    }\n\n    /**\n     * Checks if the current browser supports audio level stats on the receivers.\n     */\n    supportsReceiverStats() {\n        return typeof window.RTCRtpReceiver !== 'undefined'\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1;\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Returns true if the browser supports the new Scalability Mode API for VP9/AV1 simulcast and full SVC. H.264\n     * simulcast will also be supported by the jvb for this version because the bridge is able to read the Dependency\n     * Descriptor RTP header extension to extract layers information for H.264 as well.\n     *\n     * @returns {boolean}\n     */\n    supportsScalabilityModeAPI() {\n        return this.isChromiumBased() && this.isEngineVersionGreaterThan(112);\n    }\n\n    /**\n     * Returns true if the browser supports track based statistics for the local video track. Otherwise,\n     * track resolution and framerate will be calculated based on the 'outbound-rtp' statistics.\n     * @returns {boolean}\n     */\n    supportsTrackBasedStats() {\n        return this.isChromiumBased() && this.isEngineVersionLessThan(112);\n    }\n\n    /**\n     * Returns true if VP9 is supported by the client on the browser. VP9 is currently disabled on Safari\n     * and older versions of Firefox because of issues. Please check https://bugs.webkit.org/show_bug.cgi?id=231074 for\n     * details.\n     */\n    supportsVP9() {\n        // Keep this disabled for FF because simulcast is disabled by default.\n        // For versions 136+ if the media.webrtc.simulcast.vp9.enabled config is set to true it will work.\n        // TODO: enable for FF with version 136+ once media.webrtc.simulcast.vp9.enabled is set to true by default.\n        return !(this.isWebKitBased() || this.isFirefox());\n    }\n\n    /**\n     * Returns true if SVC is supported.\n     *\n     * @returns {boolean}\n     */\n    supportsSVC() {\n        return !this.isFirefox();\n    }\n\n    /**\n     * Checks if the browser uses SDP munging for turning on simulcast.\n     *\n     * @returns {boolean}\n     */\n    usesSdpMungingForSimulcast() {\n        return this.isChromiumBased() || this.isReactNative() || this.isWebKitBased();\n    }\n\n    /**\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\n     * to the bridge instead of the ssrcs.\n     */\n    usesRidsForSimulcast() {\n        return false;\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports WebRTC Encoded Transform, an alternative\n     * to insertable streams.\n     *\n     * NOTE: At the time of this writing the only browser supporting this is\n     * Safari / WebKit, behind a flag.\n     *\n     * @returns {boolean} {@code true} if the browser supports it.\n     */\n    supportsEncodedTransform() {\n        return Boolean(window.RTCRtpScriptTransform);\n    }\n\n    /**\n     * Checks if the browser supports insertable streams, needed for E2EE.\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\n     */\n    supportsInsertableStreams() {\n        if (!(typeof window.RTCRtpSender !== 'undefined'\n            && window.RTCRtpSender.prototype.createEncodedStreams)) {\n            return false;\n        }\n\n        // Feature-detect transferable streams which we need to operate in a worker.\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\n        const stream = new ReadableStream();\n\n        try {\n            window.postMessage(stream, '*', [ stream ]);\n\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Whether the browser supports the RED format for audio.\n     */\n    supportsAudioRed() {\n        return Boolean(window.RTCRtpSender\n            && window.RTCRtpSender.getCapabilities\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\n            && window.RTCRtpReceiver\n            && window.RTCRtpReceiver.getCapabilities\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\n    }\n\n    /**\n     * Checks if the browser supports voice activity detection via the @type {VADAudioAnalyser} service.\n     *\n     * @returns {boolean}\n     */\n    supportsVADDetection() {\n        return this.isChromiumBased();\n    }\n\n    /**\n     * Check if the browser supports the RTP RTX feature (and it is usable).\n     *\n     * @returns {boolean}\n     */\n    supportsRTX() {\n        // Disable RTX on Firefox up to 96 because we prefer simulcast over RTX\n        // see https://bugzilla.mozilla.org/show_bug.cgi?id=1738504\n        return !(this.isFirefox() && this.isVersionLessThan('96'));\n    }\n\n    /**\n     * Returns the version of a Safari browser.\n     *\n     * @returns {Number}\n     */\n    _getSafariVersion() {\n        if (this.isSafari()) {\n            return Number.parseInt(this.getVersion(), 10);\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns the version of an ios browser.\n     *\n     * @returns {Number}\n     */\n    _getIOSVersion() {\n        if (this.isWebKitBased()) {\n            return Number.parseInt(this.getOSVersion(), 10);\n        }\n\n        return -1;\n    }\n}\n","\nimport Logger from '@jitsi/logger';\nimport watchRTC from '@testrtc/watchrtc-sdk';\n\nimport browser from '../browser';\n\nimport { isAnalyticsEnabled, isWatchRTCEnabled } from './functions';\nimport { IWatchRTCConfiguration } from './interfaces';\n\nconst logger = Logger.getLogger('modules/watchRTC/WatchRTC');\n\n/**\n * Class that controls the watchRTC flow, because it overwrites and proxies global function it should only be\n * initialized once.\n */\nclass WatchRTCHandler {\n    options?: IWatchRTCConfiguration;\n\n    /**\n     * Initialize watchRTC, it overwrites GUM and PeerConnection global functions and adds a proxy over them\n     * used to capture stats.\n     *\n     * @param {Object} options - Init options.\n     * @returns {void}\n     */\n    init(options: any): void {\n        if (isWatchRTCEnabled(options)) {\n\n            // @ts-ignore\n            if (browser.isReactNative()) {\n                logger.warn('Cannot initialize WatchRTC in a react native environment!');\n\n                return;\n            }\n\n            if (!isAnalyticsEnabled(options)) {\n                logger.error('Cannot initialize WatchRTC when analytics or third party requests are disabled.');\n\n                return;\n            }\n\n            try {\n                if (options?.watchRTCConfigParams?.rtcApiKey) {\n                    watchRTC.init({\n                        rtcApiKey: options.watchRTCConfigParams.rtcApiKey,\n                    });\n                    this.options = options.watchRTCConfigParams;\n                    logger.info('WatchRTC initialized.');\n                } else {\n                    logger.error('WatchRTC is enabled but missing API key.');\n                }\n            } catch (error) {\n                logger.error('Failed to initialize WatchRTC: ', error);\n            }\n        }\n    }\n\n    /**\n     * Begin watchRTC session considering roomName and userName if already not available\n     *\n     * @param {string} roomName - The room name we are currently in.\n     * @param {string} userName - The user name. This value is obtained from\n     * JitsiConference.prototype.myUserId\n     * @returns {void}\n     */\n    start(roomName: string, userName: string): void {\n        try {\n            if (this.options) {\n                this.options.rtcRoomId = this.options.rtcRoomId ? this.options.rtcRoomId : roomName;\n                this.options.rtcPeerId = this.options.rtcPeerId ? this.options.rtcPeerId : userName;\n                watchRTC.setConfig(this.options);\n                logger.info('WatchRTC setConfig.');\n            }\n        } catch (error) {\n            logger.error('Failed to start WatchRTC session: ', error);\n        }\n    }\n}\n\nexport default new WatchRTCHandler();\n","/**\n * Checks whether analytics is enabled or not.\n *\n * @param {Object} options - Init options.\n * @returns {boolean}\n */\nexport function isAnalyticsEnabled(options): boolean {\n    const { analytics, disableThirdPartyRequests } = options;\n\n    return !(analytics?.disabled || disableThirdPartyRequests);\n}\n\n/**\n * Checks whether rtcstats is enabled or not.\n *\n * @param {Object} options - Init options.\n * @returns {boolean}\n */\nexport function isRtcstatsEnabled(options): boolean {\n    const { analytics } = options;\n\n    return analytics?.rtcstatsEnabled ?? false;\n}\n\n/**\n * Checks whether watchrtc is enabled or not.\n *\n * @param {Object} options - Init options.\n * @returns {boolean}\n */\nexport function isWatchRTCEnabled(options): boolean {\n    const { analytics } = options;\n\n    return analytics?.watchRTCEnabled ?? false;\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\nconst logger = getLogger('modules/statistics/AnalyticsAdapter');\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.debug('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","/**\n * Provides statistics for the local stream.\n */\n\nconst logger = require('@jitsi/logger').getLogger('modules/statistics/LocalStatsCollector');\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\n/**\n * The audio context.\n * @type {AudioContext}\n */\nlet context = null;\n\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n    this.source = null;\n    this.analyser = null;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n\n    context.resume();\n    this.analyser = context.createAnalyser();\n\n    this.analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    this.analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    this.source = context.createMediaStreamSource(this.stream);\n\n    this.source.connect(this.analyser);\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(this.analyser.frequencyBinCount);\n\n            this.analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            // Set the audio levels always as NoAudioSignalDetection now\n            // uses audio levels from LocalStatsCollector and waits for\n            // atleast 4 secs for a no audio signal before displaying the\n            // notification on the UI.\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\n            this.callback(this.audioLevel);\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n\n    this.analyser?.disconnect();\n    this.analyser = null;\n    this.source?.disconnect();\n    this.source = null;\n};\n\n/**\n * Initialize collector.\n */\nLocalStatsCollector.init = function() {\n    LocalStatsCollector.connectAudioContext();\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(window?.AudioContext);\n};\n\n/**\n * Disconnects the audio context.\n */\nLocalStatsCollector.disconnectAudioContext = async function() {\n    if (context) {\n        logger.info('Disconnecting audio context');\n        await context.close();\n        context = null;\n    }\n};\n\n/**\n * Connects the audio context.\n */\nLocalStatsCollector.connectAudioContext = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n\n    logger.info('Connecting audio context');\n    context = new AudioContext();\n\n    context.suspend();\n};\n","/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number: number): number {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of an Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray: Float32Array): number {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n/**\n * Calculates a unique hash for a given string similar to Java's\n * implementation of String.hashCode()\n *\n * @param {string} string - String whose hash has to be calculated.\n * @returns {number} - Unique hash code calculated.\n */\nexport function hashString(string: string): number {\n    let hash = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\n\n        /* eslint-disable no-bitwise */\n        hash = hash & hash; // Convert to 32bit integer\n    }\n\n    return Math.abs(hash);\n}\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {number[]} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray: Float32Array): number[] {\n    return Array.from(valueArray).filter(value => value >= 0);\n}\n\n/**\n * This class calculates a simple running average that continually changes\n * as more data points are collected and added.\n */\nexport class RunningAverage {\n    private average: number;\n    private n: number;\n\n    /**\n     * Creates an instance of the running average calculator.\n     */\n    constructor() {\n        this.average = 0;\n        this.n = 0;\n    }\n\n    /**\n     * Adds a new data point to the existing set of values and recomputes\n     * the running average.\n     * @param {number} value\n     * @returns {void}\n     */\n    addNext(value: number): void {\n        if (typeof value !== 'number') {\n            return;\n        }\n        this.n += 1;\n        this.average = this.average + ((value - this.average) / this.n);\n    }\n\n    /**\n     * Obtains the average value for the current subset of values.\n     * @returns {number} - computed average.\n     */\n    getAverage(): number {\n        return this.average;\n    }\n}\n\n/**\n * Subtracts the two numbers passed or returns 0 if any of the arguments are not a number.\n *\n * @param {*} x - The number we subtract from.\n * @param {*} y - The number we subtract.\n * @returns {number} - x - y or 0 if x or y is not a number.\n */\nexport function safeSubtract(x: any, y: any): number {\n    return isValidNumber(x) && isValidNumber(y) ? x - y : 0;\n}\n\n/**\n * Checks if the given value is a valid number.\n *\n * @param n - The value to check.\n * @returns - `true` if the value is a valid number, `false` otherwise.\n */\nexport function isValidNumber(n: any): boolean {\n    const v = Number.parseInt(n, 10);\n\n    return Number.isFinite(v); // Filter out NaN and Infinity.\n}\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport { RunningAverage } from '../util/MathUtil';\n\nconst logger = getLogger('modules/statistics/PerformanceObserverStats');\nconst MILLI_SECONDS = 1000;\nconst SECONDS = 60;\n\n/**\n * This class creates an observer that monitors browser's performance measurement events\n * as they are recorded in the browser's performance timeline and computes an average and\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\n * longer than 50ms to execute on the main thread.\n */\nexport class PerformanceObserverStats {\n    /**\n     * Creates a new instance of Performance observer statistics.\n     *\n     * @param {*} emitter Event emitter for emitting stats periodically\n     * @param {*} statsInterval interval for calculating the stats\n     */\n    constructor(emitter, statsInterval) {\n        this.eventEmitter = emitter;\n        this.longTasks = 0;\n        this.maxDuration = 0;\n        this.performanceStatsInterval = statsInterval;\n        this.stats = new RunningAverage();\n    }\n\n    /**\n     * Obtains the average rate of long tasks observed per min and the\n     * duration of the longest task recorded by the observer.\n     * @returns {Object}\n     */\n    getLongTasksStats() {\n        return {\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\n            maxDurationMs: this.maxDuration\n        };\n    }\n\n    /**\n     * Starts the performance observer by registering the callback function\n     * that calculates the performance statistics periodically.\n     * @returns {void}\n     */\n    startObserver() {\n        // Create a handler for when the long task event is fired.\n        this.longTaskEventHandler = list => {\n            const entries = list.getEntries();\n\n            for (const task of entries) {\n                this.longTasks++;\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\n            }\n        };\n\n        // Create an observer for monitoring long tasks.\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\n        this.observer.observe({ type: 'longtask',\n            buffered: true });\n        const startTime = Date.now();\n\n        // Calculate the average # of events/sec and emit a stats event.\n        this.longTasksIntervalId = setInterval(() => {\n            const now = Date.now();\n            const interval = this._lastTimeStamp\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\n                : (now - startTime) / MILLI_SECONDS;\n            const rate = this.longTasks / interval;\n\n            this.stats.addNext(rate);\n            this.eventEmitter.emit(\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\n\n            // Reset the counter and start counting events again.\n            this.longTasks = 0;\n            this._lastTimeStamp = Date.now();\n        }, this.performanceStatsInterval);\n    }\n\n    /**\n     * Stops the performance observer.\n     * @returns {void}\n     */\n    stopObserver() {\n        this.observer && this.observer.disconnect();\n        this.longTaskEventHandler = null;\n        if (this.longTasksIntervalId) {\n            clearInterval(this.longTasksIntervalId);\n            this.longTasksIntervalId = null;\n        }\n    }\n}\n","export enum MediaType {\n\n    /**\n     * The application type (data over bridge channel).\n     */\n    APPLICATION = 'application',\n\n    /**\n     * The audio type.\n     */\n    AUDIO = 'audio',\n\n    /**\n     * The video type.\n     */\n    VIDEO = 'video'\n}\n","import browser from '../browser';\n\n/**\n * A global module for accessing information about different feature flags state.\n */\nclass FeatureFlags {\n    private _runInLiteMode: boolean;\n    private _ssrcRewriting: boolean;\n\n    /**\n     * Configures the module.\n     *\n     * @param {object} flags - The feature flags.\n     * @param {boolean=} flags.runInLiteMode - Enables lite mode for testing to disable media decoding.\n     * @param {boolean=} flags.ssrcRewritingEnabled - Use SSRC rewriting.\n     */\n    init(flags: { runInLiteMode?: boolean | undefined; ssrcRewritingEnabled?: boolean | undefined; }) {\n        this._runInLiteMode = Boolean(flags.runInLiteMode);\n        this._ssrcRewriting = Boolean(flags.ssrcRewritingEnabled);\n    }\n\n    /**\n     * Checks if the run in lite mode is enabled.\n     * This will cause any media to be received and not decoded. (Insertable streams are used to discard\n     * all media before it is decoded). This can be used for various test scenarios.\n     *\n     * @returns {boolean}\n     */\n    isRunInLiteModeEnabled(): boolean {\n        return this._runInLiteMode && browser.supportsInsertableStreams();\n    }\n\n    /**\n     * Checks if the clients supports re-writing of the SSRCs on the media streams by the bridge.\n     * @returns {boolean}\n     */\n    isSsrcRewritingSupported(): boolean {\n        return this._ssrcRewriting;\n    }\n}\n\nexport default new FeatureFlags();\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport { isValidNumber } from '../util/MathUtil';\n\nconst logger = getLogger('modules/statistics/RTPStatsCollector');\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (lostPackets > 0 && totalPackets > 0) {\n        return Math.round(lostPackets / totalPackets * 100);\n    }\n\n    return 0;\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n    this.codec = '';\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\nSsrcStats.prototype.setCodec = function(codec) {\n    this.codec = codec || '';\n};\n\nSsrcStats.prototype.setEncodeStats = function(encodeStats) {\n    this.encodeStats = encodeStats || {};\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(peerconnection, audioLevelsInterval, statsInterval, eventEmitter) {\n    this.peerconnection = peerconnection;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.speakerList = [];\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/**\n * Set the list of the remote speakers for which audio levels are to be calculated.\n *\n * @param {Array<string>} speakerList - Endpoint ids.\n * @returns {void}\n */\nStatsCollector.prototype.setSpeakerList = function(speakerList) {\n    this.speakerList = speakerList;\n};\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    if (startAudioLevelStats && browser.supportsReceiverStats()) {\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                const audioLevels = this.peerconnection.getAudioLevels(this.speakerList);\n\n                for (const ssrc in audioLevels) {\n                    if (audioLevels.hasOwnProperty(ssrc)) {\n                        // Use a scaling factor of 2.5 to report the same audio levels that getStats reports.\n                        const audioLevel = audioLevels[ssrc] * 2.5;\n\n                        this.eventEmitter.emit(\n                            StatisticsEvents.AUDIO_LEVEL,\n                            this.peerconnection,\n                            Number.parseInt(ssrc, 10),\n                            audioLevel,\n                            false /* isLocal */);\n                    }\n                }\n            },\n            this.audioLevelsIntervalMilis\n        );\n    }\n\n    const processStats = () => {\n        // Interval updates\n        this.peerconnection.getStats()\n            .then(report => {\n                this.currentStatsReport = typeof report?.result === 'function'\n                    ? report.result()\n                    : report;\n\n                try {\n                    this.processStatsReport();\n                } catch (error) {\n                    logger.error('Processing of RTP stats failed:', error);\n                }\n                this.previousStatsReport = this.currentStatsReport;\n            })\n            .catch(error => this.errorCallback(error));\n    };\n\n    processStats();\n    this.statsIntervalId = setInterval(processStats, this.statsIntervalMilis);\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    const codecs = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        const ssrcBitrateDownload = ssrcStats.bitrate.download;\n        const ssrcBitrateUpload = ssrcStats.bitrate.upload;\n\n        // process bitrate stats\n        bitrateDownload += ssrcBitrateDownload;\n        bitrateUpload += ssrcBitrateUpload;\n\n        ssrcStats.resetBitrate();\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        let audioCodec;\n        let videoCodec;\n\n        if (track.isAudioTrack()) {\n            audioBitrateDownload += ssrcBitrateDownload;\n            audioBitrateUpload += ssrcBitrateUpload;\n            audioCodec = ssrcStats.codec;\n        } else {\n            videoBitrateDownload += ssrcBitrateDownload;\n            videoBitrateUpload += ssrcBitrateUpload;\n            videoCodec = ssrcStats.codec;\n        }\n\n        const participantId = track.getParticipantId();\n\n        if (!participantId) {\n            // All tracks in ssrc-rewriting mode need not have a participant associated with it.\n            if (!FeatureFlags.isSsrcRewritingSupported()) {\n                logger.error(`No participant ID returned by ${track}`);\n            }\n            continue;\n        }\n\n        const userCodecs = codecs[participantId] ?? { };\n\n        userCodecs[ssrc] = {\n            audio: audioCodec,\n            video: videoCodec\n        };\n\n        codecs[participantId] = userCodecs;\n        const { resolution } = ssrcStats;\n\n        if (!track.isVideoTrack()\n            || !isValidNumber(resolution?.height)\n            || !isValidNumber(resolution?.width)\n            || resolution.height === -1\n            || resolution.width === -1) {\n            continue;\n        }\n        const userResolutions = resolutions[participantId] || {};\n\n        // If simulcast (VP8) is used, there will be 3 \"outbound-rtp\" streams with different resolutions and 3\n        // different SSRCs. Based on the requested resolution and the current cpu and available bandwidth\n        // values, some of the streams might get suspended. Therefore the actual send resolution needs to be\n        // calculated based on the outbound-rtp streams that are currently active for the simulcast case.\n        // However for the SVC case, there will be only 1 \"outbound-rtp\" stream which will have the correct\n        // send resolution width and height.\n        if (track.isLocal() && !browser.supportsTrackBasedStats() && this.peerconnection.doesTrueSimulcast(track)) {\n            const localSsrcs = this.peerconnection.getLocalVideoSSRCs(track);\n\n            for (const localSsrc of localSsrcs) {\n                const ssrcResolution = this.ssrc2stats.get(localSsrc)?.resolution;\n\n                // The code processes resolution stats only for 'outbound-rtp' streams that are currently active.\n                if (ssrcResolution?.height && ssrcResolution?.width) {\n                    resolution.height = Math.max(resolution.height, ssrcResolution.height);\n                    resolution.width = Math.max(resolution.width, ssrcResolution.width);\n                }\n            }\n        }\n\n        userResolutions[ssrc] = resolution;\n        resolutions[participantId] = userResolutions;\n\n        if (ssrcStats.framerate > 0) {\n            const userFramerates = framerates[participantId] || {};\n\n            userFramerates[ssrc] = ssrcStats.framerate;\n            framerates[participantId] = userFramerates;\n        }\n    }\n\n    this.conferenceStats.bitrate = {\n        upload: bitrateUpload,\n        download: bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        upload: audioBitrateUpload,\n        download: audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        upload: videoBitrateUpload,\n        download: videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            bandwidth: this.conferenceStats.bandwidth,\n            bitrate: this.conferenceStats.bitrate,\n            packetLoss: this.conferenceStats.packetLoss,\n            resolution: resolutions,\n            framerate: framerates,\n            codec: codecs,\n            transport: this.conferenceStats.transport\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (!isValidNumber(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Calculates the frames per second rate between before and now using a supplied field name and its value in stats.\n * @param {RTCOutboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCOutboundRtpStreamStats|RTCSentRtpStreamStats} before the previous stats\n * @param {string} fieldName the field to use for calculations.\n * @returns {number} the calculated frame rate between now and before.\n */\nStatsCollector.prototype._calculateFps = function(now, before, fieldName) {\n    const timeMs = now.timestamp - before.timestamp;\n    let frameRate = 0;\n\n    if (timeMs > 0 && now[fieldName]) {\n        const numberOfFramesSinceBefore = now[fieldName] - before[fieldName];\n\n        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n    }\n\n    return frameRate;\n};\n\n/**\n * Stats processing for spec-compliant RTCPeerConnection#getStats.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    const byteSentStats = {};\n    const encodedTimeStatsPerSsrc = new Map();\n\n    this.currentStatsReport.forEach(now => {\n        const before = this.previousStatsReport ? this.previousStatsReport.get(now.id) : null;\n\n        // RTCIceCandidatePairStats - https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair' && now.nominated && now.state === 'succeeded') {\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            if (remoteUsedCandidate && localUsedCandidate) {\n                const remoteIpAddress = browser.isChromiumBased()\n                    ? remoteUsedCandidate.ip\n                    : remoteUsedCandidate.address;\n                const remotePort = remoteUsedCandidate.port;\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = browser.isChromiumBased()\n                    ? localUsedCandidate.ip\n                    : localUsedCandidate.address;\n                const localPort = localUsedCandidate.port;\n                const localip = `${localIpAddress}:${localPort}`;\n                const type = remoteUsedCandidate.protocol;\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(t =>\n                    t.ip === ip\n                    && t.type === type\n                    && t.localip === localip)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localip,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            if (before) {\n                const packetsBefore = this.getNonNegativeValue(before[key]);\n                const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n                const packetsLostNow = this.getNonNegativeValue(now.packetsLost);\n                const packetsLostBefore = this.getNonNegativeValue(before.packetsLost);\n                const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n                ssrcStats.setLoss({\n                    packetsTotal: packetsDiff + packetsLostDiff,\n                    packetsLost: packetsLostDiff,\n                    isDownloadStream\n                });\n            }\n\n            let resolution;\n\n            // Process the stats for 'inbound-rtp' streams always and 'outbound-rtp' only if the browser is\n            // Chromium based and version 112 and later since 'track' based stats are no longer available there\n            // for calculating send resolution and frame rate.\n            if (typeof now.frameHeight !== 'undefined' && typeof now.frameWidth !== 'undefined') {\n                // Assume the stream is active if the field is missing in the stats(Firefox)\n                const isStreamActive = now.active ?? true;\n\n                if (now.type === 'inbound-rtp' || (!browser.supportsTrackBasedStats() && isStreamActive)) {\n                    resolution = {\n                        height: now.frameHeight,\n                        width: now.frameWidth\n                    };\n                }\n            }\n            ssrcStats.setResolution(resolution);\n\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate && before) {\n                frameRate = this._calculateFps(now, before, 'framesSent');\n            }\n\n            ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n            if (now.type === 'inbound-rtp' && before) {\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n            } else if (before) {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(now, before, 'bytesSent')\n                });\n            }\n\n            const codec = this.currentStatsReport.get(now.codecId);\n\n            if (codec) {\n                /**\n                 * The mime type has the following form: video/VP8 or audio/ISAC, so we what to keep just the type\n                 * after the '/', audio and video keys will be added on the processing side.\n                 */\n                const codecShortType = codec.mimeType.split('/')[1];\n\n                codecShortType && ssrcStats.setCodec(codecShortType);\n\n                // Calculate the encodeTime stat for outbound video streams.\n                const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n                if (now.type === 'outbound-rtp'\n                    && now.active\n                    && track?.isVideoTrack()\n                    && before?.totalEncodeTime\n                    && before?.framesEncoded\n                    && now.frameHeight\n                    && now.frameWidth) {\n                    const encodeTimeDelta = now.totalEncodeTime - before.totalEncodeTime;\n                    const framesEncodedDelta = now.framesEncoded - before.framesEncoded;\n                    const encodeTimePerFrameInMs = 1000 * encodeTimeDelta / framesEncodedDelta;\n                    const encodeTimeStats = {\n                        codec: codecShortType,\n                        encodeTime: encodeTimePerFrameInMs,\n                        qualityLimitationReason: now.qualityLimitationReason,\n                        resolution,\n                        timestamp: now.timestamp\n                    };\n\n                    encodedTimeStatsPerSsrc.set(ssrc, encodeTimeStats);\n                    ssrcStats.setEncodeStats(encodedTimeStatsPerSsrc);\n                }\n            }\n\n        // Continue to use the 'track' based stats for Firefox and Safari and older versions of Chromium.\n        } else if (browser.supportsTrackBasedStats()\n            && now.type === 'track'\n            && now.kind === MediaType.VIDEO\n            && !now.remoteSource) {\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n            const localVideoTracks = this.peerconnection.getLocalTracks(MediaType.VIDEO);\n\n            if (!localVideoTracks?.length) {\n                return;\n            }\n\n            const ssrc = this.peerconnection.getSsrcByTrackId(now.trackIdentifier);\n\n            if (!ssrc) {\n                return;\n            }\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            }\n\n            // Calculate the frame rate. 'framesSent' is the total aggregate value for all the simulcast streams.\n            // Therefore, it needs to be divided by the total number of active simulcast streams.\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate && before) {\n                frameRate = this._calculateFps(now, before, 'framesSent');\n            }\n            ssrcStats.setFramerate(frameRate);\n        }\n    });\n\n    if (Object.keys(byteSentStats).length) {\n        this.eventEmitter.emit(StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n    }\n\n    if (encodedTimeStatsPerSsrc.size) {\n        this.eventEmitter.emit(StatisticsEvents.ENCODE_TIME_STATS, this.peerconnection, encodedTimeStatsPerSsrc);\n    }\n\n    this._processAndEmitReport();\n};\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport { JitsiTrackEvents } from '../../JitsiTrackEvents';\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport RTCStats from '../RTCStats/RTCStats';\nimport browser from '../browser';\nimport EventEmitter from '../util/EventEmitter';\nimport WatchRTC from '../watchRTC/WatchRTC';\n\nimport analytics from './AnalyticsAdapter';\nimport LocalStats from './LocalStatsCollector';\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\nimport RTPStats from './RTPStatsCollector';\n\nconst logger = require('@jitsi/logger').getLogger('modules/statistics/statistics');\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    if (typeof options.longTasksStatsInterval === 'number') {\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n\n    LocalStats.init();\n    WatchRTC.init(options);\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} userName - The user name to use\n * @property {string} roomName - The room name we are currently in.\n *\n * @param {JitsiConference} conference - The conference instance from which the statistics were initialized.\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(conference, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.conference = conference;\n    this.xmpp = conference?.xmpp;\n    this.options = options || {};\n\n    Statistics.instances.add(this);\n\n    RTCStats.attachToConference(this.conference);\n\n    // WatchRTC is not required to work for react native\n    if (!browser.isReactNative()) {\n        WatchRTC.start(this.options.roomName, this.options.userName);\n    }\n\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(track, callback) {\n    if (browser.isIosBrowser()) {\n        // On iOS browsers audio is lost if the audio input device is in use by another app\n        // https://bugs.webkit.org/show_bug.cgi?id=233473\n        // The culprit was using the AudioContext, so now we close the AudioContext during\n        // the track being muted, and re-instantiate it afterwards.\n        track.addEventListener(\n        JitsiTrackEvents.NO_DATA_FROM_SOURCE,\n\n        /**\n         * Closes AudioContext on no audio data, and enables it on data received again.\n         *\n         * @param {boolean} value - Whether we receive audio data or not.\n         */\n        async value => {\n            if (value) {\n                for (const localStat of Statistics.localStats) {\n                    localStat.stop();\n                }\n\n                await LocalStats.disconnectAudioContext();\n            } else {\n                LocalStats.connectAudioContext();\n                for (const localStat of Statistics.localStats) {\n                    localStat.start();\n                }\n            }\n        });\n    }\n\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    track.addEventListener(\n        JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n        () => {\n            Statistics.stopLocalStats(track);\n        });\n\n    const stream = track.getOriginalStream();\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addEncodeTimeStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.ENCODE_TIME_STATS, listener);\n};\n\nStatistics.prototype.removeEncodeTimeStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.ENCODE_TIME_STATS, listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\n/**\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\n *\n * @param {Function} listener a function that would be called when notified.\n * @returns {void}\n */\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Creates an instance of {@link PerformanceObserverStats} and starts the\n * observer that records the stats periodically.\n *\n * @returns {void}\n */\nStatistics.prototype.attachLongTasksStats = function() {\n    if (!browser.supportsPerformanceObserver()) {\n        logger.warn('Performance observer for long tasks not supported by browser!');\n\n        return;\n    }\n\n    this.performanceObserverStats = new PerformanceObserverStats(\n        this.eventEmitter,\n        Statistics.longTasksStatsInterval);\n\n    this.conference.on(\n        JitsiConferenceEvents.CONFERENCE_JOINED,\n        () => this.performanceObserverStats.startObserver());\n    this.conference.on(\n        JitsiConferenceEvents.CONFERENCE_LEFT,\n        () => this.performanceObserverStats.stopObserver());\n};\n\n/**\n * Obtains the current value of the LongTasks event statistics.\n *\n * @returns {Object|null} stats object if the observer has been\n * created, null otherwise.\n */\nStatistics.prototype.getLongTasksStats = function() {\n    return this.performanceObserverStats\n        ? this.performanceObserverStats.getLongTasksStats()\n        : null;\n};\n\n/**\n * Removes the given listener for the LONG_TASKS_STATS event.\n *\n * @param {Function} listener the listener we want to remove.\n * @returns {void}\n */\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\n};\n\n/**\n * Updates the list of speakers for which the audio levels are to be calculated. This is needed for the jvb pc only.\n *\n * @param {Array<string>} speakerList The list of remote endpoint ids.\n * @returns {void}\n */\nStatistics.prototype.setSpeakerList = function(speakerList) {\n    for (const rtpStats of Array.from(this.rtpStatsMap.values())) {\n        if (!rtpStats.peerconnection.isP2P) {\n            rtpStats.setSpeakerList(speakerList);\n        }\n    }\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(track) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    const stream = track.getOriginalStream();\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n/**\n * Sends the given feedback\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves immediately.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return Promise.resolve();\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Sends event to analytics and logs a message to the logger/console.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.debug(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n};\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nexport default class EventEmitterForwarder {\n    src: any;\n    dest: any;\n    listeners: Map<any, any>;\n\n    /**\n     * @constructor\n     */\n    constructor(src: any, dest: any) {\n        if (!src || !dest || typeof src.addListener !== 'function' || typeof dest.emit !== 'function') {\n            throw new Error('Invalid arguments passed to EventEmitterForwarder');\n        }\n        this.src = src;\n        this.dest = dest;\n        this.listeners = new Map();\n    }\n\n    /**\n     * Adds event to be forwarded from src to dest.\n     * @param srcEvent {string} the event that EventEmitterForwarder is listening\n     * for.\n     * @param dstEvent {string} the event that will be fired from dest.\n     * @param arguments all other passed arguments are going to be fired with\n     * dstEvent.\n     */\n    forward(...args) {\n        const srcEvent = args[0];\n\n        // This will be the \"this\" value for emit function.\n        args[0] = this.dest;\n\n        // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n        const newListener = Function.prototype.bind.apply(this.dest.emit, args);\n\n        this.src.addListener(srcEvent, newListener);\n        this.listeners.set(srcEvent, newListener);\n    }\n\n    /**\n     * Clears the listeners for the supplied events.\n     *\n     * @param args all the events which listeners to be cleaned.\n     */\n    removeListeners(...args) {\n        args.forEach(a => {\n            const l = this.listeners.get(a);\n\n            if (l) {\n                this.src.removeListener(a, l);\n                this.listeners.delete(a);\n            }\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport { SPEAKERS_AUDIO_LEVELS } from './modules/statistics/constants';\nimport Statistics from './modules/statistics/statistics';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger('JitsiConferenceEventManager');\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, (from, features) => {\n        const participant = conference.getParticipantById(Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            participant.setFeatures(features);\n            conference.eventEmitter.emit(JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED, participant);\n        }\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.PERMISSIONS_RECEIVED, JitsiConferenceEvents.PERMISSIONS_RECEIVED);\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.AUDIO));\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    chatRoom.addListener(XMPPEvents.VIDEO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent(MediaType.VIDEO));\n\n            conference.mutedVideoByFocusActor = actor;\n\n            // set isVideoMutedByFocus when setVideoMute Promise ends\n            conference.rtc.setVideoMute(true).then(\n                () => {\n                    conference.isVideoMutedByFocus = true;\n                    conference.mutedVideoByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedVideoByFocusActor = null;\n                        logger.warn(\n                            'Error while video muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOIN_IN_PROGRESS,\n        JitsiConferenceEvents.CONFERENCE_JOIN_IN_PROGRESS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MEETING_ID_SET,\n        JitsiConferenceEvents.CONFERENCE_UNIQUE_ID_SET);\n\n    this.chatRoomForwarder.forward(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference._onMucJoined();\n\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(JitsiTrackEvents.TRACK_OWNER_SET, (track, owner, sourceName, videoType) => {\n        if (track.getParticipantId() !== owner || track.getSourceName() !== sourceName) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n\n            // Update the owner and other properties on the track.\n            track.setOwner(owner);\n            track.setSourceName(sourceName);\n            track._setVideoType(videoType);\n            owner && conference.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n        }\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.DISPLAY_NAME_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.DISPLAY_NAME_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_RESTARTED,\n        jingleSession => {\n            conference._onConferenceRestarted(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.SETTINGS_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.SETTINGS_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const resource = Strophe.getResourceFromJid(jid);\n                const participant = conference.getParticipantById(resource) || resource;\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((id, prop, value) => {\n        const participant = conference.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(prop, value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_VISITORS_SUPPORTED_CHANGED,\n        JitsiConferenceEvents.VISITORS_SUPPORTED_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.SILENT_STATUS_CHANGED,\n        conference.onSilentStatusChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts, nick, isGuest, messageId) => {\n            const participantId = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                participantId, txt, ts, nick, isGuest, messageId);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.REACTION_RECEIVED,\n\n        (jid, reactionList, messageId) => {\n            const participantId = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.REACTION_RECEIVED,\n                participantId, reactionList, messageId);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, txt, myJid, ts, messageId) => {\n            const participantId = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                participantId, txt, ts, messageId);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.NON_PARTICIPANT_MESSAGE_RECEIVED,\n                    id, payload);\n            }\n        });\n\n    // Breakout rooms.\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM);\n    this.chatRoomForwarder.forward(XMPPEvents.BREAKOUT_ROOMS_UPDATED,\n        JitsiConferenceEvents.BREAKOUT_ROOMS_UPDATED);\n\n    // Room metadata.\n    chatRoom.addListener(XMPPEvents.ROOM_METADATA_UPDATED, metadata => {\n        if (metadata.startMuted) {\n            const audio = metadata.startMuted.audio || false;\n            const video = metadata.startMuted.video || false;\n\n            audio && (conference.isMutedByFocus = true);\n            video && (conference.isVideoMutedByFocus = true);\n            conference._updateStartMutedPolicy(audio, video);\n        }\n        conference.eventEmitter.emit(JitsiConferenceEvents.METADATA_UPDATED, metadata);\n    });\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        (dominant, previous, silence) => {\n            if ((conference.lastDominantSpeaker !== dominant || conference.dominantSpeakerIsSilent !== silence)\n                    && conference.room) {\n                conference.lastDominantSpeaker = dominant;\n                conference.dominantSpeakerIsSilent = silence;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, dominant, previous, silence);\n                if (conference.statistics && conference.myUserId() === dominant) {\n                    // We are the new dominant speaker.\n                    conference.xmpp.sendDominantSpeakerEvent(conference.room.roomjid, silence);\n                }\n                if (conference.lastDominantSpeaker !== dominant) {\n                    if (previous && previous.length) {\n                        const speakerList = previous.slice(0);\n\n                        // Add the dominant speaker to the top of the list (exclude self).\n                        if (conference.myUserId !== dominant) {\n                            speakerList.splice(0, 0, dominant);\n                        }\n\n                        // Trim the list to the top 5 speakers only.\n                        if (speakerList.length > SPEAKERS_AUDIO_LEVELS) {\n                            speakerList.splice(SPEAKERS_AUDIO_LEVELS, speakerList.length - SPEAKERS_AUDIO_LEVELS);\n                        }\n                        conference.statistics && conference.statistics.setSpeakerList(speakerList);\n                    }\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.info(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_CLOSED, ev => {\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_CLOSED, ev);\n    });\n\n    rtc.addListener(RTCEvents.VIDEO_SSRCS_REMAPPED, msg => {\n        this.conference.jvbJingleSession.processSourceMap(msg, MediaType.VIDEO);\n    });\n\n    rtc.addListener(RTCEvents.AUDIO_SSRCS_REMAPPED, msg => {\n        this.conference.jvbJingleSession.processSourceMap(msg, MediaType.AUDIO);\n    });\n\n    rtc.addListener(RTCEvents.BRIDGE_BWE_STATS_RECEIVED, bwe => {\n        conference.eventEmitter.emit(JitsiConferenceEvents.BRIDGE_BWE_STATS_RECEIVED, bwe);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.ENDPOINT_STATS_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.ENDPOINT_STATS_RECEIVED, participant, payload);\n            } else {\n                logger.warn(`Ignoring ENDPOINT_STATS_RECEIVED for a non-existant participant: ${from}`);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_CHANGED,\n        (value, mediaType, actorJid) => {\n            const actorParticipant = conference.getParticipants().find(p => p.getJid() === actorJid);\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_CHANGED, {\n                enabled: value,\n                mediaType,\n                actor: actorParticipant\n            });\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_APPROVED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED,\n        (mediaType, jid) => {\n            const participant = conference.getParticipantById(Strophe.getResourceFromJid(jid));\n\n            if (participant) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_PARTICIPANT_REJECTED, {\n                    participant,\n                    mediaType\n                });\n            }\n        });\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_APPROVED,\n        value => conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_APPROVED, { mediaType: value }));\n    this._addConferenceXMPPListener(XMPPEvents.AV_MODERATION_REJECTED,\n        value => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.AV_MODERATION_REJECTED, { mediaType: value });\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.VISITORS_MESSAGE,\n        value => conference.eventEmitter.emit(JitsiConferenceEvents.VISITORS_MESSAGE, value));\n    this._addConferenceXMPPListener(XMPPEvents.VISITORS_REJECTION,\n        () => conference.eventEmitter.emit(JitsiConferenceEvents.VISITORS_REJECTION));\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    conference.statistics.addEncodeTimeStatsListener((tpc, stats) => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.ENCODE_TIME_STATS_RECEIVED, tpc, stats);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track.onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","/**\n * The number of remote speakers for which the audio levels will be calculated using\n * RTCRtpReceiver#getSynchronizationSources. Limit the number of endpoints to save cpu on the client as this API call\n * is known to take longer to execute when there are many audio receivers.\n */\nexport const SPEAKERS_AUDIO_LEVELS = 5;\n","import { Strophe } from 'strophe.js';\n\nimport JitsiConference from './JitsiConference';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiTrack from './modules/RTC/JitsiTrack';\nimport { MediaType } from './service/RTC/MediaType';\n\nexport interface ISourceInfo {\n    muted: boolean;\n    videoType: string;\n}\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    private _jid: string;\n    private _id: string;\n    private _conference: JitsiConference;\n    private _displayName: string;\n    private _supportsDTMF: boolean;\n    private _tracks: JitsiTrack[];\n    private _role: string;\n    private _status?: string;\n    private _hidden: boolean;\n    private _statsID?: string;\n    private _properties: Map<string, any>;\n    private _identity?: object;\n    private _isReplacing?: boolean;\n    private _isReplaced?: boolean;\n    private _isSilent?: boolean;\n    private _features: Set<string>;\n    private _sources: Map<MediaType, Map<string, ISourceInfo>>;\n    private _botType?: string;\n    private _connectionJid?: string;\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     * @param {boolean?} isReplacing - whether this is a participant replacing another into the meeting.\n     * @param {boolean?} isReplaced - whether this is a participant to be kicked and replaced into the meeting.\n     * @param {boolean?} isSilent - whether participant has joined without audio\n     */\n    constructor(\n            jid: string,\n            conference: JitsiConference,\n            displayName: string,\n            hidden: boolean,\n            statsID?: string,\n            status?: string,\n            identity?: object,\n            isReplacing?: boolean,\n            isReplaced?: boolean,\n            isSilent?: boolean\n    ) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._properties = new Map();\n        this._identity = identity;\n        this._isReplacing = isReplacing;\n        this._isReplaced = isReplaced;\n        this._isSilent = isSilent;\n        this._features = new Set();\n\n        /**\n         * Remote sources associated with the participant in the following format.\n         * Map<mediaType, Map<sourceName, ISourceInfo>>\n         *\n         * mediaType - 'audio' or 'video'.\n         * sourceName - name of the remote source.\n         * ISourceInfo: {\n         *   muted: boolean;\n         *   videoType: string;\n         * }\n         */\n        this._sources = new Map();\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and which belong to this\n     * JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified mediaType and which belong to this\n     * JitsiParticipant are muted; otherwise, false.\n     */\n    _isMediaTypeMuted(mediaType: MediaType): boolean {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || (track as any).isMuted()),\n            true);\n    }\n\n    /**\n     * Sets source info.\n     * @param {MediaType} mediaType The media type, 'audio' or 'video'.\n     * @param {boolean} muted The new muted state.\n     * @param {string} sourceName The name of the source.\n     * @param {string} videoType The video type of the source.\n     * @returns {void}\n     */\n    _setSources(mediaType: MediaType, muted: boolean, sourceName: string, videoType: string): void {\n        let sourceByMediaType = this._sources.get(mediaType);\n        const sourceInfo: ISourceInfo = {\n            muted,\n            videoType\n        };\n\n        if (sourceByMediaType?.size) {\n            sourceByMediaType.set(sourceName, sourceInfo);\n\n            return;\n        }\n\n        sourceByMediaType = new Map();\n        sourceByMediaType.set(sourceName, sourceInfo);\n        this._sources.set(mediaType, sourceByMediaType);\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType(): string | undefined {\n        return this._botType;\n    }\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference(): JitsiConference {\n        return this._conference;\n    }\n\n    /**\n     * Returns the connection jid for the participant.\n     *\n     * @returns {string|undefined} - The connection jid of the participant.\n     */\n    getConnectionJid(): string | undefined {\n        return this._connectionJid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName(): string {\n        return this._displayName;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @returns {Promise<Set<String>>}\n     */\n    getFeatures(): Promise<Set<string>> {\n        return Promise.resolve(this._features);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId(): string {\n        return this._id;\n    }\n\n    /**\n     * Returns the XMPP identity. This is defined by your application in the\n     * JWT `context` claims section.\n     *\n     * @returns {object|undefined} - XMPP user identity.\n     */\n    getIdentity(): object | undefined {\n        return this._identity;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid(): string {\n        return this._jid;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name: string): any {\n        return this._properties.get(name);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole(): string {\n        return this._role;\n    }\n\n    /**\n     * Returns the sources associated with this participant.\n     * @returns Map<string, Map<string, Object>>\n     */\n    getSources(): Map<MediaType, Map<string, ISourceInfo>> {\n        return this._sources;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID(): string {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus(): string {\n        return this._status;\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks(): JitsiTrack[] {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType: MediaType): JitsiTrack[] {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * Checks current set features.\n     * @param {String} feature - the feature to check.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains the\n     * <tt>feature</tt>.\n     */\n    hasFeature(feature: string): boolean {\n        return this._features.has(feature);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted(): boolean {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden(): boolean {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHiddenFromRecorder(): boolean {\n        return (this._identity as any)?.user?.['hidden-from-recorder'] === 'true';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator(): boolean {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Wheter this participants will be replaced by another\n     * participant in the meeting.\n     */\n    isReplaced(): boolean {\n        return this._isReplaced;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant replaces another participant\n     * from the meeting.\n     */\n    isReplacing(): boolean {\n        return this._isReplacing;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has joined without audio.\n     */\n    isSilent(): boolean {\n        return this._isSilent;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted(): boolean {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * Sets the bot type for the participant.\n     * @param {String} newBotType - The new bot type to set.\n     */\n    setBotType(newBotType: string): void {\n        this._botType = newBotType;\n    }\n\n    /**\n     * Sets the connection jid for the participant.\n     * @param {String} newJid - The connection jid to set.\n     */\n    setConnectionJid(newJid: string): void {\n        this._connectionJid = newJid;\n    }\n\n    /**\n     * Set new features.\n     * @param {Set<String>|undefined} newFeatures - Sets new features.\n     */\n    setFeatures(newFeatures?: Set<string>): void {\n        this._features = newFeatures || new Set();\n    }\n\n    /**\n     * Sets whether participant is being replaced by another based on jwt.\n     * @param {boolean} newIsReplaced - whether is being replaced.\n     */\n    setIsReplaced(newIsReplaced: boolean): void {\n        this._isReplaced = newIsReplaced;\n    }\n\n    /**\n     * Sets whether participant is replacing another based on jwt.\n     * @param {boolean} newIsReplacing - whether is replacing.\n     */\n    setIsReplacing(newIsReplacing: boolean): void {\n        this._isReplacing = newIsReplacing;\n    }\n\n    /**\n     * Sets whether participant has joined without audio.\n     * @param {boolean} newIsSilent - whether is silent.\n     */\n    setIsSilent(newIsSilent: boolean): void {\n        this._isSilent = newIsSilent;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name: string, value: any): void {\n        const oldValue = this._properties.get(name);\n\n        if (value !== oldValue) {\n            this._properties.set(name, value);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * Sets a new participant role.\n     * @param {String} newRole - the new role.\n     */\n    setRole(newRole: string): void {\n        this._role = newRole;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF(): boolean {\n        return this._supportsDTMF;\n    }\n}\n","/**\n * The errors for the JitsiTrack objects.\n */\n\nexport enum JitsiTrackErrors {\n\n    /**\n     * An error which indicates that some of requested constraints in\n     * getUserMedia call were not satisfied.\n     */\n    CONSTRAINT_FAILED = 'gum.constraint_failed',\n\n    /**\n     * A generic error which indicates an error occurred while selecting\n     * a DesktopCapturerSource from the electron app.\n     */\n    ELECTRON_DESKTOP_PICKER_ERROR = 'gum.electron_desktop_picker_error',\n\n    /**\n     * An error which indicates a custom desktop picker could not be detected\n     * for the electron app.\n     */\n    ELECTRON_DESKTOP_PICKER_NOT_FOUND = 'gum.electron_desktop_picker_not_found',\n\n    /**\n     * Generic getUserMedia error.\n     */\n    GENERAL = 'gum.general',\n\n    /**\n     * An error which indicates that requested device was not found.\n     */\n    NOT_FOUND = 'gum.not_found',\n\n    /**\n     * An error which indicates that user denied permission to share requested\n     * device.\n     */\n    PERMISSION_DENIED = 'gum.permission_denied',\n\n    /**\n     * Generic error for screensharing failure.\n     */\n    SCREENSHARING_GENERIC_ERROR = 'gum.screensharing_generic_error',\n\n    /**\n     * Error in getDisplayMedia when not supported. Can happen in Electron if no\n     * permission handler was set.\n     */\n    SCREENSHARING_NOT_SUPPORTED_ERROR = 'gdm.screen_sharing_not_supported',\n\n    /**\n     * An error which indicates that user canceled screen sharing window\n     * selection dialog.\n     */\n    SCREENSHARING_USER_CANCELED = 'gum.screensharing_user_canceled',\n\n    /**\n     * Indicates that the timeout passed to the obtainAudioAndVideoPermissions has expired without GUM resolving.\n     */\n    TIMEOUT = 'gum.timeout',\n\n    /**\n     * An error which indicates that track has been already disposed and cannot\n     * be longer used.\n     */\n    TRACK_IS_DISPOSED = 'track.track_is_disposed',\n\n    /**\n     * An error which indicates that track has no MediaStream associated.\n     */\n    TRACK_NO_STREAM_FOUND = 'track.no_stream_found',\n\n    /**\n     * An error which indicates that no tracks were found in the media stream\n     */\n    TRACK_NO_STREAM_TRACKS_FOUND = 'track.no_stream_tracks_found',\n\n    /**\n     * An error which indicates that there are too many tracks in the provided media stream\n     */\n    TRACK_TOO_MANY_TRACKS_IN_STREAM = 'track.too_many_tracks_in_stream',\n\n    /**\n     * An error which indicates that requested video resolution is not supported\n     * by a webcam.\n     */\n    UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution'\n}\n\n// exported for backward compatibility\nexport const CONSTRAINT_FAILED = JitsiTrackErrors.CONSTRAINT_FAILED;\nexport const ELECTRON_DESKTOP_PICKER_ERROR = JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR;\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND = JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND;\nexport const GENERAL = JitsiTrackErrors.GENERAL;\nexport const NOT_FOUND = JitsiTrackErrors.NOT_FOUND;\nexport const PERMISSION_DENIED = JitsiTrackErrors.PERMISSION_DENIED;\nexport const SCREENSHARING_GENERIC_ERROR = JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR;\nexport const SCREENSHARING_NOT_SUPPORTED_ERROR = JitsiTrackErrors.SCREENSHARING_NOT_SUPPORTED_ERROR;\nexport const SCREENSHARING_USER_CANCELED = JitsiTrackErrors.SCREENSHARING_USER_CANCELED;\nexport const TIMEOUT = JitsiTrackErrors.TIMEOUT;\nexport const TRACK_IS_DISPOSED = JitsiTrackErrors.TRACK_IS_DISPOSED;\nexport const TRACK_NO_STREAM_FOUND = JitsiTrackErrors.TRACK_NO_STREAM_FOUND;\nexport const UNSUPPORTED_RESOLUTION = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\nexport const TRACK_TOO_MANY_TRACKS_IN_STREAM = JitsiTrackErrors.TRACK_TOO_MANY_TRACKS_IN_STREAM;\nexport const TRACK_NO_STREAM_TRACKS_FOUND = JitsiTrackErrors.TRACK_NO_STREAM_TRACKS_FOUND;\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nexport interface IGumError {\n    constraint?: string;\n    constraintName?: string;\n    message?: string;\n    name?: string;\n    stack?: string;\n}\n\nexport interface IVideoConstraints {\n    mandatory?: { [key: string]: string | number; };\n}\n\nexport interface IGumOptions {\n    video?: IVideoConstraints;\n}\n\nexport interface IGum {\n    constraints?: IGumOptions | string;\n    devices?: ('audio' | 'video' | 'desktop' | 'screen' | 'audiooutput')[];\n    error: IGumError;\n}\n\nexport type DeviceType = 'audio' | 'video' | 'desktop' | 'screen' | 'audiooutput';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP: { [key: string]: string; } = {\n    [JitsiTrackErrors.UNSUPPORTED_RESOLUTION]: 'Video resolution is not supported: ',\n    [JitsiTrackErrors.SCREENSHARING_USER_CANCELED]: 'User canceled screen sharing prompt',\n    [JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]: 'Unknown error from screensharing',\n    [JitsiTrackErrors.SCREENSHARING_NOT_SUPPORTED_ERROR]: 'Not supported',\n    [JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]: 'Unkown error from desktop picker',\n    [JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]: 'Failed to detect desktop picker',\n    [JitsiTrackErrors.GENERAL]: 'Generic getUserMedia error',\n    [JitsiTrackErrors.PERMISSION_DENIED]: 'User denied permission to use device(s): ',\n    [JitsiTrackErrors.NOT_FOUND]: 'Requested device(s) was/were not found: ',\n    [JitsiTrackErrors.CONSTRAINT_FAILED]: 'Constraint could not be satisfied: ',\n    [JitsiTrackErrors.TIMEOUT]: 'Could not start media source. Timeout occurred!',\n    [JitsiTrackErrors.TRACK_IS_DISPOSED]: 'Track has been already disposed',\n    [JitsiTrackErrors.TRACK_NO_STREAM_FOUND]: 'Track does not have an associated Media Stream'\n};\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n */\nexport default class JitsiTrackError extends Error {\n    public gum?: IGum;\n\n    /**\n     * @constructor\n     * @param {IGumError|string} error - error object or error name\n     * @param {IGumOptions|string} [options] - getUserMedia constraints object or error message\n     * @param {DeviceType[]} [devices] - list of getUserMedia requested devices\n     */\n    constructor(\n            error: IGumError | string,\n            options?: IGumOptions | string,\n            devices?: DeviceType[]\n    ) {\n        super();\n\n        if (typeof error === 'object' && typeof error.name !== 'undefined') {\n            /**\n             * Additional information about original getUserMedia error\n             * and constraints.\n             * @type {IGum}\n             */\n            this.gum = {\n                error,\n                constraints: options,\n                devices: devices && Array.isArray(devices) ? devices.slice(0) : undefined\n            };\n\n            switch (error.name) {\n            case 'NotAllowedError':\n            case 'PermissionDeniedError':\n            case 'SecurityError':\n                this.name = JitsiTrackErrors.PERMISSION_DENIED;\n                this.message = TRACK_ERROR_TO_MESSAGE_MAP[this.name] + (this.gum.devices || []).join(', ');\n                break;\n            case 'DevicesNotFoundError':\n            case 'NotFoundError':\n                this.name = JitsiTrackErrors.NOT_FOUND;\n                this.message = TRACK_ERROR_TO_MESSAGE_MAP[this.name] + (this.gum.devices || []).join(', ');\n                break;\n            case 'ConstraintNotSatisfiedError':\n            case 'OverconstrainedError': {\n                const constraintName = error.constraintName || error.constraint;\n\n                // we treat deviceId as unsupported resolution, as we want to\n                // retry and finally if everything fails to remove deviceId from\n                // mandatory constraints\n                if (typeof options !== 'string'\n                        && options?.video\n                        && (!devices || devices.indexOf('video') > -1)\n                        && (constraintName === 'minWidth'\n                            || constraintName === 'maxWidth'\n                            || constraintName === 'minHeight'\n                            || constraintName === 'maxHeight'\n                            || constraintName === 'width'\n                            || constraintName === 'height'\n                            || constraintName === 'deviceId')) {\n                    this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                    this.message = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                            + this.getResolutionFromFailedConstraint(constraintName, options);\n                } else {\n                    this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                    this.message = TRACK_ERROR_TO_MESSAGE_MAP[this.name] + error.constraintName;\n                }\n                break;\n            }\n            default:\n                this.name = JitsiTrackErrors.GENERAL;\n                this.message = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n                break;\n            }\n        } else if (typeof error === 'string') {\n            if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n                this.name = error;\n                this.message = typeof options === 'string' ? options : TRACK_ERROR_TO_MESSAGE_MAP[error];\n            } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n                this.message = error;\n            }\n        } else {\n            throw new Error('Invalid arguments');\n        }\n\n        this.stack = typeof error === 'string' ? new Error().stack : error.stack;\n    }\n\n    /**\n     * Gets failed resolution constraint from corresponding object.\n     * @param failedConstraintName - The name of the failed constraint\n     * @param constraints - The constraints object\n     * @returns The resolution value or empty string\n     */\n    private getResolutionFromFailedConstraint(failedConstraintName: string, constraints: IGumOptions): string | number {\n        if (constraints?.video?.mandatory) {\n            switch (failedConstraintName) {\n            case 'width':\n                return constraints.video.mandatory.minWidth;\n            case 'height':\n                return constraints.video.mandatory.minHeight;\n            default:\n                return constraints.video.mandatory[failedConstraintName] || '';\n            }\n        }\n\n        return '';\n    }\n}\n","/**\n * The events for the connection.\n */\n\nexport enum JitsiConnectionEvents {\n\n    /**\n     * Indicates that the connection has been disconnected. The event provides\n     * the following parameters to its listeners:\n     *\n     * @param msg {string} a message associated with the disconnect such as the\n     * last (known) error message\n     */\n    CONNECTION_DISCONNECTED = 'connection.connectionDisconnected',\n\n    /**\n     * Indicates that the connection has been established. The event provides\n     * the following parameters to its listeners:\n     *\n     * @param id {string} the ID of the local endpoint/participant/peer (within\n     * the context of the established connection)\n     */\n    CONNECTION_ESTABLISHED = 'connection.connectionEstablished',\n\n    /**\n     * Indicates that the connection has been failed for some reason. The event\n     * provides the following parameters to its listeners:\n     *\n     * @param errType {JitsiConnectionErrors} the type of error associated with\n     * the failure\n     * @param errReason {string} the error (message) associated with the failure\n     * @param credentials {object} the credentials used to connect (if any)\n     * @param errReasonDetails {object} an optional object with details about\n     * the error, like shard moving, suspending. Used for analytics purposes.\n     */\n    CONNECTION_FAILED = 'connection.connectionFailed',\n\n    /**\n     * The connection is redirected to a visitor node.\n     */\n    CONNECTION_REDIRECTED = 'connection.redirected',\n\n    /**\n     * Indicates that the display name is required over this connection and need to be supplied when\n     * joining the room.\n     * There are cases like lobby room where display name is required.\n     */\n    DISPLAY_NAME_REQUIRED = 'connection.display_name_required',\n\n    /**\n     * Indicates that the connection properties have been updated.\n     * @param properties {object} - All available connection properties (e.g. shard, region).\n     */\n    PROPERTIES_UPDATED = 'connection.propertiesUpdated',\n}\n\n// exported for backward compatibility\nexport const CONNECTION_DISCONNECTED = JitsiConnectionEvents.CONNECTION_DISCONNECTED;\nexport const CONNECTION_ESTABLISHED = JitsiConnectionEvents.CONNECTION_ESTABLISHED;\nexport const CONNECTION_FAILED = JitsiConnectionEvents.CONNECTION_FAILED;\nexport const CONNECTION_REDIRECTED = JitsiConnectionEvents.CONNECTION_REDIRECTED;\nexport const DISPLAY_NAME_REQUIRED = JitsiConnectionEvents.DISPLAY_NAME_REQUIRED;\nexport const PROPERTIES_UPDATED = JitsiConnectionEvents.PROPERTIES_UPDATED;\n","import Bourne from '@hapi/bourne';\n\n/**\n * Safely parse JSON payloads.\n *\n * @param {string} data - The payload to be parsed.\n * @returns The parsed object.\n */\nexport function safeJsonParse(data) {\n    return Bourne.parse(data);\n}\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nexport default arrayMap;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nexport default isSymbol;\n","import Symbol from './_Symbol.js';\nimport arrayMap from './_arrayMap.js';\nimport isArray from './isArray.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nexport default baseToString;\n","import basePropertyOf from './_basePropertyOf.js';\n\n/** Used to map HTML entities to characters. */\nvar htmlUnescapes = {\n  '&amp;': '&',\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&#39;': \"'\"\n};\n\n/**\n * Used by `_.unescape` to convert HTML entities to characters.\n *\n * @private\n * @param {string} chr The matched character to unescape.\n * @returns {string} Returns the unescaped character.\n */\nvar unescapeHtmlChar = basePropertyOf(htmlUnescapes);\n\nexport default unescapeHtmlChar;\n","/**\n * The base implementation of `_.propertyOf` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyOf(object) {\n  return function(key) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nexport default basePropertyOf;\n","import toString from './toString.js';\nimport unescapeHtmlChar from './_unescapeHtmlChar.js';\n\n/** Used to match HTML entities and HTML characters. */\nvar reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\n    reHasEscapedHtml = RegExp(reEscapedHtml.source);\n\n/**\n * The inverse of `_.escape`; this method converts the HTML entities\n * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\n * their corresponding characters.\n *\n * **Note:** No other HTML entities are unescaped. To unescape additional\n * HTML entities use a third-party library like [_he_](https://mths.be/he).\n *\n * @static\n * @memberOf _\n * @since 0.6.0\n * @category String\n * @param {string} [string=''] The string to unescape.\n * @returns {string} Returns the unescaped string.\n * @example\n *\n * _.unescape('fred, barney, &amp; pebbles');\n * // => 'fred, barney, & pebbles'\n */\nfunction unescape(string) {\n  string = toString(string);\n  return (string && reHasEscapedHtml.test(string))\n    ? string.replace(reEscapedHtml, unescapeHtmlChar)\n    : string;\n}\n\nexport default unescape;\n","import baseToString from './_baseToString.js';\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nexport default toString;\n","/**\n * The errors for the connection.\n */\n\nexport enum JitsiConnectionErrors {\n\n    /**\n     * When the conference-request to jicofo fails.\n     */\n    CONFERENCE_REQUEST_FAILED = 'connection.conferenceRequestFailed',\n\n    /**\n     * Indicates that the connection was dropped with an error which was most likely\n     * caused by some networking issues. The dropped term in this context means that\n     * the connection was closed unexpectedly (not on user's request).\n     *\n     * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n     * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n     * could also happen when BOSH request is sent to the server with the session-id\n     * that is not know to the server. But this should not happen in lib-jitsi-meet\n     * case as long as the service is configured correctly (there is no bug).\n     */\n    CONNECTION_DROPPED_ERROR = 'connection.droppedError',\n\n    /**\n     * Not ready error. When the conference error is not ready according to jicofo.\n     */\n    NOT_LIVE_ERROR = 'connection.notLiveError',\n\n    /**\n     * Not specified errors.\n     */\n    OTHER_ERROR = 'connection.otherError',\n\n    /**\n     * Indicates that a password is required in order to join the conference.\n     */\n    PASSWORD_REQUIRED = 'connection.passwordRequired',\n\n    /**\n     * Indicates that the connection was dropped, because of too many 5xx HTTP\n     * errors on BOSH requests.\n     */\n    SERVER_ERROR = 'connection.serverError'\n}\n\n// exported for backward compatibility\nexport const CONFERENCE_REQUEST_FAILED = JitsiConnectionErrors.CONFERENCE_REQUEST_FAILED;\nexport const CONNECTION_DROPPED_ERROR = JitsiConnectionErrors.CONNECTION_DROPPED_ERROR;\nexport const NOT_LIVE_ERROR = JitsiConnectionErrors.NOT_LIVE_ERROR;\nexport const OTHER_ERROR = JitsiConnectionErrors.OTHER_ERROR;\nexport const PASSWORD_REQUIRED = JitsiConnectionErrors.PASSWORD_REQUIRED;\nexport const SERVER_ERROR = JitsiConnectionErrors.SERVER_ERROR;\n","\nexport enum XEP {\n\n    /**\n     * XEP-0338 - Signals the usage of bundled media, i.e., allows the use of a single set of ICE candidates for\n     * multiple media descriptions.\n     * https://xmpp.org/extensions/attic/xep-0338-1.0.0.html\n     */\n    BUNDLE_MEDIA = 'urn:xmpp:jingle:apps:grouping:0',\n\n    /**\n     * XEP-0320 - Signals the use of DTLS-SRTP in Jingle session.\n     * https://xmpp.org/extensions/xep-0320.html\n     */\n    DTLS_SRTP = 'urn:xmpp:jingle:apps:dtls:0',\n\n    /**\n     * XEP-0176 - Signaling ICE-UDP transport method.\n     * https://xmpp.org/extensions/xep-0176.html\n     */\n    ICE_UDP_TRANSPORT = 'urn:xmpp:jingle:transports:ice-udp:1',\n\n    /**\n     * XEP-0166 - Jingle.\n     * https://xmpp.org/extensions/xep-0166.html\n     */\n    JINGLE = 'urn:xmpp:jingle:1',\n\n    /**\n     * XEP-0327 - Rayo for allowing third-party control over media sessions.\n     */\n    RAYO = 'urn:xmpp:rayo:client:1',\n\n    /**\n     * XEP-0167 - Signals support for RTP audio.\n     * https://xmpp.org/extensions/xep-0167.html#support\n     */\n    RTP_AUDIO = 'urn:xmpp:jingle:apps:rtp:audio',\n\n    /**\n     * XEP-0293 - Signals the use of RTP Feedback Negotiation.\n     * https://xmpp.org/extensions/xep-0293.html\n     */\n    RTP_FEEDBACK = 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n\n    /**\n     * XEP-0294 - Signals the use of RTP Header Extensions.\n     * https://xmpp.org/extensions/xep-0294.html\n     */\n    RTP_HEADER_EXTENSIONS = 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n\n    /**\n     * XEP-0167 - Signals parameters necessary for media sessions using RTP.\n     * https://xmpp.org/extensions/xep-0167.html\n     */\n    RTP_MEDIA = 'urn:xmpp:jingle:apps:rtp:1',\n\n    /**\n     * XEP-0167 - Signals support for RTP video.\n     * https://xmpp.org/extensions/xep-0167.html#support\n     */\n    RTP_VIDEO = 'urn:xmpp:jingle:apps:rtp:video',\n\n    /**\n     * XEP-0343 - Signaling WebRTC datachannels (bridge channel) in Jingle that uses DTLS/SCTP on top of ICE.\n     * https://xmpp.org/extensions/xep-0343.html\n     */\n    SCTP_DATA_CHANNEL = 'urn:xmpp:jingle:transports:dtls-sctp:1',\n\n    /**\n     * XEP-0339 - Signals Source-Specific Media Attributes in Jingle.\n     * https://xmpp.org/extensions/xep-0339.html\n     */\n    SOURCE_ATTRIBUTES = 'urn:xmpp:jingle:apps:rtp:ssma:0'\n}\n","\n/**\n * Promise-like object which can be passed around for resolving it later. It\n * implements the \"thenable\" interface, so it can be used wherever a Promise\n * could be used.\n *\n * In addition a \"reject on timeout\" functionality is provided.\n */\nexport default class Deferred {\n    /**\n     * Instantiates a Deferred object.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (...args) => {\n                this.clearRejectTimeout();\n                resolve(...args);\n            };\n            this.reject = (...args) => {\n                this.clearRejectTimeout();\n                reject(...args);\n            };\n        });\n        this.then = this.promise.then.bind(this.promise);\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n\n    /**\n     * Clears the reject timeout.\n     */\n    clearRejectTimeout() {\n        clearTimeout(this._timeout);\n    }\n\n    /**\n     * Rejects the promise after the given timeout.\n     */\n    setRejectTimeout(ms) {\n        this._timeout = setTimeout(() => {\n            this.reject(new Error('timeout'));\n        }, ms);\n    }\n}\n","import EventEmitter, { EventListener } from './EventEmitter';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    public eventEmitter: EventEmitter;\n    public addEventListener: typeof EventEmitter.prototype.addListener;\n    public removeEventListener: typeof EventEmitter.prototype.removeListener;\n    public on: typeof EventEmitter.prototype.addListener;\n    public off: typeof EventEmitter.prototype.removeListener;\n\n    /**\n     * Creates new instance.\n     * @constructor\n     */\n    constructor() {\n        this.eventEmitter = new EventEmitter();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new cancellable listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addCancellableListener(eventName: string, listener: EventListener): () => void {\n        this.addListener(eventName, listener);\n\n        return () => this.removeListener(eventName, listener);\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {EventEmitter} - The emitter, so that calls can be chained.\n     */\n    addListener(eventName: string, listener: EventListener): EventEmitter {\n        return this.eventEmitter.addListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     * @returns {EventEmitter} - The emitter, so that calls can be chained.\n     */\n    removeListener(eventName: string, listener: EventListener): EventEmitter {\n        return this.eventEmitter.removeListener(eventName, listener);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emit(event: string, ...args: any[]): void {\n        this.eventEmitter.emit(event, ...args);\n    }\n}\n","/* global RTCRtpScriptTransform */\n\nimport { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger('modules/e2ee/E2EEContext');\n\n// Flag to set on senders / receivers to avoid setting up the encryption transform\n// more than once.\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\n\n/**\n * Context encapsulating the cryptography bits required for E2EE.\n * This uses the WebRTC Insertable Streams API which is explained in\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\n * that provides access to the encoded frames and allows them to be transformed.\n *\n * The encoded frame format is explained below in the _encodeFunction method.\n * High level design goals were:\n * - do not require changes to existing SFUs and retain (VP8) metadata.\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\n * - allow for the key to be rotated frequently.\n */\nexport default class E2EEcontext {\n    /**\n     * Build a new E2EE context instance, which will be used in a given conference.\n     * @param {boolean} [options.sharedKey] - whether there is a uniques key shared amoung all participants.\n     */\n    constructor({ sharedKey } = {}) {\n        // Determine the URL for the worker script. Relative URLs are relative to\n        // the entry point, not the script that launches the worker.\n        let baseUrl = '';\n        const ljm = document.querySelector('script[src*=\"lib-jitsi-meet\"]');\n\n        if (ljm) {\n            const idx = ljm.src.lastIndexOf('/');\n\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\n        }\n\n        let workerUrl = `${baseUrl}lib-jitsi-meet.e2ee-worker.js`;\n\n        // If there is no baseUrl then we create the worker in a normal way\n        // as you cant load scripts inside blobs from relative paths.\n        // See: https://www.html5rocks.com/en/tutorials/workers/basics/#toc-inlineworkers-loadingscripts\n        if (baseUrl && baseUrl !== '/') {\n            // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\n            // synchronously load the JS.\n            const workerBlob\n                = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\n\n            workerUrl = window.URL.createObjectURL(workerBlob);\n        }\n\n        this._worker = new Worker(workerUrl, { name: 'E2EE Worker' });\n\n        this._worker.onerror = e => logger.error(e);\n\n        this._worker.postMessage({\n            operation: 'initialize',\n            sharedKey\n        });\n    }\n\n    /**\n     * Cleans up all state associated with the given participant. This is needed when a\n     * participant leaves the current conference.\n     *\n     * @param {string} participantId - The participant that just left.\n     */\n    cleanup(participantId) {\n        this._worker.postMessage({\n            operation: 'cleanup',\n            participantId\n        });\n    }\n\n    /**\n     * Cleans up all state associated with all participants in the conference. This is needed when disabling e2ee.\n     *\n     */\n    cleanupAll() {\n        this._worker.postMessage({\n            operation: 'cleanupAll'\n        });\n    }\n\n    /**\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\n     * a frame decoder.\n     *\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\n     * @param {string} kind - The kind of track this receiver belongs to.\n     * @param {string} participantId - The participant id that this receiver belongs to.\n     */\n    handleReceiver(receiver, kind, participantId) {\n        if (receiver[kJitsiE2EE]) {\n            return;\n        }\n        receiver[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'decode',\n                participantId\n            };\n\n            receiver.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const receiverStreams = receiver.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'decode',\n                readableStream: receiverStreams.readable,\n                writableStream: receiverStreams.writable,\n                participantId\n            }, [ receiverStreams.readable, receiverStreams.writable ]);\n        }\n    }\n\n    /**\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\n     * a frame encoder.\n     *\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\n     * @param {string} kind - The kind of track this sender belongs to.\n     * @param {string} participantId - The participant id that this sender belongs to.\n     */\n    handleSender(sender, kind, participantId) {\n        if (sender[kJitsiE2EE]) {\n            return;\n        }\n        sender[kJitsiE2EE] = true;\n\n        if (window.RTCRtpScriptTransform) {\n            const options = {\n                operation: 'encode',\n                participantId\n            };\n\n            sender.transform = new RTCRtpScriptTransform(this._worker, options);\n        } else {\n            const senderStreams = sender.createEncodedStreams();\n\n            this._worker.postMessage({\n                operation: 'encode',\n                readableStream: senderStreams.readable,\n                writableStream: senderStreams.writable,\n                participantId\n            }, [ senderStreams.readable, senderStreams.writable ]);\n        }\n    }\n\n    /**\n     * Set the E2EE enabled state.\n     *\n     * @param {boolean} enabled - whether E2EE is enabled or not.\n     */\n    setEnabled(enabled) {\n        this._worker.postMessage({\n            operation: 'setEnabled',\n            enabled\n        });\n    }\n\n    /**\n     * Set the E2EE key for the specified participant.\n     *\n     * @param {string} participantId - the ID of the participant who's key we are setting.\n     * @param {Uint8Array | boolean} key - they key for the given participant.\n     * @param {Number} keyIndex - the key index.\n     */\n    setKey(participantId, key, keyIndex) {\n        this._worker.postMessage({\n            operation: 'setKey',\n            key,\n            keyIndex,\n            participantId\n        });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\n\nimport E2EEContext from './E2EEContext';\n\nconst logger = getLogger('modules/e2ee/KeyHandler');\n\n/**\n * Abstract class that integrates {@link E2EEContext} with a key management system.\n */\nexport class KeyHandler extends Listenable {\n    /**\n     * Build a new KeyHandler instance, which will be used in a given conference.\n     * @param {JitsiConference} conference - the current conference.\n     * @param {object} options - the options passed to {E2EEContext}, see implemention.\n     */\n    constructor(conference, options = {}) {\n        super();\n\n        this.conference = conference;\n        this.e2eeCtx = new E2EEContext(options);\n\n        this.enabled = false;\n        this._enabling = undefined;\n        this._firstEnable = false;\n\n        // Conference media events in order to attach the encryptor / decryptor.\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\n        // added instead of shenanigans around conference track events and track muted.\n        //\n\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            this._onMediaSessionStarted.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            track => track.isLocal() && this._onLocalTrackAdded(track));\n        this.conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\n        this.conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        this._enabling && await this._enabling;\n\n        if (enabled === this.enabled) {\n            return;\n        }\n\n        this._enabling = new Deferred();\n\n        this.enabled = enabled;\n\n        this._setEnabled && await this._setEnabled(enabled);\n\n        this.conference.setLocalParticipantProperty('e2ee.enabled', enabled);\n\n        // Only restart media sessions if E2EE is enabled. If it's later disabled\n        // we'll continue to use the existing media sessions with an empty transform.\n        if (!this._firstEnable && enabled) {\n            this._firstEnable = true;\n            this.conference._restartMediaSessions();\n        }\n\n        this.e2eeCtx.setEnabled(enabled);\n\n        this._enabling.resolve();\n    }\n\n    /**\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\n     * @private\n     */\n    _onLocalTrackAdded(track) {\n        for (const session of this.conference.getMediaSessions()) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setups E2E encryption for the new session.\n     * @param {JingleSessionPC} session - the new media session.\n     * @private\n     */\n    _onMediaSessionStarted(session) {\n        const localTracks = this.conference.getLocalTracks();\n\n        for (const track of localTracks) {\n            this._setupSenderE2EEForTrack(session, track);\n        }\n    }\n\n    /**\n     * Setup E2EE for the receiving side.\n     *\n     * @private\n     */\n    _setupReceiverE2EEForTrack(tpc, track) {\n        if (!this.enabled && !this._firstEnable) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (receiver) {\n            this.e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE for the sending side.\n     *\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\n     * @private\n     */\n    _setupSenderE2EEForTrack(session, track) {\n        if (!this.enabled && !this._firstEnable) {\n            return;\n        }\n\n        const pc = session.peerconnection;\n        const sender = pc && pc.findSenderForTrack(track.track);\n\n        if (sender) {\n            this.e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\n        } else {\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\n        }\n    }\n\n    /**\n     * Setup E2EE on the sender that is created for the unmuted local video track.\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\n            for (const session of this.conference.getMediaSessions()) {\n                this._setupSenderE2EEForTrack(session, track);\n            }\n        }\n    }\n}\n","import { KeyHandler } from './KeyHandler';\n\n/**\n * This module integrates {@link E2EEContext} with {external} in order to set the keys for encryption.\n */\nexport class ExternallyManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new ExternallyManagedKeyHandler instance, which will be used in a given conference.\n     * @param conference - the current conference.\n     */\n    constructor(conference) {\n        super(conference, { sharedKey: true });\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setKey(keyInfo) {\n        this.e2eeCtx.setKey(undefined, { encryptionKey: keyInfo.encryptionKey }, keyInfo.index);\n    }\n}\n","import root from './_root.js';\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nexport default now;\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nexport default trimmedEndIndex;\n","import trimmedEndIndex from './_trimmedEndIndex.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nexport default baseTrim;\n","import baseTrim from './_baseTrim.js';\nimport isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import isObject from './isObject.js';\nimport now from './now.js';\nimport toNumber from './toNumber.js';\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nexport default debounce;\n","export enum E2EEErrors {\n    E2EE_SAS_CHANNEL_VERIFICATION_FAILED = 'e2ee.sas.channel-verification-failed',\n    E2EE_SAS_COMMITMENT_MISMATCHED = 'e2ee.sas.commitment-mismatched',\n    E2EE_SAS_INVALID_SAS_VERIFICATION = 'e2ee.sas.invalid-sas-verification',\n    E2EE_SAS_KEYS_MAC_MISMATCH = 'e2ee.sas.keys-mac-mismatch',\n    E2EE_SAS_MAC_MISMATCH = 'e2ee.sas.mac-mismatch',\n    E2EE_SAS_MISSING_KEY = 'e2ee.sas.missing-key'\n}\n","/* eslint-disable no-bitwise */\n/* eslint-disable no-mixed-operators */\n\n/**\n * Generates a SAS composed of decimal numbers.\n * Borrowed from the Matrix JS SDK.\n *\n * @param {Uint8Array} sasBytes - The bytes from sas.generate_bytes.\n * @returns Array<number>\n */\nfunction generateDecimalSas(sasBytes: Uint8Array): number[] {\n    /**\n     *      +--------+--------+--------+--------+--------+\n     *      | Byte 0 | Byte 1 | Byte 2 | Byte 3 | Byte 4 |\n     *      +--------+--------+--------+--------+--------+\n     * bits: 87654321 87654321 87654321 87654321 87654321\n     *       \\____________/\\_____________/\\____________/\n     *         1st number    2nd number     3rd number\n     */\n    return [\n        (sasBytes[0] << 5 | sasBytes[1] >> 3) + 1000,\n        ((sasBytes[1] & 0x7) << 10 | sasBytes[2] << 2 | sasBytes[3] >> 6) + 1000,\n        ((sasBytes[3] & 0x3f) << 7 | sasBytes[4] >> 1) + 1000\n    ];\n}\n\nconst emojiMapping: [string, string][] = [\n    [ '🐶', 'dog' ],\n    [ '🐱', 'cat' ],\n    [ '🦁', 'lion' ],\n    [ '🐎', 'horse' ],\n    [ '🦄', 'unicorn' ],\n    [ '🐷', 'pig' ],\n    [ '🐘', 'elephant' ],\n    [ '🐰', 'rabbit' ],\n    [ '🐼', 'panda' ],\n    [ '🐓', 'rooster' ],\n    [ '🐧', 'penguin' ],\n    [ '🐢', 'turtle' ],\n    [ '🐟', 'fish' ],\n    [ '🐙', 'octopus' ],\n    [ '🦋', 'butterfly' ],\n    [ '🌷', 'flower' ],\n    [ '🌳', 'tree' ],\n    [ '🌵', 'cactus' ],\n    [ '🍄', 'mushroom' ],\n    [ '🌏', 'globe' ],\n    [ '🌙', 'moon' ],\n    [ '☁️', 'cloud' ],\n    [ '🔥', 'fire' ],\n    [ '🍌', 'banana' ],\n    [ '🍎', 'apple' ],\n    [ '🍓', 'strawberry' ],\n    [ '🌽', 'corn' ],\n    [ '🍕', 'pizza' ],\n    [ '🎂', 'cake' ],\n    [ '❤️', 'heart' ],\n    [ '🙂', 'smiley' ],\n    [ '🤖', 'robot' ],\n    [ '🎩', 'hat' ],\n    [ '👓', 'glasses' ],\n    [ '🔧', 'spanner' ],\n    [ '🎅', 'santa' ],\n    [ '👍', 'thumbs up' ],\n    [ '☂️', 'umbrella' ],\n    [ '⌛', 'hourglass' ],\n    [ '⏰', 'clock' ],\n    [ '🎁', 'gift' ],\n    [ '💡', 'light bulb' ],\n    [ '📕', 'book' ],\n    [ '✏️', 'pencil' ],\n    [ '📎', 'paperclip' ],\n    [ '✂️', 'scissors' ],\n    [ '🔒', 'lock' ],\n    [ '🔑', 'key' ],\n    [ '🔨', 'hammer' ],\n    [ '☎️', 'telephone' ],\n    [ '🏁', 'flag' ],\n    [ '🚂', 'train' ],\n    [ '🚲', 'bicycle' ],\n    [ '✈️', 'aeroplane' ],\n    [ '🚀', 'rocket' ],\n    [ '🏆', 'trophy' ],\n    [ '⚽', 'ball' ],\n    [ '🎸', 'guitar' ],\n    [ '🎺', 'trumpet' ],\n    [ '🔔', 'bell' ],\n    [ '⚓️', 'anchor' ],\n    [ '🎧', 'headphones' ],\n    [ '📁', 'folder' ],\n    [ '📌', 'pin' ]\n];\n\n/**\n * Generates a SAS composed of defimal numbers.\n * Borrowed from the Matrix JS SDK.\n *\n * @param {Uint8Array} sasBytes - The bytes from sas.generate_bytes.\n * @returns Array<number>\n */\nfunction generateEmojiSas(sasBytes: Uint8Array): [string, string][] {\n    // Just like base64.\n    const emojis = [\n        sasBytes[0] >> 2,\n        (sasBytes[0] & 0x3) << 4 | sasBytes[1] >> 4,\n        (sasBytes[1] & 0xf) << 2 | sasBytes[2] >> 6,\n        sasBytes[2] & 0x3f,\n        sasBytes[3] >> 2,\n        (sasBytes[3] & 0x3) << 4 | sasBytes[4] >> 4,\n        (sasBytes[4] & 0xf) << 2 | sasBytes[5] >> 6\n    ];\n\n    return emojis.map(num => emojiMapping[num]);\n}\n\nconst sasGenerators: { [key: string]: (sasBytes: Uint8Array) => number[] | [string, string][]; } = {\n    decimal: generateDecimalSas,\n    emoji: generateEmojiSas\n};\n\nexport interface ISas {\n    [key: string]: number[] | [string, string][];\n}\n\n/**\n * Generates multiple SAS for the given bytes.\n *\n * @param {Uint8Array} sasBytes - The bytes from sas.generate_bytes.\n * @returns {ISas}\n */\nexport function generateSas(sasBytes: Uint8Array): ISas {\n    const sas: ISas = {};\n\n    Object.keys(sasGenerators).forEach(method => {\n        sas[method] = sasGenerators[method](sasBytes);\n    });\n\n    return sas;\n}\n","/* global Olm */\n\nimport { safeJsonParse as _safeJsonParse } from '@jitsi/js-utils/json';\nimport { getLogger } from '@jitsi/logger';\nimport base64js from 'base64-js';\nimport { isEqual } from 'lodash-es';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Deferred from '../util/Deferred';\nimport Listenable from '../util/Listenable';\nimport { FEATURE_E2EE, JITSI_MEET_MUC_TYPE } from '../xmpp/xmpp';\n\nimport { E2EEErrors } from './E2EEErrors';\nimport { generateSas } from './SAS';\n\nconst logger = getLogger('modules/e2ee/OlmAdapter');\n\nconst REQ_TIMEOUT = 5 * 1000;\nconst OLM_MESSAGE_TYPE = 'olm';\nconst OLM_MESSAGE_TYPES = {\n    ERROR: 'error',\n    KEY_INFO: 'key-info',\n    KEY_INFO_ACK: 'key-info-ack',\n    SESSION_ACK: 'session-ack',\n    SESSION_INIT: 'session-init',\n    SAS_START: 'sas-start',\n    SAS_ACCEPT: 'sas-accept',\n    SAS_KEY: 'sas-key',\n    SAS_MAC: 'sas-mac'\n};\n\nconst OLM_SAS_NUM_BYTES = 6;\nconst OLM_KEY_VERIFICATION_MAC_INFO = 'Jitsi-KEY_VERIFICATION_MAC';\nconst OLM_KEY_VERIFICATION_MAC_KEY_IDS = 'Jitsi-KEY_IDS';\n\nconst kOlmData = Symbol('OlmData');\n\nconst OlmAdapterEvents = {\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\n    PARTICIPANT_SAS_AVAILABLE: 'olm.participant_sas_available',\n    PARTICIPANT_SAS_READY: 'olm.participant_sas_ready',\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated',\n    PARTICIPANT_VERIFICATION_COMPLETED: 'olm.participant_verification_completed'\n};\n\n/**\n * This class implements an End-to-End Encrypted communication channel between every two peers\n * in the conference. This channel uses libolm to achieve E2EE.\n *\n * The created channel is then used to exchange the secret key that each participant will use\n * to encrypt the actual media (see {@link E2EEContext}).\n *\n * A simple JSON message based protocol is implemented, which follows a request - response model:\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\n *                 by the participant who just joined, to everyone else.\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\n *                encrypted data, more specifically the sender's current key.\n * - key-info: Includes the sender's most up to date key information.\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\n *                 the sender's key information, if available.\n * - error: Indicates a request processing error has occurred.\n *\n * These requessts and responses are transport independent. Currently they are sent using XMPP\n * MUC private messages.\n */\nexport class OlmAdapter extends Listenable {\n    /**\n     * Creates an adapter instance for the given conference.\n     */\n    constructor(conference) {\n        super();\n\n        this._conf = conference;\n        this._init = new Deferred();\n        this._mediaKey = undefined;\n        this._mediaKeyIndex = -1;\n        this._reqs = new Map();\n        this._sessionInitialization = undefined;\n\n        if (OlmAdapter.isSupported()) {\n            this._bootstrapOlm();\n\n            this._conf.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\n            this._conf.on(JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this._onParticipantPropertyChanged.bind(this));\n        } else {\n            this._init.reject(new Error('Olm not supported'));\n        }\n    }\n\n    /**\n     * Returns the current participants conference ID.\n     *\n     * @returns {string}\n     */\n    get myId() {\n        return this._conf.myUserId();\n    }\n\n    /**\n     * Starts new olm sessions with every other participant that has the participantId \"smaller\" the localParticipantId.\n     */\n    async initSessions() {\n        if (this._sessionInitialization) {\n            throw new Error('OlmAdapter initSessions called multiple times');\n        } else {\n            this._sessionInitialization = new Deferred();\n\n            await this._init;\n\n            const promises = [];\n            const localParticipantId = this._conf.myUserId();\n\n            for (const participant of this._conf.getParticipants()) {\n                if (participant.hasFeature(FEATURE_E2EE) && localParticipantId < participant.getId()) {\n                    promises.push(this._sendSessionInit(participant));\n                }\n            }\n\n            await Promise.allSettled(promises);\n\n            // TODO: retry failed ones.\n\n            this._sessionInitialization.resolve();\n            this._sessionInitialization = undefined;\n        }\n    }\n\n    /**\n     * Indicates if olm is supported on the current platform.\n     *\n     * @returns {boolean}\n     */\n    static isSupported() {\n        return typeof window.Olm !== 'undefined';\n    }\n\n    /**\n     * Updates the current participant key and distributes it to all participants in the conference\n     * by sending a key-info message.\n     *\n     * @param {Uint8Array|boolean} key - The new key.\n     * @retrns {Promise<Number>}\n     */\n    async updateKey(key) {\n        // Store it locally for new sessions.\n        this._mediaKey = key;\n        this._mediaKeyIndex++;\n\n        // Broadcast it.\n        const promises = [];\n\n        for (const participant of this._conf.getParticipants()) {\n            const pId = participant.getId();\n            const olmData = this._getParticipantOlmData(participant);\n\n            // TODO: skip those who don't support E2EE.\n            if (!olmData.session) {\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\n\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            const uuid = uuidv4();\n            const data = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\n                    data: {\n                        ciphertext: this._encryptKeyInfo(olmData.session),\n                        uuid\n                    }\n                }\n            };\n            const d = new Deferred();\n\n            d.setRejectTimeout(REQ_TIMEOUT);\n            d.catch(() => {\n                this._reqs.delete(uuid);\n            });\n            this._reqs.set(uuid, d);\n            promises.push(d);\n\n            this._sendMessage(data, pId);\n        }\n\n        await Promise.allSettled(promises);\n\n        // TODO: retry failed ones?\n\n        return this._mediaKeyIndex;\n    }\n\n    /**\n     * Updates the current participant key.\n     * @param {Uint8Array|boolean} key - The new key.\n     * @returns {number}\n    */\n    updateCurrentMediaKey(key) {\n        this._mediaKey = key;\n\n        return this._mediaKeyIndex;\n    }\n\n    /**\n     * Frees the olmData session for the given participant.\n     *\n     */\n    clearParticipantSession(participant) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            olmData.session.free();\n            olmData.session = undefined;\n        }\n    }\n\n    /**\n     * Frees the olmData sessions for all participants.\n     *\n     */\n    clearAllParticipantsSessions() {\n        for (const participant of this._conf.getParticipants()) {\n            this.clearParticipantSession(participant);\n        }\n    }\n\n    /**\n     * Sends sacMac if channel verification waas successful.\n     *\n     */\n    markParticipantVerified(participant, isVerified) {\n        const olmData = this._getParticipantOlmData(participant);\n\n        const pId = participant.getId();\n\n        if (!isVerified) {\n            olmData.sasVerification = undefined;\n            logger.warn(`Verification failed for participant ${pId}`);\n            this.eventEmitter.emit(\n                OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                pId,\n                false,\n                E2EEErrors.E2EE_SAS_CHANNEL_VERIFICATION_FAILED);\n\n            return;\n        }\n\n        if (!olmData.sasVerification) {\n            logger.warn(`Participant ${pId} does not have valid sasVerification`);\n            this.eventEmitter.emit(\n                OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                pId,\n                false,\n                E2EEErrors.E2EE_SAS_INVALID_SAS_VERIFICATION);\n\n            return;\n        }\n\n        const { sas, sasMacSent } = olmData.sasVerification;\n\n        if (sas && sas.is_their_key_set() && !sasMacSent) {\n            this._sendSasMac(participant);\n\n            // Mark the MAC as sent so we don't send it multiple times.\n            olmData.sasVerification.sasMacSent = true;\n        }\n    }\n\n    /**\n     * Internal helper to bootstrap the olm library.\n     *\n     * @returns {Promise<void>}\n     * @private\n     */\n    async _bootstrapOlm() {\n        logger.debug('Initializing Olm...');\n\n        try {\n            await Olm.init();\n\n            this._olmAccount = new Olm.Account();\n            this._olmAccount.create();\n\n            this._idKeys = _safeJsonParse(this._olmAccount.identity_keys());\n\n            logger.debug(`Olm ${Olm.get_library_version().join('.')} initialized`);\n            this._init.resolve();\n            this._onIdKeysReady(this._idKeys);\n        } catch (e) {\n            logger.error('Failed to initialize Olm', e);\n            this._init.reject(e);\n        }\n    }\n\n    /**\n     * Starts the verification process for the given participant as described here\n     * https://spec.matrix.org/latest/client-server-api/#short-authentication-string-sas-verification\n     *\n     *    |                                 |\n          | m.key.verification.start        |\n          |-------------------------------->|\n          |                                 |\n          |       m.key.verification.accept |\n          |<--------------------------------|\n          |                                 |\n          | m.key.verification.key          |\n          |-------------------------------->|\n          |                                 |\n          |          m.key.verification.key |\n          |<--------------------------------|\n          |                                 |\n          | m.key.verification.mac          |\n          |-------------------------------->|\n          |                                 |\n          |          m.key.verification.mac |\n          |<--------------------------------|\n          |                                 |\n     *\n     * @param {JitsiParticipant} participant - The target participant.\n     * @returns {Promise<void>}\n     * @private\n     */\n    startVerification(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (!olmData.session) {\n            logger.warn(`Tried to start verification with participant ${pId} but we have no session`);\n\n            return;\n        }\n\n        if (olmData.sasVerification) {\n            logger.warn(`There is already a verification in progress with participant ${pId}`);\n\n            return;\n        }\n\n        olmData.sasVerification = {\n            sas: new Olm.SAS(),\n            transactionId: uuidv4()\n        };\n\n        const startContent = {\n            transactionId: olmData.sasVerification.transactionId\n        };\n\n        olmData.sasVerification.startContent = startContent;\n        olmData.sasVerification.isInitiator = true;\n\n        const startMessage = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SAS_START,\n                data: startContent\n            }\n        };\n\n        this._sendMessage(startMessage, pId);\n    }\n\n    /**\n     * Publishes our own Olmn id key in presence.\n     * @private\n     */\n    _onIdKeysReady(idKeys) {\n        logger.debug(`Olm id key ready: ${idKeys}`);\n\n        // Publish it in presence.\n        for (const keyType in idKeys) {\n            if (idKeys.hasOwnProperty(keyType)) {\n                const key = idKeys[keyType];\n\n                this._conf.setLocalParticipantProperty(`e2ee.idKey.${keyType}`, key);\n            }\n        }\n    }\n\n    /**\n     * Event posted when the E2EE signalling channel has been established with the given participant.\n     * @private\n     */\n    _onParticipantE2EEChannelReady(id) {\n        logger.debug(`E2EE channel with participant ${id} is ready`);\n    }\n\n    /**\n     * Internal helper for encrypting the current key information for a given participant.\n     *\n     * @param {Olm.Session} session - Participant's session.\n     * @returns {string} - The encrypted text with the key information.\n     * @private\n     */\n    _encryptKeyInfo(session) {\n        const keyInfo = {};\n\n        if (this._mediaKey !== undefined) {\n            keyInfo.key = this._mediaKey ? base64js.fromByteArray(this._mediaKey) : false;\n            keyInfo.keyIndex = this._mediaKeyIndex;\n        }\n\n        return session.encrypt(JSON.stringify(keyInfo));\n    }\n\n    /**\n     * Internal helper for getting the olm related data associated with a participant.\n     *\n     * @param {JitsiParticipant} participant - Participant whose data wants to be extracted.\n     * @returns {Object}\n     * @private\n     */\n    _getParticipantOlmData(participant) {\n        participant[kOlmData] = participant[kOlmData] || {};\n\n        return participant[kOlmData];\n    }\n\n    /**\n     * Handles leaving the conference, cleaning up olm sessions.\n     *\n     * @private\n     */\n    async _onConferenceLeft() {\n        logger.debug('Conference left');\n\n        await this._init;\n\n        for (const participant of this._conf.getParticipants()) {\n            this._onParticipantLeft(participant.getId(), participant);\n        }\n\n        if (this._olmAccount) {\n            this._olmAccount.free();\n            this._olmAccount = undefined;\n        }\n    }\n\n    /**\n     * Main message handler. Handles 1-to-1 messages received from other participants\n     * and send the appropriate replies.\n     *\n     * @private\n     */\n    async _onEndpointMessageReceived(participant, payload) {\n        if (payload[JITSI_MEET_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\n            return;\n        }\n\n        if (!payload.olm) {\n            logger.warn('Incorrectly formatted message');\n\n            return;\n        }\n\n        await this._init;\n\n        const msg = payload.olm;\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (msg.type) {\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'Session already established');\n            } else {\n                // Create a session for communicating with this participant.\n\n                const session = new Olm.Session();\n\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\n                olmData.session = session;\n\n                // Send ACK\n                const ack = {\n                    [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                    olm: {\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\n                        data: {\n                            ciphertext: this._encryptKeyInfo(session),\n                            uuid: msg.data.uuid\n                        }\n                    }\n                };\n\n                this._sendMessage(ack, pId);\n                this._onParticipantE2EEChannelReady(pId);\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\n            if (olmData.session) {\n                logger.warn(`Participant ${pId} already has a session`);\n\n                this._sendError(participant, 'No session found');\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\n                const { ciphertext } = msg.data;\n                const d = this._reqs.get(msg.data.uuid);\n                const session = new Olm.Session();\n\n                session.create_inbound(this._olmAccount, ciphertext.body);\n\n                // Remove OT keys that have been used to setup this session.\n                this._olmAccount.remove_one_time_keys(session);\n\n                // Decrypt first message.\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\n\n                olmData.session = session;\n                olmData.pendingSessionUuid = undefined;\n\n                this._onParticipantE2EEChannelReady(pId);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n\n                const json = safeJsonParse(data);\n\n                if (json.key) {\n                    const key = base64js.toByteArray(json.key);\n                    const keyIndex = json.keyIndex;\n\n                    olmData.lastKey = key;\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                }\n            } else {\n                logger.warn('Received ACK with the wrong UUID');\n\n                this._sendError(participant, 'Invalid UUID');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.ERROR: {\n            logger.error(msg.data.error);\n\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n\n                    // Send ACK.\n                    const ack = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid: msg.data.uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(ack, pId);\n                }\n            } else {\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\n            if (olmData.session) {\n                const { ciphertext } = msg.data;\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\n                const json = safeJsonParse(data);\n\n                if (json.key !== undefined && json.keyIndex !== undefined) {\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\n                    const keyIndex = json.keyIndex;\n\n                    if (!isEqual(olmData.lastKey, key)) {\n                        olmData.lastKey = key;\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\n                    }\n                }\n\n                const d = this._reqs.get(msg.data.uuid);\n\n                this._reqs.delete(msg.data.uuid);\n                d.resolve();\n            } else {\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing key-info-ack');\n            }\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SAS_START: {\n            if (!olmData.session) {\n                logger.debug(`Received sas init message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing sas-init');\n\n                return;\n            }\n\n            if (olmData.sasVerification?.sas) {\n                logger.warn(`SAS already created for participant ${pId}`);\n                this.eventEmitter.emit(\n                    OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                    pId,\n                    false,\n                    E2EEErrors.E2EE_SAS_INVALID_SAS_VERIFICATION);\n\n                return;\n            }\n\n            const { transactionId } = msg.data;\n\n            const sas = new Olm.SAS();\n\n            olmData.sasVerification = {\n                sas,\n                transactionId,\n                isInitiator: false\n            };\n\n            const pubKey = olmData.sasVerification.sas.get_pubkey();\n            const commitment = this._computeCommitment(pubKey, msg.data);\n\n            /* The first phase of the verification process, the Key agreement phase\n                https://spec.matrix.org/latest/client-server-api/#short-authentication-string-sas-verification\n            */\n            const acceptMessage = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.SAS_ACCEPT,\n                    data: {\n                        transactionId,\n                        commitment\n                    }\n                }\n            };\n\n            this._sendMessage(acceptMessage, pId);\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SAS_ACCEPT: {\n            if (!olmData.session) {\n                logger.debug(`Received sas accept message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing sas-accept');\n\n                return;\n            }\n\n            const { commitment, transactionId } = msg.data;\n\n\n            if (!olmData.sasVerification) {\n                logger.warn(`SAS_ACCEPT Participant ${pId} does not have valid sasVerification`);\n                this.eventEmitter.emit(\n                    OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                    pId,\n                    false,\n                    E2EEErrors.E2EE_SAS_INVALID_SAS_VERIFICATION);\n\n                return;\n            }\n\n            if (olmData.sasVerification.sasCommitment) {\n                logger.debug(`Already received sas commitment message from ${pId}!`);\n\n                this._sendError(participant, 'Already received sas commitment message from ${pId}!');\n\n                return;\n            }\n\n            olmData.sasVerification.sasCommitment = commitment;\n\n            const pubKey = olmData.sasVerification.sas.get_pubkey();\n\n            // Send KEY.\n            const keyMessage = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.SAS_KEY,\n                    data: {\n                        key: pubKey,\n                        transactionId\n                    }\n                }\n            };\n\n            this._sendMessage(keyMessage, pId);\n\n            olmData.sasVerification.keySent = true;\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SAS_KEY: {\n            if (!olmData.session) {\n                logger.debug(`Received sas key message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing sas-key');\n\n                return;\n            }\n\n            if (!olmData.sasVerification) {\n                logger.warn(`SAS_KEY Participant ${pId} does not have valid sasVerification`);\n                this.eventEmitter.emit(\n                    OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                    pId,\n                    false,\n                    E2EEErrors.E2EE_SAS_INVALID_SAS_VERIFICATION);\n\n                return;\n            }\n\n            const { isInitiator, sas, sasCommitment, startContent, keySent } = olmData.sasVerification;\n\n            if (sas.is_their_key_set()) {\n                logger.warn('SAS already has their key!');\n\n                return;\n            }\n\n            const { key: theirKey, transactionId } = msg.data;\n\n            if (sasCommitment) {\n                const commitment = this._computeCommitment(theirKey, startContent);\n\n                if (sasCommitment !== commitment) {\n                    this._sendError(participant, 'OlmAdapter commitments mismatched');\n                    this.eventEmitter.emit(\n                        OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                        pId,\n                        false,\n                        E2EEErrors.E2EE_SAS_COMMITMENT_MISMATCHED);\n                    olmData.sasVerification.free();\n\n                    return;\n                }\n            }\n\n            sas.set_their_key(theirKey);\n\n            const pubKey = sas.get_pubkey();\n\n            const myInfo = `${this.myId}|${pubKey}`;\n            const theirInfo = `${pId}|${theirKey}`;\n\n            const info = isInitiator ? `${myInfo}|${theirInfo}` : `${theirInfo}|${myInfo}`;\n\n            const sasBytes = sas.generate_bytes(info, OLM_SAS_NUM_BYTES);\n            const generatedSas = generateSas(sasBytes);\n\n            this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_SAS_READY, pId, generatedSas);\n\n            if (keySent) {\n                return;\n            }\n\n            const keyMessage = {\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                olm: {\n                    type: OLM_MESSAGE_TYPES.SAS_KEY,\n                    data: {\n                        key: pubKey,\n                        transactionId\n                    }\n                }\n            };\n\n            this._sendMessage(keyMessage, pId);\n\n            olmData.sasVerification.keySent = true;\n            break;\n        }\n        case OLM_MESSAGE_TYPES.SAS_MAC: {\n            if (!olmData.session) {\n                logger.debug(`Received sas mac message from ${pId} but we have no session for them!`);\n\n                this._sendError(participant, 'No session found while processing sas-mac');\n\n                return;\n            }\n\n            const { keys, mac, transactionId } = msg.data;\n\n            if (!mac || !keys) {\n                logger.warn('Invalid SAS MAC message');\n\n                return;\n            }\n\n            if (!olmData.sasVerification) {\n                logger.warn(`SAS_MAC Participant ${pId} does not have valid sasVerification`);\n\n                return;\n            }\n\n            const sas = olmData.sasVerification.sas;\n\n            // Verify the received MACs.\n            const baseInfo = `${OLM_KEY_VERIFICATION_MAC_INFO}${pId}${this.myId}${transactionId}`;\n            const keysMac = sas.calculate_mac(\n                Object.keys(mac).sort().join(','), // eslint-disable-line newline-per-chained-call\n                baseInfo + OLM_KEY_VERIFICATION_MAC_KEY_IDS\n            );\n\n            if (keysMac !== keys) {\n                logger.error('SAS verification error: keys MAC mismatch');\n                this.eventEmitter.emit(\n                    OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                    pId,\n                    false,\n                    E2EEErrors.E2EE_SAS_KEYS_MAC_MISMATCH);\n\n                return;\n            }\n\n            if (!olmData.ed25519) {\n                logger.warn('SAS verification error: Missing ed25519 key');\n\n                this.eventEmitter.emit(\n                    OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                    pId,\n                    false,\n                    E2EEErrors.E2EE_SAS_MISSING_KEY);\n\n                return;\n            }\n\n            for (const [ keyInfo, computedMac ] of Object.entries(mac)) {\n                const ourComputedMac = sas.calculate_mac(\n                    olmData.ed25519,\n                    baseInfo + keyInfo\n                );\n\n                if (computedMac !== ourComputedMac) {\n                    logger.error('SAS verification error: MAC mismatch');\n                    this.eventEmitter.emit(\n                        OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED,\n                        pId,\n                        false,\n                        E2EEErrors.E2EE_SAS_MAC_MISMATCH);\n\n                    return;\n                }\n            }\n\n            logger.info(`SAS MAC verified for participant ${pId}`);\n            this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_VERIFICATION_COMPLETED, pId, true);\n\n            break;\n        }\n        }\n    }\n\n    /**\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\n     *\n     * @private\n     */\n    _onParticipantLeft(id, participant) {\n        logger.debug(`Participant ${id} left`);\n\n        this.clearParticipantSession(participant);\n    }\n\n    /**\n    * Handles an update in a participant's presence property.\n    *\n    * @param {JitsiParticipant} participant - The participant.\n    * @param {string} name - The name of the property that changed.\n    * @param {*} oldValue - The property's previous value.\n    * @param {*} newValue - The property's new value.\n    * @private\n    */\n    async _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        const participantId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        switch (name) {\n        case 'e2ee.enabled':\n            if (newValue && this._conf.isE2EEEnabled()) {\n                const localParticipantId = this._conf.myUserId();\n                const participantFeatures = await participant.getFeatures();\n\n                if (participantFeatures.has(FEATURE_E2EE) && localParticipantId < participantId) {\n                    if (this._sessionInitialization) {\n                        await this._sessionInitialization;\n                    }\n                    await this._sendSessionInit(participant);\n\n                    const uuid = uuidv4();\n\n                    const d = new Deferred();\n\n                    d.setRejectTimeout(REQ_TIMEOUT);\n                    d.catch(() => {\n                        this._reqs.delete(uuid);\n                        olmData.pendingSessionUuid = undefined;\n                    });\n                    this._reqs.set(uuid, d);\n\n                    const data = {\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n                        olm: {\n                            type: OLM_MESSAGE_TYPES.KEY_INFO,\n                            data: {\n                                ciphertext: this._encryptKeyInfo(olmData.session),\n                                uuid\n                            }\n                        }\n                    };\n\n                    this._sendMessage(data, participantId);\n                }\n            }\n            break;\n        case 'e2ee.idKey.ed25519':\n            olmData.ed25519 = newValue;\n            this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_SAS_AVAILABLE, participantId);\n            break;\n        }\n    }\n\n    /**\n     * Builds and sends an error message to the target participant.\n     *\n     * @param {JitsiParticipant} participant - The target participant.\n     * @param {string} error - The error message.\n     * @returns {void}\n     */\n    _sendError(participant, error) {\n        const pId = participant.getId();\n        const err = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.ERROR,\n                data: {\n                    error\n                }\n            }\n        };\n\n        this._sendMessage(err, pId);\n    }\n\n    /**\n     * Internal helper to send the given object to the given participant ID.\n     * This function merely exists so the transport can be easily swapped.\n     * Currently messages are transmitted via XMPP MUC private messages.\n     *\n     * @param {object} data - The data that will be sent to the target participant.\n     * @param {string} participantId - ID of the target participant.\n     */\n    _sendMessage(data, participantId) {\n        this._conf.sendMessage(data, participantId);\n    }\n\n    /**\n     * Builds and sends the session-init request to the target participant.\n     *\n     * @param {JitsiParticipant} participant - Participant to whom we'll send the request.\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\n     * @private\n     */\n    _sendSessionInit(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n\n        if (olmData.session) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\n\n            return Promise.reject();\n        }\n\n        if (olmData.pendingSessionUuid !== undefined) {\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\n\n            return Promise.reject();\n        }\n\n        // Generate a One Time Key.\n        this._olmAccount.generate_one_time_keys(1);\n\n        const otKeys = _safeJsonParse(this._olmAccount.one_time_keys());\n        const otKey = Object.values(otKeys.curve25519)[0];\n\n        if (!otKey) {\n            return Promise.reject(new Error('No one-time-keys generated'));\n        }\n\n        // Mark the OT keys (one really) as published so they are not reused.\n        this._olmAccount.mark_keys_as_published();\n\n        const uuid = uuidv4();\n        const init = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\n                data: {\n                    idKey: this._idKeys.curve25519,\n                    otKey,\n                    uuid\n                }\n            }\n        };\n\n        const d = new Deferred();\n\n        d.setRejectTimeout(REQ_TIMEOUT);\n        d.catch(() => {\n            this._reqs.delete(uuid);\n            olmData.pendingSessionUuid = undefined;\n        });\n        this._reqs.set(uuid, d);\n\n        this._sendMessage(init, pId);\n\n        // Store the UUID for matching with the ACK.\n        olmData.pendingSessionUuid = uuid;\n\n        return d;\n    }\n\n    /**\n     * Builds and sends the SAS MAC message to the given participant.\n     * The second phase of the verification process, the Key verification phase\n        https://spec.matrix.org/latest/client-server-api/#short-authentication-string-sas-verification\n     */\n    _sendSasMac(participant) {\n        const pId = participant.getId();\n        const olmData = this._getParticipantOlmData(participant);\n        const { sas, transactionId } = olmData.sasVerification;\n\n        // Calculate and send MAC with the keys to be verified.\n        const mac = {};\n        const keyList = [];\n        const baseInfo = `${OLM_KEY_VERIFICATION_MAC_INFO}${this.myId}${pId}${transactionId}`;\n\n        const deviceKeyId = `ed25519:${pId}`;\n\n        mac[deviceKeyId] = sas.calculate_mac(\n            this._idKeys.ed25519,\n            baseInfo + deviceKeyId);\n        keyList.push(deviceKeyId);\n\n        const keys = sas.calculate_mac(\n            keyList.sort().join(','),\n            baseInfo + OLM_KEY_VERIFICATION_MAC_KEY_IDS\n        );\n\n        const macMessage = {\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\n            olm: {\n                type: OLM_MESSAGE_TYPES.SAS_MAC,\n                data: {\n                    keys,\n                    mac,\n                    transactionId\n                }\n            }\n        };\n\n        this._sendMessage(macMessage, pId);\n    }\n\n    /**\n     * Computes the commitment.\n     */\n    _computeCommitment(pubKey, data) {\n        const olmUtil = new Olm.Utility();\n        const commitment = olmUtil.sha256(pubKey + JSON.stringify(data));\n\n        olmUtil.free();\n\n        return commitment;\n    }\n}\n\n/**\n * Helper to ensure JSON parsing always returns an object.\n *\n * @param {string} data - The data that needs to be parsed.\n * @returns {object} - Parsed data or empty object in case of failure.\n */\nfunction safeJsonParse(data) {\n    try {\n        return _safeJsonParse(data);\n    } catch (e) {\n        return {};\n    }\n}\n\nOlmAdapter.events = OlmAdapterEvents;\n","import { getLogger } from '@jitsi/logger';\nimport { debounce } from 'lodash-es';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { KeyHandler } from './KeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\nimport { importKey, ratchet } from './crypto-utils';\n\nconst logger = getLogger('modules/e2ee/ManagedKeyHandler');\n\n// Period which we'll wait before updating / rotating our keys when a participant\n// joins or leaves.\nconst DEBOUNCE_PERIOD = 5000;\n\n/**\n * This module integrates {@link E2EEContext} with {@link OlmAdapter} in order to distribute the keys for encryption.\n */\nexport class ManagedKeyHandler extends KeyHandler {\n    /**\n     * Build a new AutomaticKeyHandler instance, which will be used in a given conference.\n     */\n    constructor(conference) {\n        super(conference);\n\n        this._key = undefined;\n        this._conferenceJoined = false;\n\n        this._olmAdapter = new OlmAdapter(conference);\n\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\n\n        // Olm signalling events.\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\n            this._onParticipantKeyUpdated.bind(this));\n\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_SAS_READY,\n            this._onParticipantSasReady.bind(this));\n\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_SAS_AVAILABLE,\n            this._onParticipantSasAvailable.bind(this));\n\n        this._olmAdapter.on(\n            OlmAdapter.events.PARTICIPANT_VERIFICATION_COMPLETED,\n            this._onParticipantVerificationCompleted.bind(this));\n\n        this.conference.on(\n            JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n            this._onParticipantPropertyChanged.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onParticipantJoined.bind(this));\n        this.conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onParticipantLeft.bind(this));\n        this.conference.on(\n                JitsiConferenceEvents.CONFERENCE_JOINED,\n                () => {\n                    this._conferenceJoined = true;\n                });\n    }\n\n    /**\n     * Returns the sasVerficiation object.\n     *\n     * @returns {Object}\n     */\n    get sasVerification() {\n        return this._olmAdapter;\n    }\n\n    /**\n     * When E2EE is enabled it initializes sessions and sets the key.\n     * Cleans up the sessions when disabled.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async _setEnabled(enabled) {\n        if (enabled) {\n            await this._olmAdapter.initSessions();\n        } else {\n            this._olmAdapter.clearAllParticipantsSessions();\n        }\n\n        // Generate a random key in case we are enabling.\n        this._key = enabled ? this._generateKey() : false;\n\n        // Send it to others using the E2EE olm channel.\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        // Set our key so we begin encrypting.\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's presence property.\n     *\n     * @param {JitsiParticipant} participant - The participant.\n     * @param {string} name - The name of the property that changed.\n     * @param {*} oldValue - The property's previous value.\n     * @param {*} newValue - The property's new value.\n     * @private\n     */\n    _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\n        switch (name) {\n        case 'e2ee.idKey':\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\n            break;\n        case 'e2ee.enabled':\n            if (!newValue && this.enabled) {\n                this._olmAdapter.clearParticipantSession(participant);\n            }\n            break;\n        }\n    }\n\n    /**\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\n     * @private\n     */\n    _onParticipantJoined() {\n        if (this._conferenceJoined && this.enabled) {\n            this._ratchetKey();\n        }\n    }\n\n    /**\n     * Rotates the current key when a participant leaves the conference.\n     * @private\n     */\n    _onParticipantLeft(id) {\n        this.e2eeCtx.cleanup(id);\n\n        if (this.enabled) {\n            this._rotateKey();\n        }\n    }\n\n    /**\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\n     * to all participants and once they all received it, start using it.\n     *\n     * @private\n     */\n    async _rotateKeyImpl() {\n        logger.debug('Rotating key');\n\n        this._key = this._generateKey();\n        const index = await this._olmAdapter.updateKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Advances the current key by using ratcheting.\n     *\n     * @private\n     */\n    async _ratchetKeyImpl() {\n        logger.debug('Ratchetting key');\n\n        const material = await importKey(this._key);\n        const newKey = await ratchet(material);\n\n        this._key = new Uint8Array(newKey);\n\n        const index = this._olmAdapter.updateCurrentMediaKey(this._key);\n\n        this.e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\n    }\n\n    /**\n     * Handles an update in a participant's key.\n     *\n     * @param {string} id - The participant ID.\n     * @param {Uint8Array | boolean} key - The new key for the participant.\n     * @param {Number} index - The new key's index.\n     * @private\n     */\n    _onParticipantKeyUpdated(id, key, index) {\n        logger.debug(`Participant ${id} updated their key`);\n\n        this.e2eeCtx.setKey(id, key, index);\n    }\n\n    /**\n     * Handles the SAS ready event.\n     *\n     * @param {string} pId - The participant ID.\n     * @param {Uint8Array} sas - The bytes from sas.generate_bytes..\n     * @private\n     */\n    _onParticipantSasReady(pId, sas) {\n        this.conference.eventEmitter.emit(JitsiConferenceEvents.E2EE_VERIFICATION_READY, pId, sas);\n    }\n\n    /**\n     * Handles the sas available event.\n     *\n     * @param {string} pId - The participant ID.\n     * @private\n     */\n    _onParticipantSasAvailable(pId) {\n        this.conference.eventEmitter.emit(JitsiConferenceEvents.E2EE_VERIFICATION_AVAILABLE, pId);\n    }\n\n    /**\n     * Handles the SAS completed event.\n     *\n     * @param {string} pId - The participant ID.\n     * @param {boolean} success - Wheter the verification was succesfull.\n     * @private\n     */\n    _onParticipantVerificationCompleted(pId, success, message) {\n        this.conference.eventEmitter.emit(JitsiConferenceEvents.E2EE_VERIFICATION_COMPLETED, pId, success, message);\n    }\n\n    /**\n     * Generates a new 256 bit random key.\n     *\n     * @returns {Uint8Array}\n     * @private\n     */\n    _generateKey() {\n        return window.crypto.getRandomValues(new Uint8Array(32));\n    }\n}\n","/**\n * Derives a set of keys from the master key.\n * @param {CryptoKey} material - master key to derive from\n *\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\n */\nexport async function deriveKeys(material) {\n    const info = new ArrayBuffer();\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\n    const encryptionKey = await crypto.subtle.deriveKey({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameEncryptionKey'),\n        hash: 'SHA-256',\n        info\n    }, material, {\n        name: 'AES-GCM',\n        length: 128\n    }, false, [ 'encrypt', 'decrypt' ]);\n\n    return {\n        material,\n        encryptionKey\n    };\n}\n\n/**\n * Ratchets a key. See\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\n * @param {CryptoKey} material - base key material\n * @returns {Promise<ArrayBuffer>} - ratcheted key material\n */\nexport async function ratchet(material) {\n    const textEncoder = new TextEncoder();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\n    return await crypto.subtle.deriveBits({\n        name: 'HKDF',\n        salt: textEncoder.encode('JFrameRatchetKey'),\n        hash: 'SHA-256',\n        info: new ArrayBuffer()\n    }, material, 256);\n}\n\n/**\n * Converts a raw key into a WebCrypto key object with default options\n * suitable for our usage.\n * @param {ArrayBuffer} keyBytes - raw key\n * @param {Array} keyUsages - key usages, see importKey documentation\n * @returns {Promise<CryptoKey>} - the WebCrypto key.\n */\nexport async function importKey(keyBytes) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n    return await crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\n}\n","import browser from '../browser';\n\nimport { ExternallyManagedKeyHandler } from './ExternallyManagedKeyHandler';\nimport { ManagedKeyHandler } from './ManagedKeyHandler';\nimport { OlmAdapter } from './OlmAdapter';\n\n/**\n * This module integrates {@link KeyHandler} with {@link JitsiConference} in order to enable E2E encryption.\n */\nexport class E2EEncryption {\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\n     */\n    constructor(conference) {\n        const { e2ee = {} } = conference.options.config;\n\n        this._externallyManaged = e2ee.externallyManagedKey;\n\n        if (this._externallyManaged) {\n            this._keyHandler = new ExternallyManagedKeyHandler(conference);\n        } else {\n            this._keyHandler = new ManagedKeyHandler(conference);\n        }\n    }\n\n    /**\n     * Indicates if E2EE is supported in the current platform.\n     *\n     * @param {object} config - Global configuration.\n     * @returns {boolean}\n     */\n    static isSupported(config) {\n        const { e2ee = {} } = config;\n\n        if (!e2ee.externallyManagedKey && !OlmAdapter.isSupported()) {\n            return false;\n        }\n\n        if (e2ee.disabled || config.testing?.disableE2EE) {\n            return false;\n        }\n\n        return browser.supportsInsertableStreams()\n                || (config.enableEncodedTransformSupport && browser.supportsEncodedTransform());\n    }\n\n    /**\n     * Indicates whether E2EE is currently enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isEnabled() {\n        return this._keyHandler.isEnabled();\n    }\n\n    /**\n     * Enables / disables End-To-End encryption.\n     *\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\n     * @returns {void}\n     */\n    async setEnabled(enabled) {\n        await this._keyHandler.setEnabled(enabled);\n    }\n\n    /**\n     * Sets the key and index for End-to-End encryption.\n     *\n     * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n     * @param {Number} [keyInfo.index] - the index of the encryption key.\n     * @returns {void}\n     */\n    setEncryptionKey(keyInfo) {\n        this._keyHandler.setKey(keyInfo);\n    }\n\n    /**\n     * Starts the verification process of the participant\n     *\n     * @param {Participant} - participant to be verified.\n     * @returns {void}\n     */\n    startVerification(participant) {\n        this._keyHandler.sasVerification?.startVerification(participant);\n    }\n\n    /**\n     * Marks the channel as verified\n     *\n     * @param {Participant} - participant to be verified.\n     * @param {boolean} isVerified - whether the verification was succesfull.\n     * @returns {void}\n     */\n    markParticipantVerified(participant, isVerified) {\n        this._keyHandler.sasVerification?.markParticipantVerified(participant, isVerified);\n    }\n}\n","/* eslint-disable */\n\n/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS PUB 180-1\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n/* global define */\n\n/* Some functions and variables have been stripped for use with Strophe */\n\n/*\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\n */\nfunction core_sha1(x, len) {\n    /* append padding */\n    x[len >> 5] |= 0x80 << (24 - len % 32);\n    x[((len + 64 >> 9) << 4) + 15] = len;\n\n    var w = new Array(80);\n    var a =  1732584193;\n    var b = -271733879;\n    var c = -1732584194;\n    var d =  271733878;\n    var e = -1009589776;\n\n    var i, j, t, olda, oldb, oldc, oldd, olde;\n    for (i = 0; i < x.length; i += 16) {\n        olda = a;\n        oldb = b;\n        oldc = c;\n        oldd = d;\n        olde = e;\n\n        for (j = 0; j < 80; j++) {\n            if (j < 16) {\n                w[j] = x[i + j];\n            } else {\n                w[j] = rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);\n            }\n\n            t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)),\n                         safe_add(safe_add(e, w[j]), sha1_kt(j)));\n            e = d;\n            d = c;\n            c = rol(b, 30);\n            b = a;\n            a = t;\n        }\n\n        a = safe_add(a, olda);\n        b = safe_add(b, oldb);\n        c = safe_add(c, oldc);\n        d = safe_add(d, oldd);\n        e = safe_add(e, olde);\n    }\n    return [a, b, c, d, e];\n}\n\n/*\n * Perform the appropriate triplet combination function for the current\n * iteration\n */\nfunction sha1_ft (t, b, c, d) {\n    if (t < 20) { return (b & c) | ((~b) & d); }\n    if (t < 40) { return b ^ c ^ d; }\n    if (t < 60) { return (b & c) | (b & d) | (c & d); }\n    return b ^ c ^ d;\n}\n\n/*\n * Determine the appropriate additive constant for the current iteration\n */\nfunction sha1_kt(t) {\n    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 : (t < 60) ? -1894007588 : -899497514;\n}\n\n/*\n * Calculate the HMAC-SHA1 of a key and some data\n */\nfunction core_hmac_sha1(key, data) {\n    var bkey = str2binb(key);\n    if (bkey.length > 16) {\n        bkey = core_sha1(bkey, key.length * 8);\n    }\n\n    var ipad = new Array(16), opad = new Array(16);\n    for (var i = 0; i < 16; i++) {\n        ipad[i] = bkey[i] ^ 0x36363636;\n        opad[i] = bkey[i] ^ 0x5C5C5C5C;\n    }\n\n    var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n    return core_sha1(opad.concat(hash), 512 + 160);\n}\n\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\nfunction safe_add(x, y) {\n    var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n    return (msw << 16) | (lsw & 0xFFFF);\n}\n\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\nfunction rol(num, cnt) {\n    return (num << cnt) | (num >>> (32 - cnt));\n}\n\n/*\n * Convert an 8-bit or 16-bit string to an array of big-endian words\n * In 8-bit function, characters >255 have their hi-byte silently ignored.\n */\nfunction str2binb(str) {\n    var bin = [];\n    var mask = 255;\n    for (var i = 0; i < str.length * 8; i += 8) {\n        bin[i>>5] |= (str.charCodeAt(i / 8) & mask) << (24 - i%32);\n    }\n    return bin;\n}\n\n/*\n * Convert an array of big-endian words to a base-64 string\n */\nfunction binb2b64 (binarray) {\n    var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    var str = \"\";\n    var triplet, j;\n    for (var i = 0; i < binarray.length * 4; i += 3) {\n        triplet = (((binarray[i   >> 2] >> 8 * (3 -  i   %4)) & 0xFF) << 16) |\n                  (((binarray[i+1 >> 2] >> 8 * (3 - (i+1)%4)) & 0xFF) << 8 ) |\n                  ((binarray[i+2 >> 2] >> 8 * (3 - (i+2)%4)) & 0xFF);\n\n        for (j = 0; j < 4; j++) {\n            if (i * 8 + j * 6 > binarray.length * 32) { str += \"=\"; }\n            else { str += tab.charAt((triplet >> 6*(3-j)) & 0x3F); }\n        }\n    }\n    return str;\n}\n\n/*\n * Convert an array of big-endian words to a string\n */\nfunction binb2str(bin) {\n    var str = \"\";\n    var mask = 255;\n    for (var i = 0; i < bin.length * 32; i += 8) {\n        str += String.fromCharCode((bin[i>>5] >>> (24 - i%32)) & mask);\n    }\n    return str;\n}\n\n/*\n * These are the functions you'll usually want to call\n * They take string arguments and return either hex or base-64 encoded strings\n */\nconst SHA1 = {\n    b64_hmac_sha1:  function (key, data){ return binb2b64(core_hmac_sha1(key, data)); },\n    b64_sha1:       function (s) { return binb2b64(core_sha1(str2binb(s),s.length * 8)); },\n    binb2str:       binb2str,\n    core_hmac_sha1: core_hmac_sha1,\n    str_hmac_sha1:  function (key, data){ return binb2str(core_hmac_sha1(key, data)); },\n    str_sha1:       function (s) { return binb2str(core_sha1(str2binb(s),s.length * 8)); },\n};\nexport { SHA1 as default };\n","import $ from 'jquery';\nimport { Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\nimport sha1 from './sha1';\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return sha1.b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Parses the disco-info node and returns the sets of features and identities.\n * @param {String} node The node with results to parse.\n * @returns {{features: Set<any>, identities: Set<any>}}\n */\nexport function parseDiscoInfo(node) {\n    const features = new Set();\n    const identities = new Set();\n\n    $(node).find('>query>feature')\n        .each((_, el) => features.add(el.getAttribute('var')));\n    $(node).find('>query>identity')\n        .each((_, el) => identities.add({\n            type: el.getAttribute('type'),\n            name: el.getAttribute('name'),\n            category: el.getAttribute('category')\n        }));\n\n    return {\n        features,\n        identities\n    };\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.version = '';\n        this.rooms = new Set();\n\n        // We keep track of features added outside the library and we publish them\n        // in the presence of the participant for simplicity, avoiding the disco info request-response.\n        this.externalFeatures = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     * We put features used directly by the clients (is jibri, remote-control enabled etc.) in the presence\n     * to avoid additional disco-info queries by those clients.\n     */\n    addFeature(feature, submit = false, external = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n\n        if (external && !this.externalFeatures.has(feature)) {\n            this.externalFeatures.add(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     * @param {boolean} external whether this feature was added externally to the library.\n     */\n    removeFeature(feature, submit = false, external = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n\n        if (external && this.externalFeatures.has(feature)) {\n            this.externalFeatures.delete(feature);\n            this.rooms.forEach(room => this._updateRoomWithExternalFeatures(room));\n        }\n\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Updates the presences in the room based on the current values in externalFeatures.\n     * @param {ChatRoom} room the room to update.\n     * @private\n     */\n    _updateRoomWithExternalFeatures(room) {\n        if (this.externalFeatures.size === 0) {\n            room.removeFromPresence('features');\n        } else {\n            const children = [];\n\n            this.externalFeatures.forEach(f => {\n                children.push({\n                    'tagName': 'feature',\n                    attributes: { 'var': f }\n                });\n            });\n\n            room.addOrReplaceInPresence('features', { children });\n        }\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>>}\n     */\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\n        return this._getDiscoInfo(jid, node, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                resolve(parseDiscoInfo(response));\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        this._fixChatRoomPresenceMap(room);\n\n        this._updateRoomWithExternalFeatures(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addOrReplaceInPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n}\n","// Number of times the client attempts to reconnect to the XMPP server or JVB (in case of an ICE failure).\nexport const MAX_CONNECTION_RETRIES = 3;\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\n\nconst logger = getLogger('modules/connectivity/NetworkInfo');\n\nexport interface ICurrentNetworkInfo {\n    isOnline: boolean;\n}\n\n/**\n * Module provides information about the current status of the internet\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\n * online/offline, but rather it relies on the information supplied by the app\n * that uses it. By default the online state is assumed and the lib acts as if\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\n */\nexport class NetworkInfo extends Listenable {\n    private _current: ICurrentNetworkInfo;\n\n    /**\n     * Creates new {@link NetworkInfo} instance.\n     */\n    constructor() {\n        super();\n        this._current = {\n            isOnline: true\n        };\n    }\n\n    /**\n     * Updates the network info state.\n     *\n     * @param {object} state - The network info state.\n     * @param {boolean} state.isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    updateNetworkInfo({ isOnline }: { isOnline: boolean; }): void {\n        logger.debug('updateNetworkInfo', { isOnline });\n        this._current = {\n            isOnline: isOnline === true\n        };\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\n    }\n\n    /**\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\n     * @returns {boolean}\n     */\n    isOnline(): boolean {\n        return this._current.isOnline === true;\n    }\n}\n\nconst networkInfo = new NetworkInfo();\n\nexport default networkInfo;\n","/**\n * Gets next timeout using the full jitter pattern.\n *\n * NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n *\n * @param {number} retry - The retry number.\n * @param {number} minDelay - The minimal delay in milliseconds.\n * @param {number} base - The exponent base.\n * @returns {number} - The amount of waiting before trying another time given in milliseconds.\n * @private\n */\nexport function getJitterDelay(retry: number, minDelay: number = 500, base: number = 2): number {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    NETWORK_INFO_EVENT,\n    default as NetworkInfo\n} from '../connectivity/NetworkInfo';\nimport { getJitterDelay } from '../util/Retry';\nimport Strophe from 'strophe.js';\n\nconst logger = getLogger('modules/xmpp/ResumeTask');\n\n\nexport interface INetworkInfoEvent {\n    isOnline: boolean;\n}\n\n/**\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\n * the retry interval using the full jitter pattern.\n */\nexport default class ResumeTask {\n    private _stropheConn: Strophe.Connection;\n    private _resumeRetryN: number;\n    private _retryDelay: number | undefined;\n    private _resumeTimeout: NodeJS.Timeout | undefined;\n    private _networkOnlineListener: (() => void) | null;\n\n    /**\n     * Initializes new {@code RetryTask}.\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\n     */\n    constructor(stropheConnection: Strophe.Connection) {\n        this._stropheConn = stropheConnection;\n        this._resumeRetryN = 0;\n        this._retryDelay = undefined;\n        this._resumeTimeout = undefined;\n        this._networkOnlineListener = null;\n    }\n\n    /**\n     * @returns {number} - The amount of retries.\n     */\n    get retryCount(): number {\n        return this._resumeRetryN;\n    }\n\n    /**\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\n     * 'undefined' it means that no resume task was not scheduled.\n     */\n    get retryDelay(): number | undefined {\n        return this._retryDelay;\n    }\n\n    /**\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\n     *\n     * @returns {void}\n     */\n    schedule(): void {\n        this._cancelResume();\n        this._removeNetworkOnlineListener();\n\n        this._resumeRetryN += 1;\n\n        this._networkOnlineListener = NetworkInfo.addCancellableListener(\n            NETWORK_INFO_EVENT,\n            ({ isOnline }: INetworkInfoEvent) => {\n                if (isOnline) {\n                    this._scheduleResume();\n                } else {\n                    this._cancelResume();\n                }\n            }\n        ) as () => void;\n\n        NetworkInfo.isOnline() && this._scheduleResume();\n    }\n\n    /**\n     * Schedules a delayed timeout which will execute the resume action.\n     * @private\n     * @returns {void}\n     */\n    private _scheduleResume(): void {\n        if (this._resumeTimeout) {\n            // NO-OP\n            return;\n        }\n\n        // The retry delay will be:\n        //   1st retry: 1.5s - 3s\n        //   2nd retry: 3s - 9s\n        //   3rd and next retry: 4.5s - 27s\n        this._retryDelay = getJitterDelay(\n            /* retry */ this._resumeRetryN,\n            /* minDelay */ this._resumeRetryN * 1500,\n            3\n        );\n\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\n\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\n    }\n\n    /**\n     * Cancels the delayed resume task.\n     *\n     * @private\n     * @returns {void}\n     */\n    private _cancelResume(): void {\n        if (this._resumeTimeout) {\n            logger.info('Canceling connection resume task');\n            clearTimeout(this._resumeTimeout);\n            this._resumeTimeout = undefined;\n            this._retryDelay = undefined;\n        }\n    }\n\n    /**\n     * Removes network online listener for the NETWORK_INFO_EVENT event.\n     *\n     * @private\n     * @returns {void}\n     */\n    private _removeNetworkOnlineListener(): void {\n        if (this._networkOnlineListener) {\n            this._networkOnlineListener();\n            this._networkOnlineListener = null;\n        }\n    }\n\n    /**\n     * Resumes the XMPP connection using the stream management plugin.\n     *\n     * @private\n     * @returns {void}\n     */\n    private _resumeConnection(): void {\n        this._resumeTimeout = undefined;\n\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement.getResumeToken();\n\n        // Things may have changed since when the task was scheduled\n        if (!resumeToken) {\n            return;\n        }\n\n        logger.info('Trying to resume the XMPP connection');\n\n        const url = new URL(this._stropheConn.service);\n        let { search } = url;\n        const pattern = /(previd=)([\\w-]+)/;\n        const oldToken = search.match(pattern);\n\n        // Replace previd if the previd value has changed.\n        if (oldToken && oldToken.indexOf(resumeToken) === -1) {\n            search = search.replace(pattern, `$1${resumeToken}`);\n\n        // Append previd if it doesn't exist.\n        } else if (!oldToken) {\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\n        }\n\n        url.search = search;\n\n        this._stropheConn.service = url.toString();\n\n        try {\n            streamManagement.resume();\n        } catch (e) {\n            logger.error('Failed to resume XMPP connection', e);\n        }\n    }\n\n    /**\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\n     * example when the disconnect method is called.\n     *\n     * @returns {void}\n     */\n    cancel(): void {\n        this._cancelResume();\n        this._removeNetworkOnlineListener();\n        this._resumeRetryN = 0;\n    }\n}\n","/**\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\n */\n\nimport XmppConnection from './XmppConnection';\nimport { Strophe } from 'strophe.js';\n\n\nexport default class LastRequestTracker {\n    private _lastSuccess: number | null;\n    private _lastFailedMessage: string | null;\n\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._lastSuccess = null;\n        this._lastFailedMessage = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\n     * @param {Strophe.Connection} stropheConnection - Strophe connection instance.\n     */\n    startTracking(xmppConnection: XmppConnection, stropheConnection: Strophe.Connection): void {\n        const originalRawInput = stropheConnection.rawInput;\n\n        stropheConnection.rawInput = (...args: any[]): void => {\n            const rawMessage = args[0];\n\n            if (rawMessage.includes('failure')) {\n                this._lastFailedMessage = rawMessage;\n            }\n\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\n            if (xmppConnection.connected) {\n                this._lastSuccess = Date.now();\n            }\n            originalRawInput.apply(stropheConnection, args);\n        };\n    }\n\n    /**\n     * Returns the last raw failed incoming message on the xmpp connection.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage(): string | null {\n        return this._lastFailedMessage;\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess(): number | null {\n        return this._lastSuccess\n            ? Date.now() - this._lastSuccess\n            : null;\n    }\n}\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition<T extends new (...args: any[]) => {}>(base: T = class {} as T) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        connection: any | null;\n        /**\n         *\n         */\n        constructor(...args: any[]) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection: any): void {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable = getConnectionPluginDefinition(Listenable);\n","import { getLogger } from '@jitsi/logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger('modules/xmpp/strophe.ping');\n\n/**\n * Default ping every 10 sec\n */\nconst PING_DEFAULT_INTERVAL = 10000;\n\n/**\n * Default ping timeout error after 5 sec of waiting.\n */\nconst PING_DEFAULT_TIMEOUT = 5000;\n\n/**\n * Default value for how many ping failures will be tolerated before the WebSocket connection is killed.\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\n */\nconst PING_DEFAULT_THRESHOLD = 2;\n\nexport interface IPingOptions {\n    interval?: number;\n    threshold?: number;\n    timeout?: number;\n}\n\nexport interface IPingConnectionPluginOptions {\n    getTimeSinceLastServerResponse: () => number;\n    onPingThresholdExceeded: () => void;\n    pingOptions?: IPingOptions;\n}\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    failedPings: number;\n    _onPingThresholdExceeded: () => void;\n    _getTimeSinceLastServerResponse: () => number;\n    pingInterval: number;\n    pingTimeout: number;\n    pingThreshold: number;\n    pingTimestampsToKeep: number;\n    pingExecIntervals: number[];\n    intervalId: number | null;\n    _lastServerCheck: number;\n\n    /**\n     * Constructs new object\n     * @param {Object} options\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\n     * by the {@link PING_THRESHOLD} constant).\n     * @param {Function} options.getTimeSinceLastServerResponse - A function to obtain the last seen\n     * response from the server.\n     * @param {Object} options.pingOptions - The ping options if any.\n     * @constructor\n     */\n    constructor({ getTimeSinceLastServerResponse, onPingThresholdExceeded, pingOptions = {} }: IPingConnectionPluginOptions) {\n        super();\n        this.failedPings = 0;\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\n        this._getTimeSinceLastServerResponse = getTimeSinceLastServerResponse;\n\n        this.pingInterval = typeof pingOptions.interval === 'number' ? pingOptions.interval : PING_DEFAULT_INTERVAL;\n        this.pingTimeout = typeof pingOptions.timeout === 'number' ? pingOptions.timeout : PING_DEFAULT_TIMEOUT;\n        this.pingThreshold = typeof pingOptions.threshold === 'number'\n            ? pingOptions.threshold : PING_DEFAULT_THRESHOLD;\n\n        // The number of timestamps of send pings to keep.\n        // The current value is 2 minutes.\n        this.pingTimestampsToKeep = Math.round(120000 / this.pingInterval);\n        this.pingExecIntervals = new Array(this.pingTimestampsToKeep);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection: Strophe.Connection): void {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid: string, success: (result: any) => void, error: (err: any) => void, timeout: number): void {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ2(iq, { timeout })\n            .then(success, error);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     */\n    startInterval(remoteJid: string): void {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n\n            // when there were some server responses in the interval since the last time we checked (_lastServerCheck)\n            // let's skip the ping\n\n            const now = Date.now();\n\n            if (this._getTimeSinceLastServerResponse() < now - this._lastServerCheck) {\n                // do this just to keep in sync the intervals so we can detect suspended device\n                this._addPingExecutionTimestamp();\n\n                this._lastServerCheck = now;\n                this.failedPings = 0;\n\n                return;\n            }\n\n            this.ping(remoteJid, () => {\n                // server response is measured on raw input and ping response time is measured after all the xmpp\n                // processing is done in js, so there can be some misalignment when we do the check above.\n                // That's why we store the last time we got the response\n                this._lastServerCheck = this._getTimeSinceLastServerResponse() + Date.now();\n\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= this.pingThreshold) {\n                    logger.error(errmsg, error);\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, this.pingTimeout);\n        }, this.pingInterval);\n        logger.info(`XMPP pings will be sent every ${this.pingInterval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval(): void {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp(): void {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > this.pingTimestampsToKeep) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime(): number {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= this.pingInterval;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","/* eslint-disable */\n\nimport { $build, Strophe } from 'strophe.js';\n\n/**\n* StropheJS - Stream Management XEP-0198\n*\n* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n* Note: Resumption is not supported in this current implementation.\n*\n* Reference: http://xmpp.org/extensions/xep-0198.html\n*\n* @class streamManagement\n*/\nStrophe.addConnectionPlugin('streamManagement', {\n\n\t/**\n\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t*/\n\tlogging: false,\n\n\t/**\n\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t* @default false\n\t* @public\n\t*/\n\tautoSendCountOnEveryIncomingStanza: false,\n\n\t/**\n\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t* number of stanzas sent. Set to 0 to disable.\n\t* @default 5\n\t* @public\n\t*/\n\trequestResponseInterval: 5,\n\n\t/**\n\t* @property {Pointer} _c: Strophe connection instance.\n\t* @private\n\t*/\n\t_c: null,\n\n\t/**\n\t* @property {String} _NS XMPP Namespace.\n\t* @private\n\t*/\n\t_NS: 'urn:xmpp:sm:3',\n\n\t/**\n\t* @property {Boolean} _isStreamManagementEnabled\n\t* @private\n\t*/\n\t_isStreamManagementEnabled: false,\n\n\t/**\n\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t* from the server.\n\t* @private\n\t*/\n\t_serverProcesssedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t* the server.\n\t* @private\n\t*/\n\t_clientProcessedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientSentStanzasCounter\n\t* @private\n\t*/\n\t_clientSentStanzasCounter: null,\n\n\t/**\n\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t* @method _originalXMLOutput\n\t* @type {Handler}\n\t* @private\n\t*/\n\t_originalXMLOutput: null,\n\n\t/**\n\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t* @private\n\t*/\n\t_requestHandler: null,\n\n\t/**\n\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t* @private\n\t*/\n\t_incomingHandler: null,\n\n\t/**\n\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t*/\n\t_requestResponseIntervalCount: 0,\n\n\t/**\n\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t * management namespace.\n\t */\n\t_isSupported: false,\n\n\t/**\n\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t*/\n\t_unacknowledgedStanzas: [],\n\n\t/**\n\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t* Provides the packet id of the stanza as a parameter.\n\t* @private\n\t*/\n\t_acknowledgedStanzaListeners: [],\n\n\taddAcknowledgedStanzaListener: function(listener) {\n\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t},\n\n\tenable: function(resume) {\n\t\tif (!this._isSupported) {\n\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t} else if (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._c.send($build('enable', { xmlns: this._NS, resume }));\n\t\tthis._c.flush();\n\t\tthis._c.pause();\n\t},\n\n\tgetResumeToken: function() {\n\t\treturn this._resumeToken;\n\t},\n\n\tisSupported() {\n\t\treturn this._isSupported;\n\t},\n\n\tresume: function() {\n\t\tif (!this.getResumeToken()) {\n\t\t\tthrow new Error('No resume token');\n\t\t}\n\t\tif (this._connectionStatus !== Strophe.Status.DISCONNECTED) {\n\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t}\n\n\t\tthis._c.options.explicitResourceBinding = true;\n\t\tthis._resuming = true;\n\n\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t},\n\n\trequestAcknowledgement: function() {\n\t\tif (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._requestResponseIntervalCount = 0;\n\t\tthis._c.send($build('r', { xmlns: this._NS }));\n\t},\n\n\tgetOutgoingCounter: function() {\n\t\treturn this._clientSentStanzasCounter;\n\t},\n\n\tgetIncomingCounter: function() {\n\t\treturn this._clientProcessedStanzasCounter;\n\t},\n\n\tinit: function(conn) {\n\t\tthis._c = conn;\n\t\tStrophe.addNamespace('SM', this._NS);\n\n\t\t// Storing original xmlOutput function to use additional logic\n\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\tthis._originalConnect = this._c.connect;\n\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\tthis._originalDisconnect = this._c.disconnect;\n\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t},\n\n\t_interceptDisconnect: function() {\n\t\tthis._resumeToken = undefined;\n\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptDoDisconnect: function() {\n\t\tif (this.getResumeToken()\n\t\t\t\t&& !this._resuming\n\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\tthis._resumeState = {\n\t\t\t\thandlers: this._c.handlers,\n\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t};\n\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\tthis.logging && Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t}\n\n\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\tthis._c._data = [];\n\n\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptConnectArgs: function() {\n\t\tthis._connectArgs = arguments;\n\n\t\tthis._originalConnect.apply(this._c, arguments);\n\t},\n\n\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t},\n\n\tstatusChanged: function (status) {\n\t\tthis._connectionStatus = status;\n\t\tif (!this.getResumeToken()\n\t\t\t&& (status === Strophe.Status.CONNECTED || status === Strophe.Status.DISCONNECTED)) {\n\t\t\tthis.logging && Strophe.debug('SM reset state');\n\n\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t// FIXME not described in JSDocs\n\t\t\tthis._resuming = false;\n\n\t\t\tif (status === Strophe.Status.DISCONNECTED) {\n\t\t\t\tthis._isSupported = false;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\tif (this._requestHandler) {\n\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t}\n\n\t\t\tif (this._incomingHandler) {\n\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t}\n\n\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t// FIXME handler instances stored, but never used\n\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t} else if (status === Strophe.Status.BINDREQUIRED)  {\n\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t// Restore Strophe handlers\n\t\t\tfor (const h of (this._resumeState.handlers || [])\n\t\t\t\t\t.concat(this._resumeState.addHandlers || [])) {\n\t\t\t\tthis._c._addSysHandler(h.handler, h.ns, h.name, h.type, h.id);\n\t\t\t}\n\t\t\tfor (const h of (this._resumeState.timedHandlers || [])\n\t\t\t\t\t.concat(this._resumeState.addTimeds)) {\n\t\t\t\tthis._c.addTimedHandler(h.period, h.handler);\n\t\t\t}\n\t\t\tfor (const h of (this._resumeState.removeTimeds || [])\n\t\t\t\t\t.concat(this._resumeState.removeHandlers || [])) {\n\t\t\t\tthis._c.deleteTimedHandler(h);\n\t\t\t}\n\n\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\tthis._c.send($build('resume', {\n\t\t\t\txmlns: this._NS,\n\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\tprevid: this._resumeToken\n\t\t\t}));\n\t\t\tthis._c.flush();\n\t\t} else if (status === Strophe.Status.ERROR) {\n\t\t\tthis.logging && Strophe.debug('SM cleared resume token on error');\n\t\t\tthis._resumeToken = undefined;\n\t\t}\n\t},\n\n\t/**\n\t* This method overrides the send method implemented by Strophe.Connection\n\t* to count outgoing stanzas\n\t*\n\t* @method Send\n\t* @public\n\t*/\n\txmlOutput: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') ||\n\t\t\tStrophe.isTagEqual(elem, 'presence') ||\n\t\t\tStrophe.isTagEqual(elem, 'message')) {\n\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t}\n\n\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t},\n\n\t_handleEnabled: function(elem) {\n\t\tthis._isStreamManagementEnabled = true;\n\t\t// FIXME fail if requested, but not enabled\n\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\tthis._c.resume();\n\n\t\treturn true;\n\t},\n\n\t_handleResumeFailed: function(elem) {\n\t\tconst error = elem && (\n\t\t\t(elem.firstElementChild && elem.firstElementChild.tagName)\n\t\t\t|| (elem.firstChild && elem.firstChild.tagName));\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.ERROR, error, elem);\n\t\tthis._c._doDisconnect();\n\n\t\treturn true;\n\t},\n\n\t_handleResumed: function(elem) {\n\t\t// FIXME check if in the correct state\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\tthis._resuming = false;\n\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\tthis._c.authenticated = true;\n\t\tthis._c.restored = true;\n\n\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\tthis.logging && Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\tthis._c.send(stanza);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logging && Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.CONNECTED, null);\n\n\t\treturn true;\n\t},\n\n\t_incomingStanzaHandler: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') || Strophe.isTagEqual(elem, 'presence') || Strophe.isTagEqual(elem, 'message'))  {\n\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\tif (delta < 0) {\n\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tfor(var i = 0; i < delta; i++) {\n\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t}\n\t\t}\n\n\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\tStrophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\tif (this.requestResponseInterval > 0) {\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t}\n\t},\n\n\t_handleServerRequestHandler: function() {\n\t\tthis._answerProcessedStanzas();\n\n\t\treturn true;\n\t},\n\n\t_handleServerAck: function(elem){\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\treturn true;\n\t},\n\n\t_answerProcessedStanzas: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._c.send($build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t}\n\t},\n\n\t_increaseSentStanzasCounter: function(elem) {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (this._connectionStatus === Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_increaseReceivedStanzasCounter: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t}\n\t},\n\n\t_throwError: function(msg) {\n\t\tStrophe.error(msg);\n\t\tthrow new Error(msg);\n\t}\n\n});\n","import { getLogger } from '@jitsi/logger';\nimport { $pres, Strophe } from 'strophe.js';\n\nimport { MAX_CONNECTION_RETRIES } from '../../service/connectivity/Constants';\nimport Listenable from '../util/Listenable';\n\nimport ResumeTask from './ResumeTask';\nimport LastSuccessTracker from './StropheLastSuccess';\nimport PingConnectionPlugin from './strophe.ping';\nimport './strophe.stream-management';\n\nconst logger = getLogger('modules/xmpp/XmppConnection');\n\n/**\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED',\n            CONN_SHARD_CHANGED: 'CONN_SHARD_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} options.shard - The BOSH or WebSocket is connecting to this shard.\n     * Useful for detecting when shard changes.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=60000] - The websocket keep alive interval.\n     * It's the interval + a up to a minute of jitter. Pass -1 to disable.\n     * The keep alive is HTTP GET request to {@link options.serviceUrl} or to {@link options.websocketKeepAliveUrl}.\n     * @param {Number} [options.websocketKeepAliveUrl] - The websocket keep alive url to use if any,\n     * if missing the serviceUrl url will be used.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, websocketKeepAliveUrl, serviceUrl, shard, xmppPing }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            pingOptions: xmppPing,\n            shard,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 60 * 1000 : Number(websocketKeepAlive),\n            websocketKeepAliveUrl\n        };\n\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n\n        // The mechanisms priorities as defined by Strophe\n        // *      Mechanism       Priority\n        // *      ------------------------\n        // *      SCRAM-SHA-1     60\n        // *      PLAIN           50\n        // *      ANONYMOUS       20\n        this._stropheConn.registerSASLMechanisms([\n            Strophe.SASLAnonymous,\n            Strophe.SASLPlain,\n            Strophe.SASLSHA1\n        ]);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        this._rawInputTracker = new LastSuccessTracker();\n        this._rawInputTracker.startTracking(this, this._stropheConn);\n\n        this._resumeTask = new ResumeTask(this._stropheConn);\n\n        /**\n         * @typedef DeferredSendIQ Object\n         * @property {Element} iq - The IQ to send.\n         * @property {function} resolve - The resolve method of the deferred Promise.\n         * @property {function} reject - The reject method of the deferred Promise.\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\n         */\n        /**\n         * Deferred IQs to be sent upon reconnect.\n         * @type {Array<DeferredSendIQ>}\n         * @private\n         */\n        this._deferredIQs = [];\n\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\n        // is broken (WebSocket/TCP connection not closed gracefully).\n        this.addConnectionPlugin(\n            'ping',\n            new PingConnectionPlugin({\n                getTimeSinceLastServerResponse: () => this.getTimeSinceLastSuccess(),\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded(),\n                pingOptions: xmppPing\n            }));\n\n        // tracks whether this is the initial connection or a reconnect\n        this._oneSuccessfulConnect = false;\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\n\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the domain to be used for ping.\n     */\n    get pingDomain() {\n        return this._options.pingOptions?.domain || this.domain;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Sets new value for shard.\n     * @param value the new shard value.\n     */\n    set shard(value) {\n        this._options.shard = value;\n\n        // shard setting changed so let's schedule a new keep-alive check if connected\n        if (this._oneSuccessfulConnect) {\n            this._maybeStartWSKeepAlive();\n        }\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {Object} - handler for the connection.\n     */\n    addHandler(...args) {\n        return this._stropheConn.addHandler(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.deleteHandler}\n     *\n     * @returns {void}\n     */\n    deleteHandler(...args) {\n        this._stropheConn.deleteHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            this._maybeEnableStreamResume();\n\n            // after connecting - immediately check whether shard changed,\n            // we need this only when using websockets as bosh checks headers from every response\n            if (this._usesWebsocket && this._oneSuccessfulConnect) {\n                this._keepAliveAndCheckShard();\n            }\n            this._oneSuccessfulConnect = true;\n\n            this._maybeStartWSKeepAlive();\n            this._processDeferredIQs();\n            this._resumeTask.cancel();\n            this.ping.startInterval(this._options.pingOptions?.domain || this.domain);\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            this.ping.stopInterval();\n\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * Clears the list of IQs and rejects deferred Promises with an error.\n     *\n     * @private\n     */\n    _clearDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            deferred.reject(new Error('disconnect'));\n        }\n        this._deferredIQs = [];\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        if (this._stropheConn && this._stropheConn._proto) {\n            this._stropheConn._proto._closeSocket();\n            this._stropheConn._proto._onClose(null);\n        }\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        this._resumeTask.cancel();\n        clearTimeout(this._wsKeepAlive);\n        this._clearDeferredIQs();\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._rawInputTracker.getTimeSinceLastSuccess();\n    }\n\n    /**\n     * See {@link LastRequestTracker.getLastFailedMessage}.\n     *\n     * @returns {string|null}\n     */\n    getLastFailedMessage() {\n        return this._rawInputTracker.getLastFailedMessage();\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!streamManagement.isSupported()) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter = /* base */ websocketKeepAlive + /* jitter */ (Math.random() * 60 * 1000);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(\n                () => this._keepAliveAndCheckShard()\n                    .then(() => this._maybeStartWSKeepAlive()),\n                intervalWithJitter);\n        }\n    }\n\n    /**\n     * Do a http GET to the shard and if shard change will throw an event.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _keepAliveAndCheckShard() {\n        const { shard, websocketKeepAliveUrl } = this._options;\n        const url = websocketKeepAliveUrl ? websocketKeepAliveUrl\n            : this.service.replace('wss://', 'https://').replace('ws://', 'http://');\n\n        return fetch(url)\n            .then(response => {\n\n                // skips header checking if there is no info in options\n                if (!shard) {\n                    return;\n                }\n\n                const responseShard = response.headers.get('x-jitsi-shard');\n\n                if (responseShard !== shard) {\n                    logger.error(\n                        `Detected that shard changed from ${shard} to ${responseShard}`);\n                    this.eventEmitter.emit(XmppConnection.Events.CONN_SHARD_CHANGED);\n                }\n            })\n            .catch(error => {\n                logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n            });\n    }\n\n    /**\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\n     *\n     * @private\n     * @returns {void}\n     */\n    _processDeferredIQs() {\n        for (const deferred of this._deferredIQs) {\n            if (deferred.iq) {\n                clearTimeout(deferred.timeout);\n\n                const timeLeft = Date.now() - deferred.start;\n\n                this.sendIQ(\n                    deferred.iq,\n                    result => deferred.resolve(result),\n                    error => deferred.reject(error),\n                    timeLeft);\n            }\n        }\n\n        this._deferredIQs = [];\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            logger.error(`Trying to send stanza while not connected. Status:${this._status} Proto:${\n                this.isUsingWebSocket ? this._stropheConn?._proto?.socket?.readyState : 'bosh'\n            }`);\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\n     * which would fail immediately if disconnected).\n     *\n     * @param {Element} iq - The IQ to send.\n     * @param {Object} options - Options object\n     * @param {options.timeout} timeout - How long to wait for the response.\n     * The time when the connection is reconnecting is included, which means that\n     * the IQ may never be sent and still fail with a timeout.\n     */\n    sendIQ2(iq, { timeout }) {\n        return new Promise((resolve, reject) => {\n            if (this.connected) {\n                this.sendIQ(\n                    iq,\n                    result => resolve(result),\n                    error => reject(error),\n                    timeout);\n            } else {\n                const deferred = {\n                    iq,\n                    resolve,\n                    reject,\n                    start: Date.now(),\n                    timeout: setTimeout(() => {\n                        // clears the IQ on timeout and invalidates the deferred task\n                        deferred.iq = undefined;\n\n                        // Strophe calls with undefined on timeout\n                        reject(undefined);\n                    }, timeout)\n                };\n\n                this._deferredIQs.push(deferred);\n            }\n        });\n    }\n\n    /**\n     * Called by the ping plugin when ping fails too many times.\n     *\n     * @returns {void}\n     */\n    _onPingErrorThresholdExceeded() {\n        if (this.isUsingWebSocket) {\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\n            this.closeWebsocket();\n        }\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            this._resumeTask.schedule();\n\n            const r = this._resumeTask.retryCount <= MAX_CONNECTION_RETRIES;\n\n            if (!r) {\n                logger.warn(`Maximum resume tries reached (${MAX_CONNECTION_RETRIES}), giving up.`);\n            }\n\n            return r;\n        }\n\n        return false;\n    }\n}\n","/* eslint-disable newline-per-chained-call */\nimport { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $iq } from 'strophe.js';\n\nimport { CONFERENCE_REQUEST_FAILED, NOT_LIVE_ERROR } from '../../JitsiConnectionErrors';\nimport { CONNECTION_FAILED, CONNECTION_REDIRECTED } from '../../JitsiConnectionEvents';\nimport Settings from '../settings/Settings';\nimport Listenable from '../util/Listenable';\n\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst { XMPPEvents } = require('../../service/xmpp/XMPPEvents');\n\nconst logger = getLogger('modules/xmpp/moderator');\n\n/**\n * Exponential backoff timer.\n * @param step the step to use.\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n    const maxTimeout = 120000;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return Math.min(timeout * step, maxTimeout);\n    };\n}\n\n/**\n * The moderator/focus responsible for direct communication with jicofo\n */\nexport default class Moderator extends Listenable {\n    /**\n     * Constructs moderator.\n     * @param xmpp The xmpp.\n     */\n    constructor(xmpp) {\n        super();\n\n        this.getNextTimeout = createExpBackoffTimer(1000);\n        this.getNextErrorTimeout = createExpBackoffTimer(1000);\n        this.options = xmpp.options;\n\n        // Whether SIP gateway (jigasi) support is enabled. TODO: use presence so it can be changed based on jigasi\n        // availability.\n        this.sipGatewayEnabled = false;\n\n        this.xmpp = xmpp;\n        this.connection = xmpp.connection;\n\n        // The JID to which conference-iq requests are sent over XMPP.\n        this.targetJid = this.options.hosts?.focus;\n\n        // If not specified default to 'focus.domain'\n        if (!this.targetJid) {\n            this.targetJid = `focus.${this.options.hosts?.domain}`;\n        }\n\n        this.targetUrl = this.options.conferenceRequestUrl;\n\n        // Whether to send conference requests over HTTP or XMPP\n        this.mode = this.targetUrl ? 'http' : 'xmpp';\n        logger.info(`Using ${this.mode} for conference requests.`);\n\n        // The set of JIDs known to belong to jicofo. Populated from configuration\n        // and responses from conference requests.\n        this.focusUserJids = new Set();\n\n        if (this.options.focusUserJid) {\n            this.focusUserJids.add(this.options.focusUserJid);\n        }\n\n        // FIXME: Message listener that talks to POPUP window\n        /**\n         *\n         * @param event\n         */\n        function listener(event) {\n            if (event.data && event.data.sessionId) {\n                if (event.origin !== window.location.origin) {\n                    logger.warn(`Ignoring sessionId from different origin: ${event.origin}`);\n\n                    return;\n                }\n                Settings.sessionId = event.data.sessionId;\n\n                // After popup is closed we will authenticate\n            }\n        }\n\n        // Register\n        if (window.addEventListener) {\n            window.addEventListener('message', listener, false);\n        } else {\n            window.attachEvent('onmessage', listener);\n        }\n    }\n\n    /**\n     * Check whether the supplied jid is a known jid for focus.\n     * @param jid\n     * @returns {boolean}\n     */\n    isFocusJid(jid) {\n        if (!jid) {\n            return false;\n        }\n\n        for (const focusJid of this.focusUserJids) {\n            // jid may be a full JID, and focusUserJids may be bare JIDs\n            if (jid.indexOf(`${focusJid}/`) === 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Is sip gw enabled.\n     * @returns {boolean}\n     */\n    isSipGatewayEnabled() {\n        return this.sipGatewayEnabled;\n    }\n\n    /**\n     * Create a conference request based on the configured options and saved Settings.\n     *\n     * A conference request has the following format:\n     * {\n     *   room: \"room@example.com\",\n     *   sessionId: \"foo\", // optional\n     *   machineUdi: \"bar\", // optional\n     *   identity: \"baz\", // optional\n     *   properties: { } // map string to string\n     * }\n     *\n     * It can be encoded in either JSON or and IQ.\n     *\n     * @param roomJid - The room jid for which to send conference request.\n     *\n     * @returns the created conference request.\n     */\n    _createConferenceRequest(roomJid) {\n        // Session Id used for authentication\n        const { sessionId } = Settings;\n        const config = this.options;\n        const properties = {};\n\n        if (config.startAudioMuted !== undefined) {\n            properties.startAudioMuted = config.startAudioMuted;\n        }\n        if (config.startVideoMuted !== undefined) {\n            properties.startVideoMuted = config.startVideoMuted;\n        }\n\n        // this flag determines whether the bridge will include this call in its\n        // rtcstats reporting or not. If the site admin hasn't set the flag in\n        // config.js, then the client defaults to false (see\n        // react/features/rtcstats/functions.js in jitsi-meet). The server-side\n        // components default to true to match the pre-existing behavior, so we only\n        // signal if false.\n        const rtcstatsEnabled = config?.analytics?.rtcstatsEnabled ?? false;\n\n        if (!rtcstatsEnabled) {\n            properties.rtcstatsEnabled = false;\n        }\n\n        const conferenceRequest = {\n            properties,\n            machineUid: Settings.machineId,\n            room: roomJid\n        };\n\n        if (sessionId) {\n            conferenceRequest.sessionId = sessionId;\n        }\n\n        if (!config.iAmRecorder && !config.iAmSipGateway) {\n            conferenceRequest.properties['visitors-version'] = 1;\n\n            if (this.options.preferVisitor) {\n                conferenceRequest.properties.visitor = true;\n            }\n        }\n\n        return conferenceRequest;\n    }\n\n    /**\n     * Create a conference request and encode it as an IQ.\n     *\n     * @param roomJid - The room jid for which to send conference request.\n     */\n    _createConferenceIq(roomJid) {\n        const conferenceRequest = this._createConferenceRequest(roomJid);\n\n        // Generate create conference IQ\n        const elem = $iq({\n            to: this.targetJid,\n            type: 'set'\n        });\n\n        elem.c('conference', {\n            xmlns: 'http://jitsi.org/protocol/focus',\n            room: roomJid,\n            'machine-uid': conferenceRequest.machineUid\n        });\n\n        if (conferenceRequest.sessionId) {\n            elem.attrs({ 'session-id': conferenceRequest.sessionId });\n        }\n\n        for (const k in conferenceRequest.properties) {\n            if (conferenceRequest.properties.hasOwnProperty(k)) {\n                elem.c(\n                    'property', {\n                        name: k,\n                        value: conferenceRequest.properties[k]\n                    })\n                    .up();\n            }\n        }\n\n        return elem;\n    }\n\n    /**\n     * Parses a conference IQ.\n     * @param resultIq the result IQ that is received.\n     * @returns {{properties: {}}} Returns an object with the parsed properties.\n     * @private\n     */\n    _parseConferenceIq(resultIq) {\n        const conferenceRequest = { properties: {} };\n\n        conferenceRequest.focusJid = $(resultIq)\n            .find('conference')\n            .attr('focusjid');\n        conferenceRequest.sessionId = $(resultIq)\n            .find('conference')\n            .attr('session-id');\n        conferenceRequest.identity = $(resultIq)\n            .find('>conference')\n            .attr('identity');\n        conferenceRequest.ready = $(resultIq)\n            .find('conference')\n            .attr('ready') === 'true';\n        conferenceRequest.vnode = $(resultIq)\n            .find('conference')\n            .attr('vnode');\n\n        if ($(resultIq).find('>conference>property[name=\\'authentication\\'][value=\\'true\\']').length > 0) {\n            conferenceRequest.properties.authentication = 'true';\n        }\n\n        if ($(resultIq).find('>conference>property[name=\\'externalAuth\\'][value=\\'true\\']').length > 0) {\n            conferenceRequest.properties.externalAuth = 'true';\n        }\n\n        // Check if jicofo has jigasi support enabled.\n        if ($(resultIq).find('>conference>property[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length > 0) {\n            conferenceRequest.properties.sipGatewayEnabled = 'true';\n        }\n\n        // check for explicit false, all other cases is considered live\n        if ($(resultIq).find('>conference>property[name=\\'live\\'][value=\\'false\\']').length > 0) {\n            conferenceRequest.properties.live = 'false';\n        }\n\n        return conferenceRequest;\n    }\n\n    // FIXME We need to show the fact that we're waiting for the focus to the user\n    // (or that the focus is not available)\n    /**\n     * Allocates the conference focus.\n     * @param roomJid - The room jid for which to send conference request.\n     * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n     * rejected, and it'll keep on pinging Jicofo forever.\n     */\n    sendConferenceRequest(roomJid) {\n        // there is no point of sending conference iq when in visitor mode (disableFocus)\n        // when we have sent early the conference request via http\n        // we want to skip sending it here, or visitors can loop\n        if (this.conferenceRequestSent) {\n            return Promise.resolve();\n        }\n\n        // to mark whether we have already sent a conference request\n        this.conferenceRequestSent = false;\n\n        return new Promise((resolve, reject) => {\n            if (this.mode === 'xmpp') {\n                logger.info(`Sending conference request over XMPP to ${this.targetJid}`);\n\n                this.connection.sendIQ(\n                    this._createConferenceIq(roomJid),\n                    result => this._handleIqSuccess(roomJid, result, resolve, reject),\n                    error => this._handleIqError(roomJid, error, resolve, reject));\n\n                // XXX We're pressed for time here because we're beginning a complex\n                // and/or lengthy conference-establishment process which supposedly\n                // involves multiple RTTs. We don't have the time to wait for Strophe to\n                // decide to send our IQ.\n                this.connection.flush();\n            } else {\n                logger.info(`Sending conference request over HTTP to ${this.targetUrl}`);\n                fetch(this.targetUrl, {\n                    method: 'POST',\n                    body: JSON.stringify(this._createConferenceRequest(roomJid)),\n                    headers: { 'Content-Type': 'application/json' }\n                })\n                    .then(response => {\n                        if (!response.ok) {\n                            response.text()\n                                .then(text => {\n                                    logger.warn(`Received HTTP ${response.status} ${\n                                        response.statusText}. Body: ${text}`);\n                                    const sessionError = response.status === 400\n                                        && text.indexOf('400 invalid-session') > 0;\n                                    const notAuthorized = response.status === 403;\n\n                                    this._handleError(roomJid, sessionError, notAuthorized, resolve, reject);\n                                })\n                                .catch(error => {\n                                    logger.warn(`Error: ${error}`);\n                                    this._handleError(roomJid, undefined, undefined, resolve, () => reject(error));\n                                });\n\n                            // _handleError has either scheduled a retry or fired an event indicating failure.\n                            return;\n                        }\n                        response.json()\n                            .then(resultJson => {\n                                this._handleSuccess(roomJid, resultJson, resolve, reject);\n                            });\n                    })\n                    .catch(error => {\n                        logger.warn(`Error: ${error}`);\n                        this._handleError(roomJid, undefined, undefined, resolve, () => reject(error));\n                    });\n            }\n        }).then(() => {\n            this.conferenceRequestSent = true;\n        })\n        .finally(() => {\n            this.xmpp.connection._breakoutMovingToMain = undefined;\n        });\n    }\n\n    /**\n     * Handles success response for conference IQ.\n     * @param roomJid\n     * @param conferenceRequest\n     * @param callback\n     * @param errorCallback\n     * @private\n     */\n    _handleSuccess(roomJid, conferenceRequest, callback, errorCallback) {\n        // Reset the error timeout (because we haven't failed here).\n        this.getNextErrorTimeout(true);\n\n        if (conferenceRequest.focusJid) {\n            logger.info(`Adding focus JID: ${conferenceRequest.focusJid}`);\n            this.focusUserJids.add(conferenceRequest.focusJid);\n        } else {\n            logger.warn('Conference request response contained no focusJid.');\n        }\n\n        const authenticationEnabled = conferenceRequest.properties.authentication === 'true';\n\n        logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n        if (conferenceRequest.sessionId) {\n            logger.info(`Received sessionId: ${conferenceRequest.sessionId}`);\n            Settings.sessionId = conferenceRequest.sessionId;\n        }\n\n        this.eventEmitter.emit(\n            AuthenticationEvents.IDENTITY_UPDATED, authenticationEnabled, conferenceRequest.identity);\n\n        this.sipGatewayEnabled = conferenceRequest.properties.sipGatewayEnabled;\n        logger.info(`Sip gateway enabled: ${this.sipGatewayEnabled}`);\n\n        if (conferenceRequest.properties.live === 'false' && this.options.preferVisitor) {\n            this.getNextTimeout(true);\n\n            logger.info('Conference is not live.');\n\n            this.xmpp.eventEmitter.emit(CONNECTION_FAILED, NOT_LIVE_ERROR);\n\n            errorCallback();\n\n            return;\n        }\n\n        if (conferenceRequest.ready) {\n            // Reset the non-error timeout (because we've succeeded here).\n            this.getNextTimeout(true);\n\n            // we want to ignore redirects when this is jibri (record/live-stream or a sip jibri)\n            // we ignore redirects when moving from a breakout room to the main room\n            if (conferenceRequest.vnode && !this.options.iAmRecorder && !this.options.iAmSipGateway) {\n                if (this.connection._breakoutMovingToMain === roomJid) {\n                    logger.info('Skipping redirect as we are moving from breakout to main.');\n\n                    callback();\n\n                    return;\n                }\n\n                logger.warn(`Redirected to: ${conferenceRequest.vnode} with focusJid ${conferenceRequest.focusJid}`);\n\n                this.xmpp.eventEmitter.emit(CONNECTION_REDIRECTED, conferenceRequest.vnode, conferenceRequest.focusJid);\n\n                errorCallback();\n\n                return;\n            }\n\n            logger.info('Conference-request successful, ready to join the MUC.');\n            callback();\n        } else {\n            const waitMs = this.getNextTimeout();\n\n            // This was a successful response, but the \"ready\" flag is not set. Retry after a timeout.\n            logger.info(`Not ready yet, will retry in ${waitMs} ms.`);\n            window.setTimeout(\n                () => this.sendConferenceRequest(roomJid)\n                    .then(callback).catch(errorCallback),\n                waitMs);\n        }\n    }\n\n    /**\n     * Handles error response for conference IQ.\n     * @param roomJid\n     * @param sessionError\n     * @param notAuthorized\n     * @param callback\n     * @param errorCallback\n     * @private\n     */\n    _handleError(roomJid, sessionError, notAuthorized, callback, errorCallback) { // eslint-disable-line max-params\n        // If the session is invalid, remove and try again without session ID to get\n        // a new one\n        if (sessionError) {\n            logger.info('Session expired! - removing');\n            Settings.sessionId = undefined;\n        }\n\n        // Not authorized to create new room\n        if (notAuthorized) {\n            logger.warn('Unauthorized to start the conference');\n            this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n            errorCallback();\n\n            return;\n        }\n\n        const waitMs = this.getNextErrorTimeout();\n\n        if (sessionError && waitMs < 60000) {\n            // If the session is invalid, retry a limited number of times and then fire an error.\n            logger.info(`Invalid session, will retry after ${waitMs} ms.`);\n            this.getNextTimeout(true);\n            window.setTimeout(() => this.sendConferenceRequest(roomJid)\n                .then(callback)\n                .catch(errorCallback), waitMs);\n        } else {\n            logger.error('Failed to get a successful response, giving up.');\n\n            // This is a \"fatal\" error and the user of the lib should handle it accordingly.\n            this.xmpp.eventEmitter.emit(CONNECTION_FAILED, CONFERENCE_REQUEST_FAILED);\n\n            errorCallback();\n        }\n    }\n\n    /**\n     * Invoked by {@link #sendConferenceRequest} upon its request receiving an xmpp error result.\n     *\n     * @param roomJid - The room jid used to send conference request.\n     * @param error - the error result of the request that {@link sendConferenceRequest} sent\n     * @param {Function} callback - the function to be called back upon the\n     * successful allocation of the conference focus\n     * @param errorCallback\n     */\n    _handleIqError(roomJid, error, callback, errorCallback) {\n        // The reservation system only works over XMPP. Handle the error separately.\n        // Check for error returned by the reservation system\n        const reservationErr = $(error).find('>error>reservation-error');\n\n        if (reservationErr.length) {\n            // Trigger error event\n            const errorCode = reservationErr.attr('error-code');\n            const errorTextNode = $(error).find('>error>text');\n            let errorMsg;\n\n            if (errorTextNode) {\n                errorMsg = errorTextNode.text();\n            }\n            this.eventEmitter.emit(\n                XMPPEvents.RESERVATION_ERROR,\n                errorCode,\n                errorMsg);\n\n            errorCallback();\n\n            return;\n        }\n\n        const invalidSession = Boolean($(error).find('>error>session-invalid').length\n                || $(error).find('>error>not-acceptable').length);\n\n        // Not authorized to create new room\n        const notAuthorized = $(error).find('>error>not-authorized').length > 0;\n\n        this._handleError(roomJid, invalidSession, notAuthorized, callback, errorCallback);\n    }\n\n    /**\n     * Invoked by {@link #sendConferenecRequest} upon its request receiving a\n     * success (i.e. non-error) result.\n     *\n     * @param roomJid - The room jid used to send conference request.\n     * @param result - the success (i.e. non-error) result of the request that {@link #sendConferenecRequest} sent\n     * @param {Function} callback - the function to be called back upon the\n     * successful allocation of the conference focus\n     * @param errorCallback\n     */\n    _handleIqSuccess(roomJid, result, callback, errorCallback) {\n        // Setup config options\n        const conferenceRequest = this._parseConferenceIq(result);\n\n        this._handleSuccess(roomJid, conferenceRequest, callback, errorCallback);\n    }\n\n    /**\n     * Authenticate by sending a conference IQ.\n     * @param roomJid The room jid.\n     * @returns {Promise<unknown>}\n     */\n    authenticate(roomJid) {\n        return new Promise((resolve, reject) => {\n            this.connection.sendIQ(\n                this._createConferenceIq(roomJid),\n                result => {\n                    const sessionId = $(result)\n                        .find('conference')\n                        .attr('session-id');\n\n                    if (sessionId) {\n                        logger.info(`Received sessionId:  ${sessionId}`);\n                        Settings.sessionId = sessionId;\n                    } else {\n                        logger.warn('Response did not contain a session-id');\n                    }\n\n                    resolve();\n                },\n                errorIq => reject({\n                    error: $(errorIq)\n                        .find('iq>error :first')\n                        .prop('tagName'),\n                    message: $(errorIq)\n                        .find('iq>error>text')\n                        .text()\n                })\n            );\n        });\n    }\n\n    /**\n     * Logout by sending conference IQ.\n     * @param callback\n     */\n    logout(callback) {\n        const iq = $iq({\n            to: this.targetJid,\n            type: 'set'\n        });\n        const { sessionId } = Settings;\n\n        if (!sessionId) {\n            callback();\n\n            return;\n        }\n        iq.c('logout', {\n            xmlns: 'http://jitsi.org/protocol/focus',\n            'session-id': sessionId\n        });\n        this.connection.sendIQ(\n            iq,\n            result => {\n                logger.info('Log out OK', result);\n                Settings.sessionId = undefined;\n                callback();\n            },\n            error => {\n                logger.error('Logout error', error);\n            }\n        );\n    }\n}\n","/* eslint-disable */\n\nimport { $iq, Strophe } from 'strophe.js';\n\nStrophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        if (typeof name === 'undefined') {\n           name = '';\n        }\n        if (typeof lang === 'undefined') {\n           lang = '';\n        }\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = $iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n","export enum JitsiTranscriptionStatus {\n\n    /**\n     * The transcription is off.\n     */\n    OFF = 'OFF',\n\n    /**\n     * The transcription is on.\n     */\n    ON = 'ON'\n}\n\n// exported for backward compatibility\nexport const ON = JitsiTranscriptionStatus.ON;\nexport const OFF = JitsiTranscriptionStatus.OFF;\n","import { getLogger } from '@jitsi/logger';\nimport { $msg } from 'strophe.js';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport ChatRoom from './ChatRoom';\nimport XMPP from './xmpp';\n\nconst logger = getLogger('modules/xmpp/AVModeration');\n\nexport interface IModerationEnabledByType {\n    audio: boolean;\n    video: boolean;\n}\n\nexport interface IMessageObject {\n    actor: string;\n    approved: boolean;\n    enabled: boolean;\n    mediaType: MediaType;\n    removed: boolean;\n    whitelists: { audio: string[]; video: string[]; };\n}\n\n/**\n * The AVModeration logic.\n */\nexport default class AVModeration {\n\n    /**\n     * Constructs AV moderation room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    private _xmpp: XMPP;\n    private _mainRoom: ChatRoom;\n    private _moderationEnabledByType: IModerationEnabledByType;\n    private _whitelistAudio: string[];\n    private _whitelistVideo: string[];\n\n    constructor(room: ChatRoom) {\n        this._xmpp = room.xmpp;\n\n        this._mainRoom = room;\n\n        this._moderationEnabledByType = {\n            [MediaType.AUDIO]: false,\n            [MediaType.VIDEO]: false\n        };\n\n        this._whitelistAudio = [];\n        this._whitelistVideo = [];\n\n        this._onMessage = this._onMessage.bind(this);\n        this._xmpp.addListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this._xmpp.removeListener(XMPPEvents.AV_MODERATION_RECEIVED, this._onMessage);\n    }\n\n    /**\n     * Whether AV moderation is supported on backend.\n     *\n     * @returns {boolean} whether AV moderation is supported on backend.\n     */\n    isSupported() {\n        return Boolean(this._xmpp.avModerationComponentAddress);\n    }\n\n    /**\n     * Enables or disables AV Moderation by sending a msg with command to the component.\n     */\n    enable(state: string, mediaType: MediaType) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot enable:${state} AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        if (state === this._moderationEnabledByType[mediaType]) {\n            logger.warn(`Moderation already in state:${state} for mediaType:${mediaType}`);\n\n            return;\n        }\n\n        // send the enable/disable message\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            enable: state,\n            mediaType\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Approves that a participant can unmute by sending a msg with its jid to the component.\n     */\n    approve(mediaType: MediaType, jid: string) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot approve in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to whitelist the jid and approve it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToWhitelist: jid }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Rejects that a participant can unmute by sending a msg with its jid to the component.\n     */\n    reject(mediaType: MediaType, jid: string) {\n        if (!this.isSupported() || !this._mainRoom.isModerator()) {\n            logger.error(`Cannot reject in AV moderation supported:${this.isSupported()},\n                moderator:${this._mainRoom.isModerator()}`);\n\n            return;\n        }\n\n        // send a message to remove from whitelist the jid and reject it to unmute\n        const msg = $msg({ to: this._xmpp.avModerationComponentAddress });\n\n        msg.c('av_moderation', {\n            mediaType,\n            jidToBlacklist: jid\n        }).up();\n\n        this._xmpp.connection.send(msg);\n    }\n\n    /**\n     * Receives av_moderation parsed messages as json.\n     * @param obj the parsed json content of the message to process.\n     * @private\n     */\n    _onMessage(obj: IMessageObject) {\n        const { removed, mediaType: media, enabled, approved, actor, whitelists: newWhitelists } = obj;\n\n        if (newWhitelists) {\n            const oldList = media === MediaType.AUDIO\n                ? this._whitelistAudio\n                : this._whitelistVideo;\n            const newList = Array.isArray(newWhitelists[media]) ? newWhitelists[media] : [];\n\n            if (removed) {\n                oldList.filter(x => !newList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_REJECTED, media, jid));\n            } else {\n                newList.filter(x => !oldList.includes(x))\n                    .forEach(jid => this._xmpp.eventEmitter\n                        .emit(XMPPEvents.AV_MODERATION_PARTICIPANT_APPROVED, media, jid));\n            }\n\n            if (media === MediaType.AUDIO) {\n                this._whitelistAudio = newList;\n            } else {\n                this._whitelistVideo = newList;\n            }\n        } else if (enabled !== undefined && this._moderationEnabledByType[media] !== enabled) {\n            this._moderationEnabledByType[media] = enabled;\n\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_CHANGED, enabled, media, actor);\n        } else if (removed) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_REJECTED, media);\n        } else if (approved) {\n            this._xmpp.eventEmitter.emit(XMPPEvents.AV_MODERATION_APPROVED, media);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst FEATURE_KEY = 'features/breakout-rooms';\nconst BREAKOUT_ROOM_ACTIONS = {\n    ADD: `${FEATURE_KEY}/add`,\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`,\n    REMOVE: `${FEATURE_KEY}/remove`,\n    RENAME: `${FEATURE_KEY}/rename`\n};\nconst BREAKOUT_ROOM_EVENTS = {\n    MOVE_TO_ROOM: `${FEATURE_KEY}/move-to-room`,\n    UPDATE: `${FEATURE_KEY}/update`\n};\n\nconst logger = getLogger('modules/xmpp/BreakoutRooms');\n\n/**\n * Helper class for handling breakout rooms.\n */\nexport default class BreakoutRooms {\n\n    /**\n     * Constructs breakout room.\n     *\n     * @param {ChatRoom} room the room we are in.\n     */\n    constructor(room) {\n        this.room = room;\n\n        this._handleMessages = this._handleMessages.bind(this);\n        this.room.xmpp.addListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n\n        this._rooms = {};\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this.room.xmpp.removeListener(XMPPEvents.BREAKOUT_ROOMS_EVENT, this._handleMessages);\n    }\n\n    /**\n     * Creates a breakout room with the given subject.\n     *\n     * @param {string} subject - A subject for the breakout room.\n     */\n    createBreakoutRoom(subject) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot create breakout room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.ADD,\n            subject\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Removes a breakout room.\n     *\n     * @param {string} breakoutRoomJid - JID of the room to be removed.\n     */\n    removeBreakoutRoom(breakoutRoomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot remove breakout room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.REMOVE,\n            breakoutRoomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Changes the subject of a breakout room.\n     *\n     * @param {string} breakoutRoomJid - JID of the room to be removed.\n     * @param {string} subject - A new subject for the breakout room.\n     */\n    renameBreakoutRoom(breakoutRoomJid, subject) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot rename breakout room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.RENAME,\n            breakoutRoomJid,\n            subject\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Sends the given participant to the given room.\n     *\n     * @param {string} participantJid - JID of the participant to be sent to a room.\n     * @param {string} roomJid - JID of the target room.\n     */\n    sendParticipantToRoom(participantJid, roomJid) {\n        if (!this.isSupported() || !this.room.isModerator()) {\n            logger.error(`Cannot send participant to room - supported:${this.isSupported()},\n                moderator:${this.room.isModerator()}`);\n\n            return;\n        }\n\n        const message = {\n            type: BREAKOUT_ROOM_ACTIONS.MOVE_TO_ROOM,\n            participantJid,\n            roomJid\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Retrieves whether a breakout room feature is supported.\n     *\n     * @param {string} feature - Feature to check.\n     * @returns Wether the feature is supported.\n     */\n    isFeatureSupported(feature) {\n        return Boolean((this.room.xmpp.breakoutRoomsFeatures || {})[feature]);\n    }\n\n    /**\n     * Whether Breakout Rooms support is enabled in the backend or not.\n     */\n    isSupported() {\n        return Boolean(this.getComponentAddress());\n    }\n\n    /**\n     * Gets the address of the Breakout Rooms XMPP component.\n     *\n     * @returns The address of the component.\n     */\n    getComponentAddress() {\n        return this.room.xmpp.breakoutRoomsComponentAddress;\n    }\n\n    /**\n     * Stores if the current room is a breakout room.\n     *\n     * @param {boolean} isBreakoutRoom - Whether this room is a breakout room.\n     */\n    _setIsBreakoutRoom(isBreakoutRoom) {\n        this._isBreakoutRoom = isBreakoutRoom;\n    }\n\n    /**\n     * Checks whether this room is a breakout room.\n     *\n     * @returns True if the room is a breakout room, false otherwise.\n     */\n    isBreakoutRoom() {\n        if (typeof this._isBreakoutRoom !== 'undefined') {\n            return this._isBreakoutRoom;\n        }\n\n        // Use heuristic, helpful for checking in the MUC_JOINED event.\n        return Strophe.getDomainFromJid(this.room.myroomjid) === this.getComponentAddress();\n    }\n\n    /**\n     * Sets the main room JID associated with this breakout room. Only applies when\n     * in a breakout room.\n     *\n     * @param {string} jid - The main room JID.\n     */\n    _setMainRoomJid(jid) {\n        this._mainRoomJid = jid;\n    }\n\n    /**\n     * Gets the main room's JID associated with this breakout room.\n     *\n     * @returns The main room JID.\n     */\n    getMainRoomJid() {\n        return this._mainRoomJid;\n    }\n\n    /**\n     * Handles a message for managing breakout rooms.\n     *\n     * @param {object} payload - Arbitrary data.\n     */\n    _handleMessages(payload) {\n        switch (payload.event) {\n        case BREAKOUT_ROOM_EVENTS.MOVE_TO_ROOM:\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_MOVE_TO_ROOM, payload.roomJid);\n            break;\n        case BREAKOUT_ROOM_EVENTS.UPDATE: {\n            const filteredPayload = this._filterUpdatePayload(payload);\n\n            this._rooms = filteredPayload.rooms;\n            this.room.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_UPDATED, filteredPayload);\n            break;\n        }\n        }\n    }\n\n    /**\n     * Filters the hidden participants from the payload.\n     *\n     * @param {Object} payload - The payload of the update message.\n     * @return {Object} - The filtered payload.\n     */\n    _filterUpdatePayload(payload) {\n        const hiddenDomain = this.room.options.hiddenDomain;\n        const { rooms } = payload;\n        const filteredRooms = {};\n\n        Object.entries(rooms).forEach(([ key, room ]) => {\n            const { participants = {} } = room;\n            const filteredParticipants = {};\n\n            Object.entries(participants).forEach(([ k, participant ]) => {\n                if (Strophe.getDomainFromJid(participant.jid) !== hiddenDomain) {\n                    filteredParticipants[k] = participant;\n                }\n            });\n\n            filteredRooms[key] = {\n                ...room,\n                participants: filteredParticipants\n            };\n        });\n\n        return {\n            ...payload,\n            rooms: filteredRooms\n        };\n    }\n\n    /**\n     * Helper to send a breakout rooms message to the component.\n     *\n     * @param {Object} message - Command that needs to be sent.\n     */\n    _sendMessage(message) {\n        const msg = $msg({ to: this.getComponentAddress() });\n\n        msg.c('breakout_rooms', message).up();\n\n        this.room.xmpp.connection.send(msg);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger('modules/xmpp/Lobby');\n\n/**\n * The command type for updating a lobby participant's e-mail address.\n *\n * @type {string}\n */\nconst EMAIL_COMMAND = 'email';\n\n/**\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\n * approving or denying access to participants from the lobby room.\n */\nexport default class Lobby {\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the main room.\n     */\n    constructor(room) {\n        this.xmpp = room.xmpp;\n        this.mainRoom = room;\n\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.LOCAL_ROLE_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\n            maybeJoinLobbyRoom);\n\n        this.mainRoom.addEventListener(\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\n            jid => {\n                this.lobbyRoomJid = jid;\n            });\n    }\n\n    /**\n     * Whether lobby is supported on backend.\n     *\n     * @returns {boolean} whether lobby is supported on backend.\n     */\n    isSupported() {\n        return this.xmpp.lobbySupported;\n    }\n\n    /**\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\n     *\n     * @returns {Promise}\n     */\n    enable() {\n        if (!this.isSupported()) {\n            return Promise.reject(new Error('Lobby not supported!'));\n        }\n\n        // let's wait for the room data form to be populated after XMPPEvents.MUC_JOINED\n        if (!this.mainRoom.initialDiscoRoomInfoReceived) {\n            return new Promise((resolve, reject) => {\n                let unsubscribers = [];\n                const unsubscribe = () => {\n                    unsubscribers.forEach(remove => remove());\n                    unsubscribers = [];\n                };\n\n                unsubscribers.push(\n                    this.mainRoom.addCancellableListener(XMPPEvents.ROOM_DISCO_INFO_UPDATED, () => {\n                        unsubscribe();\n\n                        if (this.mainRoom.membersOnlyEnabled) {\n                            resolve();\n\n                            return;\n                        }\n\n                        this.mainRoom.setMembersOnly(true, resolve, reject);\n                    }));\n\n                // on timeout or failure\n                unsubscribers.push(this.mainRoom.addCancellableListener(XMPPEvents.ROOM_DISCO_INFO_FAILED, e => {\n                    unsubscribe();\n                    reject(e);\n                }));\n            });\n        }\n\n        if (this.mainRoom.membersOnlyEnabled) {\n            return Promise.resolve();\n        }\n\n        return new Promise((resolve, reject) => {\n            this.mainRoom.setMembersOnly(true, resolve, reject);\n        });\n    }\n\n    /**\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\n     *\n     * @returns {void}\n     */\n    disable() {\n        if (!this.isSupported() || !this.mainRoom.isModerator()\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\n            return;\n        }\n\n        this.mainRoom.setMembersOnly(false);\n    }\n\n    /**\n     * Broadcast a message to all participants in the lobby room\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendMessage(message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendMessage(JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Sends a private message to a participant in a lobby room.\n     * @param {string} id The message to send\n     * @param {Object} message The message to send\n     *\n     * @returns {void}\n     */\n    sendPrivateMessage(id, message) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.sendPrivateMessage(id, JSON.stringify(message), 'json-message');\n        }\n    }\n\n    /**\n     * Gets the local id for a participant in a lobby room.\n     * This is used for lobby room private chat messages.\n     *\n     * @returns {string}\n     */\n    getLocalId() {\n        if (this.lobbyRoom) {\n            return Strophe.getResourceFromJid(this.lobbyRoom.myroomjid);\n        }\n    }\n\n    /**\n     * Adds a message listener to the lobby room.\n     * @param {Function} listener The listener function,\n     * called when a new message is received in the lobby room.\n     *\n     * @returns {Function} Handler returned to be able to remove it later.\n     */\n    addMessageListener(listener) {\n        if (this.lobbyRoom) {\n            const handler = (participantId, message) => {\n                listener(message, Strophe.getResourceFromJid(participantId));\n            };\n\n            this.lobbyRoom.on(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n\n            return handler;\n        }\n    }\n\n    /**\n     * Remove a message handler from the lobby room.\n     * @param {Function} handler The handler function to remove.\n     *\n     * @returns {void}\n     */\n    removeMessageHandler(handler) {\n        if (this.lobbyRoom) {\n            this.lobbyRoom.off(XMPPEvents.JSON_MESSAGE_RECEIVED, handler);\n        }\n    }\n\n    /**\n     * Leaves the lobby room.\n     *\n     * @returns {Promise}\n     */\n    leave() {\n        if (this.lobbyRoom) {\n            return this.lobbyRoom.leave()\n                .then(() => {\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left!');\n                })\n                .catch(() => {}); // eslint-disable-line no-empty-function\n        }\n\n        return Promise.reject(\n                new Error('The lobby has already been left'));\n    }\n\n    /**\n     * We had received a jid for the lobby room.\n     *\n     * @param jid the lobby room jid to join.\n     */\n    setLobbyRoomJid(jid) {\n        this.lobbyRoomJid = jid;\n    }\n\n    /**\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\n     * @private\n     */\n    _maybeJoinLobbyRoom() {\n        if (!this.isSupported()) {\n            return;\n        }\n\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\n            // join the lobby\n            this.join()\n                .then(() => logger.info('Joined lobby room'))\n                .catch(e => logger.error('Failed joining lobby', e));\n        }\n    }\n\n    /**\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\n     *\n     * @param {string} username is required.\n     * @param {string} email is optional.\n     * @returns {Promise} resolves once we join the room.\n     */\n    join(displayName, email) {\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\n\n        if (!this.lobbyRoomJid) {\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\n        }\n\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\n\n        this.lobbyRoom = this.xmpp.createRoom(\n            roomName, {\n                customDomain,\n                disableDiscoInfo: true,\n                disableFocus: true,\n                enableLobby: false\n            }\n        );\n\n        if (displayName) {\n            // remove previously set nickname\n            this.lobbyRoom.addOrReplaceInPresence('nick', {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: displayName\n            });\n        }\n\n        if (isModerator) {\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\n            });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_JOINED,\n                // eslint-disable-next-line max-params\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\n                    // we need to ignore joins on lobby for participants that are already in the main room\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\n                        return;\n                    }\n\n                    // Check if the user is a member if any breakout room.\n                    for (const room of Object.values(this.mainRoom.getBreakoutRooms()._rooms)) {\n                        if (Object.values(room.participants).find(p => p.jid === jid)) {\n                            return;\n                        }\n                    }\n\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\n                        Strophe.getResourceFromJid(from),\n                        nick,\n                        identity ? identity.avatar : undefined\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\n                    // we emit the new event on the main room so we can propagate\n                    // events to the conference\n                    this.mainRoom.eventEmitter.emit(\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\n                        Strophe.getResourceFromJid(from)\n                    );\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                () => {\n                    // let's make sure we emit that all lobby users had left\n                    Object.keys(this.lobbyRoom.members)\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\n\n                    this.lobbyRoom.clean();\n\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left(destroyed)!');\n                });\n        } else {\n            // this should only be handled by those waiting in lobby\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\n                if (isSelfPresence) {\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\n\n                    this.lobbyRoom.clean();\n\n\n                }\n            });\n\n            // As there is still reference of the main room\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\n            // the invite message should be received directly to the xmpp conn in general\n            this.mainRoom.addEventListener(\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                (roomJid, from, txt, invitePassword) => {\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\n                    if (roomJid === this.mainRoom.roomjid) {\n                        // we are now allowed, so let's join\n                        this.mainRoom.join(invitePassword);\n                    }\n                });\n            this.lobbyRoom.addEventListener(\n                XMPPEvents.MUC_DESTROYED,\n                (reason, jid) => {\n                    this.lobbyRoom?.clean();\n\n                    this.lobbyRoom = undefined;\n                    logger.info('Lobby room left(destroyed)!');\n\n                    // we are receiving the jid of the main room\n                    // means we are invited to join, maybe lobby was disabled\n                    if (jid) {\n                        this.mainRoom.join();\n\n                        return;\n                    }\n\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n                });\n\n            // If participant retries joining shared password while waiting in the lobby\n            // and succeeds make sure we leave lobby\n            this.mainRoom.addEventListener(\n                XMPPEvents.MUC_JOINED,\n                () => {\n                    this.leave().catch(() => {\n                        // this may happen if the room has been destroyed.\n                    });\n                });\n        }\n\n        return new Promise((resolve, reject) => {\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\n                resolve();\n\n                // send our email, as we do not handle this on initial presence we need a second one\n                if (email && !isModerator) {\n                    this.lobbyRoom.addOrReplaceInPresence(EMAIL_COMMAND, { value: email })\n                        && this.lobbyRoom.sendPresence();\n                }\n            });\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\n\n            this.lobbyRoom.join();\n        });\n\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param id\n     */\n    denyAccess(id) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        const jid = Object.keys(this.lobbyRoom.members)\n            .find(j => Strophe.getResourceFromJid(j) === id);\n\n        if (jid) {\n            this.lobbyRoom.kick(jid);\n        } else {\n            logger.error(`Not found member for ${id} in lobby room.`);\n        }\n    }\n\n    /**\n     * Should be possible only for moderators.\n     * @param param or an array of ids.\n     */\n    approveAccess(param) {\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\n            return;\n        }\n\n        // Get the main room JID. If we are in a breakout room we'll use the main\n        // room's lobby.\n        let mainRoomJid = this.mainRoom.roomjid;\n\n        if (this.mainRoom.getBreakoutRooms().isBreakoutRoom()) {\n            mainRoomJid = this.mainRoom.getBreakoutRooms().getMainRoomJid();\n        }\n\n        const membersToApprove = [];\n        let ids = param;\n\n        if (!Array.isArray(param)) {\n            ids = [ param ];\n        }\n\n        ids.forEach(id => {\n            const memberRoomJid = Object.keys(this.lobbyRoom.members)\n                .find(j => Strophe.getResourceFromJid(j) === id);\n\n            if (memberRoomJid) {\n                membersToApprove.push(this.lobbyRoom.members[memberRoomJid].jid);\n            } else {\n                logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\n            }\n        });\n\n        if (membersToApprove.length > 0) {\n            const msgToSend\n                = $msg({ to: mainRoomJid })\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' });\n\n            membersToApprove.forEach(jid => {\n                msgToSend.c('invite', { to: jid }).up();\n            });\n\n            this.xmpp.connection.sendIQ(msgToSend,\n                () => { }, // eslint-disable-line no-empty-function\n                e => {\n                    logger.error(`Error sending invite for ${membersToApprove}`, e);\n                });\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { isEqual } from 'lodash-es';\nimport { $msg } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport { JITSI_MEET_MUC_TYPE } from './xmpp';\n\nconst logger = getLogger('modules/xmpp/RoomMetadata');\n\n/**\n * Helper class for handling room metadata.\n */\nexport default class RoomMetadata {\n    room: any;\n    _metadata: any;\n\n    /**\n     * Constructs lobby room.\n     *\n     * @param {ChatRoom} room the room we are in.\n     */\n    constructor(room) {\n        this.room = room;\n\n        this._handleMessages = this._handleMessages.bind(this);\n        this.room.xmpp.addListener(XMPPEvents.ROOM_METADATA_EVENT, this._handleMessages);\n\n        this._metadata = {};\n    }\n\n    /**\n     * Stops listening for events.\n     */\n    dispose() {\n        this.room.xmpp.removeListener(XMPPEvents.ROOM_METADATA_EVENT, this._handleMessages);\n    }\n\n    /**\n     * Sets metadata for the given key.\n     *\n     * @param {string} key - key under which the metadata will be stored.\n     * @param {object} data - data to be stored.\n     */\n    setMetadata(key, data) {\n        if (!this.isSupported()) {\n            logger.error(`Cannot set room metadata - supported:${this.isSupported()}`);\n\n            return;\n        }\n\n        const message = {\n            key,\n            data\n        };\n\n        this._sendMessage(message);\n    }\n\n    /**\n     * Gets the stored metadata (all of it).\n     *\n     * @returns The stored metadata.\n     */\n    getMetadata() {\n        return this._metadata;\n    }\n\n    /**\n     * Whether Breakout Rooms support is enabled in the backend or not.\n     */\n    isSupported() {\n        return Boolean(this.getComponentAddress());\n    }\n\n    /**\n     * Gets the address of the Breakout Rooms XMPP component.\n     *\n     * @returns The address of the component.\n     */\n    getComponentAddress() {\n        return this.room.xmpp.roomMetadataComponentAddress;\n    }\n\n    /**\n     * Handles a message with metadata updates.\n     *\n     * @param {object} payload - Arbitrary data.\n     */\n    _handleMessages(payload) {\n        const { metadata } = payload;\n\n        if (!metadata || isEqual(this._metadata, metadata)) {\n            return;\n        }\n\n        this._metadata = metadata;\n        logger.debug('Received metadata update', metadata);\n        this.room.eventEmitter.emit(XMPPEvents.ROOM_METADATA_UPDATED, metadata);\n    }\n\n    /**\n     * Helper to send a breakout rooms message to the component.\n     *\n     * @param {Object} message - Command that needs to be sent.\n     */\n    _sendMessage(message) {\n        message[JITSI_MEET_MUC_TYPE] = 'room_metadata';\n\n        const msg = $msg({ to: this.getComponentAddress() });\n\n        msg.c('room_metadata', {\n            room: this.room.roomjid,\n            xmlns: 'http://jitsi.org/jitmeet'\n        }, JSON.stringify(message)).up();\n\n        this.room.xmpp.connection.send(msg);\n    }\n}\n","import { safeJsonParse } from '@jitsi/js-utils/json';\nimport { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { isEqual } from 'lodash-es';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { AUTH_ERROR_TYPES } from '../../JitsiConferenceErrors';\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport AuthenticationEvents from '../../service/authentication/AuthenticationEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport Settings from '../settings/Settings';\nimport EventEmitterForwarder from '../util/EventEmitterForwarder';\nimport Listenable from '../util/Listenable';\nimport { getJitterDelay } from '../util/Retry';\n\nimport AVModeration from './AVModeration';\nimport BreakoutRooms from './BreakoutRooms';\nimport Lobby from './Lobby';\nimport RoomMetadata from './RoomMetadata';\nimport XmppConnection from './XmppConnection';\nimport { FEATURE_TRANSCRIBER } from './xmpp';\n\nconst logger = getLogger('modules/xmpp/ChatRoom');\n\n/**\n * How long we're going to wait for IQ response, before timeout error is triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nexport function filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Array of affiliations that are allowed in members only room.\n * @type {string[]}\n */\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\n\n/**\n * Process nodes to extract data needed for MUC_JOINED and MUC_MEMBER_JOINED events.\n *\n */\nfunction extractIdentityInformation(node, hiddenFromRecorderFeatureEnabled) {\n    const identity = {};\n    const userInfo = node.children.find(c => c.tagName === 'user');\n\n    if (userInfo) {\n        identity.user = {};\n        const tags = [ 'id', 'name', 'avatar' ];\n\n        if (hiddenFromRecorderFeatureEnabled) {\n            tags.push('hidden-from-recorder');\n        }\n\n        for (const tag of tags) {\n            const child\n                = userInfo.children.find(c => c.tagName === tag);\n\n            if (child) {\n                identity.user[tag] = child.value;\n            }\n        }\n    }\n    const groupInfo = node.children.find(c => c.tagName === 'group');\n\n    if (groupInfo) {\n        identity.group = groupInfo.value;\n    }\n\n    return identity;\n}\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room.\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\n     * This is intended to be used only for lobby rooms.\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\n     * @param {boolean} options.hiddenFromRecorderFeatureEnabled - when set to {@code true} we will check identity tag\n     * for node presence.\n     */\n    constructor(connection, jid, password, xmpp, options) {\n        super();\n        this.xmpp = xmpp;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        this.replaceParticipant = false;\n        logger.info(`Joining MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.inProgressEmitted = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n\n        this.eventsForwarder = new EventEmitterForwarder(this.xmpp.moderator, this.eventEmitter);\n        this.eventsForwarder.forward(AuthenticationEvents.IDENTITY_UPDATED, AuthenticationEvents.IDENTITY_UPDATED);\n        this.eventsForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED, XMPPEvents.AUTHENTICATION_REQUIRED);\n        this.eventsForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED, XMPPEvents.FOCUS_DISCONNECTED);\n        this.eventsForwarder.forward(XMPPEvents.RESERVATION_ERROR, XMPPEvents.RESERVATION_ERROR);\n\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\n            this.lobby = new Lobby(this);\n        }\n        this.avModeration = new AVModeration(this);\n        this.breakoutRooms = new BreakoutRooms(this);\n        this.roomMetadata = new RoomMetadata(this);\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n        this.initialDiscoRoomInfoReceived = false;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     * Joins the chat room.\n     * @param {string} password - Password to unlock room on joining.\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password, replaceParticipant) {\n        this.password = password;\n        this.replaceParticipant = replaceParticipant;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                        .finally(() => {\n                            this.xmpp.connection._breakoutMovingToMain = undefined;\n                        })\n                    : this.xmpp.moderator.sendConferenceRequest(this.roomjid);\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                this._removeConnListeners.push(\n                    this.connection.addCancellableListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            })\n            .catch(e => logger.trace('PreJoin rejected', e));\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin - Whether this is initial presence to join the room.\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            if (this.replaceParticipant) {\n                pres.c('flip_device').up();\n            }\n\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n\n            // send the machineId with the initial presence\n            if (this.xmpp.moderator.targetUrl) {\n                pres.c('billingid').t(Settings.machineId).up();\n            }\n\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n\n        // we store time we last synced presence state\n        this.presenceSyncTime = Date.now();\n\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave(reason) {\n        logger.info('do leave', this.myroomjid);\n        const pres = $pres({\n            to: this.myroomjid,\n            type: 'unavailable'\n        });\n\n        if (reason) {\n            pres.c('status').t(reason).up();\n        }\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.warn('No meeting ID from backend');\n            }\n\n            const meetingCreatedTSValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_created_timestamp\"]>value');\n\n            if (meetingCreatedTSValEl.length) {\n                this.eventEmitter.emit(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, meetingCreatedTSValEl.text());\n            } else {\n                logger.warn('No conference duration from backend');\n            }\n\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\n\n            const lobbyRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\n\n            if (this.lobby) {\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\n            }\n\n            const isBreakoutField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_isbreakout\"]>value');\n            const isBreakoutRoom = Boolean(isBreakoutField?.text());\n\n            this.breakoutRooms._setIsBreakoutRoom(isBreakoutRoom);\n\n            const breakoutMainRoomField\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_breakout_main_room\"]>value');\n\n            if (breakoutMainRoomField?.length) {\n                this.breakoutRooms._setMainRoomJid(breakoutMainRoomField.text());\n            }\n\n            if (membersOnly !== this.membersOnlyEnabled) {\n                this.membersOnlyEnabled = membersOnly;\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\n            }\n\n            const visitorsSupported = $(result)\n                .find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_visitorsEnabled\"]>value').text() === '1';\n\n            if (visitorsSupported !== this.visitorsSupported) {\n                this.visitorsSupported = visitorsSupported;\n                this.eventEmitter.emit(XMPPEvents.MUC_VISITORS_SUPPORTED_CHANGED, visitorsSupported);\n            }\n\n            const roomMetadataEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_jitsimetadata\"]>value');\n            const roomMetadataText = roomMetadataEl?.text();\n\n            if (roomMetadataText) {\n                try {\n                    this.roomMetadata._handleMessages(safeJsonParse(roomMetadataText));\n                } catch (e) {\n                    logger.warn('Failed to set room metadata', e);\n                }\n            }\n\n            this.initialDiscoRoomInfoReceived = true;\n            this.eventEmitter.emit(XMPPEvents.ROOM_DISCO_INFO_UPDATED);\n        }, error => {\n            logger.error('Error getting room info: ', error);\n            this.eventEmitter.emit(XMPPEvents.ROOM_DISCO_INFO_FAILED, error);\n        },\n        IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        if (this.options.disableDiscoInfo) {\n            return;\n        }\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                logger.error('non-anonymous rooms not supported');\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: this.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            this.connection.sendIQ(formSubmit);\n\n        }, error => {\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established, only if needed\n        if (status === XmppConnection.Status.CONNECTED && this.presenceUpdateTime > this.presenceSyncTime) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.isReplaceParticipant\n            = pres.getElementsByTagName('flip_device').length;\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus = this.xmpp.moderator.isFocusJid(jid);\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'silent':\n                member.isSilent = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node, this.options.hiddenFromRecorderFeatureEnabled);\n                break;\n            case 'features': {\n                member.features = this._extractFeatures(node);\n                break;\n            }\n            case 'jitsi_participant_region': {\n                member.region = node.value;\n                break;\n            }\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (!this.joined && !this.inProgressEmitted) {\n            const now = this.connectionTimes['muc.join.started'] = window.performance.now();\n\n            logger.info('(TIME) MUC join started:\\t', now);\n\n            this.eventEmitter.emit(XMPPEvents.MUC_JOIN_IN_PROGRESS);\n            this.inProgressEmitted = true;\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.info('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                if (member.region && this.options?.deploymentInfo) {\n                    this.options.deploymentInfo.userRegion = member.region;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                // send the presence only if there was a modification after we had synced it\n                if (this.presenceUpdateTime > this.presenceSyncTime) {\n                    this.sendPresence();\n                }\n\n                // we need to reset it because of breakout rooms which will reuse connection but will invite jicofo\n                this.xmpp.moderator.conferenceRequestSent = false;\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\n            }\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n\n            if (xElement && $(xElement).find('>status[code=\"110\"]').length) {\n                // let's check for some backend forced permissions\n\n                const permissions = $(pres).find('>permissions[xmlns=\"http://jitsi.org/jitmeet\"]>p');\n\n                if (permissions.length) {\n                    const permissionsMap = {};\n\n                    permissions.each((idx, p) => {\n                        permissionsMap[p.getAttribute('name')] = p.getAttribute('val');\n                    });\n\n                    this.eventEmitter.emit(XMPPEvents.PERMISSIONS_RECEIVED, permissionsMap);\n                }\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.info('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, member.features);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType,\n                    member.jid,\n                    member.features,\n                    member.isReplaceParticipant,\n                    member.isSilent);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // affiliation changed\n            if (memberOfThis.affiliation !== member.affiliation) {\n                memberOfThis.affiliation = member.affiliation;\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                // By default we are disabling the waiting for form submission in order to use the room\n                // and we had enabled by default that jids are public in the room ,\n                // so this case should not happen, if public jid is turned off we will receive the jid\n                // when we become moderator in the room\n                memberOfThis.isFocus = true;\n                this._initFocus(from, member.features);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // join without audio\n            if (member.isSilent) {\n                memberOfThis.isSilent = member.isSilent;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n\n            if (!isEqual(memberOfThis.features, member.features)) {\n                memberOfThis.features = member.features;\n                this.eventEmitter.emit(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, from, member.features);\n            }\n        }\n\n        const participantProperties = new Map();\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'silent':\n                this.eventEmitter.emit(\n                    XMPPEvents.SILENT_STATUS_CHANGED,\n                    from,\n                    member.isSilent);\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus\n                    && member.isHiddenDomain && member.features.has(FEATURE_TRANSCRIBER)) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status,\n                        Strophe.getResourceFromJid(from)\n                    );\n                }\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default: {\n                if (node.tagName.startsWith('jitsi_participant_')) {\n                    participantProperties\n                        .set(node.tagName.substring('jitsi_participant_'.length), node.value);\n                } else {\n                    this.processNode(node, from);\n                }\n            }\n            }\n        }\n\n        // All participant properties are in `participantProperties`, call the event handlers now.\n        const participantId = Strophe.getResourceFromJid(from);\n\n        for (const [ key, value ] of participantProperties) {\n            this.participantPropertyListener(participantId, key, value);\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Extracts the features from the presence.\n     * @param node the node to process.\n     * @return features the Set of features where extracted data is added.\n     * @private\n     */\n    _extractFeatures(node) {\n        const features = new Set();\n\n        for (let j = 0; j < node.children.length; j++) {\n            const { attributes } = node.children[j];\n\n            if (attributes && attributes.var) {\n                features.add(attributes.var);\n            }\n        }\n\n        return features;\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param features the features reported in jicofo presence\n     */\n    _initFocus(from, features) {\n        this.focusMucJid = from;\n        this.focusFeatures = features;\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            const tagHandlers = this.presHandlers[node.tagName] ?? [];\n\n            tagHandlers.forEach(handler => {\n                handler(node, Strophe.getResourceFromJid(from), from);\n            });\n        } catch (e) {\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     */\n    sendMessage(message, elementName) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, {}, message);\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message);\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /**\n     * Sends a reaction message to the other participants in the conference.\n     * @param {string} reaction - The reaction being sent.\n     * @param {string} messageId - The id of the message being sent.\n     * @param {string} receiverId - The receiver of the message if it is private.\n     */\n    sendReaction(reaction, messageId, receiverId) {\n        // Adds the 'to' attribute depending on if the message is private or not.\n        const msg = receiverId ? $msg({ to: `${this.roomjid}/${receiverId}`,\n            type: 'chat' }) : $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('reactions', { id: messageId,\n            xmlns: 'urn:xmpp:reactions:0' })\n            .c('reaction', {}, reaction)\n            .up().c('store', { xmlns: 'urn:xmpp:hints' });\n\n        this.connection.send(msg);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     */\n    sendPrivateMessage(id, message, elementName) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const valueToProcess = subject ? subject.trim() : subject;\n\n        if (valueToProcess === this.subject) {\n            // subject already set to the new value\n            return;\n        }\n\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', valueToProcess);\n        this.connection.send(msg);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\n\n        if (destroySelect.length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n        const isReplaceParticipant = $(pres).find('flip_device').length > 0;\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                + '>item>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            // we first fire the kicked so we can show the participant\n            // who kicked, before notifying that participant left\n            // we fire kicked for us and for any participant kicked\n            this.eventEmitter.emit(\n                XMPPEvents.KICKED,\n                isSelfPresence,\n                actorNick,\n                Strophe.getResourceFromJid(from),\n                reason,\n                isReplaceParticipant);\n        }\n\n        if (isSelfPresence) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                delete this.lastPresences[jid];\n                if (!member.isFocus) {\n                    this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n                }\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        } else {\n            const reasonSelect = $(pres).find('>status');\n            const member = this.members[from];\n            let reason;\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            delete this.members[from];\n            delete this.lastPresences[from];\n\n            // In this case we *do* fire MUC_MEMBER_LEFT for the focus?\n            this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, from, reason);\n\n            if (member && member.isHiddenDomain && member.features.has(FEATURE_TRANSCRIBER)\n                && this.transcriptionStatus !== JitsiTranscriptionStatus.OFF) {\n                this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n                this.eventEmitter.emit(\n                    XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                    this.transcriptionStatus,\n                    Strophe.getResourceFromJid(from),\n                    true /* exited abruptly */\n                );\n            }\n\n            if (member?.isFocus) {\n                logger.info('Focus has left the room - leaving conference');\n                this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const settingsErrorMsg = $(msg).find('>settings-error>text').text();\n\n            if (settingsErrorMsg.length) {\n                this.eventEmitter.emit(XMPPEvents.SETTINGS_ERROR_RECEIVED, settingsErrorMsg);\n\n                return true;\n            }\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const reactions = $(msg).find('>[xmlns=\"urn:xmpp:reactions:0\"]>reaction');\n\n        if (reactions.length > 0) {\n            const messageId = $(msg).find('>[xmlns=\"urn:xmpp:reactions:0\"]').attr('id');\n            const reactionList = [];\n\n            reactions.each((_, reactionElem) => {\n                const reaction = $(reactionElem).text();\n\n                reactionList.push(reaction);\n            });\n\n            this.eventEmitter.emit(XMPPEvents.REACTION_RECEIVED, from, reactionList, messageId);\n\n            return true;\n        }\n\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.subject = subjectText.trim();\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.info(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid) {\n            let invite;\n\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n                this.discoRoomInfo();\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\n                        && invite.length) {\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\n                let password;\n\n                if (passwordSelect && passwordSelect.length) {\n                    password = passwordSelect.text();\n                }\n\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\n                    from, invite.attr('from'), txt, password);\n            }\n        }\n\n        const jsonMessage = $(msg).find('>json-message').text();\n\n        if (jsonMessage) {\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n            // We emit this event if the message is a valid json, and is not\n            // delivered after a delay, i.e. stamp is undefined.\n            // e.g. - subtitles should not be displayed if delayed.\n            if (parsedJson && stamp === undefined) {\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                    from, parsedJson);\n\n                return;\n            }\n        }\n\n        if (txt) {\n\n            const messageId = $(msg).attr('id') || uuidv4();\n\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, txt, this.myroomjid, stamp, messageId);\n            } else if (type === 'groupchat') {\n                const nickEl = $(msg).find('>nick');\n                let nick;\n\n                if (nickEl.length > 0) {\n                    nick = nickEl.text();\n                }\n\n                // we will fire explicitly that this is a guest(isGuest:true) to the conference\n                // informing that this is probably a message from a guest to the conference (visitor)\n                // a message with explicit name set\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                    from, txt, this.myroomjid, stamp, nick, Boolean(nick), messageId);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        let errorDescriptionNode;\n\n        if (from === this.myroomjid) {\n            // we have tried to join, and we received an error, let's send again conference-iq on next attempt\n            // as it may turn out that jicofo left the room if we were the first to try,\n            // and the user delayed the attempt for entering the password or such\n            this.xmpp.moderator.conferenceRequestSent = false;\n        }\n\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.debug('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n\n                const txtNode = $(pres).find('>error[type=\"cancel\"]>text[xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]');\n                const txt = txtNode.length && txtNode.text();\n                let type = AUTH_ERROR_TYPES.GENERAL;\n\n                // a race where we have sent a conference request to jicofo and jicofo was about to leave or just left\n                // because of no participants in the room, and we tried to create the room, without having\n                // permissions for that (only jicofo creates rooms)\n                if (txt === 'Room creation is restricted') {\n                    type = AUTH_ERROR_TYPES.ROOM_CREATION_RESTRICTION;\n\n                    if (!this._roomCreationRetries) {\n                        this._roomCreationRetries = 0;\n                    }\n                    this._roomCreationRetries++;\n\n                    if (this._roomCreationRetries <= 3) {\n                        const retryDelay = getJitterDelay(\n                            /* retry */ this._roomCreationRetries,\n                            /* minDelay */ 500,\n                            1.5);\n\n                        // let's retry inviting jicofo and joining the room, retries will take between 1 and 3 seconds\n                        setTimeout(() => this.join(this.password, this.replaceParticipant), retryDelay);\n\n                        return;\n                    }\n                } else if ($(pres).find(\n                    '>error[type=\"cancel\"]>no-main-participants[xmlns=\"jitsi:visitors\"]').length > 0) {\n                    type = AUTH_ERROR_TYPES.NO_MAIN_PARTICIPANTS;\n                } else if ($(pres).find(\n                    '>error[type=\"cancel\"]>promotion-not-allowed[xmlns=\"jitsi:visitors\"]').length > 0) {\n                    type = AUTH_ERROR_TYPES.PROMOTION_NOT_ALLOWED;\n                } else if ($(pres).find(\n                    '>error[type=\"cancel\"]>no-visitors-lobby[xmlns=\"jitsi:visitors\"]').length > 0) {\n                    type = AUTH_ERROR_TYPES.NO_VISITORS_LOBBY;\n                }\n\n                this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, type, txt);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else if ($(pres)\n            .find(\n                '>error[type=\"auth\"]'\n                + '>registration-required['\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\n\n            // let's extract the lobby jid from the custom field\n            const lobbyRoomNode = $(pres).find('>error[type=\"auth\"]>lobbyroom');\n            let lobbyRoomJid;\n\n            if (lobbyRoomNode.length) {\n                lobbyRoomJid = lobbyRoomNode.text();\n            }\n\n            const waitingForHost = $(pres).find('>error[type=\"auth\"]>waiting-for-host').length > 0;\n\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid, waitingForHost);\n        } else if ((errorDescriptionNode = $(pres).find(\n                '>error[type=\"modify\"]>displayname-required[xmlns=\"http://jitsi.org/jitmeet\"]')).length) {\n            logger.warn('display name required ', pres);\n            this.eventEmitter.emit(XMPPEvents.DISPLAY_NAME_REQUIRED, errorDescriptionNode[0].attributes.lobby?.value);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param affiliation\n     */\n    setAffiliation(jid, affiliation) {\n        const grantIQ = $iq({\n            to: this.roomjid,\n            type: 'set'\n        })\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n        .c('item', {\n            affiliation,\n            jid: Strophe.getBareJidFromJid(jid)\n        })\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\n        .up().up().up();\n\n        this.connection.sendIQ(\n            grantIQ,\n            result => logger.info('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\n            error => logger.error('Set affiliation of participant error: ', error));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param reason\n     */\n    kick(jid, reason = 'You have been kicked.') {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t(reason).up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.info('Kick participant with jid: ', jid, result),\n            error => logger.error('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field',\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                        .c('value')\n                        .t(key === null || key.length === 0 ? '0' : '1')\n                        .up()\n                        .up();\n\n                    // if members only enabled\n                    if (this.membersOnlyEnabled) {\n                        formsubmit\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                            .c('value')\n                            .t('true')\n                            .up()\n                            .up();\n                    }\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    this.connection.sendIQ(\n                        formsubmit,\n                        () => {\n\n                            // we set the password in chat room so we can use it\n                            // later when dialing out\n                            this.password = key;\n                            onSuccess();\n                        },\n                        onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Turns off or on the members only config for the main room.\n     *\n     * @param {boolean} enabled - Whether to turn it on or off.\n     * @param onSuccess - optional callback.\n     * @param onError - optional callback.\n     */\n    setMembersOnly(enabled, onSuccess, onError) {\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\n            // first grant membership to all that are in the room\n            const affiliationsIq = $iq({\n                to: this.roomjid,\n                type: 'set' })\n                .c('query', {\n                    xmlns: 'http://jabber.org/protocol/muc#admin' });\n            let sendIq = false;\n\n            Object.values(this.members).forEach(m => {\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\n                    affiliationsIq.c('item', {\n                        'affiliation': 'member',\n                        'jid': Strophe.getBareJidFromJid(m.jid)\n                    }).up();\n                    sendIq = true;\n                }\n            });\n\n            sendIq && this.xmpp.connection.sendIQ(affiliationsIq.up());\n        }\n\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\n\n        this.xmpp.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\n                    const formToSubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n                    formToSubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formToSubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formToSubmit\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\n                        .c('value')\n                        .t(enabled ? 'true' : 'false')\n                        .up()\n                        .up();\n\n                    // if room is locked from other participant or we are locking it\n                    if (this.locked) {\n                        formToSubmit\n                            .c('field',\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                            .c('value')\n                            .t('1')\n                            .up()\n                            .up();\n                    }\n\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\n                } else {\n                    errorCallback(new Error('Setting members only room not supported!'));\n                }\n            },\n            errorCallback);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * This method is used by jibri.\n     *\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replce was\n     * performed as the value was already there.\n     * @deprecated Use 'addOrReplaceInPresence' instead. TODO: remove it from here and jibri.\n     */\n    addToPresence(key, values) {\n        return this.addOrReplaceInPresence(key, values);\n    }\n\n    /**\n     * Adds the key to the presence map, overriding any previous value.\n     * @param key The key to add or replace.\n     * @param values The new values.\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replace was\n     * performed as the value was already there.\n     */\n    addOrReplaceInPresence(key, values) {\n        values.tagName = key;\n\n        const matchingNodes = this.presMap.nodes.filter(node => key === node.tagName);\n\n        // if we have found just one, let's check is it the same\n        if (matchingNodes.length === 1 && isEqual(matchingNodes[0], values)) {\n            return false;\n        }\n\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n        this.presenceUpdateTime = Date.now();\n\n        return true;\n    }\n\n    /**\n     * Retrieves a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     * Removes a key from the presence map.\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n        this.presenceUpdateTime = Date.now();\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     * Obtains the info about given media advertised (in legacy format) in the MUC presence of the participant\n     * identified by the given endpoint JID. This is for mantining interop with endpoints that do not support\n     * source-name signaling (Jigasi and very old mobile clients).\n     *\n     * @param {string} endpointId the endpoint ID mapped to the participant which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence info or <tt>null</tt> either if there\n     * is no presence available or if the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: true, // muted by default\n            videoType: mediaType === MediaType.VIDEO ? VideoType.CAMERA : undefined // 'camera' by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const codecTypeNode = filterNodeFromPresenceJSON(pres, 'jitsi_participant_codecType');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n            if (codecTypeNode.length > 0) {\n                data.codecType = codecTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        if (mutedNode.length > 0) {\n            data.muted = mutedNode[0].value === 'true';\n        }\n\n        return data;\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns the last presence advertised by a MUC member.\n     * @param {string} mucNick\n     * @returns {*}\n     */\n    getLastPresence(mucNick) {\n        return this.lastPresences[`${this.roomjid}/${mucNick}`];\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     *\n     * @returns {Lobby}\n     */\n    getLobby() {\n        return this.lobby;\n    }\n\n    /**\n     * @returns {AVModeration}\n     */\n    getAVModeration() {\n        return this.avModeration;\n    }\n\n    /**\n     * @returns {BreakoutRooms}\n     */\n    getBreakoutRooms() {\n        return this.breakoutRooms;\n    }\n\n    /**\n     * @returns {RoomMetadata}\n     */\n    getMetadataHandler() {\n        return this.roomMetadata;\n    }\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     * @param mediaType\n     */\n    muteParticipant(jid, mute, mediaType) {\n        logger.info('set mute', mute, jid);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: `http://jitsi.org/jitmeet/${mediaType}`,\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.info('set mute', result),\n            error => logger.error('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.VIDEO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Clean any listeners or resources, executed on leaving.\n     */\n    clean() {\n        this._removeConnListeners.forEach(remove => remove());\n        this._removeConnListeners = [];\n\n        this.eventsForwarder.removeListeners(\n            AuthenticationEvents.IDENTITY_UPDATED,\n            XMPPEvents.AUTHENTICATION_REQUIRED,\n            XMPPEvents.FOCUS_DISCONNECTED,\n            XMPPEvents.RESERVATION_ERROR);\n\n        this.joined = false;\n        this.inProgressEmitted = false;\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave(reason) {\n        this.avModeration.dispose();\n        this.breakoutRooms.dispose();\n        this.roomMetadata.dispose();\n\n        const promises = [];\n\n        this.lobby?.lobbyRoom && promises.push(this.lobby.leave());\n\n        promises.push(new Promise((resolve, reject) => {\n            let timeout = -1;\n\n            const onMucLeft = (doReject = false) => {\n                this.eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n\n                // This will reset the joined flag to false. If we reset it earlier any self presence will be\n                // interpreted as muc join. That's why we reset the flag once we have received presence unavalable\n                // (MUC_LEFT).\n                this.clean();\n\n                if (doReject) {\n                    // The timeout expired. Make sure we clean the EMUC state.\n                    this.connection.emuc.doLeave(this.roomjid);\n                    reject(new Error('The timeout for the confirmation about leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            };\n\n            if (this.joined) {\n                timeout = setTimeout(() => onMucLeft(true), 5000);\n                this.eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n                this.doLeave(reason);\n            } else {\n                // we are clearing up, and we haven't joined the room\n                // there is no point of sending presence unavailable and check for timeout\n                // let's just clean\n                this.connection.emuc.doLeave(this.roomjid);\n                this.clean();\n                resolve();\n            }\n        }));\n\n        return Promise.allSettled(promises);\n    }\n\n    /**\n     * Ends the conference for all participants.\n     */\n    end() {\n        if (this.breakoutRooms.isBreakoutRoom()) {\n            logger.warn('Cannot end conference: this is a breakout room.');\n\n            return;\n        }\n\n        // Send the end conference message.\n        const msg = $msg({ to: this.xmpp.endConferenceComponentAddress });\n\n        msg.c('end_conference').up();\n\n        this.xmpp.connection.send(msg);\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { Strophe } from 'strophe.js';\n\nimport { CONNECTION_REDIRECTED } from '../../JitsiConnectionEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\n\nconst logger = getLogger('modules/xmpp/strophe.emuc');\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n        this.connection.addHandler(this.onMuteVideo.bind(this),\n            'http://jitsi.org/jitmeet/video', 'iq', 'set', null, null);\n        this.connection.addHandler(this.onVisitors.bind(this),\n            'jitsi:visitors', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.isRoomCreated(roomJid)) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *  Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomJid) {\n        return roomJid in this.rooms;\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMuteVideo(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMuteVideo(iq);\n\n        return true;\n    }\n\n    /**\n     * A visitor IQ is received, pass it to the room.\n     * @param iq The received iq.\n     * @returns {boolean}\n     */\n    onVisitors(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        const visitors = $(iq).find('>visitors[xmlns=\"jitsi:visitors\"]');\n        const response = $(iq).find('promotion-response');\n\n        if (visitors.length && response.length) {\n            if (String(response.attr('allow')).toLowerCase() === 'true') {\n                logger.info('Promotion request accepted. Redirected to main room.');\n                this.xmpp.eventEmitter.emit(\n                    CONNECTION_REDIRECTED, undefined, visitors.attr('focusjid'), response.attr('username'));\n            } else {\n                logger.info('Promotion request rejected.');\n                this.xmpp.eventEmitter.emit(XMPPEvents.VISITORS_REJECTION);\n            }\n        }\n\n        return true;\n    }\n}\n","/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nexport default arrayEach;\n","import arrayPush from './_arrayPush.js';\nimport getPrototype from './_getPrototype.js';\nimport getSymbols from './_getSymbols.js';\nimport stubArray from './stubArray.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\nexport default getSymbolsIn;\n","import baseGetAllKeys from './_baseGetAllKeys.js';\nimport getSymbolsIn from './_getSymbolsIn.js';\nimport keysIn from './keysIn.js';\n\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeysIn(object) {\n  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n}\n\nexport default getAllKeysIn;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = new array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\nexport default initCloneArray;\n","/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\nexport default cloneRegExp;\n","import Symbol from './_Symbol.js';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\nexport default cloneSymbol;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\nimport cloneDataView from './_cloneDataView.js';\nimport cloneRegExp from './_cloneRegExp.js';\nimport cloneSymbol from './_cloneSymbol.js';\nimport cloneTypedArray from './_cloneTypedArray.js';\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return new Ctor;\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return new Ctor;\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\nexport default initCloneByTag;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nexport default cloneDataView;\n","import baseIsMap from './_baseIsMap.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsMap = nodeUtil && nodeUtil.isMap;\n\n/**\n * Checks if `value` is classified as a `Map` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n * @example\n *\n * _.isMap(new Map);\n * // => true\n *\n * _.isMap(new WeakMap);\n * // => false\n */\nvar isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\nexport default isMap;\n","import getTag from './_getTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]';\n\n/**\n * The base implementation of `_.isMap` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n */\nfunction baseIsMap(value) {\n  return isObjectLike(value) && getTag(value) == mapTag;\n}\n\nexport default baseIsMap;\n","import baseIsSet from './_baseIsSet.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsSet = nodeUtil && nodeUtil.isSet;\n\n/**\n * Checks if `value` is classified as a `Set` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n * @example\n *\n * _.isSet(new Set);\n * // => true\n *\n * _.isSet(new WeakSet);\n * // => false\n */\nvar isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\nexport default isSet;\n","import getTag from './_getTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar setTag = '[object Set]';\n\n/**\n * The base implementation of `_.isSet` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n */\nfunction baseIsSet(value) {\n  return isObjectLike(value) && getTag(value) == setTag;\n}\n\nexport default baseIsSet;\n","import Stack from './_Stack.js';\nimport arrayEach from './_arrayEach.js';\nimport assignValue from './_assignValue.js';\nimport baseAssign from './_baseAssign.js';\nimport baseAssignIn from './_baseAssignIn.js';\nimport cloneBuffer from './_cloneBuffer.js';\nimport copyArray from './_copyArray.js';\nimport copySymbols from './_copySymbols.js';\nimport copySymbolsIn from './_copySymbolsIn.js';\nimport getAllKeys from './_getAllKeys.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\nimport getTag from './_getTag.js';\nimport initCloneArray from './_initCloneArray.js';\nimport initCloneByTag from './_initCloneByTag.js';\nimport initCloneObject from './_initCloneObject.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isMap from './isMap.js';\nimport isObject from './isObject.js';\nimport isSet from './isSet.js';\nimport keys from './keys.js';\nimport keysIn from './keysIn.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n  } else if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nexport default baseClone;\n","import copyObject from './_copyObject.js';\nimport getSymbolsIn from './_getSymbolsIn.js';\n\n/**\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbolsIn(source, object) {\n  return copyObject(source, getSymbolsIn(source), object);\n}\n\nexport default copySymbolsIn;\n","import copyObject from './_copyObject.js';\nimport keysIn from './keysIn.js';\n\n/**\n * The base implementation of `_.assignIn` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssignIn(object, source) {\n  return object && copyObject(source, keysIn(source), object);\n}\n\nexport default baseAssignIn;\n","import copyObject from './_copyObject.js';\nimport getSymbols from './_getSymbols.js';\n\n/**\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\nexport default copySymbols;\n","import copyObject from './_copyObject.js';\nimport keys from './keys.js';\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\nexport default baseAssign;\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nexport default cloneDeep;\n","/**\n * Enumeration of the codec mime types\n * @type {{AV1: string, H264: string, OPUS: string, RED: string, ULPFEC: string, VP8: string, VP9: string}}\n */\nexport enum CodecMimeType {\n\n    /**\n     * AV1 codec mime type.\n     */\n    AV1 = 'av1',\n\n    /**\n     * The h264 codec mime type.\n     */\n    H264 = 'h264',\n\n    /**\n     * The opus codec mime type.\n     */\n    OPUS = 'opus',\n\n    /**\n     * The red codec mime type.\n     */\n    RED = 'red',\n\n    /**\n     * The ulpfec codec mime type.\n     */\n    ULPFEC = 'ulpfec',\n\n    /**\n     * The vp8 codec mime type.\n     */\n    VP8 = 'vp8',\n\n    /**\n     * The vp9 codec mime type.\n     */\n    VP9 = 'vp9'\n}\n","import browser from '../../modules/browser';\n\nimport { CodecMimeType } from './CodecMimeType';\n\n// Default value for assumed downlink bandwidth for the local endpoint which tells the bridge to use its own calculated\n// BWE value while determining the number of video streams to route to the endpoint.\nexport const ASSUMED_BANDWIDTH_BPS = -1;\n\n// Default lastN value to be used while ramping up lastN after a cpu limitation ceases to exist (if -1 or no value is\n// passed in config.js for channelLastN).\nexport const DEFAULT_LAST_N = 25;\n\n// LastN value to be signaled to the bridge when the local endpoint wants to receive all the remote video sources in\n// the call.\nexport const LAST_N_UNLIMITED = -1;\n\n// Default simulcast encodings config.\nexport const SIM_LAYERS = [\n    {\n        rid: '1',\n        scaleFactor: 4.0\n    },\n    {\n        rid: '2',\n        scaleFactor: 2.0\n    },\n    {\n        rid: '3',\n        scaleFactor: 1.0\n    }\n];\n\n/**\n * The ssrc-group semantics for SSRCs related to the video streams.\n */\nexport enum SSRC_GROUP_SEMANTICS {\n\n    // The semantics for group of SSRCs belonging to the same stream, primary and RTX.\n    FID = 'FID',\n\n    // The semantics for group with primary SSRCs for each of the simulcast streams.\n    SIM = 'SIM'\n}\n\n/**\n * Standard scalability mode settings for different video codecs and the default bitrates.\n */\nexport const STANDARD_CODEC_SETTINGS = {\n    av1: {\n        maxBitratesVideo: {\n            low: 100000,\n            standard: 300000,\n            high: 1000000,\n            fullHd: 2000000,\n            ultraHd: 4000000,\n            ssHigh: 2500000,\n            none: 0\n        },\n        scalabilityModeEnabled: browser.supportsScalabilityModeAPI(),\n        useSimulcast: !browser.supportsSVC(),\n        useKSVC: browser.supportsSVC()\n    },\n    h264: {\n        maxBitratesVideo: {\n            low: 400000,\n            standard: 800000,\n            high: 2000000,\n            fullHd: 4000000,\n            ultraHd: 8000000,\n            ssHigh: 2500000,\n            none: 0\n        },\n        scalabilityModeEnabled: browser.supportsScalabilityModeAPI()\n    },\n    vp8: {\n        maxBitratesVideo: {\n            low: 200000,\n            standard: 500000,\n            high: 1500000,\n            fullHd: 3000000,\n            ultraHd: 6000000,\n            ssHigh: 2500000,\n            none: 0\n        },\n        scalabilityModeEnabled: false\n    },\n    vp9: {\n        maxBitratesVideo: {\n            low: 100000,\n            standard: 300000,\n            high: 1200000,\n            fullHd: 2500000,\n            ultraHd: 5000000,\n            ssHigh: 2500000,\n            none: 0\n        },\n        scalabilityModeEnabled: browser.supportsScalabilityModeAPI(),\n        useSimulcast: !browser.supportsSVC(),\n        useKSVC: browser.supportsSVC()\n    }\n};\n\n/**\n * Video codecs in descending order of complexity for camera and desktop video types based on the results of manual\n * performance tests on different platforms. When a CPU limitation is encountered, client switches the call to use the\n * next codec in the list.\n */\nexport const VIDEO_CODECS_BY_COMPLEXITY = {\n    'camera': [\n        CodecMimeType.AV1,\n        CodecMimeType.VP9,\n        CodecMimeType.VP8\n    ],\n    'desktop': [\n        CodecMimeType.VP9,\n        CodecMimeType.VP8,\n        CodecMimeType.AV1\n    ]\n};\n\n/**\n * Standard video resolutions and the corresponding quality level that will be picked for the given resolution.\n * For quality levels:\n * 'high' and above - the encoder will be configured to encode 3 spatial layers.\n * 'standard' - the encoder will be configured to encode 2 spatial laters.\n * 'low' - the encoder will be configured to encode only 1 spatial layer.\n * In all the above cases, each of the layers will again have 3 temporal layers, except for VP8 codec for which only\n * 2 temporal layers are configured by default.\n */\nexport const VIDEO_QUALITY_LEVELS = [\n    {\n        height: 2160,\n        level: 'ultraHd'\n    },\n    {\n        height: 1080,\n        level: 'fullHd'\n    },\n    {\n        height: 720,\n        level: 'high'\n    },\n    {\n        height: 540,\n        level: 'standard'\n    },\n    {\n        height: 480,\n        level: 'standard'\n    },\n    {\n        height: 360,\n        level: 'standard'\n    },\n    {\n        height: 270,\n        level: 'low'\n    },\n    {\n        height: 180,\n        level: 'low'\n    },\n    {\n        height: 90,\n        level: 'low'\n    },\n    {\n        height: 0,\n        level: 'none'\n    }\n];\n\n/**\n * Enumerate the supported video resolutions.\n */\nexport enum VIDEO_QUALITY_SETTINGS {\n\n    // 1920x1080 or full High Definition.\n    FULL = 'fullHd',\n\n    // 1280x720 or High Definition.\n    HIGH = 'high',\n\n    // 320x180 or Low Definition.\n    LOW = 'low',\n\n    // When the camera is turned off.\n    NONE = 'none',\n\n    // 640x360 or Standard Definition.\n    STANDARD = 'standard',\n\n    // 3840x2160 or 4k.\n    ULTRA = 'ultraHd'\n}\n","import { safeJsonParse } from '@jitsi/js-utils/json';\nimport { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $build } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { SSRC_GROUP_SEMANTICS } from '../../service/RTC/StandardVideoQualitySettings';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { XEP } from '../../service/xmpp/XMPPExtensioProtocols';\n\nconst logger = getLogger('modules/xmpp/JingleHelperFunctions');\n\nexport interface ISourceCompactJson {\n    m?: string;\n    n: string;\n    s: string;\n    v?: any;\n}\n\nexport interface ICompactSsrcGroup extends Array<string> { }\n\nexport interface IJsonMessage {\n    sources: {\n        [owner: string]: [ISourceCompactJson[], ICompactSsrcGroup[], ISourceCompactJson[], ICompactSsrcGroup[]];\n    };\n}\n\n/**\n * Creates a \"source\" XML element for the source described in compact JSON format in [sourceCompactJson].\n * @param {*} owner the endpoint ID of the owner of the source.\n * @param {*} sourceCompactJson the compact JSON representation of the source.\n * @param {boolean} isVideo whether the source is a video source\n * @returns the created \"source\" XML element.\n */\nfunction _createSourceExtension(owner: string, sourceCompactJson: ISourceCompactJson, isVideo: boolean = false): Node {\n    let videoType = sourceCompactJson.v ? VideoType.DESKTOP : undefined;\n\n    // If the video type is not specified, it is assumed to be a camera for video sources.\n    // Jicofo adds the video type only for desktop sharing sources.\n    if (!videoType && isVideo) {\n        videoType = VideoType.CAMERA;\n    }\n\n    const node = $build('source', {\n        xmlns: XEP.SOURCE_ATTRIBUTES,\n        ssrc: sourceCompactJson.s,\n        name: sourceCompactJson.n,\n        videoType\n    });\n\n    if (sourceCompactJson.m) {\n        node.c('parameter', {\n            name: 'msid',\n            value: sourceCompactJson.m\n        }).up();\n    }\n    node.c('ssrc-info', {\n        xmlns: 'http://jitsi.org/jitmeet',\n        owner\n    }).up();\n\n    return node.node;\n}\n\n/**\n * Creates an \"ssrc-group\" XML element for the SSRC group described in compact JSON format in [ssrcGroupCompactJson].\n * @param {*} ssrcGroupCompactJson the compact JSON representation of the SSRC group.\n * @returns the created \"ssrc-group\" element.\n */\nfunction _createSsrcGroupExtension(ssrcGroupCompactJson: ICompactSsrcGroup): Node {\n    const node = $build('ssrc-group', {\n        xmlns: XEP.SOURCE_ATTRIBUTES,\n        semantics: _getSemantics(ssrcGroupCompactJson[0])\n    });\n\n    for (let i = 1; i < ssrcGroupCompactJson.length; i++) {\n        node.c('source', {\n            xmlns: XEP.SOURCE_ATTRIBUTES,\n            ssrc: ssrcGroupCompactJson[i]\n        }).up();\n    }\n\n    return node.node;\n}\n\n/**\n * Finds in a Jingle IQ the RTP description element with the given media type. If one does not exists, create it (as\n *  well as the required  \"content\" parent element) and adds it to the IQ.\n * @param {*} iq\n * @param {*} mediaType The media type, \"audio\" or \"video\".\n * @returns the RTP description element with the given media type.\n */\nfunction _getOrCreateRtpDescription(iq: Element, mediaType: string): Element {\n    const jingle = $(iq).find('jingle')[0];\n    let content = $(jingle).find(`content[name=\"${mediaType}\"]`);\n    let description: Element;\n\n    if (content.length) {\n        content = content[0];\n    } else {\n        // I'm not suree if \"creator\" and \"senders\" are required.\n        content = $build('content', {\n            name: mediaType\n        }).node;\n        jingle.appendChild(content);\n    }\n\n    const descriptionElements = $(content).find('description');\n\n    if (descriptionElements.length) {\n        description = descriptionElements[0];\n    } else {\n        description = $build('description', {\n            xmlns: XEP.RTP_MEDIA,\n            media: mediaType\n        }).node;\n        content.appendChild(description);\n    }\n\n    return description;\n}\n\n/**\n * Converts the short string representing SSRC group semantics in compact JSON format to the standard representation\n * (i.e. convert \"f\" to \"FID\" and \"s\" to \"SIM\").\n * @param {*} str the compact JSON format representation of an SSRC group's semantics.\n * @returns the SSRC group semantics corresponding to [str].\n */\nfunction _getSemantics(str: string): string | null {\n    if (str === 'f') {\n        return SSRC_GROUP_SEMANTICS.FID;\n    } else if (str === 's') {\n        return SSRC_GROUP_SEMANTICS.SIM;\n    }\n\n    return null;\n}\n\n/**\n * Reads a JSON-encoded message (from a \"json-message\" element) and extracts source descriptions. Adds the extracted\n * source descriptions to the given Jingle IQ in the standard Jingle format.\n *\n * Encoding sources in this compact JSON format instead of standard Jingle was introduced in order to reduce the\n * network traffic and load on the XMPP server. The format is described in Jicofo [TODO: insert link].\n *\n * @param {*} iq the IQ to which source descriptions will be added.\n * @param {*} jsonMessageXml The XML node for the \"json-message\" element.\n * @returns {Map<string, Array<string>} The audio and video ssrcs extracted from the JSON-encoded message with remote\n * endpoint id as the key.\n */\nexport function expandSourcesFromJson(iq: Element, jsonMessageXml: Element): Map<string, string[]> | null {\n    let json: any;\n\n    try {\n        json = safeJsonParse(jsonMessageXml.textContent || '');\n    } catch (error) {\n        logger.error(`json-message XML contained invalid JSON, ignoring: ${jsonMessageXml.textContent}`);\n\n        return null;\n    }\n\n    if (!json?.sources) {\n        // It might be a message of a different type, no need to log.\n        return null;\n    }\n\n    // This is where we'll add \"source\" and \"ssrc-group\" elements. Create them elements if they don't exist.\n    const audioRtpDescription = _getOrCreateRtpDescription(iq, MediaType.AUDIO);\n    const videoRtpDescription = _getOrCreateRtpDescription(iq, MediaType.VIDEO);\n    const ssrcMap = new Map<string, string[]>();\n\n    for (const owner in json.sources) {\n        if (json.sources.hasOwnProperty(owner)) {\n            const ssrcs: string[] = [];\n            const ownerSources = json.sources[owner] as [ISourceCompactJson[], ICompactSsrcGroup[], ISourceCompactJson[], ICompactSsrcGroup[]];\n\n            // The video sources, video ssrc-groups, audio sources and audio ssrc-groups are encoded in that order in\n            // the elements of the array.\n            const videoSources = ownerSources?.length ? ownerSources[0] : [];\n            const videoSsrcGroups = ownerSources?.length > 1 ? ownerSources[1] : [];\n            const audioSources = ownerSources?.length > 2 ? ownerSources[2] : [];\n            const audioSsrcGroups = ownerSources?.length > 3 ? ownerSources[3] : [];\n\n            if (videoSources?.length) {\n                for (let i = 0; i < videoSources.length; i++) {\n                    videoRtpDescription.appendChild(_createSourceExtension(owner, videoSources[i], true));\n                    ssrcs.push(videoSources[i]?.s);\n                }\n            }\n\n            if (videoSsrcGroups?.length) {\n                for (let i = 0; i < videoSsrcGroups.length; i++) {\n                    videoRtpDescription.appendChild(_createSsrcGroupExtension(videoSsrcGroups[i]));\n                }\n            }\n            if (audioSources?.length) {\n                for (let i = 0; i < audioSources.length; i++) {\n                    audioRtpDescription.appendChild(_createSourceExtension(owner, audioSources[i]));\n                    ssrcs.push(audioSources[i]?.s);\n                }\n            }\n\n            if (audioSsrcGroups?.length) {\n                for (let i = 0; i < audioSsrcGroups.length; i++) {\n                    audioRtpDescription.appendChild(_createSsrcGroupExtension(audioSsrcGroups[i]));\n                }\n            }\n            ssrcMap.set(owner, ssrcs);\n        }\n    }\n\n    return ssrcMap;\n}\n","/**\n * Enumeration of the media direction types.\n */\nexport enum MediaDirection {\n\n    /**\n     * Media is send and receive is suspended.\n     */\n    INACTIVE = 'inactive',\n\n    /**\n     * Media is only received from remote peer.\n     */\n    RECVONLY = 'recvonly',\n\n    /**\n     * Media is only sent to the remote peer.\n     */\n    SENDONLY = 'sendonly',\n\n    /**\n     * Media is sent and received.\n     */\n    SENDRECV = 'sendrecv'\n}\n","\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('@jitsi/logger').getLogger('modules/RTC/ScreenObtainer');\n\n/**\n * The default frame rate for Screen Sharing.\n */\nexport const SS_DEFAULT_FRAME_RATE = 5;\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nclass ScreenObtainer {\n\n    /**\n     *\n     */\n    constructor() {\n        this.obtainStream = this._createObtainStreamMethod();\n        this.options = {};\n        this._electronSkipDisplayMedia = false;\n    }\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     */\n    init(options = {}) {\n        this.options = options;\n\n        if (!this.obtainStream) {\n            logger.warn('Desktop sharing not supported');\n        }\n    }\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod() {\n        const supportsGetDisplayMedia = browser.supportsGetDisplayMedia();\n\n        if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isReactNative() && supportsGetDisplayMedia) {\n            return this.obtainScreenFromGetDisplayMediaRN;\n        } else if (supportsGetDisplayMedia) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n        logger.warn('Screen sharing not supported on ', browser.getName());\n\n        return null;\n    }\n\n    /**\n     * Gets the appropriate constraints for audio sharing.\n     *\n     * @returns {Object|boolean}\n     */\n    _getAudioConstraints() {\n        const { audioQuality } = this.options;\n        const audio = audioQuality?.stereo ? {\n            autoGainControl: false,\n            channelCount: 2,\n            echoCancellation: false,\n            noiseSuppression: false\n        } : true;\n\n        return audio;\n    }\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    }\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     * @param {Object} options - Optional parameters.\n     */\n    obtainScreenOnElectron(onSuccess, onFailure, options = {}) {\n        if (!this._electronSkipDisplayMedia) {\n            // Fall-back to the old API in case of not supported error. This can happen if\n            // an old Electron SDK is used with a new Jitsi Meet + lib-jitsi-meet version.\n            this.obtainScreenFromGetDisplayMedia(onSuccess, err => {\n                if (err.name === JitsiTrackErrors.SCREENSHARING_NOT_SUPPORTED_ERROR) {\n                    // Make sure we don't recurse infinitely.\n                    this._electronSkipDisplayMedia = true;\n                    this.obtainScreenOnElectron(onSuccess, onFailure);\n                } else {\n                    onFailure(err);\n                }\n            });\n\n            return;\n        }\n\n        // TODO: legacy flow, remove after the Electron SDK supporting gDM has been out for a while.\n        if (typeof window.JitsiMeetScreenObtainer?.openDesktopPicker === 'function') {\n            const { desktopSharingFrameRate, desktopSharingResolution, desktopSharingSources } = this.options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources:\n                        options.desktopSharingSources || desktopSharingSources || [ 'screen', 'window' ]\n                },\n                (streamId, streamType, screenShareAudio = false) => {\n                    if (streamId) {\n                        let audioConstraints = false;\n\n                        if (screenShareAudio) {\n                            audioConstraints = {};\n                            const optionalConstraints = this._getAudioConstraints();\n\n                            if (typeof optionalConstraints !== 'boolean') {\n                                audioConstraints = {\n                                    optional: optionalConstraints\n                                };\n                            }\n\n                            // Audio screen sharing for electron only works for screen type devices.\n                            // i.e. when the user shares the whole desktop.\n                            // Note. The documentation specifies that chromeMediaSourceId should not be present\n                            // which, in the case a users has multiple monitors, leads to them being shared all\n                            // at once. However we tested with chromeMediaSourceId present and it seems to be\n                            // working properly.\n                            if (streamType === 'screen') {\n                                audioConstraints.mandatory = {\n                                    chromeMediaSource: 'desktop'\n                                };\n                            }\n                        }\n\n                        const constraints = {\n                            audio: audioConstraints,\n                            video: {\n                                mandatory: {\n                                    chromeMediaSource: 'desktop',\n                                    chromeMediaSourceId: streamId,\n                                    minFrameRate: desktopSharingFrameRate?.min ?? SS_DEFAULT_FRAME_RATE,\n                                    maxFrameRate: desktopSharingFrameRate?.max ?? SS_DEFAULT_FRAME_RATE,\n                                    minWidth: desktopSharingResolution?.width?.min,\n                                    minHeight: desktopSharingResolution?.height?.min,\n                                    maxWidth: desktopSharingResolution?.width?.max ?? window.screen.width,\n                                    maxHeight: desktopSharingResolution?.height?.max ?? window.screen.height\n                                }\n                            }\n                        };\n\n                        // We have to use the old API on Electron to get a desktop stream.\n                        navigator.mediaDevices.getUserMedia(constraints)\n                            .then(stream => {\n                                this.setContentHint(stream);\n                                onSuccess({\n                                    stream,\n                                    sourceId: streamId,\n                                    sourceType: streamType\n                                });\n                            })\n                            .catch(err => onFailure(err));\n                    } else {\n                        // As noted in Chrome Desktop Capture API:\n                        // If user didn't select any source (i.e. canceled the prompt)\n                        // then the callback is called with an empty streamId.\n                        onFailure(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n                    }\n                },\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    }\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     * @param {Object} options - Optional parameters.\n     */\n    obtainScreenFromGetDisplayMedia(callback, errorCallback, options = {}) {\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        const audio = this._getAudioConstraints();\n        let video = {};\n        const constraintOpts = {};\n\n        // The options passed to this method should take precedence over the global settings.\n        const {\n            desktopSharingFrameRate = this.options?.desktopSharingFrameRate,\n            resolution = this.options?.resolution,\n            screenShareSettings = this.options?.screenShareSettings\n        } = options;\n\n        if (typeof desktopSharingFrameRate === 'object') {\n            video.frameRate = desktopSharingFrameRate;\n        }\n\n        // At the time of this writing 'min' constraint for fps is not supported by getDisplayMedia on any of the\n        // browsers. getDisplayMedia will fail with an error \"invalid constraints\" in this case.\n        video.frameRate && delete video.frameRate.min;\n\n        if (browser.isChromiumBased()) {\n            // Show users the current tab is the preferred capture source, default: false.\n            browser.isEngineVersionGreaterThan(93)\n                && (constraintOpts.preferCurrentTab = screenShareSettings?.desktopPreferCurrentTab || false);\n\n            // Allow users to select system audio, default: include.\n            browser.isEngineVersionGreaterThan(104)\n                && (constraintOpts.systemAudio = screenShareSettings?.desktopSystemAudio || 'include');\n\n            // Allow users to seamlessly switch which tab they are sharing without having to select the tab again.\n            browser.isEngineVersionGreaterThan(106)\n                && (constraintOpts.surfaceSwitching = screenShareSettings?.desktopSurfaceSwitching || 'include');\n\n            // Allow a user to be shown a preference for what screen is to be captured, default: unset.\n            browser.isEngineVersionGreaterThan(106) && screenShareSettings?.desktopDisplaySurface\n                && (video.displaySurface = screenShareSettings?.desktopDisplaySurface);\n\n            // Allow users to select the current tab as a capture source, default: exclude.\n            browser.isEngineVersionGreaterThan(111)\n                && (constraintOpts.selfBrowserSurface = screenShareSettings?.desktopSelfBrowserSurface || 'exclude');\n\n            // Set bogus resolution constraints to work around\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1056311 for low fps screenshare. Capturing SS at\n            // very high resolutions restricts the framerate. Therefore, skip this hack when capture fps > 5 fps.\n            if (!(desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE)) {\n                video.height = 99999;\n                video.width = 99999;\n            }\n        }\n\n        // Allow a user to be shown a preference for what screen is to be captured.\n        if (browser.isSafari() && screenShareSettings?.desktopDisplaySurface) {\n            video.displaySurface = screenShareSettings?.desktopDisplaySurface;\n        }\n\n        if (Object.keys(video).length === 0) {\n            video = true;\n        }\n\n        const constraints = {\n            video,\n            audio,\n            ...constraintOpts,\n            cursor: 'always'\n        };\n\n        logger.info('Using getDisplayMedia for screen sharing', constraints);\n\n        getDisplayMedia(constraints)\n            .then(stream => {\n                this.setContentHint(stream);\n\n                // Apply min fps constraints to the track so that 0Hz mode doesn't kick in.\n                // https://bugs.chromium.org/p/webrtc/issues/detail?id=15539\n                if (browser.isChromiumBased()) {\n                    const track = stream.getVideoTracks()[0];\n                    let minFps = SS_DEFAULT_FRAME_RATE;\n\n                    if (typeof desktopSharingFrameRate?.min === 'number' && desktopSharingFrameRate.min > 0) {\n                        minFps = desktopSharingFrameRate.min;\n                    }\n\n                    const trackConstraints = {\n                        frameRate: {\n                            min: minFps\n                        }\n                    };\n\n                    // Set the resolution if it is specified in the options. This is currently only enabled for testing.\n                    // Note that this may result in browser crashes if the shared window is resized due to browser bugs\n                    // like https://issues.chromium.org/issues/40672396\n                    if (resolution && this.options.testing?.testMode) {\n                        trackConstraints.height = resolution;\n                        trackConstraints.width = Math.floor(resolution * 16 / 9);\n                    }\n\n                    try {\n                        track.applyConstraints(trackConstraints);\n                    } catch (err) {\n                        logger.warn(`Min fps=${minFps} constraint could not be applied on the desktop track,`\n                            + `${err.message}`);\n                    }\n                }\n\n                const videoTracks = stream?.getVideoTracks();\n                const track = videoTracks?.length > 0 ? videoTracks[0] : undefined;\n                const { deviceId } = track?.getSettings() ?? {};\n\n                callback({\n                    stream,\n\n                    // Used by remote-control to identify the display that is currently shared.\n                    sourceId: deviceId ?? stream.id\n                });\n            })\n            .catch(error => {\n                const errorDetails = {\n                    errorCode: error.code,\n                    errorName: error.name,\n                    errorMsg: error.message,\n                    errorStack: error.stack\n                };\n\n                logger.warn('getDisplayMedia error', JSON.stringify(constraints), JSON.stringify(errorDetails));\n\n                if (errorDetails.errorCode === DOMException.NOT_SUPPORTED_ERR) {\n                    // This error is thrown when an Electron client has not set a permissions handler.\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_NOT_SUPPORTED_ERROR));\n                } else if (errorDetails.errorMsg?.indexOf('denied by system') !== -1) {\n                    // On Chrome this is the only thing different between error returned when user cancels\n                    // and when no permission was given on the OS level.\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.PERMISSION_DENIED));\n                } else if (errorDetails.errorMsg === 'NotReadableError') {\n                    // This can happen under some weird conditions:\n                    //  - https://issues.chromium.org/issues/369103607\n                    //  - https://issues.chromium.org/issues/353555347\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR));\n                } else {\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\n                }\n            });\n    }\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMediaRN(callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        navigator.mediaDevices.getDisplayMedia({ video: true })\n            .then(stream => {\n                this.setContentHint(stream);\n                callback({\n                    stream,\n                    sourceId: stream.id });\n            })\n            .catch(() => {\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .SCREENSHARING_USER_CANCELED));\n            });\n    }\n\n    /** Sets the contentHint on the transmitted MediaStreamTrack to indicate charaterstics in the video stream, which\n     * informs RTCPeerConnection on how to encode the track (to prefer motion or individual frame detail).\n     *\n     * @param {MediaStream} stream - The captured desktop stream.\n     * @returns {void}\n     */\n    setContentHint(stream) {\n        const { desktopSharingFrameRate } = this.options;\n        const desktopTrack = stream.getVideoTracks()[0];\n\n        // Set contentHint on the desktop track based on the fps requested.\n        if ('contentHint' in desktopTrack) {\n            desktopTrack.contentHint = desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE ? 'motion' : 'detail';\n        } else {\n            logger.warn('MediaStreamTrack contentHint attribute not supported');\n        }\n    }\n\n    /**\n     * Sets the max frame rate to be used for a desktop track capture.\n     *\n     * @param {number} maxFps capture frame rate to be used for desktop tracks.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        logger.info(`Setting the desktop capture rate to ${maxFps}`);\n\n        this.options.desktopSharingFrameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: maxFps\n        };\n    }\n}\n\nexport default new ScreenObtainer();\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger('modules/sdp/SDPUtil');\n\nimport { CodecMimeType } from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { SSRC_GROUP_SEMANTICS } from '../../service/RTC/StandardVideoQualitySettings';\nimport browser from '../browser';\nimport RandomUtil from '../util/RandomUtil';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n\n    /**\n     * Finds the MSID attribute in the given array of SSRC attribute lines and returns the value.\n     *\n     * @param {string[]} ssrcLines - an array of lines similar to 'a:213123 msid:stream-id track-id'.\n     * @returns {undefined|string}\n     */\n    parseMSIDAttribute(ssrcLines) {\n        const msidLine = ssrcLines.find(line => line.indexOf(' msid:') > 0);\n\n        if (!msidLine) {\n            return undefined;\n        }\n\n        const v = msidLine.substring(msidLine.indexOf(' msid:') + 6 /* the length of ' msid:' */);\n\n        return SDPUtil.filterSpecialChars(v);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    parseSCTPPort(line) {\n        return line.substring(12);\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n\n    /**\n     * Parses the 'a=ssrc-group' line.\n     *\n     * @param {string} line - The media line to parse.\n     * @returns {object}\n     */\n    parseSSRCGroupLine(line) {\n        const parts = line.substr(13).split(' ');\n\n        return {\n            semantics: parts.shift(),\n            ssrcs: parts\n        };\n    },\n\n    /**\n     * Gets the source name out of the name attribute \"a=ssrc:254321 name:name1\".\n     *\n     * @param {string[]} ssrcLines\n     * @returns {string | undefined}\n     */\n    parseSourceNameLine(ssrcLines) {\n        const sourceNameLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(' name:') > 0);\n\n        // Everything past the \"name:\" part\n        return sourceNameLine?.substring(sourceNameLine.indexOf(' name:') + 6);\n    },\n\n    /**\n     * Parse the \"videoType\" attribute encoded in a set of SSRC attributes (e.g.\n     * \"a=ssrc:1234 videoType:desktop\")\n     *\n     * @param {string[]} ssrcLines\n     * @returns {string | undefined}\n     */\n    parseVideoTypeLine(ssrcLines) {\n        const s = ' videoType:';\n        const videoTypeLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(s) > 0);\n\n        return videoTypeLine?.substring(videoTypeLine.indexOf(s) + s.length);\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.warn(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.warn(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.warn('did not find typ in the right place');\n            logger.warn(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.debug(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === SSRC_GROUP_SEMANTICS.FID);\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === SSRC_GROUP_SEMANTICS.SIM);\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribute is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by moving it to the beginning\n     * of the payload types list (modifies the given mline in place). All instances\n     * of the codec are moved up.\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\n     * @param {string} codecName the name of the preferred codec.\n     * @param {boolean} sortPayloadTypes whether the payloadtypes need to be sorted for a given codec.\n     */\n    preferCodec(mline, codecName, sortPayloadTypes = false) {\n        if (!mline || !codecName) {\n            return;\n        }\n\n        const matchingPayloadTypes = mline.rtp\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\n            .map(rtp => rtp.payload);\n\n        if (matchingPayloadTypes) {\n            if (sortPayloadTypes && codecName === CodecMimeType.H264) {\n                // Move all the H.264 codecs with packetization-mode=0 to top of the list.\n                const payloadsWithMode0 = matchingPayloadTypes.filter(payload => {\n                    const fmtp = mline.fmtp.find(item => item.payload === payload);\n\n                    if (fmtp) {\n                        return fmtp.config.includes('packetization-mode=0');\n                    }\n\n                    return false;\n                });\n\n                for (const pt of payloadsWithMode0.reverse()) {\n                    const idx = matchingPayloadTypes.findIndex(payloadType => payloadType === pt);\n\n                    if (idx >= 0) {\n                        matchingPayloadTypes.splice(idx, 1);\n                        matchingPayloadTypes.unshift(pt);\n                    }\n                }\n            }\n\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\n            // payloads as a number, instead of a string, when there is only one payload.\n            const payloadTypes\n                = mline.payloads\n                .toString()\n                .split(' ')\n                .map(p => parseInt(p, 10));\n\n            for (const pt of matchingPayloadTypes.reverse()) {\n                const payloadIndex = payloadTypes.indexOf(pt);\n\n                payloadTypes.splice(payloadIndex, 1);\n                payloadTypes.unshift(pt);\n            }\n            mline.payloads = payloadTypes.join(' ');\n        } else {\n            logger.error(`No matching RTP payload type found for ${codecName}, failed to set preferred codecs`);\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     * @param {boolean} highProfile determines if only the high profile codec needs to be stripped from the sdp for a\n     * given codec type.\n     */\n    stripCodec(mLine, codecName, highProfile = false) {\n        if (!mLine || !codecName) {\n            return;\n        }\n\n        const highProfileCodecs = new Map();\n        let removePts = [];\n\n        for (const rtp of mLine.rtp) {\n            if (rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                if (highProfile) {\n                    highProfileCodecs.set(rtp.payload, rtp.codec);\n                } else {\n                    removePts.push(rtp.payload);\n                }\n            }\n        }\n\n        if (highProfile) {\n            removePts = mLine.fmtp\n                .filter(item => {\n                    const codec = highProfileCodecs.get(item.payload);\n\n                    if (codec) {\n                        return codec.toLowerCase() === CodecMimeType.VP9\n                            ? !item.config.includes('profile-id=0')\n                            : !item.config.includes('profile-level-id=42');\n                    }\n\n                    return false;\n                })\n                .map(item => item.payload);\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = mLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = mLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other codecs, disable the stream.\n                mLine.port = 0;\n                mLine.direction = MediaDirection.INACTIVE;\n                mLine.payloads = '*';\n            } else {\n                mLine.payloads = keepPts.join(' ');\n            }\n\n            mLine.rtp = mLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            mLine.fmtp = mLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (mLine.rtcpFb) {\n                mLine.rtcpFb = mLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","import $ from 'jquery';\nimport { cloneDeep } from 'lodash-es';\nimport transform from 'sdp-transform';\nimport { Strophe } from 'strophe.js';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { SSRC_GROUP_SEMANTICS } from '../../service/RTC/StandardVideoQualitySettings';\nimport { XEP } from '../../service/xmpp/XMPPExtensioProtocols';\nimport browser from '../browser';\n\nimport SDPUtil from './SDPUtil';\n\n/**\n * A class that translates the Jingle messages received from the signaling server into SDP format that the\n * browser understands and vice versa. This is needed for media session establishment and for signaling local and\n * remote sources across peers.\n */\nexport default class SDP {\n    /**\n     * Constructor.\n     *\n     * @param {string} sdp - The SDP generated by the browser when SDP->Jingle conversion is needed, an empty string\n     * when Jingle->SDP conversion is needed.\n     * @param {boolean} isP2P - Whether this SDP belongs to a p2p peerconnection.\n     */\n    constructor(sdp, isP2P = false) {\n        this._updateSessionAndMediaSections(sdp);\n        this.isP2P = isP2P;\n        this.raw = this.session + this.media.join('');\n\n        // This flag will make {@link transportToJingle} and {@link jingle2media} replace ICE candidates IPs with\n        // invalid value of '1.1.1.1' which will cause ICE failure. The flag is used in the automated testing.\n        this.failICE = false;\n\n        // Whether or not to remove TCP ice candidates when translating from/to jingle.\n        this.removeTcpCandidates = false;\n\n        // Whether or not to remove UDP ice candidates when translating from/to jingle.\n        this.removeUdpCandidates = false;\n    }\n\n    /**\n     * Adjusts the msid semantic for a remote source based on the media type and the index of the m-line.\n     * This is needed for browsers that need both the streamId and trackId to be reported in the msid attribute.\n     *\n     * @param {String} msid - The msid attribute value.\n     * @param {Number} idx - The index of the m-line in the SDP.\n     * @returns {String} - The adjusted msid semantic.\n     */\n    _adjustMsidSemantic(msid, mediaType, idx) {\n        if (mediaType === MediaType.AUDIO || !browser.isChromiumBased() || browser.isEngineVersionGreaterThan(116)) {\n            return msid;\n        }\n\n        const msidParts = msid.split(' ');\n\n        if (msidParts.length === 2) {\n            return msid;\n        }\n\n        return `${msid} ${msid}-${idx}`;\n    }\n\n    /**\n     * Updates the media and session sections of the SDP based on the raw SDP string.\n     *\n     * @param {string} sdp - The SDP generated by the browser.\n     * @returns {void}\n     * @private\n     */\n    _updateSessionAndMediaSections(sdp) {\n        const media = typeof sdp === 'string' ? sdp.split('\\r\\nm=') : this.raw.split('\\r\\nm=');\n\n        for (let i = 1, length = media.length; i < length; i++) {\n            let mediaI = `m=${media[i]}`;\n\n            if (i !== length - 1) {\n                mediaI += '\\r\\n';\n            }\n            media[i] = mediaI;\n        }\n        this.session = `${media.shift()}\\r\\n`;\n        this.media = media;\n    }\n\n    /**\n     * Adds or removes the sources from the SDP.\n     *\n     * @param {Object} sourceMap - The map of the sources that are being added/removed.\n     * @param {boolean} isAdd - Whether the sources are being added or removed.\n     * @returns {Array<number>} - The indices of the new m-lines that were added/modifed in the SDP.\n     */\n    updateRemoteSources(sourceMap, isAdd = true) {\n        const updatedMidIndices = [];\n\n        for (const source of sourceMap.values()) {\n            const { mediaType, msid, ssrcList, groups } = source;\n            let idx;\n\n            if (isAdd) {\n                // For P2P, check if there is an m-line with the matching mediaType that doesn't have any ssrc lines.\n                // Update the existing m-line if it exists, otherwise create a new m-line and add the sources.\n                idx = this.media.findIndex(mLine => mLine.includes(`m=${mediaType}`) && !mLine.includes('a=ssrc'));\n                if (!this.isP2P || idx === -1) {\n                    this.addMlineForNewSource(mediaType, true);\n                    idx = this.media.length - 1;\n                }\n            } else {\n                idx = this.media.findIndex(mLine => mLine.includes(`a=ssrc:${ssrcList[0]}`));\n\n                if (idx === -1) {\n                    continue; // eslint-disable-line no-continue\n                }\n            }\n\n            updatedMidIndices.push(idx);\n\n            if (isAdd) {\n                const updatedMsid = this._adjustMsidSemantic(msid, mediaType, idx);\n\n                ssrcList.forEach(ssrc => {\n                    this.media[idx] += `a=ssrc:${ssrc} msid:${updatedMsid}\\r\\n`;\n                });\n                groups?.forEach(group => {\n                    this.media[idx] += `a=ssrc-group:${group.semantics} ${group.ssrcs.join(' ')}\\r\\n`;\n                });\n            } else {\n                ssrcList.forEach(ssrc => {\n                    this.media[idx] = this.media[idx].replace(new RegExp(`a=ssrc:${ssrc}.*\\r\\n`, 'g'), '');\n                });\n                groups?.forEach(group => {\n                    this.media[idx] = this.media[idx]\n                        .replace(new RegExp(`a=ssrc-group:${group.semantics}.*\\r\\n`, 'g'), '');\n                });\n\n                if (!this.isP2P) {\n                    // Reject the m-line so that the browser removes the associated transceiver from the list of\n                    // available transceivers. This will prevent the client from trying to re-use these inactive\n                    // transceivers when additional video sources are added to the peerconnection.\n                    const { media, port } = SDPUtil.parseMLine(this.media[idx].split('\\r\\n')[0]);\n\n                    this.media[idx] = this.media[idx]\n                        .replace(`a=${MediaDirection.SENDONLY}`, `a=${MediaDirection.INACTIVE}`);\n                    this.media[idx] = this.media[idx].replace(`m=${media} ${port}`, `m=${media} 0`);\n                }\n            }\n            this.raw = this.session + this.media.join('');\n        }\n\n        return updatedMidIndices;\n    }\n\n    /**\n     * Adds a new m-line to the description so that a new local or remote source can be added to the conference.\n     *\n     * @param {MediaType} mediaType media type of the new source that is being added.\n     * @returns {void}\n     */\n    addMlineForNewSource(mediaType, isRemote = false) {\n        const mid = this.media.length;\n        const sdp = transform.parse(this.raw);\n        const mline = cloneDeep(sdp.media.find(m => m.type === mediaType));\n\n        // Edit media direction, mid and remove the existing ssrc lines in the m-line.\n        mline.mid = mid;\n        mline.direction = isRemote ? MediaDirection.SENDONLY : MediaDirection.RECVONLY;\n        mline.msid = undefined;\n        mline.ssrcs = undefined;\n        mline.ssrcGroups = undefined;\n\n        sdp.media = [ ...sdp.media, mline ];\n\n        // We regenerate the BUNDLE group (since we added a new m-line).\n        sdp.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = [ ...group.mids.split(' '), mid ].join(' ');\n            }\n        });\n\n        this.raw = transform.write(sdp);\n        this._updateSessionAndMediaSections();\n    }\n\n    /**\n     * Converts the Jingle message element to SDP.\n     *\n     * @param {*} jingle - The Jingle message element.\n     * @returns {void}\n     */\n    fromJingle(jingle) {\n        const sessionId = Date.now();\n\n        // Use a unique session id for every TPC.\n        this.raw = 'v=0\\r\\n'\n            + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\n            + 's=-\\r\\n'\n            + 't=0 0\\r\\n';\n\n        const groups = $(jingle).find(`>group[xmlns='${XEP.BUNDLE_MEDIA}']`);\n\n        if (this.isP2P && groups.length) {\n            groups.each((idx, group) => {\n                const contents = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n                if (contents.length > 0) {\n                    this.raw\n                        += `a=group:${\n                            group.getAttribute('semantics')\n                                || group.getAttribute('type')} ${\n                            contents.join(' ')}\\r\\n`;\n                }\n            });\n        }\n\n        this.session = this.raw;\n        jingle.find('>content').each((_, content) => {\n            const m = this.jingle2media($(content));\n\n            this.media.push(m);\n        });\n\n        this.raw = this.session + this.media.join('');\n\n        if (this.isP2P) {\n            return;\n        }\n\n        // For offers from Jicofo, a new m-line needs to be created for each new remote source that is added to the\n        // conference.\n        const newSession = transform.parse(this.raw);\n        const newMedia = [];\n\n        newSession.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === MediaType.APPLICATION) {\n                const newMline = cloneDeep(mLine);\n\n                newMline.mid = newMedia.length.toString();\n                newMedia.push(newMline);\n\n                return;\n            }\n\n            if (!mLine.ssrcs?.length) {\n                const newMline = cloneDeep(mLine);\n\n                newMline.mid = newMedia.length.toString();\n                newMedia.push(newMline);\n\n                return;\n            }\n\n            mLine.ssrcs.forEach((ssrc, idx) => {\n                // Do nothing if the m-line with the given SSRC already exists.\n                if (newMedia.some(mline => mline.ssrcs?.some(source => source.id === ssrc.id))) {\n                    return;\n                }\n                const newMline = cloneDeep(mLine);\n\n                newMline.ssrcs = [];\n                newMline.ssrcGroups = [];\n                newMline.mid = newMedia.length.toString();\n                newMline.bundleOnly = undefined;\n                newMline.direction = idx ? 'sendonly' : 'sendrecv';\n\n                // Add the sources and the related FID source group to the new m-line.\n                const ssrcId = ssrc.id.toString();\n                const group = mLine.ssrcGroups?.find(g => g.ssrcs.includes(ssrcId));\n\n                if (group) {\n                    if (ssrc.attribute === 'msid') {\n                        ssrc.value = this._adjustMsidSemantic(ssrc.value, type, newMline.mid);\n                    }\n                    newMline.ssrcs.push(ssrc);\n                    const otherSsrc = group.ssrcs.split(' ').find(s => s !== ssrcId);\n\n                    if (otherSsrc) {\n                        const otherSource = mLine.ssrcs.find(source => source.id.toString() === otherSsrc);\n\n                        if (otherSource.attribute === 'msid') {\n                            otherSource.value = this._adjustMsidSemantic(otherSource.value, type, newMline.mid);\n                        }\n                        newMline.ssrcs.push(otherSource);\n                    }\n                    newMline.ssrcGroups.push(group);\n                } else {\n                    newMline.ssrcs.push(ssrc);\n                }\n                newMedia.push(newMline);\n            });\n        });\n\n        newSession.media = newMedia;\n        const mids = [];\n\n        newMedia.forEach(mLine => {\n            mids.push(mLine.mid);\n        });\n\n        if (groups.length) {\n            // We regenerate the BUNDLE group (since we regenerated the mids)\n            newSession.groups = [ {\n                type: 'BUNDLE',\n                mids: mids.join(' ')\n            } ];\n        }\n\n        // msid semantic\n        newSession.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        newSession.origin.sessionVersion++;\n\n        this.raw = transform.write(newSession);\n        this._updateSessionAndMediaSections();\n    }\n\n    /**\n     * Returns an SSRC Map by extracting SSRCs and SSRC groups from all the m-lines in the SDP.\n     *\n     * @returns {*}\n     */\n    getMediaSsrcMap() {\n        const sourceInfo = new Map();\n\n        this.media.forEach((mediaItem, mediaindex) => {\n            const mid = SDPUtil.parseMID(SDPUtil.findLine(mediaItem, 'a=mid:'));\n            const mline = SDPUtil.parseMLine(mediaItem.split('\\r\\n')[0]);\n            const isRecvOnly = SDPUtil.findLine(mediaItem, `a=${MediaDirection.RECVONLY}`);\n\n            // Do not process recvonly m-lines. Firefox generates recvonly SSRCs for all remote sources.\n            if (isRecvOnly && browser.isFirefox()) {\n                return;\n            }\n\n            const media = {\n                mediaindex,\n                mediaType: mline.media,\n                mid,\n                ssrcs: {},\n                ssrcGroups: []\n            };\n\n            SDPUtil.findLines(mediaItem, 'a=ssrc:').forEach(line => {\n                const linessrc = line.substring(7).split(' ')[0];\n\n                // Allocate new ChannelSsrc.\n                if (!media.ssrcs[linessrc]) {\n                    media.ssrcs[linessrc] = {\n                        ssrc: linessrc,\n                        lines: []\n                    };\n                }\n                media.ssrcs[linessrc].lines.push(line);\n            });\n\n            SDPUtil.findLines(mediaItem, 'a=ssrc-group:').forEach(line => {\n                const idx = line.indexOf(' ');\n                const semantics = line.substr(0, idx).substr(13);\n                const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                if (ssrcs.length) {\n                    media.ssrcGroups.push({\n                        semantics,\n                        ssrcs\n                    });\n                }\n            });\n\n            sourceInfo.set(mediaindex, media);\n        });\n\n        return sourceInfo;\n    }\n\n    /**\n     * Converts the content section from Jingle to a media section that can be appended to the SDP.\n     *\n     * @param {*} content - The content section from the Jingle message element.\n     * @returns {*} - The constructed media sections.\n     */\n    jingle2media(content) {\n        const desc = content.find('>description');\n        const transport = content.find(`>transport[xmlns='${XEP.ICE_UDP_TRANSPORT}']`);\n        let sdp = '';\n        const sctp = transport.find(`>sctpmap[xmlns='${XEP.SCTP_DATA_CHANNEL}']`);\n        const media = { media: desc.attr('media') };\n        const mid = content.attr('name');\n\n        media.port = '9';\n        if (content.attr('senders') === 'rejected') {\n            media.port = '0';\n        }\n        if (transport.find(`>fingerprint[xmlns='${XEP.DTLS_SRTP}']`).length) {\n            media.proto = sctp.length ? 'UDP/DTLS/SCTP' : 'UDP/TLS/RTP/SAVPF';\n        } else {\n            media.proto = 'UDP/TLS/RTP/SAVPF';\n        }\n        if (sctp.length) {\n            sdp += `m=application ${media.port} UDP/DTLS/SCTP webrtc-datachannel\\r\\n`;\n            sdp += `a=sctp-port:${sctp.attr('number')}\\r\\n`;\n            sdp += 'a=max-message-size:262144\\r\\n';\n        } else {\n            media.fmt\n                = desc\n                    .find('>payload-type')\n                    .map((_, payloadType) => payloadType.getAttribute('id'))\n                    .get();\n            sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\n        }\n\n        sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n        if (!sctp.length) {\n            sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n        }\n\n        if (transport.length) {\n            if (transport.attr('ufrag')) {\n                sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\n            }\n            if (transport.attr('pwd')) {\n                sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\n            }\n            transport.find(`>fingerprint[xmlns='${XEP.DTLS_SRTP}']`).each((_, fingerprint) => {\n                sdp += `a=fingerprint:${fingerprint.getAttribute('hash')} ${$(fingerprint).text()}\\r\\n`;\n                if (fingerprint.hasAttribute('setup')) {\n                    sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\n                }\n            });\n        }\n\n        transport.find('>candidate').each((_, candidate) => {\n            let protocol = candidate.getAttribute('protocol');\n\n            protocol = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((this.removeTcpCandidates && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (this.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (this.failICE) {\n                candidate.setAttribute('ip', '1.1.1.1');\n            }\n\n            sdp += SDPUtil.candidateFromJingle(candidate);\n        });\n\n        switch (content.attr('senders')) {\n        case 'initiator':\n            sdp += `a=${MediaDirection.SENDONLY}\\r\\n`;\n            break;\n        case 'responder':\n            sdp += `a=${MediaDirection.RECVONLY}\\r\\n`;\n            break;\n        case 'none':\n            sdp += `a=${MediaDirection.INACTIVE}\\r\\n`;\n            break;\n        case 'both':\n            sdp += `a=${MediaDirection.SENDRECV}\\r\\n`;\n            break;\n        }\n        sdp += `a=mid:${mid}\\r\\n`;\n\n        // <description><rtcp-mux/></description>\n        // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec though\n        // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n        if (desc.find('>rtcp-mux').length) {\n            sdp += 'a=rtcp-mux\\r\\n';\n        }\n\n        desc.find('>payload-type').each((_, payloadType) => {\n            sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\n            if ($(payloadType).find('>parameter').length) {\n                sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\n                sdp += $(payloadType)\n                    .find('>parameter')\n                    .map((__, parameter) => {\n                        const name = parameter.getAttribute('name');\n\n                        return (name ? `${name}=` : '') + parameter.getAttribute('value');\n                    })\n                    .get()\n                    .join(';');\n                sdp += '\\r\\n';\n            }\n\n            sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\n        });\n\n        sdp += this.rtcpFbFromJingle(desc, '*');\n\n        desc.find(`>rtp-hdrext[xmlns='${XEP.RTP_HEADER_EXTENSIONS}']`).each((_, hdrExt) => {\n            sdp += `a=extmap:${hdrExt.getAttribute('id')} ${hdrExt.getAttribute('uri')}\\r\\n`;\n        });\n        if (desc.find(`>extmap-allow-mixed[xmlns='${XEP.RTP_HEADER_EXTENSIONS}']`).length > 0) {\n            sdp += 'a=extmap-allow-mixed\\r\\n';\n        }\n\n        desc\n            .find(`>ssrc-group[xmlns='${XEP.SOURCE_ATTRIBUTES}']`)\n            .each((_, ssrcGroup) => {\n                const semantics = ssrcGroup.getAttribute('semantics');\n                const ssrcs\n                    = $(ssrcGroup)\n                        .find('>source')\n                        .map((__, source) => source.getAttribute('ssrc'))\n                        .get();\n\n                if (ssrcs.length) {\n                    sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n                }\n            });\n\n        let userSources = '';\n        let nonUserSources = '';\n\n        desc\n            .find(`>source[xmlns='${XEP.SOURCE_ATTRIBUTES}']`)\n            .each((_, source) => {\n                const ssrc = source.getAttribute('ssrc');\n                let isUserSource = true;\n                let sourceStr = '';\n\n                $(source)\n                    .find('>parameter')\n                    .each((__, parameter) => {\n                        const name = parameter.getAttribute('name');\n                        let value = parameter.getAttribute('value');\n\n                        value = SDPUtil.filterSpecialChars(value);\n                        sourceStr += `a=ssrc:${ssrc} ${name}`;\n\n                        if (name === 'msid') {\n                            value = this._adjustMsidSemantic(value, media.media, mid);\n                        }\n                        if (value && value.length) {\n                            sourceStr += `:${value}`;\n                        }\n\n                        sourceStr += '\\r\\n';\n\n                        if (value?.includes('mixedmslabel')) {\n                            isUserSource = false;\n                        }\n                    });\n\n                if (isUserSource) {\n                    userSources += sourceStr;\n                } else {\n                    nonUserSources += sourceStr;\n                }\n            });\n\n        // Append sources in the correct order, the mixedmslable m-line which has the JVB's SSRC for RTCP termination\n        // is expected to be in the first m-line.\n        sdp += nonUserSources + userSources;\n\n        return sdp;\n    }\n\n    /**\n     * Coverts the RTCP attributes for the session from XMPP format to SDP.\n     * https://xmpp.org/extensions/xep-0293.html\n     *\n     * @param {*} elem - Jingle message element.\n     * @param {*} payloadtype - Payload type for the codec.\n     * @returns {string}\n     */\n    rtcpFbFromJingle(elem, payloadtype) {\n        let sdp = '';\n        const feedbackElementTrrInt = elem.find(`>rtcp-fb-trr-int[xmlns='${XEP.RTP_FEEDBACK}']`);\n\n        if (feedbackElementTrrInt.length) {\n            sdp += 'a=rtcp-fb:* trr-int ';\n            sdp += feedbackElementTrrInt.attr('value') || '0';\n            sdp += '\\r\\n';\n        }\n\n        const feedbackElements = elem.find(`>rtcp-fb[xmlns='${XEP.RTP_FEEDBACK}']`);\n\n        feedbackElements.each((_, fb) => {\n            sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\n            if (fb.hasAttribute('subtype')) {\n                sdp += ` ${fb.getAttribute('subtype')}`;\n            }\n            sdp += '\\r\\n';\n        });\n\n        return sdp;\n    }\n\n    /**\n     * Converts the RTCP attributes for the session from SDP to XMPP format.\n     * https://xmpp.org/extensions/xep-0293.html\n     *\n     * @param {*} mediaIndex - The index of the media section in the SDP.\n     * @param {*} elem - The Jingle message element.\n     * @param {*} payloadtype - payload type for the codec.\n     */\n    rtcpFbToJingle(mediaIndex, elem, payloadtype) {\n        const lines = SDPUtil.findLines(this.media[mediaIndex], `a=rtcp-fb:${payloadtype}`);\n\n        lines.forEach(line => {\n            const feedback = SDPUtil.parseRTCPFB(line);\n\n            if (feedback.type === 'trr-int') {\n                elem.c('rtcp-fb-trr-int', {\n                    xmlns: XEP.RTP_FEEDBACK,\n                    value: feedback.params[0]\n                });\n                elem.up();\n            } else {\n                elem.c('rtcp-fb', {\n                    xmlns: XEP.RTP_FEEDBACK,\n                    type: feedback.type\n                });\n                if (feedback.params.length > 0) {\n                    elem.attrs({ 'subtype': feedback.params[0] });\n                }\n                elem.up();\n            }\n        });\n    }\n\n    /**\n     * Converts the current SDP to a Jingle message that can be sent over the wire to a signaling server.\n     *\n     * @param {*} elem - The Jingle message element.\n     * @param {*} thecreator - Sender role, whether it is an 'initiator' or 'responder'.\n     * @returns - The updated Jingle message element.\n     */\n    toJingle(elem, thecreator) {\n        SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\n            const parts = line.split(' ');\n            const semantics = parts.shift().substr(8);\n\n            elem.c('group', {\n                xmlns: XEP.BUNDLE_MEDIA,\n                semantics\n            });\n\n            // Bundle all the media types. Jicofo expects the 'application' media type to be signaled as 'data'.\n            let mediaTypes = [ MediaType.AUDIO, MediaType.VIDEO, 'data' ];\n\n            // For p2p connection, 'mid' will be used in the bundle group.\n            if (this.isP2P) {\n                mediaTypes = this.media.map(mediaItem => SDPUtil.parseMID(SDPUtil.findLine(mediaItem, 'a=mid:')));\n            }\n            mediaTypes.forEach(type => elem.c('content', { name: type }).up());\n            elem.up();\n        });\n\n        this.media.forEach((mediaItem, i) => {\n            const mline = SDPUtil.parseMLine(mediaItem.split('\\r\\n')[0]);\n            const mediaType = mline.media === MediaType.APPLICATION ? 'data' : mline.media;\n\n            let ssrc = false;\n            const assrcline = SDPUtil.findLine(mediaItem, 'a=ssrc:');\n            const isRecvOnly = SDPUtil.findLine(mediaItem, `a=${MediaDirection.RECVONLY}`);\n\n            if (assrcline) {\n                ssrc = assrcline.substring(7).split(' ')[0];\n            }\n\n            const contents = $(elem.tree()).find(`content[name='${mediaType}']`);\n\n            // Append source groups from the new m-lines to the existing media description. The SDP will have multiple\n            // m-lines for audio and video including the recv-only ones for remote sources but there needs to be only\n            // one media description for a given media type that should include all the sources, i.e., both the camera\n            // and screenshare sources should be added to the 'video' description.\n            for (const content of contents) {\n                if (!content.hasAttribute('creator')) {\n                    // eslint-disable-next-line no-continue\n                    continue;\n                }\n\n                if (ssrc && !(isRecvOnly && browser.isFirefox())) {\n                    const description = $(content).find('description');\n                    const ssrcMap = SDPUtil.parseSSRC(mediaItem);\n\n                    for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                        const sourceName = SDPUtil.parseSourceNameLine(ssrcParameters);\n                        const videoType = SDPUtil.parseVideoTypeLine(ssrcParameters);\n                        const source = Strophe.xmlElement('source', {\n                            ssrc: availableSsrc,\n                            name: sourceName,\n                            videoType,\n                            xmlns: XEP.SOURCE_ATTRIBUTES\n                        });\n\n                        const msid = SDPUtil.parseMSIDAttribute(ssrcParameters);\n\n                        if (msid) {\n                            const param = Strophe.xmlElement('parameter', {\n                                name: 'msid',\n                                value: msid\n                            });\n\n                            source.append(param);\n                        }\n                        description.append(source);\n                    }\n\n                    const ssrcGroupLines = SDPUtil.findLines(mediaItem, 'a=ssrc-group:');\n\n                    ssrcGroupLines.forEach(line => {\n                        const { semantics, ssrcs } = SDPUtil.parseSSRCGroupLine(line);\n\n                        if (ssrcs.length) {\n                            const group = Strophe.xmlElement('ssrc-group', {\n                                semantics,\n                                xmlns: XEP.SOURCE_ATTRIBUTES\n                            });\n\n                            for (const val of ssrcs) {\n                                const src = Strophe.xmlElement('source', {\n                                    ssrc: val\n                                });\n\n                                group.append(src);\n                            }\n                            description.append(group);\n                        }\n                    });\n                }\n\n                return;\n            }\n            const mid = SDPUtil.parseMID(SDPUtil.findLine(mediaItem, 'a=mid:'));\n\n            elem.c('content', {\n                creator: thecreator,\n                name: this.isP2P ? mid : mediaType\n            });\n\n            if (mediaType === MediaType.VIDEO && typeof this.initialLastN === 'number') {\n                elem.c('initial-last-n', {\n                    xmlns: 'jitsi:colibri2',\n                    value: this.initialLastN\n                }).up();\n            }\n\n            if ([ MediaType.AUDIO, MediaType.VIDEO ].includes(mediaType)) {\n                elem.c('description', {\n                    xmlns: XEP.RTP_MEDIA,\n                    media: mediaType\n                });\n\n                mline.fmt.forEach(format => {\n                    const rtpmap = SDPUtil.findLine(mediaItem, `a=rtpmap:${format}`);\n\n                    elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                    const afmtpline = SDPUtil.findLine(mediaItem, `a=fmtp:${format}`);\n\n                    if (afmtpline) {\n                        const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\n\n                        fmtpParameters.forEach(param => elem.c('parameter', param).up());\n                    }\n\n                    this.rtcpFbToJingle(i, elem, format);\n                    elem.up();\n                });\n\n                if (ssrc && !(isRecvOnly && browser.isFirefox())) {\n                    const ssrcMap = SDPUtil.parseSSRC(mediaItem);\n\n                    for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                        const sourceName = SDPUtil.parseSourceNameLine(ssrcParameters);\n                        const videoType = SDPUtil.parseVideoTypeLine(ssrcParameters);\n\n                        elem.c('source', {\n                            ssrc: availableSsrc,\n                            name: sourceName,\n                            videoType,\n                            xmlns: XEP.SOURCE_ATTRIBUTES\n                        });\n\n                        const msid = SDPUtil.parseMSIDAttribute(ssrcParameters);\n\n                        if (msid) {\n                            elem.c('parameter').attrs({\n                                name: 'msid',\n                                value: msid\n                            });\n                            elem.up();\n                        }\n\n                        elem.up();\n                    }\n\n                    const ssrcGroupLines = SDPUtil.findLines(mediaItem, 'a=ssrc-group:');\n\n                    ssrcGroupLines.forEach(line => {\n                        const { semantics, ssrcs } = SDPUtil.parseSSRCGroupLine(line);\n\n                        if (ssrcs.length) {\n                            elem.c('ssrc-group', {\n                                semantics,\n                                xmlns: XEP.SOURCE_ATTRIBUTES\n                            });\n                            ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                            elem.up();\n                        }\n                    });\n                }\n\n                const ridLines = SDPUtil.findLines(mediaItem, 'a=rid:');\n\n                if (ridLines.length && browser.usesRidsForSimulcast()) {\n                    // Map a line which looks like \"a=rid:2 send\" to just the rid (\"2\").\n                    const rids = ridLines.map(ridLine => ridLine.split(':')[1].split(' ')[0]);\n\n                    rids.forEach(rid => {\n                        elem.c('source', {\n                            rid,\n                            xmlns: XEP.SOURCE_ATTRIBUTES\n                        });\n                        elem.up();\n                    });\n\n                    const unifiedSimulcast = SDPUtil.findLine(mediaItem, 'a=simulcast:');\n\n                    if (unifiedSimulcast) {\n                        elem.c('rid-group', {\n                            semantics: SSRC_GROUP_SEMANTICS.SIM,\n                            xmlns: XEP.SOURCE_ATTRIBUTES\n                        });\n                        rids.forEach(rid => elem.c('source', { rid }).up());\n                        elem.up();\n                    }\n                }\n\n                if (SDPUtil.findLine(mediaItem, 'a=rtcp-mux')) {\n                    elem.c('rtcp-mux').up();\n                }\n\n                this.rtcpFbToJingle(i, elem, '*');\n\n                const extmapLines = SDPUtil.findLines(mediaItem, 'a=extmap:', this.session);\n\n                extmapLines.forEach(extmapLine => {\n                    const extmap = SDPUtil.parseExtmap(extmapLine);\n\n                    elem.c('rtp-hdrext', {\n                        xmlns: XEP.RTP_HEADER_EXTENSIONS,\n                        uri: extmap.uri,\n                        id: extmap.value\n                    });\n\n                    if (extmap.hasOwnProperty('direction')) {\n                        switch (extmap.direction) {\n                        case MediaDirection.SENDONLY:\n                            elem.attrs({ senders: 'responder' });\n                            break;\n                        case MediaDirection.RECVONLY:\n                            elem.attrs({ senders: 'initiator' });\n                            break;\n                        case MediaDirection.SENDRECV:\n                            elem.attrs({ senders: 'both' });\n                            break;\n                        case MediaDirection.INACTIVE:\n                            elem.attrs({ senders: 'none' });\n                            break;\n                        }\n                    }\n\n                    elem.up();\n                });\n\n                if (SDPUtil.findLine(mediaItem, 'a=extmap-allow-mixed', this.session)) {\n                    elem.c('extmap-allow-mixed', {\n                        xmlns: XEP.RTP_HEADER_EXTENSIONS\n                    });\n                    elem.up();\n                }\n                elem.up(); // end of description\n            }\n\n            // Map ice-ufrag/pwd, dtls fingerprint, candidates.\n            this.transportToJingle(i, elem);\n\n            // Set senders attribute based on media direction\n            if (SDPUtil.findLine(mediaItem, `a=${MediaDirection.SENDRECV}`)) {\n                elem.attrs({ senders: 'both' });\n            } else if (SDPUtil.findLine(mediaItem, `a=${MediaDirection.SENDONLY}`)) {\n                elem.attrs({ senders: 'initiator' });\n            } else if (SDPUtil.findLine(mediaItem, `a=${MediaDirection.RECVONLY}`)) {\n                elem.attrs({ senders: 'responder' });\n            } else if (SDPUtil.findLine(mediaItem, `a=${MediaDirection.INACTIVE}`)) {\n                elem.attrs({ senders: 'none' });\n            }\n\n            // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\n            // The port is automatically set to 0 when bundle-only is used.\n            if (mline.port === '0' && !SDPUtil.findLine(mediaItem, 'a=bundle-only', this.session)) {\n                elem.attrs({ senders: 'rejected' });\n            }\n            elem.up(); // end of content\n        });\n        elem.up();\n\n        return elem;\n    }\n\n    /**\n     * Converts the session transport information from SDP to XMPP format.\n     *\n     * @param {*} mediaIndex The index for the m-line in the SDP.\n     * @param {*} elem The transport element.\n     */\n    transportToJingle(mediaIndex, elem) {\n        elem.c('transport');\n\n        const sctpport = SDPUtil.findLine(this.media[mediaIndex], 'a=sctp-port:', this.session);\n        const sctpmap = SDPUtil.findLine(this.media[mediaIndex], 'a=sctpmap:', this.session);\n\n        if (sctpport) {\n            const sctpAttrs = SDPUtil.parseSCTPPort(sctpport);\n\n            elem.c('sctpmap', {\n                xmlns: XEP.SCTP_DATA_CHANNEL,\n                number: sctpAttrs, // SCTP port\n                protocol: 'webrtc-datachannel' // protocol\n            });\n\n            // The parser currently requires streams to be present.\n            elem.attrs({ streams: 0 });\n            elem.up();\n        } else if (sctpmap) {\n            const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n            elem.c('sctpmap', {\n                xmlns: XEP.SCTP_DATA_CHANNEL,\n                number: sctpAttrs[0], // SCTP port\n                protocol: sctpAttrs[1] // protocol\n            });\n\n            // Optional stream count attribute.\n            elem.attrs({ streams: sctpAttrs.length > 2 ? sctpAttrs[2] : 0 });\n            elem.up();\n        }\n\n        const fingerprints = SDPUtil.findLines(this.media[mediaIndex], 'a=fingerprint:', this.session);\n\n        fingerprints.forEach(line => {\n            const fingerprint = SDPUtil.parseFingerprint(line);\n\n            fingerprint.xmlns = XEP.DTLS_SRTP;\n\n            elem.c('fingerprint').t(fingerprint.fingerprint);\n            delete fingerprint.fingerprint;\n\n            const setupLine = SDPUtil.findLine(this.media[mediaIndex], 'a=setup:', this.session);\n\n            if (setupLine) {\n                fingerprint.setup = setupLine.substr(8);\n            }\n            elem.attrs(fingerprint);\n            elem.up(); // end of fingerprint\n        });\n\n        const iceParameters = SDPUtil.iceparams(this.media[mediaIndex], this.session);\n\n        if (iceParameters) {\n            iceParameters.xmlns = XEP.ICE_UDP_TRANSPORT;\n            elem.attrs(iceParameters);\n\n            const candidateLines = SDPUtil.findLines(this.media[mediaIndex], 'a=candidate:', this.session);\n\n            candidateLines.forEach(line => { // add any a=candidate lines\n                const candidate = SDPUtil.candidateToJingle(line);\n\n                if (this.failICE) {\n                    candidate.ip = '1.1.1.1';\n                }\n\n                const protocol = candidate && typeof candidate.protocol === 'string'\n                    ? candidate.protocol.toLowerCase() : '';\n\n                if ((this.removeTcpCandidates && (protocol === 'tcp' || protocol === 'ssltcp'))\n                    || (this.removeUdpCandidates && protocol === 'udp')) {\n                    return;\n                }\n                elem.c('candidate', candidate).up();\n            });\n        }\n        elem.up(); // end of transport\n    }\n}\n","import { isEqual } from 'lodash-es';\n\nimport { XEP } from '../../service/xmpp/XMPPExtensioProtocols';\n\nimport SDPUtil from './SDPUtil';\n\n/**\n * A class that provides methods for comparing the source information present in two different SDPs so that the delta\n * can be signaled to Jicofo via 'source-remove' or 'source-add'.\n */\nexport class SDPDiffer {\n    /**\n     * Constructor.\n     *\n     * @param {SDP} mySdp - the new SDP.\n     * @param {SDP} othersSdp - the old SDP.\n     * @param {boolean} isP2P - Whether the SDPs belong to a p2p peerconnection.\n     */\n    constructor(mySdp, othersSdp, isP2P = false) {\n        this.isP2P = isP2P;\n        this.mySdp = mySdp;\n        this.othersSdp = othersSdp;\n    }\n\n    /**\n     * Returns a map of the sources that are present in 'othersSdp' but not in 'mySdp'.\n     *\n     * @returns {*}\n     */\n    getNewMedia() {\n        const mySources = this.mySdp.getMediaSsrcMap();\n        const othersSources = this.othersSdp.getMediaSsrcMap();\n        const diff = {};\n\n        for (const [ index, othersSource ] of othersSources.entries()) {\n            const mySource = mySources.get(index);\n\n            if (!mySource) {\n                diff[index] = othersSource;\n                continue; // eslint-disable-line no-continue\n            }\n\n            const othersSsrcs = Object.keys(othersSource.ssrcs);\n\n            if (othersSsrcs.length && !isEqual(Object.keys(mySource.ssrcs).sort(), [ ...othersSsrcs ].sort())) {\n                diff[index] = othersSource;\n            }\n        }\n\n        return diff;\n    }\n\n    /**\n     * Adds the diff source info to the provided IQ stanza.\n     *\n     * @param {*} modify - Stanza IQ.\n     * @returns {boolean}\n     */\n    toJingle(modify) {\n        let modified = false;\n        const diffSourceInfo = this.getNewMedia();\n\n        for (const media of Object.values(diffSourceInfo)) {\n            modified = true;\n            modify.c('content', { name: this.isP2P ? media.mid : media.mediaType });\n\n            modify.c('description', {\n                xmlns: XEP.RTP_MEDIA,\n                media: media.mediaType\n            });\n\n            Object.keys(media.ssrcs).forEach(ssrcNum => {\n                const mediaSsrc = media.ssrcs[ssrcNum];\n                const ssrcLines = mediaSsrc.lines;\n                const sourceName = SDPUtil.parseSourceNameLine(ssrcLines);\n                const videoType = SDPUtil.parseVideoTypeLine(ssrcLines);\n\n                modify.c('source', { xmlns: XEP.SOURCE_ATTRIBUTES });\n                modify.attrs({\n                    name: sourceName,\n                    videoType,\n                    ssrc: mediaSsrc.ssrc\n                });\n\n                // Only MSID attribute is sent\n                const msid = SDPUtil.parseMSIDAttribute(ssrcLines);\n\n                if (msid) {\n                    modify.c('parameter');\n                    modify.attrs({ name: 'msid' });\n                    modify.attrs({ value: msid });\n                    modify.up();\n                }\n\n                modify.up(); // end of source\n            });\n\n            // generate source groups from lines\n            media.ssrcGroups.forEach(ssrcGroup => {\n                if (ssrcGroup.ssrcs.length) {\n\n                    modify.c('ssrc-group', {\n                        semantics: ssrcGroup.semantics,\n                        xmlns: XEP.SOURCE_ATTRIBUTES\n                    });\n\n                    ssrcGroup.ssrcs.forEach(ssrc => {\n                        modify.c('source', { ssrc })\n                            .up(); // end of source\n                    });\n                    modify.up(); // end of ssrc-group\n                }\n            });\n\n            modify.up(); // end of description\n            modify.up(); // end of content\n        }\n\n        return modified;\n    }\n}\n","export default function onlyOnce(fn) {\n    return function (...args) {\n        if (fn === null) throw new Error(\"Callback was already called.\");\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    };\n}\n","/* istanbul ignore file */\n\nexport var hasQueueMicrotask = typeof queueMicrotask === 'function' && queueMicrotask;\nexport var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\nexport var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\nexport function fallback(fn) {\n    setTimeout(fn, 0);\n}\n\nexport function wrap(defer) {\n    return (fn, ...args) => defer(() => fn(...args));\n}\n\nvar _defer;\n\nif (hasQueueMicrotask) {\n    _defer = queueMicrotask;\n} else if (hasSetImmediate) {\n    _defer = setImmediate;\n} else if (hasNextTick) {\n    _defer = process.nextTick;\n} else {\n    _defer = fallback;\n}\n\nexport default wrap(_defer);\n","// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nexport default class DLL {\n    constructor() {\n        this.head = this.tail = null;\n        this.length = 0;\n    }\n\n    removeLink(node) {\n        if (node.prev) node.prev.next = node.next;\n        else this.head = node.next\n        if (node.next) node.next.prev = node.prev;\n        else this.tail = node.prev;\n\n        node.prev = node.next = null;\n        this.length -= 1;\n        return node;\n    }\n\n    empty () {\n        while(this.head) this.shift();\n        return this;\n    }\n\n    insertAfter(node, newNode) {\n        newNode.prev = node;\n        newNode.next = node.next;\n        if (node.next) node.next.prev = newNode;\n        else this.tail = newNode;\n        node.next = newNode;\n        this.length += 1;\n    }\n\n    insertBefore(node, newNode) {\n        newNode.prev = node.prev;\n        newNode.next = node;\n        if (node.prev) node.prev.next = newNode;\n        else this.head = newNode;\n        node.prev = newNode;\n        this.length += 1;\n    }\n\n    unshift(node) {\n        if (this.head) this.insertBefore(this.head, node);\n        else setInitial(this, node);\n    }\n\n    push(node) {\n        if (this.tail) this.insertAfter(this.tail, node);\n        else setInitial(this, node);\n    }\n\n    shift() {\n        return this.head && this.removeLink(this.head);\n    }\n\n    pop() {\n        return this.tail && this.removeLink(this.tail);\n    }\n\n    toArray() {\n        return [...this]\n    }\n\n    *[Symbol.iterator] () {\n        var cur = this.head\n        while (cur) {\n            yield cur.data\n            cur = cur.next\n        }\n    }\n\n    remove (testFn) {\n        var curr = this.head;\n        while(curr) {\n            var {next} = curr;\n            if (testFn(curr)) {\n                this.removeLink(curr);\n            }\n            curr = next;\n        }\n        return this;\n    }\n}\n\nfunction setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n}\n\n","import initialParams from './internal/initialParams.js'\nimport setImmediate from './internal/setImmediate.js'\nimport { isAsync } from './internal/wrapAsync.js'\n\n/**\n * Take a sync function and make it async, passing its return value to a\n * callback. This is useful for plugging sync functions into a waterfall,\n * series, or other async functions. Any arguments passed to the generated\n * function will be passed to the wrapped function (except for the final\n * callback argument). Errors thrown will be passed to the callback.\n *\n * If the function passed to `asyncify` returns a Promise, that promises's\n * resolved/rejected state will be used to call the callback, rather than simply\n * the synchronous return value.\n *\n * This also means you can asyncify ES2017 `async` functions.\n *\n * @name asyncify\n * @static\n * @memberOf module:Utils\n * @method\n * @alias wrapSync\n * @category Util\n * @param {Function} func - The synchronous function, or Promise-returning\n * function to convert to an {@link AsyncFunction}.\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n * invoked with `(args..., callback)`.\n * @example\n *\n * // passing a regular synchronous function\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(JSON.parse),\n *     function (data, next) {\n *         // data is the result of parsing the text.\n *         // If there was a parsing error, it would have been caught.\n *     }\n * ], callback);\n *\n * // passing a function returning a promise\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(function (contents) {\n *         return db.model.create(contents);\n *     }),\n *     function (model, next) {\n *         // `model` is the instantiated model object.\n *         // If there was an error, this function would be skipped.\n *     }\n * ], callback);\n *\n * // es2017 example, though `asyncify` is not needed if your JS environment\n * // supports async functions out of the box\n * var q = async.queue(async.asyncify(async function(file) {\n *     var intermediateStep = await processFile(file);\n *     return await somePromise(intermediateStep)\n * }));\n *\n * q.push(files);\n */\nexport default function asyncify(func) {\n    if (isAsync(func)) {\n        return function (...args/*, callback*/) {\n            const callback = args.pop()\n            const promise = func.apply(this, args)\n            return handlePromise(promise, callback)\n        }\n    }\n\n    return initialParams(function (args, callback) {\n        var result;\n        try {\n            result = func.apply(this, args);\n        } catch (e) {\n            return callback(e);\n        }\n        // if result is Promise object\n        if (result && typeof result.then === 'function') {\n            return handlePromise(result, callback)\n        } else {\n            callback(null, result);\n        }\n    });\n}\n\nfunction handlePromise(promise, callback) {\n    return promise.then(value => {\n        invokeCallback(callback, null, value);\n    }, err => {\n        invokeCallback(callback, err && err.message ? err : new Error(err));\n    });\n}\n\nfunction invokeCallback(callback, error, value) {\n    try {\n        callback(error, value);\n    } catch (err) {\n        setImmediate(e => { throw e }, err);\n    }\n}\n","import asyncify from '../asyncify.js'\n\nfunction isAsync(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncFunction';\n}\n\nfunction isAsyncGenerator(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncGenerator';\n}\n\nfunction isAsyncIterable(obj) {\n    return typeof obj[Symbol.asyncIterator] === 'function';\n}\n\nfunction wrapAsync(asyncFn) {\n    if (typeof asyncFn !== 'function') throw new Error('expected a function')\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n}\n\nexport default wrapAsync;\n\nexport { isAsync, isAsyncGenerator, isAsyncIterable };\n","export default function (fn) {\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        return fn.call(this, args, callback);\n    };\n}\n","import onlyOnce from './onlyOnce.js'\nimport setImmediate from './setImmediate.js'\nimport DLL from './DoublyLinkedList.js'\nimport wrapAsync from './wrapAsync.js'\n\nexport default function queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n        concurrency = 1;\n    }\n    else if(concurrency === 0) {\n        throw new RangeError('Concurrency must not be zero');\n    }\n\n    var _worker = wrapAsync(worker);\n    var numRunning = 0;\n    var workersList = [];\n    const events = {\n        error: [],\n        drain: [],\n        saturated: [],\n        unsaturated: [],\n        empty: []\n    }\n\n    function on (event, handler) {\n        events[event].push(handler)\n    }\n\n    function once (event, handler) {\n        const handleAndRemove = (...args) => {\n            off(event, handleAndRemove)\n            handler(...args)\n        }\n        events[event].push(handleAndRemove)\n    }\n\n    function off (event, handler) {\n        if (!event) return Object.keys(events).forEach(ev => events[ev] = [])\n        if (!handler) return events[event] = []\n        events[event] = events[event].filter(ev => ev !== handler)\n    }\n\n    function trigger (event, ...args) {\n        events[event].forEach(handler => handler(...args))\n    }\n\n    var processingScheduled = false;\n    function _insert(data, insertAtFront, rejectOnError, callback) {\n        if (callback != null && typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n\n        var res, rej;\n        function promiseCallback (err, ...args) {\n            // we don't care about the error, let the global error handler\n            // deal with it\n            if (err) return rejectOnError ? rej(err) : res()\n            if (args.length <= 1) return res(args[0])\n            res(args)\n        }\n\n        var item = q._createTaskItem(\n            data,\n            rejectOnError ? promiseCallback :\n                (callback || promiseCallback)\n        );\n\n        if (insertAtFront) {\n            q._tasks.unshift(item);\n        } else {\n            q._tasks.push(item);\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate(() => {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n\n        if (rejectOnError || !callback) {\n            return new Promise((resolve, reject) => {\n                res = resolve\n                rej = reject\n            })\n        }\n    }\n\n    function _createCB(tasks) {\n        return function (err, ...args) {\n            numRunning -= 1;\n\n            for (var i = 0, l = tasks.length; i < l; i++) {\n                var task = tasks[i];\n\n                var index = workersList.indexOf(task);\n                if (index === 0) {\n                    workersList.shift();\n                } else if (index > 0) {\n                    workersList.splice(index, 1);\n                }\n\n                task.callback(err, ...args);\n\n                if (err != null) {\n                    trigger('error', err, task.data);\n                }\n            }\n\n            if (numRunning <= (q.concurrency - q.buffer) ) {\n                trigger('unsaturated')\n            }\n\n            if (q.idle()) {\n                trigger('drain')\n            }\n            q.process();\n        };\n    }\n\n    function _maybeDrain(data) {\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            setImmediate(() => trigger('drain'));\n            return true\n        }\n        return false\n    }\n\n    const eventMethod = (name) => (handler) => {\n        if (!handler) {\n            return new Promise((resolve, reject) => {\n                once(name, (err, data) => {\n                    if (err) return reject(err)\n                    resolve(data)\n                })\n            })\n        }\n        off(name)\n        on(name, handler)\n\n    }\n\n    var isProcessing = false;\n    var q = {\n        _tasks: new DLL(),\n        _createTaskItem (data, callback) {\n            return {\n                data,\n                callback\n            };\n        },\n        *[Symbol.iterator] () {\n            yield* q._tasks[Symbol.iterator]()\n        },\n        concurrency,\n        payload,\n        buffer: concurrency / 4,\n        started: false,\n        paused: false,\n        push (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, false, callback))\n            }\n            return _insert(data, false, false, callback);\n        },\n        pushAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, true, callback))\n            }\n            return _insert(data, false, true, callback);\n        },\n        kill () {\n            off()\n            q._tasks.empty();\n        },\n        unshift (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, false, callback))\n            }\n            return _insert(data, true, false, callback);\n        },\n        unshiftAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, true, callback))\n            }\n            return _insert(data, true, true, callback);\n        },\n        remove (testFn) {\n            q._tasks.remove(testFn);\n        },\n        process () {\n            // Avoid trying to start too many processing operations. This can occur\n            // when callbacks resolve synchronously (#1267).\n            if (isProcessing) {\n                return;\n            }\n            isProcessing = true;\n            while(!q.paused && numRunning < q.concurrency && q._tasks.length){\n                var tasks = [], data = [];\n                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    workersList.push(node);\n                    data.push(node.data);\n                }\n\n                numRunning += 1;\n\n                if (q._tasks.length === 0) {\n                    trigger('empty');\n                }\n\n                if (numRunning === q.concurrency) {\n                    trigger('saturated');\n                }\n\n                var cb = onlyOnce(_createCB(tasks));\n                _worker(data, cb);\n            }\n            isProcessing = false;\n        },\n        length () {\n            return q._tasks.length;\n        },\n        running () {\n            return numRunning;\n        },\n        workersList () {\n            return workersList;\n        },\n        idle() {\n            return q._tasks.length + numRunning === 0;\n        },\n        pause () {\n            q.paused = true;\n        },\n        resume () {\n            if (q.paused === false) { return; }\n            q.paused = false;\n            setImmediate(q.process);\n        }\n    };\n    // define these as fixed properties, so people get useful errors when updating\n    Object.defineProperties(q, {\n        saturated: {\n            writable: false,\n            value: eventMethod('saturated')\n        },\n        unsaturated: {\n            writable: false,\n            value: eventMethod('unsaturated')\n        },\n        empty: {\n            writable: false,\n            value: eventMethod('empty')\n        },\n        drain: {\n            writable: false,\n            value: eventMethod('drain')\n        },\n        error: {\n            writable: false,\n            value: eventMethod('error')\n        },\n    })\n    return q;\n}\n","import { getLogger } from '@jitsi/logger';\nimport { queue, AsyncQueue as AsyncQueueType } from 'async-es';\n\nconst logger = getLogger('modules/util/AsyncQueue');\n\n/**\n * Error to be passed to a callback of a queued task when the queue is cleared.\n */\nexport class ClearedQueueError extends Error {\n    /**\n     * Creates new instance.\n     */\n    constructor(message: string) {\n        super(message);\n        this.name = 'ClearedQueueError';\n    }\n}\n\nexport type Task = (callback: (err?: Error) => void) => void;\nexport type TaskCallback = (err?: Error) => void;\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    private _queue: AsyncQueueType<Task>;\n    private _stopped: boolean;\n    private _taskCallbacks: Map<Task, TaskCallback | undefined>;\n\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n        this._taskCallbacks = new Map();\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear(): void {\n        for (const finishedCallback of this._taskCallbacks.values()) {\n            try {\n                finishedCallback?.(new ClearedQueueError('The queue has been cleared'));\n            } catch (error) {\n                logger.error('Error in callback while clearing the queue:', error);\n            }\n        }\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    private _processQueueTasks(task: Task, finishedCallback: TaskCallback): void {\n        try {\n            task(finishedCallback);\n        } catch (error) {\n            logger.error(`Task failed: ${error?.stack}`);\n            finishedCallback(error);\n        } finally {\n            this._taskCallbacks.delete(task);\n        }\n    }\n\n    /**\n     * Pauses the execution of the tasks on the queue.\n     */\n    pause(): void {\n        this._queue.pause();\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {Task} task - The task to be executed. See the description above.\n     * @param {TaskCallback} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task: Task, callback?: TaskCallback): void {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._taskCallbacks.set(task, callback);\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Resumes the execution of the tasks on the queue.\n     */\n    resume(): void {\n        this._queue.resume();\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown(): void {\n        this._stopped = true;\n    }\n}\n","import queue from './internal/queue.js'\nimport wrapAsync from './internal/wrapAsync.js'\n\n/**\n * A queue of tasks for the worker function to complete.\n * @typedef {Iterable} QueueObject\n * @memberOf module:ControlFlow\n * @property {Function} length - a function returning the number of items\n * waiting to be processed. Invoke with `queue.length()`.\n * @property {boolean} started - a boolean indicating whether or not any\n * items have been pushed and processed by the queue.\n * @property {Function} running - a function returning the number of items\n * currently being processed. Invoke with `queue.running()`.\n * @property {Function} workersList - a function returning the array of items\n * currently being processed. Invoke with `queue.workersList()`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n * @property {number} concurrency - an integer for determining how many `worker`\n * functions should be run in parallel. This property can be changed after a\n * `queue` is created to alter the concurrency on-the-fly.\n * @property {number} payload - an integer that specifies how many items are\n * passed to the worker function at a time. only applies if this is a\n * [cargo]{@link module:ControlFlow.cargo} object\n * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`\n * once the `worker` has finished processing the task. Instead of a single task,\n * a `tasks` array can be submitted. The respective callback is used for every\n * task in the list. Invoke with `queue.push(task, [callback])`,\n * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.\n * Invoke with `queue.unshift(task, [callback])`.\n * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns\n * a promise that rejects if an error occurs.\n * @property {AsyncFunction} unshiftAsync - the same as `q.unshift`, except this returns\n * a promise that rejects if an error occurs.\n * @property {Function} remove - remove items from the queue that match a test\n * function.  The test function will be passed an object with a `data` property,\n * and a `priority` property, if this is a\n * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n * `function ({data, priority}) {}` and returns a Boolean.\n * @property {Function} saturated - a function that sets a callback that is\n * called when the number of running workers hits the `concurrency` limit, and\n * further tasks will be queued.  If the callback is omitted, `q.saturated()`\n * returns a promise for the next occurrence.\n * @property {Function} unsaturated - a function that sets a callback that is\n * called when the number of running workers is less than the `concurrency` &\n * `buffer` limits, and further tasks will not be queued. If the callback is\n * omitted, `q.unsaturated()` returns a promise for the next occurrence.\n * @property {number} buffer - A minimum threshold buffer in order to say that\n * the `queue` is `unsaturated`.\n * @property {Function} empty - a function that sets a callback that is called\n * when the last item from the `queue` is given to a `worker`. If the callback\n * is omitted, `q.empty()` returns a promise for the next occurrence.\n * @property {Function} drain - a function that sets a callback that is called\n * when the last item from the `queue` has returned from the `worker`. If the\n * callback is omitted, `q.drain()` returns a promise for the next occurrence.\n * @property {Function} error - a function that sets a callback that is called\n * when a task errors. Has the signature `function(error, task)`. If the\n * callback is omitted, `error()` returns a promise that rejects on the next\n * error.\n * @property {boolean} paused - a boolean for determining whether the queue is\n * in a paused state.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke with `queue.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. No more tasks\n * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n *\n * @example\n * const q = async.queue(worker, 2)\n * q.push(item1)\n * q.push(item2)\n * q.push(item3)\n * // queues are iterable, spread into an array to inspect\n * const items = [...q] // [item1, item2, item3]\n * // or use for of\n * for (let item of q) {\n *     console.log(item)\n * }\n *\n * q.drain(() => {\n *     console.log('all done')\n * })\n * // or\n * await q.drain()\n */\n\n/**\n * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n * `queue` are processed in parallel (up to the `concurrency` limit). If all\n * `worker`s are in progress, the task is queued until one becomes available.\n * Once a `worker` completes a `task`, that `task`'s callback is called.\n *\n * @name queue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`. Invoked with (task, callback).\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be\n * attached as certain properties to listen for specific events during the\n * lifecycle of the queue.\n * @example\n *\n * // create a queue object with concurrency 2\n * var q = async.queue(function(task, callback) {\n *     console.log('hello ' + task.name);\n *     callback();\n * }, 2);\n *\n * // assign a callback\n * q.drain(function() {\n *     console.log('all items have been processed');\n * });\n * // or await the end\n * await q.drain()\n *\n * // assign an error callback\n * q.error(function(err, task) {\n *     console.error('task experienced an error');\n * });\n *\n * // add some items to the queue\n * q.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * // callback is optional\n * q.push({name: 'bar'});\n *\n * // add some items to the queue (batch-wise)\n * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n *     console.log('finished processing item');\n * });\n *\n * // add some items to the front of the queue\n * q.unshift({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n */\nexport default function (worker, concurrency) {\n    var _worker = wrapAsync(worker);\n    return queue((items, cb) => {\n        _worker(items[0], cb);\n    }, concurrency, 1);\n}\n","export enum JingleSessionState {\n\n    /**\n     * The active Jingle session state as defined in XEP-0166\n     * (after 'session-invite'/'session-accept').\n     */\n    ACTIVE = 'active',\n\n    /**\n     * The ended Jingle session state as defined in XEP-0166\n     * (after 'session-terminate').\n     */\n    ENDED = 'ended',\n\n    /**\n     * The pending Jingle session state which means the session as defined in\n     * XEP-0166(before 'session-invite/session-accept' took place).\n     */\n    PENDING = 'pending'\n}\n\n// exported for backward compatibility\nexport const PENDING = JingleSessionState.PENDING;\nexport const ACTIVE = JingleSessionState.ACTIVE;\nexport const ENDED = JingleSessionState.ENDED;\n","import { getLogger } from '@jitsi/logger';\n\nimport Listenable from '../util/Listenable';\n\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger('modules/xmpp/JingleSession');\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {XmppConnection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to the PeerConnection onCreateAnswer/Offer.\n     * @param {Object} pcConfig The {@code RTCConfiguration} object passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isInitiator) {\n        super();\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.pcConfig = pcConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * The signaling layer.\n         * @type {SignalingLayerImpl | null}\n         * @private\n         */\n        this._signalingLayer = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {SignalingLayerImpl} signalingLayer - The signaling layer instance.\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, signalingLayer, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n\n        // TODO decouple from room\n        this.room = room;\n        this.rtc = rtc;\n        this._signalingLayer = signalingLayer;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\n     * terminated.\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","enum MediaSessionEvents {\n\n    /**\n     * Event triggered when the remote party signals video max frame heights for its local sources.\n     */\n    REMOTE_SOURCE_CONSTRAINTS_CHANGED = 'media_session.REMOTE_SOURCE_CONSTRAINTS_CHANGED',\n\n    /**\n     * Event triggered when the video codec of the local video track has changed.\n     */\n    VIDEO_CODEC_CHANGED = 'media_session.VIDEO_CODEC_CHANGED'\n}\n\nexport default MediaSessionEvents;\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { isEqual } from 'lodash-es';\nimport { $build, $iq, Strophe } from 'strophe.js';\n\nimport { JitsiTrackEvents } from '../../JitsiTrackEvents';\nimport { CodecMimeType } from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { SSRC_GROUP_SEMANTICS } from '../../service/RTC/StandardVideoQualitySettings';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED,\n    VIDEO_CODEC_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport { XEP } from '../../service/xmpp/XMPPExtensioProtocols';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport SDP from '../sdp/SDP';\nimport { SDPDiffer } from '../sdp/SDPDiffer';\nimport SDPUtil from '../sdp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport AsyncQueue, { ClearedQueueError } from '../util/AsyncQueue';\n\nimport browser from './../browser';\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport MediaSessionEvents from './MediaSessionEvents';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger('modules/xmpp/JingleSessionPC');\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * The time duration for which the client keeps gathering ICE candidates to be sent out in a single IQ.\n * @type {number} timeout in ms.\n */\nconst ICE_CAND_GATHERING_TIMEOUT = 150;\n\n/**\n * Reads the endpoint ID given a string which represents either the endpoint's full JID, or the endpoint ID itself.\n * @param {String} jidOrEndpointId A string which is either the full JID of a participant, or the ID of an\n * endpoint/participant.\n * @returns The endpoint ID associated with 'jidOrEndpointId'.\n */\nfunction getEndpointId(jidOrEndpointId) {\n    return Strophe.getResourceFromJid(jidOrEndpointId) || jidOrEndpointId;\n}\n\n/**\n * Add \"source\" element as a child of \"description\" element.\n * @param {Object} description The \"description\" element to add to.\n * @param {Object} s Contains properties of the source being added.\n * @param {Number} ssrc_ The SSRC.\n * @param {String} msid The \"msid\" attribute.\n */\nfunction _addSourceElement(description, s, ssrc_, msid) {\n\n    description.c('source', {\n        xmlns: XEP.SOURCE_ATTRIBUTES,\n        ssrc: ssrc_,\n        name: s.source,\n        videoType: s.videoType?.toLowerCase()\n    })\n        .c('parameter', {\n            name: 'msid',\n            value: msid\n        })\n        .up()\n        .c('ssrc-info', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            owner: s.owner\n        })\n        .up()\n        .up();\n}\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * video test ?(ask George).\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\n * on the PeerConnection.\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Parses the source-name and max frame height value of the 'content-modify' IQ when source-name signaling\n     * is enabled.\n     *\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\n     * @returns {Object|null}\n     */\n    static parseSourceMaxFrameHeight(jingleContents) {\n        const receiverConstraints = [];\n        const sourceFrameHeightSel = jingleContents.find('>content[name=\"video\"]>source-frame-height');\n        let maxHeight, sourceName;\n\n        if (sourceFrameHeightSel.length) {\n            sourceFrameHeightSel.each((_, source) => {\n                sourceName = source.getAttribute('sourceName');\n                maxHeight = source.getAttribute('maxHeight');\n                receiverConstraints.push({\n                    maxHeight,\n                    sourceName\n                });\n            });\n\n            return receiverConstraints;\n        }\n\n        return null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to createOffer/Answer, as defined\n     * by the WebRTC standard\n     * @param pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P indicates whether this instance is meant to be used in a direct, peer to\n     * peer connection or <tt>false</tt> if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            pcConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, pcConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Receiver constraints (max height) set by the application per remote source. Will be used for p2p connection.\n         *\n         * @type {Map<string, number>}\n         */\n        this._sourceReceiverConstraints = undefined;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localSendReceiveVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteSendReceiveVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again.\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * Remote preference for the receive video max frame height.\n         *\n         * @type {Number|undefined}\n         */\n        this.remoteRecvMaxFrameHeight = undefined;\n\n        /**\n         * Number of remote video sources, in SSRC rewriting mode.\n         * Used to generate next unique msid attribute.\n         *\n         * @type {Number}\n         */\n        this.numRemoteVideoSources = 0;\n\n        /**\n         * Number of remote audio sources, in SSRC rewriting mode.\n         * Used to generate next unique msid attribute.\n         *\n         * @type {Number}\n         */\n        this.numRemoteAudioSources = 0;\n\n        /**\n         * Remote preference for the receive video max frame heights when source-name signaling is enabled.\n         *\n         * @type {Map<string, number>|undefined}\n         */\n        this.remoteSourceMaxFrameHeights = undefined;\n\n        /**\n         * The queue used to serialize operations done on the peerconnection after the session is established.\n         * The queue is paused until the first offer/answer cycle is complete. Only track or codec related\n         * operations which necessitate a renegotiation cycle need to be pushed to the modification queue.\n         * These tasks will be executed after the session has been established.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n        this.modificationQueue.pause();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addCancellableListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n\n        this._removeSenderVideoConstraintsChangeListener = undefined;\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this Jingle session.\n     *\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt> otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @returns {Promise} resolved when the operation is done or rejected with an error.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.remoteDescription?.sdp) {\n                const errMsg = `${logPrefix} - received before remoteDescription is set, ignoring!!`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.debug(`${this} Processing ${logPrefix}`);\n\n            const currentRemoteSdp = new SDP(this.peerconnection.remoteDescription.sdp, this.isP2P);\n            const sourceDescription = this._processSourceMapFromJingle(elem, isAdd);\n\n            if (!sourceDescription.size) {\n                logger.debug(`${this} ${logPrefix} - no sources to ${isAdd ? 'add' : 'remove'}`);\n                finishedCallback();\n            }\n\n            logger.debug(`${isAdd ? 'adding' : 'removing'} sources=${Array.from(sourceDescription.keys())}`);\n\n            // Update the remote description.\n            const modifiedMids = currentRemoteSdp.updateRemoteSources(sourceDescription, isAdd);\n\n            for (const mid of modifiedMids) {\n                if (this.isP2P) {\n                    const { media } = SDPUtil.parseMLine(currentRemoteSdp.media[mid].split('\\r\\n')[0]);\n                    const desiredDirection = this.peerconnection.getDesiredMediaDirection(media, isAdd);\n                    const currentDirections = isAdd ? [ MediaDirection.RECVONLY, MediaDirection.INACTIVE ]\n                        : [ MediaDirection.SENDRECV, MediaDirection.SENDONLY ];\n\n                    currentDirections.forEach(direction => {\n                        currentRemoteSdp.media[mid] = currentRemoteSdp.media[mid]\n                            .replace(`a=${direction}`, `a=${desiredDirection}`);\n                    });\n                    currentRemoteSdp.raw = currentRemoteSdp.session + currentRemoteSdp.media.join('');\n                }\n            }\n\n            this._renegotiate(currentRemoteSdp.raw).then(() => {\n                logger.debug(`${this} ${logPrefix} - OK`);\n                finishedCallback();\n            }, error => {\n                logger.error(`${this} ${logPrefix} failed:`, error);\n                finishedCallback(error);\n            });\n        };\n\n        logger.debug(`${this} Queued ${logPrefix} task`);\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * See {@link addTrackToPc} and {@link removeTrackFromPc}.\n     *\n     * @param {boolean} isRemove <tt>true</tt> for \"remove\" operation or <tt>false</tt> for \"add\" operation.\n     * @param {JitsiLocalTrack} track the track that will be added/removed.\n     * @returns {Promise} resolved when the operation is done or rejected with an error.\n     * @private\n     */\n    _addRemoveTrack(isRemove, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isRemove ? 'removeTrack' : 'addTrack';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(`Error:  tried ${operationName} track with no active peer connection`);\n\n                return;\n            }\n            const operationPromise\n                = isRemove\n                    ? tpc.removeTrackFromPc(track)\n                    : tpc.addTrackToPc(track);\n\n            operationPromise\n                .then(shouldRenegotiate => {\n                    if (shouldRenegotiate) {\n                        this._renegotiate().then(finishedCallback);\n                    } else {\n                        finishedCallback();\n                    }\n                },\n                finishedCallback /* will be called with an error */);\n        };\n\n        logger.debug(`${this} Queued ${operationName} task`);\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        if (error instanceof ClearedQueueError) {\n                            // The session might have been terminated before the task was executed, making it obsolete.\n                            logger.debug(`${this} ${operationName} aborted: session terminated`);\n                            resolve();\n\n                            return;\n                        }\n                        logger.error(`${this} ${operationName} failed`);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} ${operationName} done`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     *\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     * @private\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer that can be set as remote description in the\n     * peerconnection.\n     *\n     * @param {jquery xml element} offerIq the incoming offer.\n     * @returns {SDP object} the jingle offer translated to SDP.\n     * @private\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('', this.isP2P);\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this._processSourceMapFromJingle($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Parses the SSRC information from the source-add/source-remove element passed and updates the SSRC owners.\n     *\n     * @param {jquery xml element} sourceElement the source-add/source-remove element from jingle.\n     * @param {boolean} isAdd true if the sources are being added, false if they are to be removed.\n     * @returns {Map<string, Object>} - The map of source name to ssrcs, msid and groups.\n     */\n    _processSourceMapFromJingle(sourceElement, isAdd = true) {\n        /**\n         * Map of source name to ssrcs, mediaType, msid and groups.\n         * @type {Map<string,\n         *  {\n         *      mediaType: string,\n         *      msid: string,\n         *      ssrcList: Array<number>,\n         *      groups: {semantics: string, ssrcs: Array<number>}\n         *  }>}\n         */\n        const sourceDescription = new Map();\n        const sourceElementArray = Array.isArray(sourceElement) ? sourceElement : [ sourceElement ];\n\n        for (const content of sourceElementArray) {\n            const descriptionsWithSources = $(content).find('>description')\n                .filter((_, el) => $(el).find('>source').length);\n\n            for (const description of descriptionsWithSources) {\n                const mediaType = $(description).attr('media');\n\n                if (mediaType === MediaType.AUDIO && this.options.startSilent) {\n\n                    // eslint-disable-next-line no-continue\n                    continue;\n                }\n\n                const sources = $(description).find('>source');\n                const removeSsrcs = [];\n\n                for (const source of sources) {\n                    const ssrc = $(source).attr('ssrc');\n                    const sourceName = $(source).attr('name');\n                    const msid = $(source)\n                        .find('>parameter[name=\"msid\"]')\n                        .attr('value');\n                    let videoType = $(source).attr('videoType');\n\n                    // If the videoType is DESKTOP_HIGH_FPS for remote tracks, we should treat it as DESKTOP.\n                    if (videoType === VideoType.DESKTOP_HIGH_FPS) {\n                        videoType = VideoType.DESKTOP;\n                    }\n\n                    if (sourceDescription.has(sourceName)) {\n                        sourceDescription.get(sourceName).ssrcList?.push(ssrc);\n                    } else {\n                        sourceDescription.set(sourceName, {\n                            groups: [],\n                            mediaType,\n                            msid,\n                            ssrcList: [ ssrc ],\n                            videoType\n                        });\n                    }\n\n                    // Update the source owner and source name.\n                    const owner = $(source)\n                        .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                        .attr('owner');\n\n                    if (owner && isAdd) {\n                        // JVB source-add.\n                        this._signalingLayer.setSSRCOwner(Number(ssrc), getEndpointId(owner), sourceName);\n                    } else if (isAdd) {\n                        // P2P source-add.\n                        this._signalingLayer.setSSRCOwner(Number(ssrc),\n                            Strophe.getResourceFromJid(this.remoteJid), sourceName);\n                    } else {\n                        removeSsrcs.push(Number(ssrc));\n                    }\n                }\n\n                // 'source-remove' from remote peer.\n                removeSsrcs.length && this._signalingLayer.removeSSRCOwners(removeSsrcs);\n                const groups = $(description).find('>ssrc-group');\n\n                if (!groups.length) {\n                    continue; // eslint-disable-line no-continue\n                }\n\n                for (const group of groups) {\n                    const semantics = $(group).attr('semantics');\n                    const groupSsrcs = [];\n\n                    for (const source of $(group).find('>source')) {\n                        groupSsrcs.push($(source).attr('ssrc'));\n                    }\n\n                    for (const [ sourceName, { ssrcList } ] of sourceDescription) {\n                        if (isEqual(ssrcList.slice().sort(), groupSsrcs.slice().sort())) {\n                            sourceDescription.get(sourceName).groups.push({\n                                semantics,\n                                ssrcs: groupSsrcs\n                            });\n                        }\n                    }\n                }\n            }\n        }\n\n        sourceDescription.size && this.peerconnection.updateRemoteSources(sourceDescription, isAdd);\n\n        return sourceDescription;\n    }\n\n    /**\n     * Does a new offer/answer flow using the existing remote description (if not provided) and signals any new sources\n     * to Jicofo or the remote peer.\n     *\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp to use.  If not provided, the remote sdp from the\n     * peerconnection will be used.\n     * @returns {Promise} promise which resolves when the o/a flow is complete with no arguments or rejects with an\n     * error {string}\n     * @private\n     */\n    async _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            throw new Error('Attempted to renegotiate in state closed');\n        }\n\n        const remoteSdp = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            throw new Error(`Cannot renegotiate without remote description, state=${this.state}`);\n        }\n\n        const remoteDescription = {\n            type: 'offer',\n            sdp: remoteSdp\n        };\n\n        const oldLocalSDP = this.peerconnection.localDescription.sdp;\n\n        logger.debug(`${this} Renegotiate: setting remote description`);\n\n        try {\n            await this.peerconnection.setRemoteDescription(remoteDescription);\n            logger.debug(`${this} Renegotiate: creating answer`);\n            const answer = await this.peerconnection.createAnswer(this.mediaConstraints);\n\n            logger.debug(`${this} Renegotiate: setting local description`);\n            await this.peerconnection.setLocalDescription(answer);\n            if (oldLocalSDP) {\n                // Send the source updates after every renegotiation cycle.\n                this.notifyMySSRCUpdate(new SDP(oldLocalSDP), new SDP(this.peerconnection.localDescription.sdp));\n            }\n        } catch (error) {\n            logger.error(`${this} Renegotiate failed:`, error);\n            throw error;\n        }\n    }\n\n    /**\n     * Sends 'content-modify' IQ in order to ask the remote peer to either stop or resume sending video media or to\n     * adjust sender's video constraints.\n     *\n     * @returns {void}\n     * @private\n     */\n    _sendContentModify() {\n        const senders = this._localSendReceiveVideoActive ? 'both' : 'none';\n        const sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: MediaType.VIDEO,\n                    senders\n                });\n\n        if (typeof this._sourceReceiverConstraints !== 'undefined') {\n            this._sourceReceiverConstraints.forEach((maxHeight, sourceName) => {\n                sessionModify\n                    .c('source-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\n                    .attrs({\n                        sourceName,\n                        maxHeight\n                    });\n\n                sessionModify.up();\n                logger.info(`${this} sending content-modify for source-name: ${sourceName}, maxHeight: ${maxHeight}`);\n            });\n        }\n\n        logger.debug(sessionModify.tree());\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     *\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @returns {void}\n     * @private\n     */\n    _sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\n            const ice = SDPUtil.iceparams(localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                logger.error('failed to get ice && jcand');\n\n                return;\n            }\n            ice.xmlns = XEP.ICE_UDP_TRANSPORT;\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this._sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, ICE_CAND_GATHERING_TIMEOUT);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this._sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.debug(`${this} _sendIceCandidate: last candidate`);\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     *\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE candidate instances.\n     * @returns {void}\n     * @private\n     */\n    _sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('_sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.debug(`${this} _sendIceCandidates count: ${candidates?.length}`);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = XEP.ICE_UDP_TRANSPORT;\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.debug('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     *\n     * @param {function()} success callback called when we receive 'RESULT' packet for the 'session-accept'.\n     * @param {function(error)} failure called when we receive an error response or when the request has timed out.\n     * @returns {void}\n     * @private\n     */\n    _sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp, this.isP2P);\n        const accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        if (typeof this.options.channelLastN === 'number' && this.options.channelLastN >= 0) {\n            localSDP.initialLastN = this.options.channelLastN;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder');\n\n        logger.info(`${this} Sending session-accept`);\n        logger.debug(accept.tree());\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be used to generate an offer.\n     * @returns {void}\n     * @private\n     */\n    _sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp, this.isP2P).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.debug(`${this} Session-initiate: `, init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info(`${this} Got RESULT for \"session-initiate\"`);\n            },\n            error => {\n                logger.error(`${this} \"session-initiate\" error`, error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send 'session-accept' in result.\n     *\n     * @param jingleOffer jQuery selector pointing to the jingle element of the offer IQ\n     * @param success callback called when we accept incoming session successfully and receive RESULT packet to\n     * 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept the incoming offer. 'error' argument\n     * can be used to log some details about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of the local tracks that will be added, before\n     * the offer/answer cycle executes. We allow the localTracks to optionally be passed in so that the addition of the\n     * local tracks and the processing of the initial offer can all be done atomically. We want to make sure that any\n     * other operations which originate in the XMPP Jingle messages related with this session to be executed with an\n     * assumption that the initial offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks = []) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this._sendSessionAccept(() => {\n                    // Start processing tasks on the modification queue.\n                    logger.debug(`${this} Resuming the modification queue after session is established!`);\n                    this.modificationQueue.resume();\n\n                    success();\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT, this);\n\n                    // The first video track is added to the peerconnection and signaled as part of the session-accept.\n                    // Add secondary video tracks (that were already added to conference) to the peerconnection here.\n                    // This will happen when someone shares a secondary source to a two people call, the other user\n                    // leaves and joins the call again, a new peerconnection is created for p2p/jvb connection. At this\n                    // point, there are 2 video tracks which need to be signaled to the remote peer.\n                    const videoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\n\n                    videoTracks.length && videoTracks.splice(0, 1);\n                    videoTracks.length && this.addTracks(videoTracks);\n                },\n                error => {\n                    failure(error);\n                    this.room.eventEmitter.emit(XMPPEvents.SESSION_ACCEPT_ERROR, this, error);\n                });\n            },\n            failure,\n            localTracks);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn(`${this} Ignored add ICE candidate when in closed state`);\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(`${this} No ICE candidates to add ?`, elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug(`${this} addIceCandidate ok!`),\n                        err => logger.error(`${this} addIceCandidate failed!`, err));\n            }\n\n            finishedCallback();\n            logger.debug(`${this} ICE candidates task finished`);\n        };\n\n        logger.debug(`${this} Queued add (${iceCandidates.length}) ICE candidates task`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     *\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @returns {Promise} resolved when the operation is done or rejected with an error.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Adds a new track to the peerconnection. This method needs to be called only when a secondary JitsiLocalTrack is\n     * being added to the peerconnection for the first time.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Tracks to be added to the peer connection.\n     * @returns {Promise<void>} that resolves when the track is successfully added to the peerconnection, rejected\n     * otherwise.\n     */\n    addTracks(localTracks = null) {\n        if (!localTracks?.length) {\n            Promise.reject(new Error('No tracks passed'));\n        }\n\n        const replaceTracks = [];\n        const workFunction = finishedCallback => {\n            const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp, this.isP2P);\n            const recvOnlyTransceiver = this.peerconnection.peerconnection.getTransceivers()\n                    .find(t => t.receiver.track.kind === MediaType.VIDEO\n                        && t.direction === MediaDirection.RECVONLY\n                        && t.currentDirection === MediaDirection.RECVONLY);\n\n            // Add transceivers by adding a new mline in the remote description for each track. Do not create a new\n            // m-line if a recv-only transceiver exists in the p2p case. The new track will be attached to the\n            // existing one in that case.\n            for (const track of localTracks) {\n                if (!this.isP2P || !recvOnlyTransceiver) {\n                    remoteSdp.addMlineForNewSource(track.getType());\n                }\n            }\n\n            this._renegotiate(remoteSdp.raw)\n                .then(() => {\n                    // Replace the tracks on the newly generated transceivers.\n                    for (const track of localTracks) {\n                        replaceTracks.push(this.peerconnection.replaceTrack(null, track));\n                    }\n\n                    return Promise.all(replaceTracks);\n                })\n\n                // Trigger a renegotiation here since renegotiations are suppressed at TPC.replaceTrack for screenshare\n                // tracks. This is done here so that presence for screenshare tracks is sent before signaling.\n                .then(() => this._renegotiate())\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued renegotiation after addTrack`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        if (error instanceof ClearedQueueError) {\n                            // The session might have been terminated before the task was executed, making it obsolete.\n                            logger.debug(`${this} renegotiation after addTrack aborted: session terminated`);\n                            resolve();\n\n                            return;\n                        }\n                        logger.error(`${this} renegotiation after addTrack error`, error);\n                        reject(error);\n                    } else {\n                        logger.debug(`${this} renegotiation after addTrack executed - OK`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Adds local track back to the peerconnection associated with this session.\n     *\n     * @param {JitsiLocalTrack} track - the local track to be added back to the peerconnection.\n     * @return {Promise} a promise that will resolve once the local track is added back to this session and\n     * renegotiation succeeds (if its warranted). Will be rejected with a <tt>string</tt> that provides some error\n     * details in case something goes wrong.\n     * @returns {Promise<void>}\n     */\n    addTrackToPc(track) {\n        return this._addRemoveTrack(false /* add */, track)\n            .then(() => {\n                // Configure the video encodings after the track is unmuted. If the user joins the call muted and\n                // unmutes it the first time, all the parameters need to be configured.\n                if (track.isVideoTrack()) {\n                    return this.peerconnection.configureVideoSenderEncodings(track);\n                }\n            });\n    }\n\n    /**\n     * Closes the underlying peerconnection and shuts down the modification queue.\n     *\n     * @returns {void}\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        logger.debug(`${this} Clearing modificationQueue`);\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        logger.debug(`${this} Queued PC close task`);\n        this.modificationQueue.push(finishCallback => {\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n            logger.debug(`${this} PC close task done!`);\n        });\n\n        logger.debug(`${this} Shutdown modificationQueue!`);\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     * @returns {void}\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.testing?.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        pcOptions.codecSettings = options.codecSettings;\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\n        pcOptions.usesCodecSelectionAPI = this.usesCodecSelectionAPI\n            = browser.supportsCodecSelectionAPI()\n            && (options.testing?.enableCodecSelectionAPI ?? true)\n            && !this.isP2P;\n\n        if (options.videoQuality) {\n            const settings = Object.entries(options.videoQuality)\n            .map(entry => {\n                entry[0] = entry[0].toLowerCase();\n\n                return entry;\n            });\n\n            pcOptions.videoQuality = Object.fromEntries(settings);\n        }\n        pcOptions.forceTurnRelay = options.forceTurnRelay;\n        pcOptions.audioQuality = options.audioQuality;\n        pcOptions.disableSimulcast = this.isP2P ? true : options.disableSimulcast;\n\n        if (!this.isP2P) {\n            // Do not send lower spatial layers for low fps screenshare and enable them only for high fps screenshare.\n            pcOptions.capScreenshareBitrate = !(options.desktopSharingFrameRate?.max > SS_DEFAULT_FRAME_RATE);\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this._signalingLayer,\n                    this.pcConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            if (this.isP2P) {\n                this._sendIceCandidate(candidate);\n            }\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n            let isStable = false;\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.info(`(TIME) ICE ${this.peerconnection.iceConnectionState} ${this.isP2P ? 'P2P' : 'JVB'}:\\t`, now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n            case 'completed':\n                // Informs interested parties that the connection has been restored. This includes the case when\n                // media connection to the bridge has been restored after an ICE failure by using session-terminate.\n                if (this.peerconnection.signalingState === 'stable') {\n                    isStable = true;\n                    this.room.eventEmitter.emit(XMPPEvents.CONNECTION_RESTORED, this);\n                }\n\n                // Add a workaround for an issue on chrome in Unified plan when the local endpoint is the offerer.\n                // The 'signalingstatechange' event for 'stable' is handled after the 'iceconnectionstatechange' event\n                // for 'completed' is handled by the client. This prevents the client from firing a\n                // CONNECTION_ESTABLISHED event for the p2p session. As a result, the offerer continues to stay on the\n                // jvb connection while the remote peer switches to the p2p connection breaking the media flow between\n                // the endpoints.\n                // TODO - file a chromium bug and add the information here.\n                if (!this.wasConnected\n                    && (this.wasstable\n                        || isStable\n                        || (this.isInitiator && (browser.isChromiumBased() || browser.isReactNative())))) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n\n\n        /**\n         * The connection state event is fired whenever the aggregate of underlying\n         * transports change their state.\n         */\n        this.peerconnection.onconnectionstatechange = () => {\n            const icestate = this.peerconnection.iceConnectionState;\n\n            logger.info(`(TIME) ${this.isP2P ? 'P2P' : 'JVB'} PC state is now ${this.peerconnection.connectionState} `\n                + `(ICE state ${this.peerconnection.iceConnectionState}):\\t`, window.performance.now());\n\n            switch (this.peerconnection.connectionState) {\n            case 'failed':\n                // Since version 76 Chrome no longer switches ICE connection\n                // state to failed (see\n                // https://bugs.chromium.org/p/chromium/issues/detail?id=982793\n                // for details) we use this workaround to recover from lost connections\n                if (icestate === 'disconnected') {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ICE_FAILED, this);\n                }\n                break;\n            }\n        };\n\n        /**\n         * The negotiationneeded event is fired whenever we shake the media on the\n         * RTCPeerConnection object.\n         */\n        this.peerconnection.onnegotiationneeded = () => {\n            const state = this.peerconnection.signalingState;\n            const remoteDescription = this.peerconnection.remoteDescription;\n\n            if (!this.isP2P\n                && state === 'stable'\n                && remoteDescription\n                && typeof remoteDescription.sdp === 'string') {\n                logger.info(`${this} onnegotiationneeded fired on ${this.peerconnection}`);\n\n                const workFunction = finishedCallback => {\n                    this._renegotiate()\n                        .then(() => this.peerconnection.configureAudioSenderEncodings())\n                        .then(() => finishedCallback(), error => finishedCallback(error));\n                };\n\n                this.modificationQueue.push(\n                    workFunction,\n                    error => {\n                        if (error) {\n                            logger.error(`${this} onnegotiationneeded error`, error);\n                        } else {\n                            logger.debug(`${this} onnegotiationneeded executed - OK`);\n                        }\n                    });\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     *\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.getConnectionState();\n    }\n\n    /**\n     * Returns the preference for max frame height for the remote video sources.\n     *\n     * @returns {Map<string, number>|undefined}\n     */\n    getRemoteSourcesRecvMaxFrameHeight() {\n        if (this.isP2P) {\n            return this.remoteSourceMaxFrameHeights;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together with the offer/answer).\n     * @returns {Promise<void>} that resolves when the offer is sent to the remote peer, rejected otherwise.\n     */\n    async invite(localTracks = []) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        logger.debug(`${this} Executing invite task`);\n\n        const addTracks = [];\n\n        for (const track of localTracks) {\n            addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n        }\n\n        try {\n            await Promise.all(addTracks);\n            const offerSdp = await this.peerconnection.createOffer(this.mediaConstraints);\n\n            await this.peerconnection.setLocalDescription(offerSdp);\n            this.peerconnection.processLocalSdpForTransceiverInfo(localTracks);\n            this._sendSessionInitiate(this.peerconnection.localDescription.sdp);\n\n            logger.debug(`${this} invite executed - OK`);\n        } catch (error) {\n            logger.error(`${this} invite error`, error);\n            throw error;\n        }\n    }\n\n    /**\n     * Enables/disables local video based on 'senders' attribute of the video conent in 'content-modify' IQ sent by the\n     * remote peer. Also, checks if the sourceMaxFrameHeight (as requested by the p2p peer) or the senders attribute of\n     * the video content has changed and modifies the local video resolution accordingly.\n     *\n     * @param {Element} jingleContents - The content of the 'content-modify' IQ sent by the remote peer.\n     * @returns {void}\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders = JingleSessionPC.parseVideoSenders(jingleContents);\n        const sourceMaxFrameHeights = JingleSessionPC.parseSourceMaxFrameHeight(jingleContents);\n\n        if (sourceMaxFrameHeights) {\n            this.remoteSourceMaxFrameHeights = sourceMaxFrameHeights;\n            this.eventEmitter.emit(MediaSessionEvents.REMOTE_SOURCE_CONSTRAINTS_CHANGED, this, sourceMaxFrameHeights);\n        }\n\n        if (newVideoSenders === null) {\n            logger.error(`${this} - failed to parse video \"senders\" attribute in \"content-modify\" action`);\n\n            return;\n        }\n\n        if (!this._assertNotEnded()) {\n            return;\n        }\n\n        const isRemoteVideoActive\n            = newVideoSenders === 'both'\n                || (newVideoSenders === 'initiator' && this.isInitiator)\n                || (newVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteSendReceiveVideoActive) {\n            logger.debug(`${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteSendReceiveVideoActive = isRemoteVideoActive;\n\n            this.peerconnection\n                .setVideoTransferActive(this._localSendReceiveVideoActive && this._remoteSendReceiveVideoActive);\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed to Strophe connection.sendIQ method. An\n     * 'error' structure is created that is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into the error structure.\n     * @param failureCb function(error) called when error response was returned or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`${this} Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                logger.error(`Jingle error: ${JSON.stringify(error)}`);\n            }\n        };\n    }\n\n    /**\n     * Figures out added/removed ssrcs and sends updated IQs to the remote peer or Jicofo.\n     *\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     * @returns {void}\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`${this} Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn(`${this} Not sending SSRC update while the signaling is disconnected`);\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        const getSignaledSourceInfo = sdpDiffer => {\n            const newMedia = sdpDiffer.getNewMedia();\n            let ssrcs = [];\n            let mediaType = null;\n\n            // It is assumed that sources are signaled one at a time.\n            Object.keys(newMedia).forEach(mediaIndex => {\n                const signaledSsrcs = Object.keys(newMedia[mediaIndex].ssrcs);\n\n                mediaType = newMedia[mediaIndex].mediaType;\n                if (signaledSsrcs?.length) {\n                    ssrcs = ssrcs.concat(signaledSsrcs);\n                }\n            });\n\n            return {\n                mediaType,\n                ssrcs\n            };\n        };\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP, this.isP2P);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        sdpDiffer.toJingle(remove);\n\n        // context a common object for one run of ssrc update (source-add and source-remove) so we can match them if we\n        // need to\n        const ctx = {};\n        const removedSsrcInfo = getSignaledSourceInfo(sdpDiffer);\n\n        if (removedSsrcInfo.ssrcs.length) {\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-remove for ${removedSsrcInfo.mediaType}`\n                + ` ssrcs=${removedSsrcInfo.ssrcs}`);\n            this.connection.sendIQ(\n                remove,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE, this, ctx);\n                },\n                this.newJingleErrorHandler(remove, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE_ERROR, this, error, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP, this.isP2P);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        sdpDiffer.toJingle(add);\n        const addedSsrcInfo = getSignaledSourceInfo(sdpDiffer);\n\n        if (addedSsrcInfo.ssrcs.length) {\n            // Log only the SSRCs instead of the full IQ.\n            logger.info(`${this} Sending source-add for ${addedSsrcInfo.mediaType} ssrcs=${addedSsrcInfo.ssrcs}`);\n            this.connection.sendIQ(\n                add,\n                () => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD, this, ctx);\n                },\n                this.newJingleErrorHandler(add, error => {\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD_ERROR, this, error, addedSsrcInfo.mediaType, ctx);\n                }),\n                IQ_TIMEOUT);\n        }\n    }\n\n    /**\n     * Handles the termination of the session.\n     *\n     * @param {string} reasonCondition - The XMPP Jingle reason condition.\n     * @param {string} reasonText - The XMPP Jingle reason text.\n     * @returns {void}\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`${this} Session terminated`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        if (this._removeSenderVideoConstraintsChangeListener) {\n            this._removeSenderVideoConstraintsChangeListener();\n        }\n\n        if (FeatureFlags.isSsrcRewritingSupported() && this.peerconnection) {\n            this.peerconnection.getRemoteTracks().forEach(track => {\n                this.room.eventEmitter.emit(JitsiTrackEvents.TRACK_REMOVED, track);\n            });\n        }\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes. Resends any session updates that were cached while the XMPP connection\n     * was down.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     * @returns {void}\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info(`${this} Sending SSRC update on reconnect`);\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Processes the source map message received from the bridge and creates a new remote track for newly signaled\n     * SSRCs or updates the source-name and owner on the remote track for an existing SSRC.\n     *\n     * @param {Object} message - The source map message.\n     * @param {string} mediaType - The media type, 'audio' or 'video'.\n     * @returns {void}\n     */\n    processSourceMap(message, mediaType) {\n        if (!FeatureFlags.isSsrcRewritingSupported()) {\n            return;\n        }\n\n        if (mediaType === MediaType.AUDIO && this.options.startSilent) {\n\n            return;\n        }\n\n        const newSsrcs = [];\n\n        for (const src of message.mappedSources) {\n            const { owner, source, ssrc } = src;\n            const isNewSsrc = this.peerconnection.addRemoteSsrc(ssrc, source);\n\n            if (isNewSsrc) {\n                newSsrcs.push(src);\n                logger.debug(`New SSRC signaled ${ssrc}: owner=${owner}, source-name=${source}`);\n\n                // Check if there is an old mapping for the given source and clear the owner on the associated track.\n                const oldSsrc = this.peerconnection.remoteSources.get(source);\n\n                if (oldSsrc) {\n                    this._signalingLayer.removeSSRCOwners([ oldSsrc ]);\n                    const track = this.peerconnection.getTrackBySSRC(oldSsrc);\n\n                    if (track) {\n                        this.room.eventEmitter.emit(JitsiTrackEvents.TRACK_OWNER_SET, track);\n                    }\n                }\n            } else {\n                const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n                if (!track || (track.getParticipantId() === owner && track.getSourceName() === source)) {\n                    !track && logger.warn(`Remote track for SSRC=${ssrc} hasn't been created yet,`\n                        + 'not processing the source map');\n                    continue; // eslint-disable-line no-continue\n                }\n                logger.debug(`Existing SSRC re-mapped ${ssrc}: new owner=${owner}, source-name=${source}`);\n\n                this._signalingLayer.setSSRCOwner(ssrc, owner, source);\n                const oldSourceName = track.getSourceName();\n                const sourceInfo = this.peerconnection.getRemoteSourceInfoBySourceName(oldSourceName);\n\n                // Update the SSRC map on the peerconnection.\n                if (sourceInfo) {\n                    this.peerconnection.updateRemoteSources(new Map([ [ oldSourceName, sourceInfo ] ]), false);\n                    this.peerconnection.updateRemoteSources(new Map([ [ source, sourceInfo ] ]), true /* isAdd */);\n                }\n\n                // Update the muted state and the video type on the track since the presence for this track could have\n                // been received before the updated source map is received on the bridge channel.\n                const { muted, videoType } = this._signalingLayer.getPeerMediaInfo(owner, mediaType, source);\n\n                muted && this.peerconnection._sourceMutedChanged(source, muted);\n                this.room.eventEmitter.emit(JitsiTrackEvents.TRACK_OWNER_SET, track, owner, source, videoType);\n            }\n        }\n\n        // Add the new SSRCs to the remote description by generating a source message.\n        if (newSsrcs.length) {\n            let node = $build('content', {\n                xmlns: 'urn:xmpp:jingle:1',\n                name: mediaType\n            }).c('description', {\n                xmlns: XEP.RTP_MEDIA,\n                media: mediaType\n            });\n\n            for (const src of newSsrcs) {\n                const { rtx, ssrc, source } = src;\n                let msid;\n\n                if (mediaType === MediaType.VIDEO) {\n                    const idx = ++this.numRemoteVideoSources;\n\n                    msid = `remote-video-${idx} remote-video-${idx}`;\n\n                    if (rtx !== '-1') {\n                        _addSourceElement(node, src, rtx, msid);\n                        node.c('ssrc-group', {\n                            xmlns: XEP.SOURCE_ATTRIBUTES,\n                            semantics: SSRC_GROUP_SEMANTICS.FID\n                        })\n                            .c('source', {\n                                xmlns: XEP.SOURCE_ATTRIBUTES,\n                                ssrc\n                            })\n                            .up()\n                            .c('source', {\n                                xmlns: XEP.SOURCE_ATTRIBUTES,\n                                ssrc: rtx\n                            })\n                            .up()\n                            .up();\n                    }\n                } else {\n                    const idx = ++this.numRemoteAudioSources;\n\n                    msid = `remote-audio-${idx} remote-audio-${idx}`;\n                }\n                _addSourceElement(node, src, ssrc, msid);\n                this.peerconnection.remoteSources.set(source, ssrc);\n            }\n            node = node.up();\n            this._addOrRemoveRemoteStream(true /* add */, node.node);\n        }\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     *\n     * @param {Array<Element>} contents - An array of content elements from the source-remove message.\n     * @returns {void}\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Handles the deletion of SSRCs associated with a remote user from the remote description when the user leaves.\n     *\n     * @param {string} id Endpoint id of the participant that has left the call.\n     * @returns {void}\n     */\n    removeRemoteStreamsOnLeave(id) {\n        const workFunction = finishCallback => {\n            const removeSsrcInfo = this.peerconnection.getRemoteSourceInfoByParticipant(id);\n\n            if (removeSsrcInfo.size) {\n                logger.debug(`${this} Removing SSRCs for user ${id}, sources=${Array.from(removeSsrcInfo.keys())}`);\n                const newRemoteSdp = new SDP(this.peerconnection.remoteDescription.sdp, this.isP2P);\n\n                newRemoteSdp.updateRemoteSources(removeSsrcInfo, false /* isAdd */);\n                this.peerconnection.updateRemoteSources(removeSsrcInfo, false /* isAdd */);\n\n                this._renegotiate(newRemoteSdp.raw)\n                    .then(() => finishCallback(), error => finishCallback(error));\n            } else {\n                finishCallback();\n            }\n        };\n\n        logger.debug(`${this} Queued removeRemoteStreamsOnLeave task for participant ${id}`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error(`${this} removeRemoteStreamsOnLeave error:`, error);\n                } else {\n                    logger.info(`${this} removeRemoteStreamsOnLeave done!`);\n                }\n            });\n    }\n\n    /**\n     * Removes local track from the peerconnection as part of the mute operation.\n     *\n     * @param {JitsiLocalTrack} track the local track to be removed.\n     * @return {Promise} a promise which will be resolved once the local track is removed from this session or rejected\n     * with a <tt>string</tt> that the describes the error if anything goes wrong.\n     */\n    removeTrackFromPc(track) {\n        return this._addRemoveTrack(true /* remove */, track);\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single offer/answer cycle (if needed) after\n     * both operations are done.\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid <tt>oldTrack</tt> with a null\n     * <tt>newTrack</tt> effectively just removes <tt>oldTrack</tt>.\n     *\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be replaced.\n     * @param {JitsiLocalTrack|null} newTrack the new track to use.\n     * @returns {Promise} which resolves once the replacement is complete with no arguments or rejects with an error.\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            logger.debug(`${this} replaceTrack worker started. oldTrack = ${oldTrack}, newTrack = ${newTrack}`);\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n                .then(shouldRenegotiate => {\n                    let promise = Promise.resolve();\n\n                    logger.debug(`${this} TPC.replaceTrack finished. shouldRenegotiate = ${\n                        shouldRenegotiate}, JingleSessionState = ${this.state}`);\n\n                    if (shouldRenegotiate && (oldTrack || newTrack) && this.state === JingleSessionState.ACTIVE) {\n                        promise = this._renegotiate();\n                    }\n\n                    return promise.then(() => {\n                        // Set the source name of the new track.\n                        if (oldTrack && newTrack && oldTrack.isVideoTrack()) {\n                            newTrack.setSourceName(oldTrack.getSourceName());\n                        }\n                    });\n                })\n                .then(() => finishedCallback(), error => finishedCallback(error));\n        };\n\n        return new Promise((resolve, reject) => {\n            logger.debug(`${this} Queued replaceTrack task. Old track = ${oldTrack}, new track = ${newTrack}`);\n\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        if (error instanceof ClearedQueueError) {\n                            // The session might have been terminated before the task was executed, making it obsolete.\n                            logger.debug('Replace track aborted: session terminated');\n                            resolve();\n\n                            return;\n                        }\n                        logger.error(`${this} Replace track error:`, error);\n                        reject(error);\n                    } else {\n                        logger.info(`${this}  Replace track done!`);\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Sets the answer received from the remote peer as the remote description.\n     *\n     * @param {Element} jingleAnswer - The jingle answer element.\n     * @returns {Promise<void>} that resolves when the answer is set as the remote description, rejected otherwise.\n     */\n    async setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        logger.debug(`${this} Executing setAnswer task`);\n\n        const newRemoteSdp = this._processNewJingleOfferIq(jingleAnswer);\n        const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n        const remoteDescription = {\n            type: 'answer',\n            sdp: newRemoteSdp.raw\n        };\n\n        try {\n            await this.peerconnection.setRemoteDescription(remoteDescription);\n            if (this.state === JingleSessionState.PENDING) {\n                this.state = JingleSessionState.ACTIVE;\n\n                // Start processing tasks on the modification queue.\n                logger.debug(`${this} Resuming the modification queue after session is established!`);\n                this.modificationQueue.resume();\n                const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                this._sendContentModify();\n                this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n            }\n            logger.debug(`${this} setAnswer task done`);\n        } catch (error) {\n            logger.error(`${this} setAnswer task failed: ${error}`);\n            throw error;\n        }\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     *\n     * @param {boolean} active - <tt>true</tt> to enable media transfer or <tt>false</tt> to suspend media transmission.\n     * @returns {Promise}\n     */\n    setMediaTransferActive(active) {\n        const changed = this.peerconnection.audioTransferActive !== active\n            || this.peerconnection.videoTransferActive !== active;\n\n        if (!changed) {\n            return Promise.resolve();\n        }\n\n        return this.peerconnection.setMediaTransferActive(active)\n            .then(() => {\n                this.peerconnection.audioTransferActive = active;\n                this.peerconnection.videoTransferActive = active;\n\n                // Reconfigure the audio and video tracks so that only the correct encodings are active.\n                const promises = [];\n\n                promises.push(this.peerconnection.configureVideoSenderEncodings());\n                promises.push(this.peerconnection.configureAudioSenderEncodings());\n\n                return Promise.allSettled(promises);\n            });\n    }\n\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at converting Strophe Jingle IQ into\n     * remote offer SDP. Once converted, setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     *\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we fail at any point during setRD,\n     * createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of the local tracks that will be added, before\n     * the offer/answer cycle executes (for the local track addition to be an atomic operation together with the\n     * offer/answer).\n     * @returns {void}\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\n        logger.debug(`${this} Executing setOfferAnswerCycle task`);\n\n        const addTracks = [];\n        const audioTracks = localTracks.filter(track => track.getType() === MediaType.AUDIO);\n        const videoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\n        let tracks = localTracks;\n\n        // Add only 1 video track at a time. Adding 2 or more video tracks to the peerconnection at the same time\n        // makes the browser go into a renegotiation loop by firing 'negotiationneeded' event after every\n        // renegotiation.\n        if (videoTracks.length > 1) {\n            tracks = [ ...audioTracks, videoTracks[0] ];\n        }\n        for (const track of tracks) {\n            addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\n        }\n        const newRemoteSdp = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n        const bridgeSession = $(jingleOfferAnswerIq).find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]');\n        const bridgeSessionId = bridgeSession.attr('id');\n\n        if (bridgeSessionId !== this._bridgeSessionId) {\n            this._bridgeSessionId = bridgeSessionId;\n        }\n\n        Promise.all(addTracks)\n            .then(() => this._renegotiate(newRemoteSdp.raw))\n            .then(() => {\n                this.peerconnection.processLocalSdpForTransceiverInfo(tracks);\n                if (this.state === JingleSessionState.PENDING) {\n                    this.state = JingleSessionState.ACTIVE;\n\n                    // #1 Sync up video transfer active/inactive only after the initial O/A cycle. We want to\n                    // adjust the video media direction only in the local SDP and the Jingle contents direction\n                    // included in the initial offer/answer is mapped to the remote SDP. Jingle 'content-modify'\n                    // IQ is processed in a way that it will only modify local SDP when remote peer is no longer\n                    // interested in receiving video content. Changing media direction in the remote SDP will mess\n                    // up our SDP translation chain (simulcast, video mute, RTX etc.)\n                    // #2 Sends the max frame height if it was set, before the session-initiate/accept\n                    if (this.isP2P && (!this._localSendReceiveVideoActive || this._sourceReceiverConstraints)) {\n                        this._sendContentModify();\n                    }\n                }\n\n            })\n            .then(() => {\n                logger.debug(`${this} setOfferAnswerCycle task done`);\n                success();\n            })\n            .catch(error => {\n                logger.error(`${this} setOfferAnswerCycle task failed: ${error}`);\n                failure(error);\n            });\n    }\n\n    /**\n     * Resumes or suspends video media transfer over the p2p peer connection.\n     *\n     * @param {boolean} videoActive <tt>true</tt> to enable video media transfer or <tt>false</tt> to suspend video\n     * media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once the operation is done. It will be rejected with\n     * an error description as a string in case anything goes wrong.\n     */\n    setP2pVideoTransferActive(videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject('Can not modify video transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        if (this._localSendReceiveVideoActive !== videoActive) {\n            this._localSendReceiveVideoActive = videoActive;\n            if (this.isP2P && this.state === JingleSessionState.ACTIVE) {\n                this._sendContentModify();\n            }\n\n            return this.peerconnection\n                .setVideoTransferActive(this._localSendReceiveVideoActive && this._remoteSendReceiveVideoActive);\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\n     * the remote p2p peer.\n     *\n     * @param {Map<string, number>} sourceReceiverConstraints - The receiver constraints per source.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(sourceReceiverConstraints) {\n        logger.info(`${this} setReceiverVideoConstraint - constraints: ${JSON.stringify(sourceReceiverConstraints)}`);\n        this._sourceReceiverConstraints = sourceReceiverConstraints;\n\n        if (this.isP2P) {\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\n            // be synced after offer/answer.\n            if (this.state === JingleSessionState.ACTIVE) {\n                this._sendContentModify();\n            }\n        }\n    }\n\n    /**\n     * Sets the resolution constraint on the local video tracks.\n     *\n     * @param {number} maxFrameHeight - The user preferred max frame height.\n     * @param {string} sourceName - The source name of the track.\n     * @returns {Promise} promise that will be resolved when the operation is\n     * successful and rejected otherwise.\n     */\n    setSenderVideoConstraint(maxFrameHeight, sourceName = null) {\n        if (this._assertNotEnded()) {\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}, sourceName: ${sourceName}`);\n\n            const jitsiLocalTrack = sourceName\n                ? this.rtc.getLocalVideoTracks().find(track => track.getSourceName() === sourceName)\n                : this.rtc.getLocalVideoTrack();\n\n            return this.peerconnection.setSenderVideoConstraints(maxFrameHeight, jitsiLocalTrack);\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Updates the codecs on the peerconnection and initiates a renegotiation (if needed) for the\n     * new codec config to take effect.\n     *\n     * @param {Array<CodecMimeType>} codecList - Preferred codecs for video.\n     * @param {CodecMimeType} screenshareCodec - The preferred screenshare codec.\n     * @returns {void}\n     */\n    setVideoCodecs(codecList, screenshareCodec) {\n        if (this._assertNotEnded()) {\n            const updated = this.peerconnection.setVideoCodecs(codecList, screenshareCodec);\n\n            if (updated) {\n                this.eventEmitter.emit(MediaSessionEvents.VIDEO_CODEC_CHANGED);\n            }\n\n            // Browser throws an error when H.264 is set on the encodings. Therefore, munge the SDP when H.264 needs to\n            // be selected.\n            // TODO: Remove this check when the above issue is fixed.\n            if (this.usesCodecSelectionAPI && codecList[0] !== CodecMimeType.H264) {\n                return;\n            }\n\n            // Skip renegotiation when the selected codec order matches with that of the remote SDP.\n            const currentCodecOrder = this.peerconnection.getConfiguredVideoCodecs();\n\n            if (codecList.every((val, index) => val === currentCodecOrder[index])) {\n                return;\n            }\n\n            this.eventEmitter.emit(MediaSessionEvents.VIDEO_CODEC_CHANGED);\n            Statistics.sendAnalytics(\n                VIDEO_CODEC_CHANGED,\n                {\n                    value: codecList[0],\n                    videoType: VideoType.CAMERA\n                });\n\n            logger.info(`${this} setVideoCodecs: codecList=${codecList}, screenshareCodec=${screenshareCodec}`);\n\n            // Initiate a renegotiate for the codec setting to take effect.\n            const workFunction = finishedCallback => {\n                this._renegotiate()\n                .then(() => this.peerconnection.configureVideoSenderEncodings())\n                .then(\n                    () => {\n                        logger.debug(`${this} setVideoCodecs task is done`);\n\n                        return finishedCallback();\n                    }, error => {\n                        logger.error(`${this} setVideoCodecs task failed: ${error}`);\n\n                        return finishedCallback(error);\n                    });\n            };\n\n            logger.debug(`${this} Queued setVideoCodecs task`);\n\n            // Queue and execute\n            this.modificationQueue.push(workFunction);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            const sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success')\n                    .up();\n\n            if (options && options.reasonDescription) {\n                sessionTerminate\n                    .c('text')\n                    .t(options.reasonDescription)\n                    .up()\n                    .up();\n            } else {\n                sessionTerminate.up();\n            }\n\n            this._bridgeSessionId\n                && sessionTerminate.c(\n                    'bridge-session', {\n                        xmlns: 'http://jitsi.org/protocol/focus',\n                        id: this._bridgeSessionId,\n                        restart: options && options.requestRestart === true\n                    }).up();\n\n            logger.info(`${this} Sending session-terminate`);\n            logger.debug(sessionTerminate.tree());\n\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`${this} Skipped sending session-terminate`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     * Converts to string with minor summary.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[session=${this.isP2P ? 'P2P' : 'JVB'},initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { cloneDeep } from 'lodash-es';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport RandomUtil from '../util/RandomUtil';\n\nimport ConnectionPlugin from './ConnectionPlugin';\nimport { expandSourcesFromJson } from './JingleHelperFunctions';\nimport JingleSessionPC from './JingleSessionPC';\n\nconst logger = getLogger('modules/xmpp/strophe.jingle');\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n * Parses the transport XML element and returns the list of ICE candidates formatted as text.\n *\n * @param {*} transport Transport XML element extracted from the IQ.\n * @returns {Array<string>}\n */\nfunction _parseIceCandidates(transport) {\n    const candidates = $(transport).find('>candidate');\n    const parseCandidates = [];\n\n    // Extract the candidate information from the IQ.\n    candidates.each((_, candidate) => {\n        const attributes = candidate.attributes;\n        const candidateAttrs = [];\n\n        for (let i = 0; i < attributes.length; i++) {\n            const attr = attributes[i];\n\n            candidateAttrs.push(`${attr.name}: ${attr.value}`);\n        }\n        parseCandidates.push(candidateAttrs.join(' '));\n    });\n\n    return parseCandidates;\n}\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn(`invalid session id: ${sid}`);\n                logger.debug(iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        const jsonMessages = $(iq).find('jingle>json-message');\n\n        if (jsonMessages?.length) {\n            let audioVideoSsrcs;\n\n            logger.info(`Found a JSON-encoded element in ${action}, translating to standard Jingle.`);\n            for (let i = 0; i < jsonMessages.length; i++) {\n                // Currently there is always a single json-message in the IQ with the source information.\n                audioVideoSsrcs = expandSourcesFromJson(iq, jsonMessages[i]);\n            }\n\n            if (audioVideoSsrcs?.size) {\n                const logMessage = [];\n\n                for (const endpoint of audioVideoSsrcs.keys()) {\n                    logMessage.push(`${endpoint}:[${audioVideoSsrcs.get(endpoint)}]`);\n                }\n                logger.debug(`Received ${action} from ${fromJid} with sources=${logMessage.join(', ')}`);\n            }\n\n            // TODO: is there a way to remove the json-message elements once we've extracted the information?\n            // removeChild doesn't seem to work.\n        }\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.info('(TIME) received session-initiate:\\t', now);\n\n            isP2P && logger.debug(`Received ${action} from ${fromJid}`);\n            const pcConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\n\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n                    cloneDeep(pcConfig),\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING, sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            const ssrcs = [];\n            const contents = $(iq).find('jingle>content');\n\n            // Extract the SSRCs from the session-accept received from a p2p peer.\n            for (const content of contents) {\n                const ssrc = $(content).find('description').attr('ssrc');\n\n                ssrc && ssrcs.push(ssrc);\n            }\n            logger.debug(`Received ${action} from ${fromJid} with ssrcs=${ssrcs}`);\n            this.eventEmitter.emit(XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            logger.debug(`Received ${action} from ${fromJid}`);\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            const candidates = _parseIceCandidates($(iq).find('jingle>content>transport'));\n\n            logger.debug(`Received ${action} from ${fromJid} for candidates=${candidates.join(', ')}`);\n            this.eventEmitter.emit(XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.info('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            logger.debug(`Received ${action} from ${fromJid} disconnect reason=${reasonText}`);\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED, sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace':\n            logger.error(`Ignoring ${action} from ${fromJid} as it is not supported by the client.`);\n            break;\n        case 'source-add':\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'source-remove':\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        // Or the new implementation https://modules.prosody.im/mod_external_services which will be in prosody 0.12\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.xmpp.options.hosts.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:2' }),\n            v2Res => this.onReceiveStunAndTurnCredentials(v2Res),\n            () => {\n                logger.warn('getting turn credentials with extdisco:2 failed, trying extdisco:1');\n                this.connection.sendIQ(\n                    $iq({ type: 'get',\n                        to: this.xmpp.options.hosts.domain })\n                        .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n                    v1Res => this.onReceiveStunAndTurnCredentials(v1Res),\n                    () => {\n                        logger.warn('getting turn credentials failed');\n                        logger.warn('is mod_turncredentials or similar installed and configured?');\n                    }\n                );\n            });\n    }\n\n    /**\n     * Parses response when querying for services using urn:xmpp:extdisco:1 or urn:xmpp:extdisco:2.\n     * Stores results in jvbIceConfig and p2pIceConfig.\n     * @param res The response iq.\n     * @return {boolean} Whether something was processed from the supplied message.\n     */\n    onReceiveStunAndTurnCredentials(res) {\n        let iceservers = [];\n\n        $(res).find('>services>service').each((idx, el) => {\n            // eslint-disable-next-line no-param-reassign\n            el = $(el);\n            const dict = {};\n            const type = el.attr('type');\n\n            switch (type) {\n            case 'stun':\n                dict.urls = `stun:${el.attr('host')}`;\n                if (el.attr('port')) {\n                    dict.urls += `:${el.attr('port')}`;\n                }\n                iceservers.push(dict);\n                break;\n            case 'turn':\n            case 'turns': {\n                dict.urls = `${type}:`;\n                dict.username = el.attr('username');\n                dict.urls += el.attr('host');\n                const port = el.attr('port');\n\n                if (port) {\n                    dict.urls += `:${port}`;\n                }\n                const transport = el.attr('transport');\n\n                if (transport && transport !== 'udp') {\n                    dict.urls += `?transport=${transport}`;\n                }\n\n                dict.credential = el.attr('password') || dict.credential;\n                iceservers.push(dict);\n                break;\n            }\n            }\n        });\n\n        const options = this.xmpp.options;\n        const { iceServersOverride = [] } = options;\n\n        iceServersOverride.forEach(({ targetType, urls, username, credential }) => {\n            if (![ 'turn', 'turns', 'stun' ].includes(targetType)) {\n                return;\n            }\n\n            const pattern = `${targetType}:`;\n\n            if (typeof urls === 'undefined'\n                && typeof username === 'undefined'\n                && typeof credential === 'undefined') {\n                return;\n            }\n\n            if (urls === null) { // remove this type of ice server\n                iceservers = iceservers.filter(server => !server.urls.startsWith(pattern));\n            }\n\n\n            iceservers.forEach(server => {\n                if (!server.urls.startsWith(pattern)) {\n                    return;\n                }\n\n                server.urls = urls ?? server.urls;\n\n                if (username === null) {\n                    delete server.username;\n                } else {\n                    server.username = username ?? server.username;\n                }\n\n                if (credential === null) {\n                    delete server.credential;\n                } else {\n                    server.credential = credential ?? server.credential;\n                }\n            });\n        });\n\n        // Shuffle ICEServers for loadbalancing\n        for (let i = iceservers.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const temp = iceservers[i];\n\n            iceservers[i] = iceservers[j];\n            iceservers[j] = temp;\n        }\n\n        let filter;\n\n        if (options.useTurnUdp) {\n            filter = s => s.urls.startsWith('turn');\n        } else {\n            // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\n            filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\n        }\n\n        this.jvbIceConfig.iceServers = iceservers.filter(filter);\n        this.p2pIceConfig.iceServers = iceservers;\n\n        return iceservers.length > 0;\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    private log: any;\n\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection: Strophe.Connection): void {\n        super.init(connection);\n        connection.rawInput = this.logIncoming.bind(this);\n        connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza: Element | Strophe.Builder): void {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza: Element | Strophe.Builder): void {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $iq } from 'strophe.js';\nimport type { Connection } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger('modules/xmpp/strophe.rayo');\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    private callResource: string | null = null;\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection: Connection): void {\n        super.init(connection);\n\n        connection.addHandler(\n            this.onRayo.bind(this),\n            RAYO_XMLNS,\n            'iq',\n            'set',\n            null,\n            null\n        );\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq: any): any {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(\n            to: string,\n            from: string,\n            roomName: string,\n            roomPass: string,\n            focusMucJid: string\n    ): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid,\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from,\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName,\n            }).up();\n\n            if (roomPass?.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass,\n                }).up();\n            }\n\n            (this.connection as Connection).sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                }\n            );\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource,\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS,\n            });\n\n            (this.connection as Connection).sendIQ(\n                req,\n                result => {\n                    logger.info('Hangup result ', result);\n                    this.callResource = null;\n                    resolve();\n                },\n                error => {\n                    logger.info('Hangup error ', error);\n                    this.callResource = null;\n                    reject(new Error('Hangup error '));\n                }\n            );\n        });\n    }\n}\n","/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nconst logger = getLogger('modules/xmpp/strophe.util');\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus: number = -1;\n\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr: RegExp = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr: RegExp\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function(): void {\n\n    Strophe.log = function(level: number, msg: any): void {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            logger.error(`Strophe: ${msg}`, msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function(): number {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status: number): string {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","import { safeJsonParse } from '@jitsi/js-utils/json';\nimport { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { unescape } from 'lodash-es';\nimport { $msg, Strophe } from 'strophe.js';\n\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport { XEP } from '../../service/xmpp/XMPPExtensioProtocols';\nimport browser from '../browser';\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport Statistics from '../statistics/statistics';\nimport Listenable from '../util/Listenable';\nimport RandomUtil from '../util/RandomUtil';\n\nimport Caps, { parseDiscoInfo } from './Caps';\nimport XmppConnection from './XmppConnection';\nimport Moderator from './moderator';\nimport './strophe.disco';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheLogger from './strophe.logger';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheUtil from './strophe.util';\n\nconst logger = getLogger('modules/xmpp/xmpp');\n\n/**\n* Regex to extract exact error message on jwt error.\n*/\nconst FAILURE_REGEX = /<failure.*><not-allowed\\/><text>(.*)<\\/text><\\/failure>/gi;\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.shard - The shard where XMPP connection initially landed.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @param {number} [options.websocketKeepAliveUrl] - See {@link XmppConnection} constructor.\n * @param {Object} [options.xmppPing] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({\n    enableWebsocketResume,\n    serviceUrl = '/http-bind',\n    shard,\n    token,\n    websocketKeepAlive,\n    websocketKeepAliveUrl,\n    xmppPing }) {\n\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive,\n        websocketKeepAliveUrl,\n        xmppPing,\n        shard\n    });\n}\n\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:meet-jit-si-turnrelay.jitsi.net:443' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n * The feature used by jigasi participants.\n * @type {string}\n */\nexport const FEATURE_JIGASI = 'http://jitsi.org/protocol/jigasi';\n\n/**\n * The feature used by jibri participants.\n * @type {string}\n */\nexport const FEATURE_JIBRI = 'http://jitsi.org/protocol/jibri';\n\n/**\n * The feature used by jigasi transcriber participants.\n * @type {string}\n */\nexport const FEATURE_TRANSCRIBER = 'http://jitsi.org/protocol/transcriber';\n\n/**\n * The feature used by the lib to mark support for e2ee. We use the feature by putting it in the presence\n * to avoid additional signaling (disco-info).\n * @type {string}\n */\nexport const FEATURE_E2EE = 'https://jitsi.org/meet/e2ee';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {number} [options.websocketKeepAliveUrl] - The websocket keep alive url. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Object} [options.xmppPing] - The xmpp ping settings.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n\n        if (options.bosh && !options.serviceUrl) {\n            throw new Error('The \"bosh\" option is no longer supported, please use \"serviceUrl\" instead');\n        }\n\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        if (!this.options.deploymentInfo) {\n            this.options.deploymentInfo = {};\n        }\n\n        // Cache of components used for certain features.\n        this._components = [];\n\n        // We want to track messages that are received before we process the disco-info components\n        // re-order of receiving we may drop some messages\n        this._preComponentsMsgs = [];\n\n        initStropheNativePlugins();\n\n        const xmppPing = options.xmppPing || {};\n\n        // let's ping the main domain (in case a guest one is used for the connection)\n        xmppPing.domain = options.hosts.domain;\n\n        this.connection = createConnection({\n            enableWebsocketResume: options.enableWebsocketResume,\n            serviceUrl: options.serviceUrl,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive,\n            websocketKeepAliveUrl: options.websocketKeepAliveUrl,\n            xmppPing,\n            shard: options.deploymentInfo.shard\n        });\n\n        this.moderator = new Moderator(this);\n\n        // forwards the shard changed event\n        this.connection.on(XmppConnection.Events.CONN_SHARD_CHANGED, () => {\n            /* eslint-disable camelcase */\n            const details = {\n                shard_changed: true,\n                suspend_time: this.connection.ping.getPingSuspendTime(),\n                time_since_last_success: this.connection.getTimeSinceLastSuccess()\n            };\n            /* eslint-enable camelcase */\n\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.OTHER_ERROR,\n                undefined,\n                undefined,\n                details);\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, /* clientNode */ 'https://jitsi.org/jitsi-meet');\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        $(window).on(`${this.options.disableBeforeUnloadHandlers ? '' : 'beforeunload '}unload`, ev => {\n            this.disconnect(ev).catch(() => {\n                // ignore errors in order to not brake the unload.\n            });\n        });\n\n        this.connection.addHandler(this._onPrivateMessage.bind(this), null, 'message', null, null);\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature(XEP.JINGLE);\n        this.caps.addFeature(XEP.RTP_MEDIA);\n        this.caps.addFeature(XEP.ICE_UDP_TRANSPORT);\n        this.caps.addFeature(XEP.DTLS_SRTP);\n        this.caps.addFeature(XEP.SCTP_DATA_CHANNEL);\n        this.caps.addFeature(XEP.RTP_AUDIO);\n        this.caps.addFeature(XEP.RTP_VIDEO);\n        this.caps.addFeature('http://jitsi.org/json-encoded-sources');\n\n        if (!(this.options.disableRtx || !browser.supportsRTX())) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\n            this.caps.addFeature('http://jitsi.org/opus-red');\n        }\n\n        if (typeof this.options.enableRemb === 'undefined' || this.options.enableRemb) {\n            this.caps.addFeature('http://jitsi.org/remb');\n        }\n\n        // Disable TCC on Firefox 114 and older versions because of a known issue where BWE is halved on every\n        // renegotiation.\n        if (!(browser.isFirefox() && browser.isVersionLessThan(115))\n            && (typeof this.options.enableTcc === 'undefined' || this.options.enableTcc)) {\n            this.caps.addFeature('http://jitsi.org/tcc');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n\n        if (E2EEncryption.isSupported(this.options)) {\n            this.caps.addFeature(FEATURE_E2EE, false, true);\n        }\n\n        // Advertise source-name signaling when the endpoint supports it.\n        logger.debug('Source-name signaling is enabled');\n        this.caps.addFeature('http://jitsi.org/source-name');\n\n        logger.debug('Receiving multiple video streams is enabled');\n        this.caps.addFeature('http://jitsi.org/receive-multiple-video-streams');\n\n        // Advertise support for ssrc-rewriting.\n        if (FeatureFlags.isSsrcRewritingSupported()) {\n            this.caps.addFeature('http://jitsi.org/ssrc-rewriting-1');\n        }\n\n        // Use \"-1\" as a version that we can bump later. This should match\n        // the version added in moderator.js, this one here is mostly defined\n        // for keeping stats, since it is not made available to jocofo at\n        // the time of the initial conference-request.\n        this.caps.addFeature('http://jitsi.org/visitors-1');\n\n        // Advertise support for startMuted policy through room metadata.\n        this.caps.addFeature('http://jitsi.org/start-muted-room-metadata');\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.info(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        this._maybeSendDeploymentInfoStat();\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n            // once connected or attached we no longer need this handle, drop it if it exist\n            if (this._sysMessageHandler) {\n                this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n                this._sysMessageHandler = null;\n            }\n\n            this.sendDiscoInfo && this.connection.jingle.getStunAndTurnCredentials();\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\n            this._resetState();\n\n            // make sure we will send the info after the features request succeeds or fails\n            this.sendDeploymentInfo = false;\n            this.sendDiscoInfo && this.caps.getFeaturesAndIdentities(this.options.hosts.domain)\n                .then(({ features, identities }) => {\n                    if (!features.has(Strophe.NS.PING)) {\n                        logger.error(`Ping NOT supported by ${\n                            this.options.hosts.domain} - please enable ping in your XMPP server config`);\n                    }\n\n                    this._processDiscoInfoIdentities(\n                        identities, undefined /* when querying we will query for features */);\n                })\n                .catch(error => {\n                    logger.error('Feature discovery error', error);\n\n                    this._maybeSendDeploymentInfoStat(true);\n                });\n\n            // make sure we don't query again\n            this.sendDiscoInfo = false;\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\n            const errMsg = msg || this.lastErrorMsg;\n\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            const lastFailedRawMessage = this.getConnection().getLastFailedMessage();\n\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg || this._parseConnectionFailedMessage(lastFailedRawMessage),\n                credentials);\n        }\n    }\n\n    /**\n     * Process received identities.\n     * @param {Set<String>} identities The identities to process.\n     * @param {Set<String>} features The features to process, optional. If missing lobby component will be queried\n     * for more features.\n     * @private\n     */\n    _processDiscoInfoIdentities(identities, features) {\n        // check for speakerstats\n        identities.forEach(identity => {\n            if (identity.type === 'av_moderation') {\n                this.avModerationComponentAddress = identity.name;\n                this._components.push(this.avModerationComponentAddress);\n            }\n\n            if (identity.type === 'end_conference') {\n                this.endConferenceComponentAddress = identity.name;\n                this._components.push(this.endConferenceComponentAddress);\n            }\n\n            if (identity.type === 'speakerstats') {\n                this.speakerStatsComponentAddress = identity.name;\n                this._components.push(this.speakerStatsComponentAddress);\n            }\n\n            if (identity.type === 'lobbyrooms') {\n                this.lobbySupported = true;\n                const processLobbyFeatures = f => {\n                    f.forEach(fr => {\n                        if (fr.endsWith('#displayname_required')) {\n                            this.eventEmitter.emit(JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\n                        }\n                    });\n                };\n\n                if (features) {\n                    processLobbyFeatures(features);\n                } else {\n                    identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\n                        .then(({ features: f }) => processLobbyFeatures(f))\n                        .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\n                }\n            }\n\n            if (identity.type === 'shard') {\n                this.options.deploymentInfo.shard = this.connection.shard = identity.name;\n            }\n\n            if (identity.type === 'region') {\n                this.options.deploymentInfo.region = this.connection.region = identity.name;\n            }\n\n            if (identity.type === 'release') {\n                this.options.deploymentInfo.backendRelease = identity.name;\n            }\n\n            if (identity.type === 'breakout_rooms') {\n                this.breakoutRoomsComponentAddress = identity.name;\n                this._components.push(this.breakoutRoomsComponentAddress);\n\n                const processBreakoutRoomsFeatures = f => {\n                    this.breakoutRoomsFeatures = {};\n\n                    f.forEach(fr => {\n                        if (fr.endsWith('#rename')) {\n                            this.breakoutRoomsFeatures.rename = true;\n                        }\n                    });\n                };\n\n                if (features) {\n                    processBreakoutRoomsFeatures(features);\n                } else {\n                    identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\n                        .then(({ features: f }) => processBreakoutRoomsFeatures(f))\n                        .catch(e => logger.warn('Error getting features for breakout rooms.', e && e.message));\n                }\n            }\n\n            if (identity.type === 'room_metadata') {\n                this.roomMetadataComponentAddress = identity.name;\n                this._components.push(this.roomMetadataComponentAddress);\n            }\n\n            if (identity.type === 'visitors') {\n                this._components.push(identity.name);\n            }\n        });\n\n        this._maybeSendDeploymentInfoStat(true);\n\n        if (this._components.length > 0) {\n            this._preComponentsMsgs.forEach(this._onPrivateMessage.bind(this));\n        }\n        this._preComponentsMsgs = [];\n    }\n\n    /**\n    * Parses a raw failure xmpp xml message received on auth failed.\n    *\n    * @param {string} msg - The raw failure message from xmpp.\n    * @returns {string|null} - The parsed message from the raw xmpp message.\n    */\n    _parseConnectionFailedMessage(msg) {\n        if (!msg) {\n            return null;\n        }\n\n        FAILURE_REGEX.lastIndex = 0;\n        const matches = FAILURE_REGEX.exec(msg);\n\n        return matches ? matches[1] : null;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n        this.sendDeploymentInfo = true;\n\n        if (this.connection._stropheConn && this.connection._stropheConn._addSysHandler) {\n            this._sysMessageHandler = this.connection._stropheConn._addSysHandler(\n                this._onSystemMessage.bind(this),\n                null,\n                'message'\n            );\n        } else {\n            logger.warn('Cannot attach strophe system handler, jiconop cannot operate');\n        }\n\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Receives system messages during the connect/login process and checks for services or\n     * @param msg The received message.\n     * @returns {void}\n     * @private\n     */\n    _onSystemMessage(msg) {\n        // proceed only if the message has any of the expected information\n        if ($(msg).find('>services').length === 0 && $(msg).find('>query').length === 0) {\n            return;\n        }\n\n        this.sendDiscoInfo = false;\n\n        const foundIceServers = this.connection.jingle.onReceiveStunAndTurnCredentials(msg);\n\n        const { features, identities } = parseDiscoInfo(msg);\n\n        this._processDiscoInfoIdentities(identities, features);\n\n        if (foundIceServers || identities.size > 0 || features.size > 0) {\n            this.connection._stropheConn.deleteHandler(this._sysMessageHandler);\n            this._sysMessageHandler = null;\n        }\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        this._resetState();\n\n        // we want to send this only on the initial connect\n        this.sendDiscoInfo = true;\n\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.info('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     * Resets any state/flag before starting a new connection.\n     * @private\n     */\n    _resetState() {\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.disconnectInProgress = undefined;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        this._startConnecting = true;\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        // Support passing the domain in a String object as part of the room name.\n        const domain = roomName.domain || options.customDomain;\n\n        // There are cases (when using subdomain) where muc can hold an uppercase part\n        let roomjid = `${this.getRoomJid(roomName, domain)}/`;\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the room JID based on the passed room name and domain.\n     *\n     * @param {string} roomName - The room name.\n     * @param {string} domain - The domain.\n     * @returns {string} - The room JID.\n     */\n    getRoomJid(roomName, domain) {\n        return `${roomName}@${domain ? domain : this.options.hosts.muc.toLowerCase()}`;\n    }\n\n    /**\n     * Check if a room with the passed JID is already created.\n     *\n     * @param {string} roomJid - The JID of the room.\n     * @returns {boolean}\n     */\n    isRoomCreated(roomName, domain) {\n        return this.connection.emuc.isRoomCreated(this.getRoomJid(roomName, domain));\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            this.connection.ping.ping(this.connection.pingDomain, resolve, reject, timeout);\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress) {\n            return this.disconnectInProgress;\n        } else if (!this.connection || !this._startConnecting) {\n            // we have created a connection, but never called connect we still want to resolve on calling disconnect\n            // this is visitors use case when using http to send conference request.\n            return Promise.resolve();\n        }\n\n        this.disconnectInProgress = new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                    resolve();\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n        });\n\n        this._cleanupXmppConnection(ev);\n\n        return this.disconnectInProgress;\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        this._startConnecting = false;\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     * @param {boolean} silence - Whether the dominant speaker is silent or not.\n     */\n    sendDominantSpeakerEvent(roomJid, silence) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid,\n            silence })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Sends face landmarks to speaker stats component.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     * @param {Object} payload - The expression to be sent to the speaker stats.\n     */\n    sendFaceLandmarksEvent(roomJid, payload) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('faceLandmarks', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid,\n            faceExpression: payload.faceExpression,\n            timestamp: payload.timestamp,\n            duration: payload.duration\n        }).up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        // ignore empty strings, like message errors\n        if (!jsonString) {\n            return false;\n        }\n\n        try {\n            // Note: we use `unescape` to also convert HTML entities to UTF-8 since\n            // Jigasi seems to encode them like that in some circumstances.\n            const json = safeJsonParse(unescape(jsonString));\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            logger.error(`Error parsing json ${jsonString}`, e);\n\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!this._components.includes(from)) {\n            this._preComponentsMsgs.push(msg);\n\n            return true;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (!parsedJson) {\n            return true;\n        }\n\n        if (parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats' && parsedJson.users) {\n            this.eventEmitter.emit(XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'av_moderation') {\n            this.eventEmitter.emit(XMPPEvents.AV_MODERATION_RECEIVED, parsedJson);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'breakout_rooms') {\n            this.eventEmitter.emit(XMPPEvents.BREAKOUT_ROOMS_EVENT, parsedJson);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'room_metadata') {\n            this.eventEmitter.emit(XMPPEvents.ROOM_METADATA_EVENT, parsedJson);\n        } else if (parsedJson[JITSI_MEET_MUC_TYPE] === 'visitors') {\n            this.eventEmitter.emit(XMPPEvents.VISITORS_MESSAGE, parsedJson);\n        }\n\n        return true;\n    }\n\n    /**\n     * Sends deployment info to stats if not sent already.\n     * We want to try sending it on failure to connect\n     * or when we get a sys message(from jiconop2)\n     * or after success or failure of disco-info\n     * @param force Whether to force sending without checking anything.\n     * @private\n     */\n    _maybeSendDeploymentInfoStat(force) {\n        const acceptedStatuses = [\n            Strophe.Status.ERROR,\n            Strophe.Status.CONNFAIL,\n            Strophe.Status.AUTHFAIL,\n            Strophe.Status.DISCONNECTED,\n            Strophe.Status.CONNTIMEOUT\n        ];\n\n        if (!force && !(acceptedStatuses.includes(this.connection.status) && this.sendDeploymentInfo)) {\n            return;\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = this.options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            // Let's push to analytics any updates that may have come from the backend\n            Statistics.analytics.addPermanentProperties({ ...logObject });\n\n            logObject.id = 'deployment_info';\n            const entry = JSON.stringify(logObject);\n\n            logger.info(entry);\n        }\n\n        this.sendDeploymentInfo = false;\n\n        const { region, shard } = aprops;\n\n        if (region || shard) {\n            // avoids sending empty values\n            this.eventEmitter.emit(JitsiConnectionEvents.PROPERTIES_UPDATED, JSON.parse(JSON.stringify({\n                region,\n                shard\n            })));\n        }\n\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\nconst logger = getLogger('authenticateAndUpgradeRole');\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {Function} [options.onCreateResource]\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.xmpp.moderator.authenticate(room.roomjid)\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // we execute this logic in JitsiConference where we bind the current conference as `this`\n                        // At this point we should have the new session ID\n                        // stored in the settings. Send a new conference IQ.\n                        this.room.xmpp.moderator.sendConferenceRequest(this.room.roomjid)\n                            .catch(e => logger.trace('sendConferenceRequest rejected', e))\n                            .finally(() => {\n                                // we need to reset it because of breakout rooms which will\n                                // reuse connection but will invite jicofo\n                                this.room.xmpp.moderator.conferenceRequestSent = false;\n\n                                resolve();\n                            });\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","import { safeJsonParse } from '@jitsi/js-utils/json';\nimport { getLogger } from '@jitsi/logger';\nimport { EventEmitter } from 'events';\n\nimport JitsiConference from '../../JitsiConference';\nimport { BridgeVideoType } from '../../service/RTC/BridgeVideoType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { SourceName } from '../../service/RTC/SignalingLayer';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport ReceiverVideoConstraints from '../qualitycontrol/ReceiveVideoController';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger('modules/RTC/BridgeChannel');\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n\n    private _channel: RTCDataChannel | WebSocket | null = null;\n    private _conference: JitsiConference;\n    private _connected: boolean | undefined = undefined;\n    private _eventEmitter: EventEmitter;\n    private _mode: 'datachannel' | 'websocket' | null = null;\n    private _areRetriesEnabled: boolean = false;\n    private _closedFromClient: boolean = false;\n    private _wsUrl?: string;\n    private _retryTimeout?: ReturnType<typeof setTimeout>;\n\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\n     * @param {JitsiConference} conference the conference instance.\n     */\n    constructor(\n            peerconnection: RTCPeerConnection | null,\n            wsUrl: string | null,\n            emitter: EventEmitter,\n            conference: JitsiConference\n    ) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError('At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError('Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // The conference that uses this bridge channel.\n        this._conference = conference;\n\n        // Whether the channel is connected or not. It will start as undefined\n        // for the first connection attempt. Then transition to either true or false.\n        this._connected = undefined;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket(): void {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries(): void {\n        let timeoutS = 1;\n\n        const reload = (): void => {\n            const isConnecting = this._channel && (this._channel.readyState === 'connecting'\n                    || this._channel.readyState === WebSocket.CONNECTING);\n\n            // Should not spawn new websockets while one is already trying to connect.\n            if (isConnecting) {\n                // Timeout is still required as there is flag `_areRetriesEnabled` that\n                // blocks new retrying cycles until any channel opens in current cycle.\n                this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n\n                return;\n            }\n\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket();\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries(): void {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent: CloseEvent): void {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code.toString(), reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode(): string {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close(): void {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen(): boolean {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload: Record<string, unknown>): void {\n        this._send({\n            colibriClass: 'EndpointStats',\n            ...payload\n        });\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to: string, payload: Record<string, unknown>): void {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value: number): void {\n        logger.debug(`Sending lastN=${value}.`);\n\n        this._send({\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        });\n    }\n\n    /**\n     * Sends a 'ReceiverVideoConstraints' message via the bridge channel.\n     *\n     * @param {ReceiverVideoConstraints} constraints video constraints.\n     */\n    sendReceiverVideoConstraintsMessage(constraints: ReceiverVideoConstraints): void {\n        logger.info(`Sending ReceiverVideoConstraints with ${JSON.stringify(constraints)}`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraints',\n            ...constraints\n        });\n    }\n\n    /**\n     * Sends a 'SourceVideoTypeMessage' message via the bridge channel.\n     *\n     * @param {BridgeVideoType} videoType - the video type.\n     * @param {SourceName} sourceName - the source name of the video track.\n     * @returns {void}\n     */\n    sendSourceVideoTypeMessage(sourceName: SourceName, videoType: BridgeVideoType): void {\n        logger.info(`Sending SourceVideoTypeMessage with video type ${sourceName}: ${videoType}`);\n        this._send({\n            colibriClass: 'SourceVideoTypeMessage',\n            sourceName,\n            videoType\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel: RTCDataChannel | WebSocket): void {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = (): void | null => {\n            logger.info(`${this._mode} channel opened`);\n\n            this._connected = true;\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = (event: ErrorEvent): void => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }: { data: string; }): void => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = safeJsonParse(data);\n            } catch (error) {\n                logger.error('Failed to parse channel message as JSON: ', data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'ConnectionStats': {\n                const { estimatedDownlinkBandwidth } = obj;\n\n                logger.debug(`Connection stats: bwe=${estimatedDownlinkBandwidth} bps`);\n                emitter.emit(RTCEvents.BRIDGE_BWE_STATS_RECEIVED, estimatedDownlinkBandwidth);\n                break;\n            }\n\n            case 'DominantSpeakerEndpointChangeEvent': {\n                const { dominantSpeakerEndpoint, previousSpeakers = [], silence } = obj;\n\n                logger.debug(`Dominant speaker: ${dominantSpeakerEndpoint}, previous speakers: ${previousSpeakers}`);\n                emitter.emit(RTCEvents.DOMINANT_SPEAKER_CHANGED, dominantSpeakerEndpoint, previousSpeakers, silence);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(`Endpoint connection status changed: ${endpoint} active=${isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED, endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from, obj.msgPayload);\n\n                break;\n            }\n            case 'EndpointStats': {\n                emitter.emit(RTCEvents.ENDPOINT_STATS_RECEIVED, obj.from, obj);\n\n                break;\n            }\n            case 'ForwardedSources': {\n                const forwardedSources = obj.forwardedSources;\n\n                logger.info(`New forwarded sources: ${forwardedSources}`);\n                emitter.emit(RTCEvents.FORWARDED_SOURCES_CHANGED, forwardedSources);\n\n                break;\n            }\n            case 'SenderSourceConstraints': {\n                if (typeof obj.sourceName === 'string' && typeof obj.maxHeight === 'number') {\n                    logger.info(`SenderSourceConstraints: ${obj.sourceName} - ${obj.maxHeight}`);\n                    emitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, obj);\n                } else {\n                    logger.error(`Invalid SenderSourceConstraints: ${obj.sourceName} - ${obj.maxHeight}`);\n                }\n                break;\n            }\n            case 'ServerHello': {\n                logger.info(`Received ServerHello, version=${obj.version}.`);\n                break;\n            }\n            case 'VideoSourcesMap': {\n                logger.info(`Received VideoSourcesMap: ${JSON.stringify(obj.mappedSources)}`);\n                emitter.emit(RTCEvents.VIDEO_SSRCS_REMAPPED, obj);\n                break;\n            }\n            case 'AudioSourcesMap': {\n                logger.info(`Received AudioSourcesMap: ${JSON.stringify(obj.mappedSources)}`);\n                emitter.emit(RTCEvents.AUDIO_SSRCS_REMAPPED, obj);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = (event: CloseEvent): void => {\n            logger.debug(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (channel !== this._channel) {\n                logger.debug('Skip close handler, channel instance is not equal to stored one');\n\n                return;\n            }\n\n            // When the JVB closes the connection gracefully due to the participant being alone in the meeting it uses\n            // code 1001. However, the same code is also used by Cloudflare when it terminates the ws. Therefore, check\n            // for the number of remote participants in the call and abort retries only when the endpoint is the only\n            // endpoint in the call.\n            const isGracefulClose = this._closedFromClient\n                || (event.code === 1001 && this._conference.getParticipantCount() === 1);\n\n            if (!isGracefulClose) {\n                const { code, reason } = event;\n\n                logger.error(`Channel closed: ${code} ${reason}`);\n\n                if (this._mode === 'websocket') {\n                    this._retryWebSocketConnection(event);\n\n                    // We only want to send this event the first time the failure happens.\n                    if (this._connected !== false) {\n                        emitter.emit(RTCEvents.DATA_CHANNEL_CLOSED, {\n                            code,\n                            reason\n                        });\n                    }\n                }\n            }\n\n            this._connected = false;\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject: Record<string, unknown>): void {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nexport enum CameraFacingMode {\n\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT = 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER = 'user'\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        if (cb.handleEvent) {\n          cb.handleEvent(modifiedEvent);\n        } else {\n          cb(modifiedEvent);\n        }\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    if (!this._eventMap[eventNameToWrap]) {\n      this._eventMap[eventNameToWrap] = new Map();\n    }\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[eventNameToWrap]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\n    this._eventMap[eventNameToWrap].delete(cb);\n    if (this._eventMap[eventNameToWrap].size === 0) {\n      delete this._eventMap[eventNameToWrap];\n    }\n    if (Object.keys(this._eventMap).length === 0) {\n      delete this._eventMap;\n    }\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  const {navigator} = window;\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n}\n\n// Attempt to fix ONN in plan-b mode.\nexport function fixNegotiationNeeded(window, browserDetails) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (browserDetails.version < 72 || (pc.getConfiguration &&\n        pc.getConfiguration().sdpSemantics === 'plan-b')) {\n      if (pc.signalingState !== 'stable') {\n        return;\n      }\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window, browserDetails) {\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window, browserDetails) {\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params) ||\n              // Avoid being fooled by patched getParameters() below.\n              (params.encodings.length === 1 &&\n               Object.keys(params.encodings[0]).length === 0)) {\n            params.encodings = initParameters.sendEncodings;\n            sender.sendEncodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(sender.setParameters(params)\n              .then(() => {\n                delete sender.sendEncodings;\n              }).catch(() => {\n                delete sender.sendEncodings;\n              })\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimGetParameters(window) {\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\n    return;\n  }\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\n  if (origGetParameters) {\n    window.RTCRtpSender.prototype.getParameters =\n      function getParameters() {\n        const params = origGetParameters.apply(this, arguments);\n        if (!('encodings' in params)) {\n          params.encodings = [].concat(this.sendEncodings || [{}]);\n        }\n        return params;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track, ...streams) {\n        if (streams) {\n          streams.forEach((stream) => {\n            if (!this._localStreams) {\n              this._localStreams = [stream];\n            } else if (!this._localStreams.includes(stream)) {\n              this._localStreams.push(stream);\n            }\n          });\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in OrigPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio', {direction: 'recvonly'});\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video', {direction: 'recvonly'});\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n\nexport function shimAudioContext(window) {\n  if (typeof window !== 'object' || window.AudioContext) {\n    return;\n  }\n  window.AudioContext = window.webkitAudioContext;\n}\n\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window, browserDetails) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeExtmapAllowMixed(window, browserDetails) {\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  if (browserDetails.browser === 'safari' && browserDetails.version >= 605) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      const sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\n      if (window.RTCSessionDescription &&\n          desc instanceof window.RTCSessionDescription) {\n        arguments[0] = new window.RTCSessionDescription({\n          type: desc.type,\n          sdp,\n        });\n      } else {\n        desc.sdp = sdp;\n      }\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n\nexport function shimAddIceCandidateNullOrEmpty(window, browserDetails) {\n  // Support for addIceCandidate(null or undefined)\n  // as well as addIceCandidate({candidate: \"\", ...})\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n  // Note: must be called before other polyfills which change the signature.\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      // Native support for ignoring exists for Chrome M77+.\n      // Safari ignores as well, exact version unknown but works in the same\n      // version that also ignores addIceCandidate(null).\n      if (((browserDetails.browser === 'chrome' && browserDetails.version < 78)\n           || (browserDetails.browser === 'firefox'\n               && browserDetails.version < 68)\n           || (browserDetails.browser === 'safari'))\n          && arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n\n// Note: Make sure to call this ahead of APIs that modify\n// setLocalDescription.length\nexport function shimParameterlessSetLocalDescription(window, browserDetails) {\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\n    return;\n  }\n  const nativeSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  if (!nativeSetLocalDescription || nativeSetLocalDescription.length === 0) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      let desc = arguments[0] || {};\n      if (typeof desc !== 'object' || (desc.type && desc.sdp)) {\n        return nativeSetLocalDescription.apply(this, arguments);\n      }\n      // The remaining steps should technically happen when SLD comes off the\n      // RTCPeerConnection's operations chain (not ahead of going on it), but\n      // this is too difficult to shim. Instead, this shim only covers the\n      // common case where the operations chain is empty. This is imperfect, but\n      // should cover many cases. Rationale: Even if we can't reduce the glare\n      // window to zero on imperfect implementations, there's value in tapping\n      // into the perfect negotiation pattern that several browsers support.\n      desc = {type: desc.type, sdp: desc.sdp};\n      if (!desc.type) {\n        switch (this.signalingState) {\n          case 'stable':\n          case 'have-local-offer':\n          case 'have-remote-pranswer':\n            desc.type = 'offer';\n            break;\n          default:\n            desc.type = 'answer';\n            break;\n        }\n      }\n      if (desc.sdp || (desc.type !== 'offer' && desc.type !== 'answer')) {\n        return nativeSetLocalDescription.apply(this, [desc]);\n      }\n      const func = desc.type === 'offer' ? this.createOffer : this.createAnswer;\n      return func.apply(this)\n        .then(d => nativeSetLocalDescription.apply(this, [d]));\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\nimport * as sdp from 'sdp';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings,\n    // Expose sdp as a convenience. For production apps include directly.\n    sdp,\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      if (browserDetails.version === null) {\n        logging('Chrome shim can not determine version, not shimming.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);\n\n      chromeShim.shimGetUserMedia(window, browserDetails);\n      chromeShim.shimMediaStream(window, browserDetails);\n      chromeShim.shimPeerConnection(window, browserDetails);\n      chromeShim.shimOnTrack(window, browserDetails);\n      chromeShim.shimAddTrackRemoveTrack(window, browserDetails);\n      chromeShim.shimGetSendersWithDtmf(window, browserDetails);\n      chromeShim.shimGetStats(window, browserDetails);\n      chromeShim.shimSenderReceiverGetStats(window, browserDetails);\n      chromeShim.fixNegotiationNeeded(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      // Must be called before shimPeerConnection.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);\n\n      firefoxShim.shimGetUserMedia(window, browserDetails);\n      firefoxShim.shimPeerConnection(window, browserDetails);\n      firefoxShim.shimOnTrack(window, browserDetails);\n      firefoxShim.shimRemoveStream(window, browserDetails);\n      firefoxShim.shimSenderGetStats(window, browserDetails);\n      firefoxShim.shimReceiverGetStats(window, browserDetails);\n      firefoxShim.shimRTCDataChannel(window, browserDetails);\n      firefoxShim.shimAddTransceiver(window, browserDetails);\n      firefoxShim.shimGetParameters(window, browserDetails);\n      firefoxShim.shimCreateOffer(window, browserDetails);\n      firefoxShim.shimCreateAnswer(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimConnectionState(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      // Must be called before shimCallbackAPI.\n      commonShim.shimAddIceCandidateNullOrEmpty(window, browserDetails);\n      commonShim.shimParameterlessSetLocalDescription(window, browserDetails);\n\n      safariShim.shimRTCIceServerUrls(window, browserDetails);\n      safariShim.shimCreateOfferLegacy(window, browserDetails);\n      safariShim.shimCallbacksAPI(window, browserDetails);\n      safariShim.shimLocalStreamsAPI(window, browserDetails);\n      safariShim.shimRemoteStreamsAPI(window, browserDetails);\n      safariShim.shimTrackEventTransceiver(window, browserDetails);\n      safariShim.shimGetUserMedia(window, browserDetails);\n      safariShim.shimAudioContext(window, browserDetails);\n\n      commonShim.shimRTCIceCandidate(window, browserDetails);\n      commonShim.shimMaxMessageSize(window, browserDetails);\n      commonShim.shimSendThrowTypeError(window, browserDetails);\n      commonShim.removeExtmapAllowMixed(window, browserDetails);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter =\n  adapterFactory({window: typeof window === 'undefined' ? undefined : window});\nexport default adapter;\n","import { getLogger } from '@jitsi/logger';\nimport { cloneDeep } from 'lodash-es';\nimport 'webrtc-adapter';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport { CameraFacingMode } from '../../service/RTC/CameraFacingMode';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\nimport Listenable from '../util/Listenable';\nimport { isValidNumber } from '../util/MathUtil';\n\nimport screenObtainer from './ScreenObtainer';\n\nconst logger = getLogger('modules/RTC/RTCUtils');\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 180\n        },\n        width: {\n            ideal: 1280,\n            max: 1280,\n            min: 320\n        },\n        frameRate: {\n            min: 15,\n            max: 30\n        }\n    }\n};\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Enables stereo.\nlet stereo = null;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices = [];\nlet availableDevicesPollTimer;\n\n/**\n * An empty function.\n */\nfunction emptyFuncton() {\n    // no-op\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is pointing to (applicable on mobile)\n * @param {string} options.micDeviceId - The device id for the audio capture device to get audio from.\n * @private\n * @returns {Object}\n */\nfunction getConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of the passed in constraints object.\n    const constraints = cloneDeep(options.constraints || DEFAULT_CONSTRAINTS);\n\n    if (um.indexOf('video') >= 0) {\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        // The \"resolution\" option is a shortcut and takes precendence.\n        if (Resolutions[options.resolution]) {\n            const r = Resolutions[options.resolution];\n\n            constraints.video.height = { ideal: r.height };\n            constraints.video.width = { ideal: r.width };\n        }\n\n        if (!constraints.video.frameRate) {\n            constraints.video.frameRate = DEFAULT_CONSTRAINTS.video.frameRate;\n        }\n\n        // Override the constraints on Safari because of the following webkit bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\n        if (browser.isWebKitBased()) {\n            if (constraints.video.height && constraints.video.height.ideal) {\n                constraints.video.height = { ideal: constraints.video.height.ideal };\n            } else {\n                logger.warn('Ideal camera height missing, camera may not start properly');\n            }\n            if (constraints.video.width && constraints.video.width.ideal) {\n                constraints.video.width = { ideal: constraints.video.width.ideal };\n            } else {\n                logger.warn('Ideal camera width missing, camera may not start properly');\n            }\n        }\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = { exact: options.cameraDeviceId };\n        } else if (browser.isMobileDevice()) {\n            constraints.video.facingMode = options.facingMode || CameraFacingMode.USER;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        constraints.audio = {\n            autoGainControl: !disableAGC && !disableAP,\n            echoCancellation: !disableAEC && !disableAP,\n            noiseSuppression: !disableNS && !disableAP\n        };\n\n        if (options.micDeviceId) {\n            constraints.audio.deviceId = { exact: options.micDeviceId };\n        }\n\n        if (stereo) {\n            Object.assign(constraints.audio, { channelCount: 2 });\n        }\n    } else {\n        constraints.audio = false;\n    }\n\n    return constraints;\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super();\n\n        this._initOnce = false;\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.audioQuality?.stereo === 'boolean') {\n            stereo = options.audioQuality.stereo;\n            logger.info(`Stereo: ${stereo}`);\n        }\n\n        if (this._initOnce) {\n            return;\n        }\n\n        // Anything beyond this point needs to be initialized only once.\n        this._initOnce = true;\n\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        screenObtainer.init(options);\n\n        this.enumerateDevices(ds => {\n            availableDevices = ds.slice(0);\n\n            logger.debug('Available devices: ', availableDevices);\n            sendDeviceListToAnalytics(availableDevices);\n\n            this.eventEmitter.emit(\n                RTCEvents.DEVICE_LIST_AVAILABLE,\n                availableDevices);\n\n            if (browser.supportsDeviceChangeEvent()) {\n                navigator.mediaDevices.addEventListener(\n                    'devicechange',\n                    () => this.enumerateDevices(emptyFuncton));\n            } else {\n                // Periodically poll enumerateDevices() method to check if\n                // list of media devices has changed.\n                availableDevicesPollTimer = window.setInterval(\n                    () => this.enumerateDevices(emptyFuncton),\n                    AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n            }\n        });\n    }\n\n    /**\n     * Attaches the given media stream to the given element.\n     *\n     * @param {*} element DOM element.\n     * @param {*} stream MediaStream.\n     * @returns Promise<void>\n     */\n    attachMediaStream(element, stream) {\n        if (element) {\n            element.srcObject = stream;\n        }\n\n        if (element && stream\n                && this.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            return element.setSinkId(this.getAudioOutputDevice()).catch(ex => {\n                const err\n                    = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                logger.warn(\n                    'Failed to set audio output device for the element.'\n                        + ' Default audio output device will be used'\n                        + ' instead',\n                    element?.id,\n                    err);\n\n                throw err;\n            });\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     *\n     * @param {Function} callback\n     */\n    enumerateDevices(callback) {\n        navigator.mediaDevices.enumerateDevices()\n            .then(devices => {\n                this._updateKnownDevices(devices);\n                callback(devices);\n            })\n            .catch(error => {\n                logger.warn(`Failed to  enumerate devices. ${error}`);\n                this._updateKnownDevices([]);\n                callback([]);\n            });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @param {number} timeout - The timeout in ms for GUM.\n     * @returns {Promise}\n     */\n    _getUserMedia(umDevices, constraints = {}, timeout = 0) {\n        return new Promise((resolve, reject) => {\n            let gumTimeout, timeoutExpired = false;\n\n            if (isValidNumber(timeout) && timeout > 0) {\n                gumTimeout = setTimeout(() => {\n                    timeoutExpired = true;\n                    gumTimeout = undefined;\n                    reject(new JitsiTrackError(JitsiTrackErrors.TIMEOUT));\n                }, timeout);\n            }\n\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.info('onUserMediaSuccess');\n                    this._updateGrantedPermissions(umDevices, stream);\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        resolve(stream);\n                    }\n                })\n                .catch(error => {\n                    logger.warn(`Failed to get access to local media. ${error} ${JSON.stringify(constraints)}`);\n                    const jitsiError = new JitsiTrackError(error, constraints, umDevices);\n\n                    if (!timeoutExpired) {\n                        if (typeof gumTimeout !== 'undefined') {\n                            clearTimeout(gumTimeout);\n                        }\n                        reject(jitsiError);\n                    }\n\n                    if (jitsiError.name === JitsiTrackErrors.PERMISSION_DENIED) {\n                        this._updateGrantedPermissions(umDevices, undefined);\n                    }\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_getUserMedia.\n     *\n     * @param {Object} options - Optional parameters.\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _getDesktopMedia(options) {\n        if (!screenObtainer.isSupported()) {\n            return Promise.reject(new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                },\n                options);\n        });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Event handler for the 'devicechange' event.\n     *\n     * @param {MediaDeviceInfo[]} devices - list of media devices.\n     * @emits RTCEvents.DEVICE_LIST_CHANGED\n     */\n    _onMediaDevicesListChanged(devicesReceived) {\n        availableDevices = devicesReceived.slice(0);\n        logger.info('list of media devices has changed:', availableDevices);\n\n        sendDeviceListToAnalytics(availableDevices);\n\n        // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the\n        // new device list.\n        this.eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, availableDevices);\n\n        this.eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, availableDevices);\n    }\n\n    /**\n     * Update known devices.\n     *\n     * @param {Array<Object>} pds - The new devices.\n     * @returns {void}\n     *\n     * NOTE: Use this function as a shared callback to handle both the devicechange event and the\n     * polling implementations.\n     * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange\n     * fires twice in a row, which can cause async post devicechange processing to collide.\n     */\n    _updateKnownDevices(pds) {\n        if (compareAvailableMediaDevices(pds)) {\n            this._onMediaDevicesListChanged(pds);\n        }\n    }\n\n    /**\n     * Updates the granted permissions based on the options we requested and the\n     * streams we received.\n     * @param um the options we requested to getUserMedia.\n     * @param stream the stream we received from calling getUserMedia.\n     */\n    _updateGrantedPermissions(um, stream) {\n        const audioTracksReceived\n            = Boolean(stream) && stream.getAudioTracks().length > 0;\n        const videoTracksReceived\n            = Boolean(stream) && stream.getVideoTracks().length > 0;\n        const grantedPermissions = {};\n\n        if (um.indexOf('video') !== -1) {\n            grantedPermissions.video = videoTracksReceived;\n        }\n        if (um.indexOf('audio') !== -1) {\n            grantedPermissions.audio = audioTracksReceived;\n        }\n\n        this.eventEmitter.emit(RTCEvents.PERMISSIONS_CHANGED, grantedPermissions);\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @param {Array<string>} options.desktopSharingSources - The types of sources (\"screen\", \"window\", etc)\n     * from which the user can select what to share.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    obtainAudioAndVideoPermissions(options) {\n        const {\n            timeout,\n            ...otherOptions\n        } = options;\n\n        const mediaStreamsMetaData = [];\n        let constraints = {};\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = otherOptions.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingSourceDevice,\n                desktopSharingSources,\n                resolution\n            } = otherOptions;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new JitsiTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n                const deviceConstraints = {\n                    video: {\n                        deviceId: matchingDevice.deviceId\n\n                        // frameRate is omited here on purpose since this is a device that we'll pretend is a screen.\n                    }\n                };\n\n                return this._getUserMedia(requestedDevices, deviceConstraints, timeout)\n                    .then(stream => {\n                        return {\n                            sourceType: 'device',\n                            stream\n                        };\n                    });\n            }\n\n            return this._getDesktopMedia({\n                desktopSharingSources,\n                resolution });\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            const desktopAudioTracks = stream.getAudioTracks();\n\n            if (desktopAudioTracks.length) {\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopAudioStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopAudioStream.getAudioTracks()[0]\n                });\n            }\n\n            const desktopVideoTracks = stream.getVideoTracks();\n\n            if (desktopVideoTracks.length) {\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopVideoStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopVideoStream.getVideoTracks()[0],\n                    videoType: VideoType.DESKTOP\n                });\n            }\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = otherOptions.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device => device === 'audio' || device === 'video');\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            constraints = getConstraints(requestedCaptureDevices, otherOptions);\n\n            logger.info('Got media constraints: ', JSON.stringify(constraints));\n\n            return this._getUserMedia(requestedCaptureDevices, constraints, timeout);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    constraints: constraints.audio,\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: otherOptions.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    constraints: constraints.video,\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: otherOptions.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        if (deviceType === 'output' || deviceType === 'audiooutput') {\n            return isAudioOutputDeviceChangeAvailable;\n        }\n\n        return true;\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.debug(`Audio output device set to ${deviceId}`);\n\n                this.eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Sets the capture frame rate for desktop tracks.\n     *\n     * @param {number} maxFps - max fps to be used as the capture frame rate.\n     * @returns {void}\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        screenObtainer.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            deviceId: device.deviceId,\n            kind: device.kind,\n            label: device.label,\n            groupId: device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel' && streamId !== 'default';\n    }\n}\n\n\nexport default new RTCUtils();\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport browser from '../browser';\nimport EventEmitter from '../util/EventEmitter';\n\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger('modules/RTC/JitsiTrack');\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /**\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\n     * a onended event on the MediaStreamTrack.\n     * @param {Function} handler the handler\n     */\n    _addMediaStreamInactiveHandler(handler) {\n        if (browser.isFirefox() || browser.isWebKitBased()) {\n            this.track.onended = handler;\n        } else {\n            this.stream.oninactive = handler;\n        }\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            this._addMediaStreamInactiveHandler(undefined);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        let result = Promise.resolve();\n\n        if (this.stream) {\n            this._onTrackAttach(container);\n            result = RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._attachTTFMTracker(container);\n\n        return result;\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null).catch(() => {\n                    logger.error(`Detach for ${this} failed!`);\n                });\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null).catch(() => {\n                logger.error(`Detach for ${this} failed!`);\n            });\n        }\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        const p = Promise.resolve();\n\n        if (this.disposed) {\n            return p;\n        }\n\n        this.detach();\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return p;\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        return this.getStreamId();\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the source name of the track.\n     * @returns {String|undefined}\n     */\n    getSourceName() { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Returns the primary SSRC associated with the track.\n     * @returns {number}\n     */\n    getSsrc() { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Returns the video type (camera or desktop) of this track.\n     */\n    getVideoType() {\n        return this.videoType;\n    }\n\n    /**\n     * Returns the height of the track in normalized landscape format.\n     */\n    getHeight() {\n        return Math.min(this.track.getSettings().height, this.track.getSettings().width);\n    }\n\n    /**\n     * Returns the width of the track in normalized landscape format.\n     */\n    getWidth() {\n        return Math.max(this.track.getSettings().height, this.track.getSettings().width);\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        let newAudioLevel = audioLevel;\n\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\n        // remote tracks, browser reports last known audio levels even when the remote user is\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\n        // Remote tracks have the tpc info present while local tracks do not.\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\n            newAudioLevel = 0;\n        }\n\n        if (this.audioLevel !== newAudioLevel) {\n            this.audioLevel = newAudioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                newAudioLevel,\n                tpc);\n\n        // LocalStatsCollector reports a value of 0.008 for muted mics\n        // and a value of 0 when there is no audio input.\n        } else if (this.audioLevel === 0\n            && newAudioLevel === 0\n            && this.isLocal()\n            && !this.isWebRTCTrackMuted()) {\n            this.emit(\n                JitsiTrackEvents.NO_AUDIO_INPUT,\n                newAudioLevel);\n        }\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n\n    /**\n     * Assigns the source name to a track.\n     * @param {String} name - The name to be assigned to the track.\n     * @returns {void}\n     */\n    setSourceName(name) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport { CameraFacingMode } from '../../service/RTC/CameraFacingMode';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\nimport { isValidNumber } from '../util/MathUtil';\n\nimport JitsiTrack from './JitsiTrack';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger('modules/RTC/JitsiLocalTrack');\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs a new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {Object} trackInfo.constraints - The contraints used for creating the track.\n     * @param {number} trackInfo.rtcId - The ID assigned by the RTC module.\n     * @param {Object} trackInfo.stream - The WebRTC MediaStream, parent of the track.\n     * @param {Object} trackInfo.track - The underlying WebRTC MediaStreamTrack for new JitsiLocalTrack.\n     * @param {string} trackInfo.mediaType - The MediaType of the JitsiLocalTrack.\n     * @param {string} trackInfo.videoType - The VideoType of the JitsiLocalTrack.\n     * @param {Array<Object>} trackInfo.effects - The effects to be applied to the JitsiLocalTrack.\n     * @param {string} trackInfo.deviceId - The ID of the local device for this track.\n     * @param {string} trackInfo.facingMode - Thehe camera facing mode used in getUserMedia call (for mobile only).\n     * @param {string} trackInfo.sourceId - The id of the desktop sharing source, which is the Chrome media source ID,\n     * returned by Desktop Picker on Electron. NOTE: defined for desktop sharing tracks only.\n     * @param {string} trackInfo.sourceType - The type of source the track originates from.\n     */\n    constructor({\n        constraints,\n        deviceId,\n        facingMode,\n        mediaType,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED, this),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        const displaySurface = videoType === VideoType.DESKTOP\n            ? track.getSettings().displaySurface\n            : null;\n\n        /**\n         * Track metadata.\n         */\n        this.metadata = {\n            timestamp: Date.now(),\n            ...displaySurface ? { displaySurface } : {}\n        };\n\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType ?? displaySurface;\n\n        // Cache the constraints of the track in case of any this track\n        // model needs to call getUserMedia again, such as when unmuting.\n        this._constraints = track.getConstraints();\n\n        if (mediaType === MediaType.VIDEO) {\n            if (videoType === VideoType.CAMERA) {\n                // Safari returns an empty constraints object, construct the constraints using getSettings.\n                // Firefox in \"fingerprint resistance mode\" does a similar thing, except a `mediaSource` key is set.\n                if (!this._constraints.height || !this._constraints.width) {\n                    this._constraints = {\n                        height: { ideal: this.getHeight() },\n                        width: { ideal: this.getWidth() }\n                    };\n                }\n\n                // If the constraints are still empty, fallback to the constraints used for initial gUM.\n                if (!isValidNumber(this._constraints.height.ideal) && !isValidNumber(this._constraints.width.ideal)) {\n                    this._constraints.height = { ideal: constraints.height.ideal };\n                    this._constraints.width = { ideal: constraints.width.ideal };\n                }\n            }\n\n            // Get the resolution from the track itself since we do not know what camera capability the browser has\n            // picked for the given constraints, fallback to the constraints if MediaStreamTrack.getSettings() doesn't\n            // return the height.\n            this.resolution = this.getHeight();\n            if (!isValidNumber(this.resolution) && this._constraints.height?.ideal) {\n                this.resolution = this._constraints.height.ideal;\n            }\n            this.maxEnabledResolution = this.resolution;\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        // The source name that will be signaled for this track.\n        this._sourceName = null;\n\n        // The primary SSRC associated with the local media track. This will be set after the local desc\n        // is processed once the track is added to the peerconnection.\n        this._ssrc = null;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this process. Only TraceablePeerConnections to\n        // which the track is attached should care about this action. The TPCs to which the track is not attached can\n        // sync up when track is re-attached. A problem with that is that the \"modify sources\" queue is part of the\n        // JingleSessionPC and it would be excluded from the process. One solution would be to extract class between\n        // TPC and JingleSessionPC which would contain the queue and would notify the signaling layer when local SSRCs\n        // are changed. This would help to separate XMPP from the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackToPc(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics\n     *\n     * @private\n     * @returns {void}\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        logger.debug(`NO_DATA_FROM_SOURCE event with value ${value} detected for track: ${this}`);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera issues.\n     *\n     * @private\n     * @returns {void}\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @private\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called multiple times in a row and the\n     * invocations of {@link #_setMuted} and, consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @private\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback - Callback that will be called when the operation is successful.\n     * @param {Function} errorCallback - Callback that will be called when the operation fails.\n     * @private\n     * @returns {Promise}\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackFromPc(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {void}\n     */\n    _sendMuteStatus(mute) {\n        if (this.conference) {\n            this.conference._setTrackMuteStatus(this.getType(), this, mute) && this.conference.room.sendPresence();\n        }\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted; otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted && this.videoType !== VideoType.DESKTOP) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        // In React Native we mute the camera by setting track.enabled but that doesn't\n        // work for screen-share tracks, so do the remove-as-mute for those.\n        const doesVideoMuteByStreamRemove\n            = browser.isReactNative() ? this.videoType === VideoType.DESKTOP : browser.doesVideoMuteByStreamRemove();\n\n        // In the multi-stream mode, desktop tracks are muted from jitsi-meet instead of being removed from the\n        // conference. This is needed because we don't want the client to signal a source-remove to the remote peer for\n        // the desktop track when screenshare is stopped. Later when screenshare is started again, the same sender will\n        // be re-used without the need for signaling a new ssrc through source-add.\n        if (this.isAudioTrack() || !doesVideoMuteByStreamRemove) {\n            logMuteInfo();\n\n            // If we have a stream effect that implements its own mute functionality, prioritize it before\n            // normal mute e.g. the stream effect that implements system audio sharing has a custom\n            // mute state in which if the user mutes, system audio still has to go through.\n            if (this._streamEffect && this._streamEffect.setMuted) {\n                this._streamEffect.setMuted(muted);\n            } else if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            promise\n                = RTCUtils.obtainAudioAndVideoPermissions({\n\n                    ...streamOptions,\n                    constraints: { video: this._constraints } });\n\n            promise = promise.then(streamsInfo => {\n                const streamInfo = streamsInfo.find(info => info.track.kind === this.getType());\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(cont => RTCUtils.attachMediaStream(cont, this.stream).catch(() => {\n                    logger.error(`Attach media failed for ${this} on video unmute!`);\n                }));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => {\n                this._sendMuteStatus(muted);\n\n                // Send the videoType message to the bridge.\n                this.isVideoTrack() && this.conference && this.conference._sendBridgeVideoTypeMessage(this);\n                this.emit(TRACK_MUTE_CHANGED, this);\n            });\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device information. This is temporary solution until\n     * getConstraints() method will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - The list of devices obtained from enumerateDevices() call.\n     * @private\n     * @returns {void}\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n\n        // We need to match by deviceId as well, in case of multiple devices with the same label.\n        let device = devices.find(d => d.kind === kind && d.label === track.label && d.deviceId === this.deviceId);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored handlers to it.\n     *\n     * @param {MediaStream} stream - The new MediaStream.\n     * @private\n     * @returns {void}\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @param {Object} effect - Represents effect instance\n     * @private\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n        this.track = this.stream.getTracks()[0];\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n            this._originalStream = null;\n            this.track = this.stream ? this.stream.getTracks()[0] : null;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the custom MediaStreamTrack._switchCamera\n     * method. Currently, the method in question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch between the front/user-facing and the\n     * back/environment-facing cameras because it will likely be (as is the case of react-native-webrtc) noticeably\n     * faster that creating a new MediaStreamTrack via a new getUserMedia call with the switched facingMode constraint\n     * value. Moreover, the approach with a new getUserMedia call may not even work: WebRTC on Android and iOS is\n     * either very slow to open the camera a second time or plainly freezes attempting to do that.\n     *\n     * @returns {void}\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     * @private\n     * @returns {void}\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML. NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    async dispose() {\n        if (this.disposed) {\n            return;\n        }\n\n        // Remove the effect instead of stopping it so that the original stream is restored\n        // on both the local track and on the peerconnection.\n        if (this._streamEffect) {\n            await this.setEffect();\n        }\n\n        if (this.conference) {\n            await this.conference.removeTrack(this);\n        }\n\n        if (this.stream) {\n            this.stopStream();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return super.dispose();\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g. audio track or 'desktop' video track)\n     * returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            const trackSettings = this.track.getSettings?.();\n\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Returns the capture resolution of the video track.\n     *\n     * @returns {Number}\n     */\n    getCaptureResolution() {\n        if (this.videoType === VideoType.CAMERA || !browser.isWebKitBased()) {\n            return this.resolution;\n        }\n\n        return this.getHeight();\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Get the duration of the track.\n     *\n     * @returns {Number} the duration of the track in seconds\n     */\n    getDuration() {\n        return (Date.now() / 1000) - (this.metadata.timestamp / 1000);\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Returns the source name associated with the jitsi track.\n     *\n     * @returns {string | null} source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Returns the primary SSRC associated with the track.\n     * @returns {number}\n     */\n    getSsrc() {\n        return this._ssrc;\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        // If currently used stream effect has its own muted state, use that.\n        if (this._streamEffect && this._streamEffect.isMuted) {\n            return this._streamEffect.isMuted();\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or not. If the stream property is null\n     * (because of mute or another reason) this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly. For example in case of video mute the\n     * method will return false or if the user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and readyState can have value muted. In the latest\n        // versions readyState can have values \"live\" and \"ended\" and there is muted boolean property. If the stream is\n        // muted that means that we aren't receiving any data from the source. We want to notify the users for error if\n        // the stream is muted or ended on it's creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Handles bytes sent statistics. NOTE: used only for audio tracks to detect audio issues.\n     *\n     * @param {TraceablePeerConnection} tpc - The peerconnection that is reporting the bytes sent stat.\n     * @param {number} bytesSent - The new value.\n     * @returns {void}\n     */\n    onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp solution.\n     *\n     * @param conference - JitsiConference object.\n     * @returns {void}\n     */\n    setConference(conference) {\n        this.conference = conference;\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\n        if (this.isMuted() && !this.isAudioTrack()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => {\n                    RTCUtils.attachMediaStream(cont, this.stream).catch(() => {\n                        logger.error(`Attach media failed for ${this} when trying to set effect.`);\n                    });\n                });\n            }\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        return conference._removeLocalTrackFromPc(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => {\n                        RTCUtils.attachMediaStream(cont, this.stream).catch(() => {\n                            logger.error(`Attach media failed for ${this} when trying to set effect.`);\n                        });\n                    });\n                }\n\n                return conference._addLocalTrackToPc(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Sets the source name to be used for signaling the jitsi track.\n     *\n     * @param {string} name The source name.\n     */\n    setSourceName(name) {\n        this._sourceName = name;\n    }\n\n    /**\n     * Sets the primary SSRC for the track.\n     *\n     * @param {number} ssrc The SSRC.\n     */\n    setSsrc(ssrc) {\n        if (isValidNumber(ssrc)) {\n            this._ssrc = ssrc;\n        }\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     *\n     * @returns {void}\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n}\n","export enum SignalingEvents {\n\n    /**\n     * Event triggered when participant's muted status changes.\n     *\n     * @param {string} endpointId the track owner's identifier (MUC nickname)\n     * @param {MediaType} mediaType \"audio\" or \"video\"\n     * @param {boolean} isMuted the new muted state\n     */\n    PEER_MUTED_CHANGED = 'signaling.peerMuted',\n\n    /**\n     * Event triggered when participant's video type changes.\n     *\n     * @param {string} endpointId the video owner's ID (MUC nickname)\n     * @param {VideoType} videoType the new value\n     */\n    PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType',\n\n    /**\n     * Event triggered when source's muted status changes.\n     *\n     * @param {string} sourceName - The name of the source.\n     * @param {boolean} isMuted - The new muted state.\n     */\n    SOURCE_MUTED_CHANGED = 'signaling.sourceMuted',\n\n    /**\n     * Event triggered when presence for a source is received.\n     *\n     * @param {string} sourceName - The name of the source.\n     * @param {string} endpointId - The endpoint id.\n     * @param {boolean} muted - The new muted state.\n     * @param {string} videoType - The video type of the source.\n     */\n    SOURCE_UPDATED = 'signaling.sourceUpdated',\n\n    /**\n     * Event triggered when source's video type changes.\n     *\n     * @param {string} source - The name of the source.\n     * @param {VideoType} videoType - The new value.\n     */\n    SOURCE_VIDEO_TYPE_CHANGED = 'signaling.sourceVideoType'\n}\n\n// exported for backward compatibility\nexport const PEER_MUTED_CHANGED = SignalingEvents.PEER_MUTED_CHANGED;\nexport const PEER_VIDEO_TYPE_CHANGED = SignalingEvents.PEER_VIDEO_TYPE_CHANGED;\nexport const SOURCE_MUTED_CHANGED = SignalingEvents.SOURCE_MUTED_CHANGED;\nexport const SOURCE_UPDATED = SignalingEvents.SOURCE_UPDATED;\nexport const SOURCE_VIDEO_TYPE_CHANGED = SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED;\n","import Listenable from '../../modules/util/Listenable';\nimport { isValidNumber } from '../../modules/util/MathUtil';\n\nimport { MediaType } from './MediaType';\nimport { VideoType } from './VideoType';\n\nexport type EndpointId = string;\nexport type SourceName = string;\n\nexport interface ISourceInfo {\n    muted?: boolean;\n    sourceName: SourceName;\n    videoType?: string;\n}\n\nexport interface IPeerMediaInfo {\n    muted: boolean;\n    videoType?: string;\n}\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-function */\n\n/**\n * Generates a source name.\n *\n * @param {EndpointId} endpointId - Jitsi Endpoint Id.\n * @param {MediaType} mediaType - the media type string.\n * @param {number} trackIdx - Track index (or sender idx? - to be figured out) starting from 0.\n * @returns {SourceName} eg. endpointA-v0\n */\nexport function getSourceNameForJitsiTrack(endpointId: EndpointId, mediaType: MediaType, trackIdx: number): SourceName {\n    const firstLetterOfMediaType = mediaType.substring(0, 1);\n\n    return `${endpointId}-${firstLetterOfMediaType}${trackIdx}`;\n}\n\n/**\n * Extracts MediaType from give source name (must be in the correct format as generated by\n * {@link getSourceNameForJitsiTrack}).\n *\n * @param {SourceName} sourceName - the source name.\n * @returns {MediaType}\n */\nexport function getMediaTypeFromSourceName(sourceName: SourceName): MediaType {\n    const firstLetterOfMediaTypeIdx = sourceName.lastIndexOf('-') + 1;\n\n    if (firstLetterOfMediaTypeIdx <= 0) {\n        throw new Error(`Invalid source name: ${sourceName}`);\n    }\n\n    const firstLetterOfMediaType = sourceName.substr(firstLetterOfMediaTypeIdx, 1);\n\n    if (firstLetterOfMediaType === 'v') {\n        return MediaType.VIDEO;\n    } else if (firstLetterOfMediaType === 'a') {\n        return MediaType.AUDIO;\n    }\n\n    throw new Error(`Invalid source name: ${sourceName}`);\n}\n\n/**\n * Extracts source index (zero based) from a given source name (must be in the correct format as generated by\n * {@link getSourceNameForJitsiTrack}).\n *\n * @param {SourceName} sourceName - the source name, eg. endpointA-v0.\n * @returns {number}\n */\nexport function getSourceIndexFromSourceName(sourceName: SourceName): number {\n    const nameParts = sourceName.split('-');\n    const trackIdx = Number(nameParts[nameParts.length - 1].substring(1));\n\n    if (!isValidNumber(trackIdx)) {\n        throw new Error(`Failed to parse track idx for source name: ${sourceName}`);\n    }\n\n    return trackIdx;\n}\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} IPeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * @param {SourceName} sourceName - The name of the source for which the info is to be obtained.\n     * info will be obtained.\n     * @return {IPeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     *\n     * @deprecated This method is to be replaced with getPeerSourceInfo.\n     */\n    getPeerMediaInfo(\n            owner: string, mediaType: MediaType, sourceName: SourceName\n    ): IPeerMediaInfo | null {\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about a source for given name and endpoint ID.\n     * @param {EndpointId} owner - The owner's endpoint ID.\n     * @param {SourceName} sourceName - The name of the source for which the info is to be obtained.\n     * @returns {ISourceInfo | undefined}\n     */\n    getPeerSourceInfo(\n            owner: EndpointId, sourceName: SourceName\n    ): ISourceInfo | undefined {\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc: number): string | null {\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the source name for given SSRC.\n     * @param {number} ssrc the track's SSRC identifier.\n     * @returns {SourceName | undefined} the track's source name.\n     */\n    getTrackSourceName(ssrc: number): SourceName | undefined {\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Removes the association between a given SSRC and its current owner so that it can re-used when the SSRC gets\n     * remapped to another source from a different endpoint.\n     * @param {number} ssrc a list of SSRCs.\n     */\n    removeSSRCOwners(ssrcList: number[]): void {\n    }\n\n    /**\n     * Set an SSRC owner.\n     *\n     * @param {number} ssrc - An SSRC to be owned.\n     * @param {string} endpointId - Owner's ID (MUC nickname).\n     * @param {string} sourceName - The related source name.\n     * @throws TypeError if <tt>ssrc</tt> is not a number.\n     */\n    setSSRCOwner(ssrc: number, endpointId: string, sourceName: string): void {\n    }\n\n    /**\n     * Adjusts muted status of given track.\n     *\n     * @param {SourceName} sourceName - the name of the track's source.\n     * @param {boolean} muted - the new muted status.\n     * @returns {boolean}\n     */\n    setTrackMuteStatus(sourceName: SourceName, muted: boolean) {\n    }\n\n    /**\n     * Sets track's video type.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {VideoType} videoType - the new video type.\n     * @returns {boolean}\n     */\n    setTrackVideoType(sourceName: SourceName, videoType: VideoType) {\n    }\n\n    /**\n     * Removes the SSRCs associated with a given endpoint from the SSRC owners.\n     *\n     * @param {string} id endpoint id of the participant leaving the call.\n     * @returns {void}\n     */\n    updateSsrcOwnersOnLeave(id: string): void {\n    }\n}\n","import * as transform from 'sdp-transform';\n\nimport { SSRC_GROUP_SEMANTICS } from '../../service/RTC/StandardVideoQualitySettings';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup(SSRC_GROUP_SEMANTICS.SIM);\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup(SSRC_GROUP_SEMANTICS.FID);\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC(SSRC_GROUP_SEMANTICS.FID, primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === SSRC_GROUP_SEMANTICS.FID\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects all the m-lines from the SDP for a given media type.\n     *\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video', 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media line or <tt>null</tt> if not found. The\n     * object returned references the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance (it's not a\n     * copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLines = this.parsedSDP.media\n            .filter(mLine => mLine.type === mediaType)\n            .map(mLine => new MLineWrap(mLine));\n\n        return selectedMLines ?? null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","import { isEqual } from 'lodash-es';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport browser from '../browser';\n\nimport { SdpTransformWrap } from './SdpTransformUtil';\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local description getter. Modifies the SDP, so that\n * the stream identifiers are unique across all of the local PeerConnections and that the source names and video types\n * are injected so that Jicofo can use them to identify the sources.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {string} localEndpointId - The endpoint id of the local user.\n     */\n    constructor(tpc, localEndpointId) {\n        this.tpc = tpc;\n        this.localEndpointId = localEndpointId;\n    }\n\n    /**\n     * Updates or adds a 'msid' attribute for the local sources in the SDP. Also adds 'sourceName' and 'videoType'\n     * (if applicable) attributes. All other source attributes like 'cname', 'label' and 'mslabel' are removed since\n     * these are not processed by Jicofo.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\n     * modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection, ssrcMap) {\n        const mediaType = mediaSection.mLine.type;\n        const mediaDirection = mediaSection.mLine.direction;\n        const sources = [ ...new Set(mediaSection.mLine.ssrcs?.map(s => s.id)) ];\n        let trackId = mediaSection.mLine.msid?.split(' ')[1];\n        let sourceName;\n\n        if (ssrcMap.size) {\n            const sortedSources = sources.slice().sort();\n\n            for (const [ id, trackSsrcs ] of ssrcMap.entries()) {\n                if (isEqual(sortedSources, [ ...trackSsrcs.ssrcs ].sort())) {\n                    sourceName = id;\n                }\n            }\n            for (const source of sources) {\n                if ((mediaDirection === MediaDirection.SENDONLY || mediaDirection === MediaDirection.SENDRECV)\n                    && sourceName) {\n                    const msid = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'msid');\n\n                    if (msid) {\n                        trackId = msid.value.split(' ')[1];\n                    }\n                    const generatedMsid = `${ssrcMap.get(sourceName).msid}-${this.tpc.id} ${trackId}-${this.tpc.id}`;\n                    const existingMsid = mediaSection.ssrcs\n                        .find(ssrc => ssrc.id === source && ssrc.attribute === 'msid');\n\n                    // Always overwrite msid since we want the msid to be in this format even if the browser generates\n                    // one. '<endpoint_id>-<mediaType>-<trackIndex>-<tpcId>' example - d8ff91-video-0-1\n                    if (existingMsid) {\n                        existingMsid.value = generatedMsid;\n                    } else {\n                        mediaSection.ssrcs.push({\n                            id: source,\n                            attribute: 'msid',\n                            value: generatedMsid\n                        });\n                    }\n\n                    // Inject source names as a=ssrc:3124985624 name:endpointA-v0\n                    mediaSection.ssrcs.push({\n                        id: source,\n                        attribute: 'name',\n                        value: sourceName\n                    });\n\n                    const videoType = this.tpc.getLocalVideoTracks()\n                        .find(track => track.getSourceName() === sourceName)\n                        ?.getVideoType();\n\n                    if (mediaType === MediaType.VIDEO && videoType) {\n                        // Inject videoType as a=ssrc:1234 videoType:desktop.\n                        mediaSection.ssrcs.push({\n                            id: source,\n                            attribute: 'videoType',\n                            value: videoType\n                        });\n                    }\n                }\n            }\n        }\n\n        // Ignore the 'label' and 'mslabel' attributes.\n        mediaSection.ssrcs\n            = mediaSection.ssrcs.filter(ssrc => ssrc.attribute !== 'label' && ssrc.attribute !== 'mslabel');\n\n        // Remove the 'cname' attribute on Firefox as a=ssrc line with only 'cname' attribute are present in the SDP\n        // for recvonly SSRCs generated by createAnswer. These do not have to be signaled to the peers.\n        if (browser.isFirefox()) {\n            mediaSection.ssrcs = mediaSection.ssrcs.filter(ssrc => ssrc.attribute !== 'cname');\n        }\n\n        // On FF when the user has started muted create answer will generate a recv only SSRC. We don't want to signal\n        // this SSRC in order to reduce the load of the xmpp server for large calls. Therefore the SSRC needs to be\n        // removed from the SDP.\n        //\n        // For all other use cases (when the user has had media but then the user has stopped it) we want to keep the\n        // receive only SSRCs in the SDP. Otherwise source-remove will be triggered and the next time the user add a\n        // track we will reuse the SSRCs and send source-add with the same SSRCs. This is problematic because of issues\n        // on Chrome and FF (https://bugzilla.mozilla.org/show_bug.cgi?id=1768729) when removing and then adding the\n        // same SSRC in the remote sdp the remote track is not rendered.\n        if (browser.isFirefox()\n            && (mediaDirection === MediaDirection.RECVONLY || mediaDirection === MediaDirection.INACTIVE)\n            && (\n                (mediaType === MediaType.VIDEO && !this.tpc._hasHadVideoTrack)\n                || (mediaType === MediaType.AUDIO && !this.tpc._hasHadAudioTrack)\n            )\n        ) {\n            mediaSection.ssrcs = undefined;\n            mediaSection.ssrcGroups = undefined;\n        }\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique across all of the local PeerConnections\n     * even if the same stream is used by multiple instances at the same time. It also injects 'sourceName' and\n     * 'videoType' attribute.\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session description (this instance remains unchanged).\n     * @param {Map<string, TPCSSRCInfo>} ssrcMap - The SSRC and source map for the local tracks.\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc, ssrcMap) {\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia(MediaType.AUDIO)?.[0];\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine, ssrcMap);\n        }\n\n        const videoMlines = transformer.selectMedia(MediaType.VIDEO);\n\n        for (const videoMLine of videoMlines) {\n            this._transformMediaIdentifiers(videoMLine, ssrcMap);\n        }\n\n        return {\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        };\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { SSRC_GROUP_SEMANTICS } from '../../service/RTC/StandardVideoQualitySettings';\n\nimport SDPUtil from './SDPUtil';\nimport { SdpTransformWrap, parseSecondarySSRC } from './SdpTransformUtil';\n\nconst logger = getLogger('modules/sdp/RtxModifier');\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        return;\n    }\n    if (previousRtxSSRC) {\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    primarySsrcMsid && mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: SSRC_GROUP_SEMANTICS.FID,\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't already have them.  If the video ssrc has been seen before, and\n     * already had an RTX ssrc generated, the same RTX ssrc will be used again.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} The modified sdp in raw string format.\n     */\n    modifyRtxSsrcs(sdpStr) {\n        let modified = false;\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (this.modifyRtxSsrcs2(videoMLine)) {\n                modified = true;\n            }\n        }\n\n        return modified ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the {@link MLineWrap} instance wrapping video media as\n     * an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by {@link SdpTransformWrap} has been modified or\n     * <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === MediaDirection.RECVONLY) {\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            return false;\n        }\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (!correspondingRtxSsrc) {\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                }\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp.\n     *\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\n\n        if (!videoMLines?.length) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        for (const videoMLine of videoMLines) {\n            if (videoMLine.direction !== MediaDirection.RECVONLY\n                && videoMLine.getSSRCCount()\n                && videoMLine.containsAnySSRCGroups()) {\n                const fidGroups = videoMLine.findGroups(SSRC_GROUP_SEMANTICS.FID);\n\n                // Remove the fid groups from the mline\n                videoMLine.removeGroupsBySemantics(SSRC_GROUP_SEMANTICS.FID);\n\n                // Get the rtx ssrcs and remove them from the mline\n                for (const fidGroup of fidGroups) {\n                    const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n                    videoMLine.removeSSRC(rtxSsrc);\n                }\n            }\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import * as transform from 'sdp-transform';\n\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { SIM_LAYERS, SSRC_GROUP_SEMANTICS } from '../../service/RTC/StandardVideoQualitySettings';\n\n\ninterface IDescription {\n    sdp: string;\n    type: RTCSdpType;\n}\n\n/**\n * This class handles SDP munging for enabling simulcast for local video streams in Unified plan. A set of random SSRCs\n * are generated for the higher layer streams and they are cached for a given mid. The cached SSRCs are then reused on\n * the subsequent iterations while munging the local description. This class also handles imploding of the simulcast\n * SSRCs for remote endpoints into the primary FID group in remote description since Jicofo signals all SSRCs relevant\n * to a given endpoint.\n */\nexport default class SdpSimulcast {\n    private _numOfLayers: number;\n    private _ssrcCache: Map<string, Array<number>>;\n\n    /**\n     * Creates a new instance.\n     *\n     * @param options\n     */\n    constructor() {\n        this._ssrcCache = new Map();\n        this._numOfLayers = SIM_LAYERS.length;\n    }\n\n    /**\n     * Updates the given media description using the SSRCs that were cached for the mid associated\n     * with the media description and returns the modified media description.\n     *\n     * @param mLine\n     * @returns\n     */\n    _fillSsrcsFromCache(mLine: transform.MediaDescription): any {\n        const mid = mLine.mid;\n        const cachedSsrcs = this._ssrcCache.get(mid);\n        const newSsrcs = this._parseSimLayers(mLine);\n        const newMsid = this._getSsrcAttribute(mLine, newSsrcs[0], 'msid');\n        const newCname = this._getSsrcAttribute(mLine, newSsrcs[0], 'cname');\n\n        mLine.ssrcs = [];\n        mLine.ssrcGroups = [];\n\n        for (const ssrc of cachedSsrcs) {\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'msid',\n                value: newMsid\n            });\n            mLine.ssrcs.push({\n                id: ssrc,\n                attribute: 'cname',\n                value: newCname\n            });\n        }\n\n        mLine.ssrcGroups.push({\n            semantics: SSRC_GROUP_SEMANTICS.SIM,\n            ssrcs: cachedSsrcs.join(' ')\n        });\n\n        return mLine;\n    }\n\n    /**\n     * Generates a new set of SSRCs for the higher simulcast layers/streams and adds the attributes and SIM group to\n     * the given media description and returns the modified media description.\n     *\n     * @param mLine\n     * @param primarySsrc\n     * @returns\n     */\n    _generateNewSsrcsForSimulcast(mLine: transform.MediaDescription, primarySsrc: number): any {\n        const cname = this._getSsrcAttribute(mLine, primarySsrc, 'cname');\n        let msid = this._getSsrcAttribute(mLine, primarySsrc, 'msid');\n\n        // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present (only cname attributes are\n        // present) in the answers that Chrome and Safari generate for an offer received from Jicofo. Generate these\n        // a=ssrc lines using the msid values from the a=msid line.\n        if (!msid) {\n            msid = mLine.msid;\n            const primarySsrcs = mLine.ssrcs;\n\n            primarySsrcs.forEach(ssrc => {\n                mLine.ssrcs.push({\n                    id: ssrc.id,\n                    attribute: 'msid',\n                    value: msid\n                });\n            });\n        }\n\n        // Generate SIM layers.\n        const simSsrcs = [];\n\n        for (let i = 0; i < this._numOfLayers - 1; ++i) {\n            const simSsrc = this._generateSsrc();\n\n            mLine.ssrcs.push({\n                id: simSsrc,\n                attribute: 'cname',\n                value: cname\n            });\n            mLine.ssrcs.push({\n                id: simSsrc,\n                attribute: 'msid',\n                value: msid\n            });\n\n            simSsrcs.push(simSsrc);\n        }\n\n        mLine.ssrcGroups = mLine.ssrcGroups || [];\n        mLine.ssrcGroups.push({\n            semantics: SSRC_GROUP_SEMANTICS.SIM,\n            ssrcs: `${primarySsrc} ${simSsrcs.join(' ')}`\n        });\n\n        return mLine;\n    }\n\n    /**\n     * Returns a random number to be used for the SSRC.\n     *\n     * @returns\n     */\n    _generateSsrc(): number {\n        const max = 0xffffffff;\n\n        return Math.floor(Math.random() * max);\n    }\n\n    /**\n     * Returns the requested attribute value for a SSRC from a given media description.\n     *\n     * @param mLine\n     * @param ssrc\n     * @param attributeName\n     * @returns\n     */\n    _getSsrcAttribute(mLine: transform.MediaDescription, ssrc: number, attributeName: string): string | undefined {\n        return mLine.ssrcs?.find(\n            ssrcInfo => Number(ssrcInfo.id) === ssrc\n            && ssrcInfo.attribute === attributeName)?.value;\n    }\n\n    /**\n     * Returns an array of all the primary SSRCs in the SIM group for a given media description.\n     *\n     * @param mLine\n     * @returns\n     */\n    _parseSimLayers(mLine: transform.MediaDescription): Array<number> | null {\n        const simGroup = mLine.ssrcGroups?.find(group => group.semantics === SSRC_GROUP_SEMANTICS.SIM);\n\n        if (simGroup) {\n            return simGroup.ssrcs.split(' ').map(ssrc => Number(ssrc));\n        }\n\n        if (mLine.ssrcs?.length) {\n            return [ Number(mLine.ssrcs[0].id) ];\n        }\n\n        return null;\n    }\n\n    /**\n     * Munges the given media description to enable simulcast for the video media sections that are in either have\n     * SENDRECV or SENDONLY as the media direction thereby ignoring all the RECVONLY transceivers created for remote\n     * endpoints.\n     * NOTE: This needs to be called only when simulcast is enabled.\n     *\n     * @param description\n     * @returns\n     */\n    mungeLocalDescription(description: IDescription): IDescription {\n        if (!description?.sdp) {\n            return description;\n        }\n        const session = transform.parse(description.sdp);\n\n        for (let media of session.media) {\n            // Ignore recvonly and inactive transceivers created for remote sources.\n            if (media.direction === MediaDirection.RECVONLY || media.direction === MediaDirection.INACTIVE) {\n                continue;\n            }\n\n            // Ignore audio m-lines.\n            if (media.type !== MediaType.VIDEO) {\n                continue;\n            }\n            const mid = media.mid;\n            const numSsrcs = new Set(media.ssrcs?.map(ssrcInfo => ssrcInfo.id));\n            const numGroups = media.ssrcGroups?.length ?? 0;\n            let primarySsrc: number;\n\n            // Do not munge if the description has no ssrcs or if simulcast is already enabled.\n            if (numSsrcs.size === 0 || numSsrcs.size > 2 || (numSsrcs.size === 2 && numGroups === 0)) {\n                continue;\n            }\n            if (numSsrcs.size === 1) {\n                primarySsrc = Number(media.ssrcs[0]?.id);\n            } else {\n                const fidGroup = media.ssrcGroups.find(group => group.semantics === SSRC_GROUP_SEMANTICS.FID);\n\n                if (fidGroup) {\n                    primarySsrc = Number(fidGroup.ssrcs.split(' ')[0]);\n                }\n            }\n\n            if (this._ssrcCache.has(mid)) {\n                media = this._fillSsrcsFromCache(media);\n            } else {\n                media = this._generateNewSsrcsForSimulcast(media, primarySsrc);\n                const simulcastSsrcs = this._parseSimLayers(media);\n\n                // Update the SSRCs in the cache so that they can re-used for the same mid again.\n                this._ssrcCache.set(mid, simulcastSsrcs);\n            }\n        }\n\n        return {\n            type: description.type,\n            sdp: transform.write(session)\n        };\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { JitsiConferenceEvents } from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { createTrackStreamingStatusEvent } from '../../service/statistics/AnalyticsEvents';\nimport JitsiRemoteTrack from '../RTC/JitsiRemoteTrack';\nimport RTC from '../RTC/RTC';\nimport browser from '../browser';\nimport Statistics from '../statistics/statistics';\n\n/** Track streaming statuses. */\nexport enum TrackStreamingStatus {\n\n    /**\n     * Status indicating that streaming is currently active.\n     */\n    ACTIVE = 'active',\n\n    /**\n     * Status indicating that streaming is currently inactive.\n     * Inactive means the streaming was stopped on purpose from the bridge, like exiting forwarded sources or\n     * adaptivity decided to drop video because of not enough bandwidth.\n     */\n    INACTIVE = 'inactive',\n\n    /**\n     * Status indicating that streaming is currently interrupted.\n     */\n    INTERRUPTED = 'interrupted',\n\n    /**\n     * Status indicating that streaming is currently restoring.\n     */\n    RESTORING = 'restoring',\n}\n\ntype StreamingStatusMap = {\n    p2p?: boolean;\n    startedMs?: number;\n    streamingStatus?: string;\n    value?: number;\n    videoType?: VideoType;\n};\n\nconst logger = getLogger('modules/connectivity/TrackStreamingStatus');\n\n/**\n * Default value of 500 milliseconds for {@link TrackStreamingStatusImpl.outOfForwardedSourcesTimeout}.\n */\nconst DEFAULT_NOT_IN_FORWARDED_SOURCES_TIMEOUT = 500;\n\n/**\n * Default value of 2500 milliseconds for {@link TrackStreamingStatusImpl.p2pRtcMuteTimeout}.\n */\nconst DEFAULT_P2P_RTC_MUTE_TIMEOUT = 2500;\n\n/**\n * Default value of 10000 milliseconds for {@link TrackStreamingStatusImpl.rtcMuteTimeout}.\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of forwarded sources should be inactive and when\n * entering forwarded sources it becomes restoring and when data is received from bridge it will become active, but if\n * no data is received for some time we set status of that track streaming to interrupted.\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Class is responsible for emitting JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED events.\n */\nexport class TrackStreamingStatusImpl {\n    rtc: RTC;\n    conference: any; // TODO: needs JitsiConference type\n    track: JitsiRemoteTrack;\n\n    /**  This holds the timeout callback ID scheduled using window.setTimeout. */\n    trackTimer: number | null;\n\n    /**\n     * If video track frozen detection through RTC mute event is supported, we wait some time until video track is\n     * considered frozen. But because when the track falls out of forwarded sources it is expected for the video to\n     * freeze this timeout must be significantly reduced in \"out of forwarded sources\" case.\n     *\n     * Basically this value is used instead of {@link rtcMuteTimeout} when track is not in forwarded sources.\n     */\n    outOfForwardedSourcesTimeout: number;\n\n    /**\n     * How long we are going to wait for the corresponding signaling mute event after the RTC video track muted\n     * event is fired on the Media stream, before the connection interrupted is fired. The default value is\n     * {@link DEFAULT_P2P_RTC_MUTE_TIMEOUT}.\n     */\n    p2pRtcMuteTimeout: number;\n\n    /**\n     * How long we're going to wait after the RTC video track muted event for the corresponding signalling mute\n     * event, before the connection interrupted is fired. The default value is {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n     *\n     * @returns amount of time in milliseconds\n     */\n    rtcMuteTimeout: number;\n\n    /**\n     * This holds a timestamp indicating  when remote video track was RTC muted. The purpose of storing the\n     * timestamp is to avoid the transition to disconnected status in case of legitimate video mute operation where\n     * the signalling video muted event can arrive shortly after RTC muted event.\n     *\n     * The timestamp is measured in milliseconds obtained with <tt>Date.now()</tt>.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event implemented in JitsiLocalTrack by extending the event\n     * to the remote track and allowing to set different timeout for local and remote tracks.\n     */\n    rtcMutedTimestamp: number | null;\n\n    /** This holds the restoring timeout callback ID scheduled using window.setTimeout. */\n    restoringTimer: ReturnType<typeof setTimeout> | null;\n\n    /**\n     * This holds the current streaming status (along with all the internal events that happen while in that\n     * state).\n     *\n     * The goal is to send this information to the analytics backend for post-mortem analysis.\n     */\n    streamingStatusMap: StreamingStatusMap;\n\n    _onP2PStatus: () => void;\n    _onUserLeft: () => void;\n    _onTrackRtcMuted: () => void;\n    _onTrackRtcUnmuted: () => void;\n    _onSignallingMuteChanged: () => void;\n    _onTrackVideoTypeChanged: () => void;\n    _onLastNValueChanged: () => void;\n    _onForwardedSourcesChanged: () => void;\n\n    /* eslint-disable max-params */\n    /**\n     * Calculates the new {@link TrackStreamingStatus} based on the values given for some specific remote track. It is\n     * assumed that the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param isInForwardedSources - indicates whether the track is in the forwarded sources set. When set to\n     * false it means that JVB is not sending any video for the track.\n     * @param isRestoringTimedout - if true it means that the track has been outside of forwarded sources too\n     * long to be considered {@link TrackStreamingStatus.RESTORING}.\n     * @param isVideoMuted - true if the track is video muted and we should not expect to receive any video.\n     * @param isVideoTrackFrozen - if the current browser support video frozen detection then it will be set to\n     * true when the video track is frozen. If the current browser does not support frozen detection the it's always\n     * false.\n     * @return {TrackStreamingStatus} the new streaming status for the track for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isInForwardedSources: boolean,\n            isRestoringTimedout: boolean,\n            isVideoMuted: boolean,\n            isVideoTrackFrozen: boolean): TrackStreamingStatus {\n\n        // We are currently not checking the endpoint connection status received from the JVB.\n        if (isVideoMuted) {\n            // If the connection is active according to JVB and the track is video muted there is no way for the\n            // connection to be inactive, because the detection logic below only makes sense for video.\n            return TrackStreamingStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return TrackStreamingStatus.ACTIVE;\n            } else if (isInForwardedSources) {\n                return isRestoringTimedout ? TrackStreamingStatus.INTERRUPTED : TrackStreamingStatus.RESTORING;\n            }\n\n            return TrackStreamingStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must rely on the forwarded sources value\n        return isInForwardedSources ? TrackStreamingStatus.ACTIVE : TrackStreamingStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and the streaming status can be only active or\n     * interrupted.\n     * @param isVideoMuted - true if video muted\n     * @param isVideoTrackFrozen - true if the video track for the remote track is currently frozen. If the\n     * current browser does not support video frozen detection then it's always false.\n     * @return {TrackStreamingStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted: boolean, isVideoTrackFrozen: boolean): TrackStreamingStatus {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video track frozen detection...\n            return TrackStreamingStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? TrackStreamingStatus.ACTIVE : TrackStreamingStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>TrackStreamingStatus</tt>.\n     *\n     * @constructor\n     * @param rtc - the RTC service instance\n     * @param conference - parent conference instance // TODO: Needs JitsiConference Type\n     * @param {Object} options\n     * @param {number} [options.p2pRtcMuteTimeout=2500] custom value for\n     * {@link TrackStreamingStatusImpl.p2pRtcMuteTimeout}.\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link TrackStreamingStatusImpl.rtcMuteTimeout}.\n     * @param {number} [options.outOfForwardedSourcesTimeout=500] custom value for\n     * {@link TrackStreamingStatusImpl.outOfForwardedSourcesTimeout}.\n     */\n    constructor(rtc: RTC, conference: any, track: JitsiRemoteTrack, options: {\n        outOfForwardedSourcesTimeout: number;\n        p2pRtcMuteTimeout: number;\n        rtcMuteTimeout: number;\n    }) {\n        this.rtc = rtc;\n        this.conference = conference;\n        this.track = track;\n\n        this.restoringTimer = null;\n        this.rtcMutedTimestamp = null;\n        this.streamingStatusMap = {};\n        this.trackTimer = null;\n\n        this.outOfForwardedSourcesTimeout = typeof options.outOfForwardedSourcesTimeout === 'number'\n            ? options.outOfForwardedSourcesTimeout : DEFAULT_NOT_IN_FORWARDED_SOURCES_TIMEOUT;\n\n        this.p2pRtcMuteTimeout = typeof options.p2pRtcMuteTimeout === 'number'\n            ? options.p2pRtcMuteTimeout : DEFAULT_P2P_RTC_MUTE_TIMEOUT;\n\n        this.rtcMuteTimeout = typeof options.rtcMuteTimeout === 'number'\n            ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n    }\n\n    /**\n     * Gets the video frozen timeout for given source name.\n     * @return how long are we going to wait since RTC video muted even, before a video track is considered\n     * frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(): number {\n        const sourceName = this.track.getSourceName();\n\n        return this.rtc.isInForwardedSources(sourceName)\n            ? this.rtcMuteTimeout\n            : this.conference.isP2PActive() ? this.p2pRtcMuteTimeout : this.outOfForwardedSourcesTimeout;\n    }\n\n    /**\n     * Initializes <tt>TrackStreamingStatus</tt> and bind required event listeners.\n     */\n    init(): void {\n        // Handles P2P status changes\n        this._onP2PStatus = this.figureOutStreamingStatus.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\" events for video type tracks when they stop\n        // receiving data which is often a sign that remote user is having connectivity issues.\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for signalling mute/unmute events.\n            this._onSignallingMuteChanged = this.onSignallingMuteChanged.bind(this);\n            this.track.on(JitsiTrackEvents.TRACK_MUTE_CHANGED, this._onSignallingMuteChanged);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged = this.onTrackVideoTypeChanged.bind(this);\n            this.track.on(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, this._onTrackVideoTypeChanged);\n        }\n\n        this._onForwardedSourcesChanged = this.onForwardedSourcesChanged.bind(this);\n        this.conference.on(JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED, this._onForwardedSourcesChanged);\n\n        this._onLastNValueChanged = this.figureOutStreamingStatus.bind(this);\n        this.rtc.on(RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this instance.\n     */\n    dispose(): void {\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n            this.rtc.removeListener(RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            this.track.off(JitsiTrackEvents.TRACK_MUTE_CHANGED, this._onSignallingMuteChanged);\n            this.track.off(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, this._onTrackVideoTypeChanged);\n        }\n\n        this.conference.off(JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED, this._onForwardedSourcesChanged);\n        this.conference.off(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n        this.conference.off(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n        this.rtc.removeListener(RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.clearTimeout();\n        this.clearRtcMutedTimestamp();\n        this.maybeSendTrackStreamingStatusEvent(Date.now());\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Changes streaming status.\n     * @param newStatus\n     */\n    _changeStreamingStatus(newStatus: TrackStreamingStatus): void {\n        if (this.track.getTrackStreamingStatus() !== newStatus) {\n\n            const sourceName = this.track.getSourceName();\n\n            this.track._setTrackStreamingStatus(newStatus);\n\n            logger.debug(`Emit track streaming status(${Date.now()}) ${sourceName}: ${newStatus}`);\n\n            // It's common for the event listeners to access the JitsiRemoteTrack. Thus pass it as a parameter here.\n            this.track.emit(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED, this.track, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"streaming interrupted\" event which was previously scheduled as a timeout on RTC 'onmute'\n     * event.\n     */\n    clearTimeout(): void {\n        if (this.trackTimer) {\n            window.clearTimeout(this.trackTimer);\n            this.trackTimer = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for remote video track.\n     */\n    clearRtcMutedTimestamp(): void {\n        this.rtcMutedTimestamp = null;\n    }\n\n    /**\n     * Checks if track is considered frozen.\n     * @return <tt>true</tt> if the video has frozen or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for local and remote tracks.\n     */\n    isVideoTrackFrozen(): boolean {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const isVideoRTCMuted = this.track.isWebRTCTrackMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp;\n        const timeout = this._getVideoFrozenTimeout();\n\n        return isVideoRTCMuted && typeof rtcMutedTimestamp === 'number' && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Figures out (and updates) the current streaming status for the track identified by the source name.\n     */\n    figureOutStreamingStatus(): void {\n        const sourceName = this.track.getSourceName();\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout();\n        const audioOnlyMode = this.conference.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable any detection based on video playback or\n        // forwarded sources.\n        const isVideoMuted = this.track.isMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen();\n        const isInForwardedSources = this.rtc.isInForwardedSources(sourceName);\n\n        const newState\n            = inP2PMode\n                ? TrackStreamingStatusImpl._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : TrackStreamingStatusImpl._getNewStateForJvbMode(\n                    isInForwardedSources,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps that we use to track the restoring state\n        if (newState !== TrackStreamingStatus.RESTORING) {\n            this._clearRestoringTimer();\n        }\n\n        logger.debug(\n            `Figure out conn status for ${sourceName}, is video muted: ${\n                isVideoMuted} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in forwarded sources: ${\n                isInForwardedSources} currentStatus => newStatus: ${\n                this.track.getTrackStreamingStatus()} => ${newState}`);\n\n        const oldStreamingStatus = this.streamingStatusMap || {};\n\n        // Send an analytics event (guard on either the p2p flag or the streaming status has changed since the last\n        // time this code block run).\n        if (!('p2p' in oldStreamingStatus)\n            || !('streamingStatus' in oldStreamingStatus)\n            || oldStreamingStatus.p2p !== inP2PMode\n            || oldStreamingStatus.streamingStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendTrackStreamingStatusEvent(nowMs);\n\n            this.streamingStatusMap = {\n                ...oldStreamingStatus,\n                streamingStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the video type is not in\n            // oldStreamingStatus.\n            if (!('videoType' in this.streamingStatusMap)) {\n                this.streamingStatusMap.videoType = this.track.getVideoType();\n            }\n        }\n        this._changeStreamingStatus(newState);\n    }\n\n    /**\n     * Computes the duration of the current streaming status for the track (i.e. 15 seconds in the INTERRUPTED state)\n     * and sends a track streaming status event.\n     * @param nowMs - The current time (in millis).\n     */\n    maybeSendTrackStreamingStatusEvent(nowMs: number): void {\n        const trackStreamingStatus = this.streamingStatusMap;\n\n        if (trackStreamingStatus\n            && 'startedMs' in trackStreamingStatus\n            && 'videoType' in trackStreamingStatus\n            && 'streamingStatus' in trackStreamingStatus\n            && 'p2p' in trackStreamingStatus) {\n            trackStreamingStatus.value = nowMs - trackStreamingStatus.startedMs;\n            Statistics.sendAnalytics(createTrackStreamingStatusEvent(trackStreamingStatus));\n        }\n    }\n\n    /**\n     * On change in forwarded sources set check all leaving and entering track to change their corresponding statuses.\n     *\n     * @param leavingForwardedSources - The array of sourceName leaving forwarded sources.\n     * @param enteringForwardedSources - The array of sourceName entering forwarded sources.\n     * @param timestamp - The time in millis\n     * @private\n     */\n    onForwardedSourcesChanged(\n            leavingForwardedSources: string[] = [],\n            enteringForwardedSources: string[] = [],\n            timestamp: number): void {\n\n        const sourceName = this.track.getSourceName();\n\n        // If the browser doesn't fire the mute/onmute events when the remote peer stops/starts sending media,\n        // calculate the streaming status for all the tracks since it won't get triggered automatically on the track\n        // that has started/stopped receiving media.\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            this.figureOutStreamingStatus();\n        }\n\n        if (leavingForwardedSources.includes(sourceName)) {\n            this.track._clearEnteredForwardedSourcesTimestamp();\n            this._clearRestoringTimer();\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutStreamingStatus();\n        }\n\n        if (enteringForwardedSources.includes(sourceName)) {\n            // store the timestamp this track is entering forwarded sources\n            this.track._setEnteredForwardedSourcesTimestamp(timestamp);\n            browser.supportsVideoMuteOnConnInterrupted() && this.figureOutStreamingStatus();\n        }\n    }\n\n    /**\n     * Clears the restoring timer for video track and the timestamp for entering forwarded sources.\n     */\n    _clearRestoringTimer(): void {\n        const rTimer = this.restoringTimer;\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimer = null;\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares current time and the time the track\n     * entered in forwarded sources. If it hasn't timedout and there is no timer added, add new timer in order to give\n     * it more time to become active or mark it as interrupted on next check.\n     *\n     * @returns <tt>true</tt> if the track was in restoring state more than the timeout\n     * ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(): boolean {\n        const enteredForwardedSourcesTimestamp = this.track._getEnteredForwardedSourcesTimestamp();\n\n        if (enteredForwardedSourcesTimestamp\n            && (Date.now() - enteredForwardedSourcesTimestamp) >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled, schedule one so we can track the restoring\n        // state and change it after reaching the timeout\n        const rTimer = this.restoringTimer;\n\n        if (!rTimer) {\n            this.restoringTimer = setTimeout(() => this.figureOutStreamingStatus(), DEFAULT_RESTORING_TIMEOUT);\n        }\n\n        return false;\n    }\n\n    /** Checks whether a track is the current track. */\n    _isCurrentTrack(track: JitsiRemoteTrack): boolean {\n        return track.getSourceName() === this.track.getSourceName();\n    }\n\n    /**\n     * Sends a last/final track streaming status event for the track of the user that left the conference.\n     * @param id - The id of the participant that left the conference.\n     */\n    onUserLeft(id: string): void {\n        if (this.track.getParticipantId() === id) {\n            this.maybeSendTrackStreamingStatusEvent(Date.now());\n            this.streamingStatusMap = {};\n        }\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param track - The video track for which 'onmute' event will be processed.\n     */\n    onTrackRtcMuted(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = track.getSourceName();\n\n        logger.debug(`Detector track RTC muted: ${sourceName}`, Date.now());\n\n        this.rtcMutedTimestamp = Date.now();\n        if (!track.isMuted()) {\n            // If the user is not muted according to the signalling we'll give it some time, before the streaming\n            // interrupted event is triggered.\n            this.clearTimeout();\n\n            // The timeout is reduced when track is not in the forwarded sources\n            const timeout = this._getVideoFrozenTimeout();\n\n            this.trackTimer = window.setTimeout(() => {\n                logger.debug(`Set track RTC muted for: ${sourceName} after the timeout of ${timeout} ms`);\n                this.clearTimeout();\n                this.figureOutStreamingStatus();\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param track - The video track for which 'onunmute' event will be processed.\n     */\n    onTrackRtcUnmuted(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        const sourceName = this.track.getSourceName();\n\n        logger.debug(`Detector track RTC unmuted: ${sourceName}`, Date.now());\n\n        this.clearTimeout();\n        this.clearRtcMutedTimestamp();\n\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param track - The remote video track for which the signalling mute/unmute event will be\n     * processed.\n     */\n    onSignallingMuteChanged(track: JitsiRemoteTrack): void {\n        if (!this._isCurrentTrack(track)) {\n            return;\n        }\n\n        this.figureOutStreamingStatus();\n    }\n\n    /**\n     * Sends a track streaming status event as a result of the video type changing.\n     * @deprecated this will go away with full multiple streams support\n     * @param type - The video type.\n     */\n    onTrackVideoTypeChanged(type: VideoType): void {\n        const nowMs = Date.now();\n\n        this.maybeSendTrackStreamingStatusEvent(nowMs);\n\n        this.streamingStatusMap = {\n            ...this.streamingStatusMap || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n\nexport default TrackStreamingStatusImpl;\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport TrackStreamingStatusImpl, { TrackStreamingStatus } from '../connectivity/TrackStreamingStatus';\nimport Statistics from '../statistics/statistics';\nimport { isValidNumber } from '../util/MathUtil';\n\nimport JitsiTrack from './JitsiTrack';\n\nconst logger = require('@jitsi/logger').getLogger('modules/RTC/JitsiRemoteTrack');\n\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [ 'abort', 'canplaythrough', 'ended', 'error', 'stalled', 'suspend', 'waiting' ];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @param {String} sourceName the source name signaled for the track\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P,\n            sourceName) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n        this._sourceName = sourceName;\n        this._trackStreamingStatus = null;\n        this._trackStreamingStatusImpl = null;\n\n        /**\n         * This holds the timestamp indicating when remote video track entered forwarded sources set. Track entering\n         * forwardedSources will have streaming status restoring and when we start receiving video will become active,\n         * but if video is not received for certain time {@link DEFAULT_RESTORING_TIMEOUT} that track streaming status\n         * will become interrupted.\n         */\n        this._enteredForwardedSourcesTimestamp = null;\n\n        this.addEventListener = this.on = this._addEventListener.bind(this);\n        this.removeEventListener = this.off = this._removeEventListener.bind(this);\n\n        logger.debug(`New remote track created: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Overrides addEventListener method to init TrackStreamingStatus instance when there are listeners for the\n     * {@link JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED} event.\n     *\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    _addEventListener(event, handler) {\n        super.addListener(event, handler);\n\n        if (event === JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED\n            && this.listenerCount(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED)\n            && !this._trackStreamingStatusImpl\n        ) {\n            this._initTrackStreamingStatus();\n            logger.debug(`Initializing track streaming status: ${this._sourceName}`);\n        }\n    }\n\n    /**\n     * Overrides removeEventListener method to dispose TrackStreamingStatus instance.\n     *\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    _removeEventListener(event, handler) {\n        super.removeListener(event, handler);\n\n        if (event === JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED\n            && !this.listenerCount(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED)\n        ) {\n            this._disposeTrackStreamingStatus();\n            logger.debug(`Disposing track streaming status: ${this._sourceName}`);\n        }\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        // Ignore mute events that get fired on desktop tracks because of 0Hz screensharing introduced in Chromium.\n        // The sender stops sending frames if the content of the captured window doesn't change resulting in the\n        // receiver showing avatar instead of the shared content.\n        if (this.videoType === VideoType.DESKTOP) {\n            logger.debug('Ignoring mute event on desktop tracks.');\n\n            return;\n        }\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Removes attached event listeners and dispose TrackStreamingStatus .\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        if (this.disposed) {\n            return;\n        }\n\n        this._disposeTrackStreamingStatus();\n\n        return super.dispose();\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n\n        logger.info(`Mute ${this}: ${value}`);\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n\n    /**\n     * Returns the tracks source name\n     *\n     * @returns {string} the track's source name\n     */\n    getSourceName() {\n        return this._sourceName;\n    }\n\n    /**\n     * Update the properties when the track is remapped to another source.\n     *\n     * @param {string} owner The endpoint ID of the new owner.\n     */\n    setOwner(owner) {\n        this.ownerEndpointId = owner;\n    }\n\n    /**\n     * Sets the name of the source associated with the remtoe track.\n     *\n     * @param {string} name - The source name to be associated with the track.\n     */\n    setSourceName(name) {\n        this._sourceName = name;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        if (!this.conference.room) {\n            return;\n        }\n\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        logger.info(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = isValidNumber(gumEnd) && isValidNumber(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        logger.info(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Initializes trackStreamingStatusImpl.\n     */\n    _initTrackStreamingStatus() {\n        const config = this.conference.options.config;\n\n        this._trackStreamingStatus = TrackStreamingStatus.ACTIVE;\n\n        this._trackStreamingStatusImpl = new TrackStreamingStatusImpl(\n            this.rtc,\n            this.conference,\n            this,\n            {\n                // These options are not public API, leaving it here only as an entry point through config for\n                // tuning up purposes. Default values should be adjusted as soon as optimal values are discovered.\n                p2pRtcMuteTimeout: config._p2pConnStatusRtcMuteTimeout,\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfForwardedSourcesTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n\n        this._trackStreamingStatusImpl.init();\n\n        // In some edge cases, both browser 'unmute' and bridge's forwarded sources events are received before a\n        // LargeVideoUpdate is scheduled for auto-pinning a new screenshare track. If there are no layout changes and\n        // no further track events are received for the SS track, a black tile will be displayed for screenshare on\n        // stage. Fire a TRACK_STREAMING_STATUS_CHANGED event if the media is already being received for the remote\n        // track to prevent this from happening.\n        !this._trackStreamingStatusImpl.isVideoTrackFrozen()\n            && this.rtc.eventEmitter.emit(\n                JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED,\n                this,\n                this._trackStreamingStatus);\n    }\n\n    /**\n     * Disposes trackStreamingStatusImpl and clears trackStreamingStatus.\n     */\n    _disposeTrackStreamingStatus() {\n        if (this._trackStreamingStatusImpl) {\n            this._trackStreamingStatusImpl.dispose();\n            this._trackStreamingStatusImpl = null;\n            this._trackStreamingStatus = null;\n        }\n    }\n\n    /**\n     * Updates track's streaming status.\n     *\n     * @param {string} state the current track streaming state. {@link TrackStreamingStatus}.\n     */\n    _setTrackStreamingStatus(status) {\n        this._trackStreamingStatus = status;\n    }\n\n    /**\n     * Returns track's streaming status.\n     *\n     * @returns {string} the streaming status <tt>TrackStreamingStatus</tt> of the track. Returns null\n     * if trackStreamingStatusImpl hasn't been initialized.\n     *\n     * {@link TrackStreamingStatus}.\n     */\n    getTrackStreamingStatus() {\n        return this._trackStreamingStatus;\n    }\n\n    /**\n     * Clears the timestamp of when the track entered forwarded sources.\n     */\n    _clearEnteredForwardedSourcesTimestamp() {\n        this._enteredForwardedSourcesTimestamp = null;\n    }\n\n    /**\n     * Updates the timestamp of when the track entered forwarded sources.\n     *\n     * @param {number} timestamp the time in millis\n     */\n    _setEnteredForwardedSourcesTimestamp(timestamp) {\n        this._enteredForwardedSourcesTimestamp = timestamp;\n    }\n\n    /**\n     * Returns the timestamp of when the track entered forwarded sources.\n     *\n     * @returns {number} the time in millis\n     */\n    _getEnteredForwardedSourcesTimestamp() {\n        return this._enteredForwardedSourcesTimestamp;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, sourceName: ${this._sourceName}, status: {${this._getStatus()}}]`;\n    }\n}\n","/**\n * Enumeration of the scalability modes supported by the video encoders.\n * For more information, check https://www.w3.org/TR/webrtc-svc/#dependencydiagrams*\n *\n * enum VideoEncoderScalabilityMode {\n *  L1T3: string;\n *  L2T3: string;\n *  L2T3_KEY: string;\n *  L3T3: string;\n *  L3T3_KEY: string;\n * }\n */\nexport enum VideoEncoderScalabilityMode {\n\n    /**\n     * L1T3 mode: 1-layer spatial and 3-layer temporal scalabilty encoding.\n     */\n    L1T3 = 'L1T3',\n\n    /**\n     * L2T2 mode: 2-layer spatial and 3-layer temporal scalability encoding.\n     */\n    L2T3 = 'L2T3',\n\n    /**\n     * L2T3_KEY mode: 2-layer spatial and 3-layer temporal scalability K-SVC encoding.\n     */\n    L2T3_KEY = 'L2T3_KEY',\n\n    /**\n     * L3T3 mode: -layer spatial and 3-layer temporal scalability encoding.\n     */\n    L3T3 = 'L3T3',\n\n    /**\n     * L3T3_Key mode: 3-layer spatial and 3-layer temporal scalability K-SVC encoding.\n     */\n    L3T3_KEY = 'L3T3_KEY'\n}\n","import { getLogger } from '@jitsi/logger';\nimport { cloneDeep } from 'lodash-es';\nimport transform from 'sdp-transform';\n\nimport { CodecMimeType } from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport {\n    SIM_LAYERS,\n    SSRC_GROUP_SEMANTICS,\n    STANDARD_CODEC_SETTINGS,\n    VIDEO_QUALITY_LEVELS,\n    VIDEO_QUALITY_SETTINGS\n} from '../../service/RTC/StandardVideoQualitySettings';\nimport { VideoEncoderScalabilityMode } from '../../service/RTC/VideoEncoderScalabilityMode';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport browser from '../browser';\nimport SDPUtil from '../sdp/SDPUtil';\n\nconst logger = getLogger('modules/RTC/TPCUtils');\nconst VIDEO_CODECS = [ CodecMimeType.AV1, CodecMimeType.H264, CodecMimeType.VP8, CodecMimeType.VP9 ];\n\n/**\n * Handles all the utility functions for the TraceablePeerConnection class, like calculating the encoding parameters,\n * determining the media direction, calculating bitrates based on the current codec settings, etc.\n */\nexport class TPCUtils {\n    /**\n     * Creates a new instance for a given TraceablePeerConnection\n     *\n     * @param peerconnection - the tpc instance for which we have utility functions.\n     * @param options - additional options that can be passed to the utility functions.\n     * @param options.audioQuality - the audio quality settings that are used to calculate the audio codec parameters.\n     * @param options.isP2P - whether the connection is a P2P connection.\n     * @param options.videoQuality - the video quality settings that are used to calculate the encoding parameters.\n     */\n    constructor(peerconnection, options = {}) {\n        this.pc = peerconnection;\n        this.options = options;\n        this.codecSettings = cloneDeep(STANDARD_CODEC_SETTINGS);\n\n        /**\n         * Flag indicating bridge support for AV1 codec. On the bridge connection, it is supported only when support for\n         * Dependency Descriptor header extensions is offered by Jicofo. H.264 simulcast is also possible when these\n         * header extensions are negotiated.\n         */\n        this.supportsDDHeaderExt = false;\n\n        /**\n         * Reads videoQuality settings from config.js and overrides the code defaults for video codecs.\n         */\n        const videoQualitySettings = this.options.videoQuality;\n\n        if (videoQualitySettings) {\n            for (const codec of VIDEO_CODECS) {\n                const codecConfig = videoQualitySettings[codec];\n                const bitrateSettings = codecConfig?.maxBitratesVideo\n\n                    // Read the deprecated settings for max bitrates.\n                    ?? (videoQualitySettings.maxbitratesvideo\n                        && videoQualitySettings.maxbitratesvideo[codec.toUpperCase()]);\n\n                if (bitrateSettings) {\n                    const settings = Object.values(VIDEO_QUALITY_SETTINGS);\n\n                    [ ...settings, 'ssHigh' ].forEach(value => {\n                        if (bitrateSettings[value]) {\n                            this.codecSettings[codec].maxBitratesVideo[value] = bitrateSettings[value];\n                        }\n                    });\n                }\n\n                if (!codecConfig) {\n                    continue; // eslint-disable-line no-continue\n                }\n\n                const scalabilityModeEnabled = this.codecSettings[codec].scalabilityModeEnabled\n                    && (typeof codecConfig.scalabilityModeEnabled === 'undefined'\n                        || codecConfig.scalabilityModeEnabled);\n\n                if (scalabilityModeEnabled) {\n                    typeof codecConfig.useSimulcast !== 'undefined'\n                        && (this.codecSettings[codec].useSimulcast = codecConfig.useSimulcast);\n                    typeof codecConfig.useKSVC !== 'undefined'\n                        && (this.codecSettings[codec].useKSVC = codecConfig.useKSVC);\n                } else {\n                    this.codecSettings[codec].scalabilityModeEnabled = false;\n                }\n            }\n        }\n    }\n\n    /**\n     * Calculates the configuration of the active encoding when the browser sends only one stream, i,e,, when there is\n     * no spatial scalability configure (p2p) or when it is running in full SVC mode.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack - The local video track.\n     * @param {CodecMimeType} codec - The video codec.\n     * @param {number} newHeight - The resolution that needs to be configured for the local video track.\n     * @returns {Object} configuration.\n     * @private\n     */\n    _calculateActiveEncodingParams(localVideoTrack, codec, newHeight) {\n        const codecBitrates = this.codecSettings[codec].maxBitratesVideo;\n        const trackCaptureHeight = localVideoTrack.getCaptureResolution();\n        const effectiveNewHeight = newHeight > trackCaptureHeight ? trackCaptureHeight : newHeight;\n        const desktopShareBitrate = this.options.videoQuality?.desktopbitrate || codecBitrates.ssHigh;\n        const isScreenshare = localVideoTrack.getVideoType() === VideoType.DESKTOP;\n        let scalabilityMode = this.codecSettings[codec].useKSVC\n            ? VideoEncoderScalabilityMode.L3T3_KEY : VideoEncoderScalabilityMode.L3T3;\n        const { height, level } = VIDEO_QUALITY_LEVELS.find(lvl => lvl.height <= effectiveNewHeight);\n        let maxBitrate;\n        let scaleResolutionDownBy = SIM_LAYERS[2].scaleFactor;\n\n        if (this._isScreenshareBitrateCapped(localVideoTrack)) {\n            scalabilityMode = VideoEncoderScalabilityMode.L1T3;\n            maxBitrate = desktopShareBitrate;\n        } else if (isScreenshare) {\n            maxBitrate = codecBitrates.ssHigh;\n        } else {\n            maxBitrate = codecBitrates[level];\n            effectiveNewHeight && (scaleResolutionDownBy = trackCaptureHeight / effectiveNewHeight);\n\n            if (height !== effectiveNewHeight) {\n                logger.debug(`Quality level with height=${height} was picked when requested height=${newHeight} for`\n                    + `track with capture height=${trackCaptureHeight}`);\n            }\n        }\n\n        const config = {\n            active: effectiveNewHeight > 0,\n            maxBitrate,\n            scalabilityMode,\n            scaleResolutionDownBy\n        };\n\n        if (!config.active || isScreenshare) {\n            return config;\n        }\n\n        // Configure the sender to send all 3 spatial layers for resolutions 720p and higher.\n        switch (level) {\n        case VIDEO_QUALITY_SETTINGS.ULTRA:\n        case VIDEO_QUALITY_SETTINGS.FULL:\n        case VIDEO_QUALITY_SETTINGS.HIGH:\n            config.scalabilityMode = this.codecSettings[codec].useKSVC\n                ? VideoEncoderScalabilityMode.L3T3_KEY : VideoEncoderScalabilityMode.L3T3;\n            break;\n        case VIDEO_QUALITY_SETTINGS.STANDARD:\n            config.scalabilityMode = this.codecSettings[codec].useKSVC\n                ? VideoEncoderScalabilityMode.L2T3_KEY : VideoEncoderScalabilityMode.L2T3;\n            break;\n        default:\n            config.scalabilityMode = VideoEncoderScalabilityMode.L1T3;\n        }\n\n        return config;\n    }\n\n    /**\n     * Returns the codecs in the current order of preference in the SDP provided.\n     *\n     * @param {transform.SessionDescription} parsedSdp the parsed SDP object.\n     * @returns {Array<CodecMimeType>}\n     * @private\n     */\n    _getConfiguredVideoCodecsImpl(parsedSdp) {\n        const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\n        const codecs = new Set(mLine.rtp\n            .filter(pt => pt.codec.toLowerCase() !== 'rtx')\n            .map(pt => pt.codec.toLowerCase()));\n\n        return Array.from(codecs);\n    }\n\n    /**\n     * The startup configuration for the stream encodings that are applicable to the video stream when a new sender is\n     * created on the peerconnection. The initial config takes into account the differences in browser's simulcast\n     * implementation.\n     *\n     * Encoding parameters:\n     * active - determine the on/off state of a particular encoding.\n     * maxBitrate - max. bitrate value to be applied to that particular encoding based on the encoding's resolution and\n     *  config.js videoQuality settings if applicable.\n     * rid - Rtp Stream ID that is configured for a particular simulcast stream.\n     * scaleResolutionDownBy - the factor by which the encoding is scaled down from the original resolution of the\n     *  captured video.\n     *\n     * @param {JitsiLocalTrack} localTrack - The local video track.\n     * @param {String} codec - The codec currently in use.\n     * @returns {Array<Object>} - The initial configuration for the stream encodings.\n     * @private\n     */\n    _getVideoStreamEncodings(localTrack, codec) {\n        const captureResolution = localTrack.getCaptureResolution();\n        const codecBitrates = this.codecSettings[codec].maxBitratesVideo;\n        const videoType = localTrack.getVideoType();\n        let effectiveScaleFactors = SIM_LAYERS.map(sim => sim.scaleFactor);\n        let cameraMaxbitrate;\n\n        if (videoType === VideoType.CAMERA) {\n            const { level } = VIDEO_QUALITY_LEVELS.find(lvl => lvl.height <= captureResolution);\n\n            cameraMaxbitrate = codecBitrates[level];\n            if (level === VIDEO_QUALITY_SETTINGS.ULTRA) {\n                effectiveScaleFactors[1] = 6.0; // 360p\n                effectiveScaleFactors[0] = 12.0; // 180p\n            } else if (level === VIDEO_QUALITY_SETTINGS.FULL) {\n                effectiveScaleFactors[1] = 3.0; // 360p\n                effectiveScaleFactors[0] = 6.0; // 180p\n            }\n        }\n        const maxBitrate = videoType === VideoType.DESKTOP\n            ? codecBitrates.ssHigh : cameraMaxbitrate;\n        let effectiveBitrates = [ codecBitrates.low, codecBitrates.standard, maxBitrate ];\n\n        // The SSRCs on older versions of Firefox are reversed in SDP, i.e., they have resolution order of 1:2:4 as\n        // opposed to Chromium and other browsers. This has been reverted in Firefox 117 as part of the below commit.\n        // https://hg.mozilla.org/mozilla-central/rev/b0348f1f8d7197fb87158ba74542d28d46133997\n        // This revert seems to be applied only to camera tracks, the desktop stream encodings still have the\n        // resolution order of 4:2:1.\n        if (browser.isFirefox()\n            && !browser.supportsScalabilityModeAPI()\n            && (videoType === VideoType.DESKTOP || browser.isVersionLessThan(117))) {\n            effectiveBitrates = effectiveBitrates.reverse();\n            effectiveScaleFactors = effectiveScaleFactors.reverse();\n        }\n\n        const standardSimulcastEncodings = [\n            {\n                active: this.pc.videoTransferActive,\n                maxBitrate: effectiveBitrates[0],\n                rid: SIM_LAYERS[0].rid,\n                scaleResolutionDownBy: effectiveScaleFactors[0]\n            },\n            {\n                active: this.pc.videoTransferActive,\n                maxBitrate: effectiveBitrates[1],\n                rid: SIM_LAYERS[1].rid,\n                scaleResolutionDownBy: effectiveScaleFactors[1]\n            },\n            {\n                active: this.pc.videoTransferActive,\n                maxBitrate: effectiveBitrates[2],\n                rid: SIM_LAYERS[2].rid,\n                scaleResolutionDownBy: effectiveScaleFactors[2]\n            }\n        ];\n\n        if (this.codecSettings[codec].scalabilityModeEnabled) {\n            // Configure all 3 encodings when simulcast is requested through config.js for AV1 and VP9 and for H.264\n            // always since that is the only supported mode when DD header extension is negotiated for H.264.\n            if (this.codecSettings[codec].useSimulcast || codec === CodecMimeType.H264) {\n                for (const encoding of standardSimulcastEncodings) {\n                    encoding.scalabilityMode = VideoEncoderScalabilityMode.L1T3;\n                }\n\n                return standardSimulcastEncodings;\n            }\n\n            // Configure only one encoding for the SVC mode.\n            return [\n                {\n                    active: this.pc.videoTransferActive,\n                    maxBitrate: effectiveBitrates[2],\n                    rid: SIM_LAYERS[0].rid,\n                    scaleResolutionDownBy: effectiveScaleFactors[2],\n                    scalabilityMode: this.codecSettings[codec].useKSVC\n                        ? VideoEncoderScalabilityMode.L3T3_KEY : VideoEncoderScalabilityMode.L3T3\n                },\n                {\n                    active: false,\n                    maxBitrate: 0\n                },\n                {\n                    active: false,\n                    maxBitrate: 0\n                }\n            ];\n        }\n\n        return standardSimulcastEncodings;\n    }\n\n    /**\n     * Returns a boolean indicating whether the video encoder is running in full SVC mode, i.e., it sends only one\n     * video stream that has both temporal and spatial scalability.\n     *\n     * @param {CodecMimeType} codec - The video codec in use.\n     * @returns boolean - true if the video encoder is running in full SVC mode, false otherwise.\n     * @private\n     */\n    _isRunningInFullSvcMode(codec) {\n        return (codec === CodecMimeType.VP9 || codec === CodecMimeType.AV1)\n            && this.codecSettings[codec].scalabilityModeEnabled\n            && !this.codecSettings[codec].useSimulcast;\n    }\n\n    /**\n     * Returns a boolean indicating whether the bitrate needs to be capped for the local video track if it happens to\n     * be a screenshare track. The lower spatial layers for screensharing are disabled when low fps screensharing is in\n     * progress. Sending all three streams often results in the browser suspending the high resolution in low b/w and\n     * and low cpu conditions, especially on the low end machines. Suspending the low resolution streams ensures that\n     * the highest resolution stream is available always. Safari is an exception here since it does not send the\n     * desktop stream at all if only the high resolution stream is enabled.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack - The local video track.\n     * @returns {boolean} - true if the bitrate needs to be capped for the screenshare track, false otherwise.\n     * @private\n     */\n    _isScreenshareBitrateCapped(localVideoTrack) {\n        return localVideoTrack.getVideoType() === VideoType.DESKTOP\n            && this.pc._capScreenshareBitrate\n            && !browser.isWebKitBased();\n    }\n\n    /**\n     * Returns the calculated active state of the stream encodings based on the frame height requested for the send\n     * stream. All the encodings that have a resolution lower than the frame height requested will be enabled.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @param {CodecMimeType} codec - The codec currently in use.\n     * @param {number} newHeight The resolution requested for the video track.\n     * @returns {Array<boolean>}\n     */\n    calculateEncodingsActiveState(localVideoTrack, codec, newHeight) {\n        const height = localVideoTrack.getCaptureResolution();\n        const videoStreamEncodings = this._getVideoStreamEncodings(localVideoTrack, codec);\n        const encodingsState = videoStreamEncodings\n        .map(encoding => height / encoding.scaleResolutionDownBy)\n        .map((frameHeight, idx) => {\n            let activeState = false;\n\n            // When video is suspended on the media session.\n            if (!this.pc.videoTransferActive) {\n                return activeState;\n            }\n\n            // Single video stream.\n            if (!this.pc.isSpatialScalabilityOn() || this._isRunningInFullSvcMode(codec)) {\n                const { active } = this._calculateActiveEncodingParams(localVideoTrack, codec, newHeight);\n\n                return idx === 0 ? active : activeState;\n            }\n\n            if (newHeight > 0) {\n                if (localVideoTrack.getVideoType() === VideoType.CAMERA) {\n                    activeState = frameHeight <= newHeight\n\n                        // Keep the LD stream enabled even when the LD stream's resolution is higher than of the\n                        // requested resolution. This can happen when camera is captured at high resolutions like 4k\n                        // but the requested resolution is 180. Since getParameters doesn't give us information about\n                        // the resolutions of the simulcast encodings, we have to rely on our initial config for the\n                        // simulcast streams.\n                        || videoStreamEncodings[idx]?.scaleResolutionDownBy === SIM_LAYERS[0].scaleFactor;\n                } else {\n                    // For screenshare, keep the HD layer enabled always and the lower layers only for high fps\n                    // screensharing.\n                    activeState = videoStreamEncodings[idx].scaleResolutionDownBy === SIM_LAYERS[2].scaleFactor\n                        || !this._isScreenshareBitrateCapped(localVideoTrack);\n                }\n            }\n\n            return activeState;\n        });\n\n        return encodingsState;\n    }\n\n    /**\n     * Returns the calculated max bitrates that need to be configured on the stream encodings based on the video\n     * type and other considerations associated with screenshare.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @param {CodecMimeType} codec - The codec currently in use.\n     * @param {number} newHeight The resolution requested for the video track.\n     * @returns {Array<number>}\n     */\n    calculateEncodingsBitrates(localVideoTrack, codec, newHeight) {\n        const codecBitrates = this.codecSettings[codec].maxBitratesVideo;\n        const desktopShareBitrate = this.options.videoQuality?.desktopbitrate || codecBitrates.ssHigh;\n        const encodingsBitrates = this._getVideoStreamEncodings(localVideoTrack, codec)\n        .map((encoding, idx) => {\n            let bitrate = encoding.maxBitrate;\n\n            // Single video stream.\n            if (!this.pc.isSpatialScalabilityOn() || this._isRunningInFullSvcMode(codec)) {\n                const { maxBitrate } = this._calculateActiveEncodingParams(localVideoTrack, codec, newHeight);\n\n                return idx === 0 ? maxBitrate : 0;\n            }\n\n            // Multiple video streams.\n            if (this._isScreenshareBitrateCapped(localVideoTrack)) {\n                bitrate = desktopShareBitrate;\n            }\n\n            return bitrate;\n        });\n\n        return encodingsBitrates;\n    }\n\n    /**\n     * Returns the calculated scalability modes for the video encodings when scalability modes are supported.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @param {CodecMimeType} codec - The codec currently in use.\n     * @param {number} maxHeight The resolution requested for the video track.\n     * @returns {Array<VideoEncoderScalabilityMode> | undefined}\n     */\n    calculateEncodingsScalabilityMode(localVideoTrack, codec, maxHeight) {\n        if (!this.pc.isSpatialScalabilityOn() || !this.codecSettings[codec].scalabilityModeEnabled) {\n            return;\n        }\n\n        // Default modes for simulcast.\n        const scalabilityModes = [\n            VideoEncoderScalabilityMode.L1T3,\n            VideoEncoderScalabilityMode.L1T3,\n            VideoEncoderScalabilityMode.L1T3\n        ];\n\n        // Full SVC mode.\n        if (this._isRunningInFullSvcMode(codec)) {\n            const { scalabilityMode }\n                = this._calculateActiveEncodingParams(localVideoTrack, codec, maxHeight);\n\n            scalabilityModes[0] = scalabilityMode;\n            scalabilityModes[1] = undefined;\n            scalabilityModes[2] = undefined;\n\n            return scalabilityModes;\n        }\n\n        return scalabilityModes;\n    }\n\n    /**\n     * Returns the scale factor that needs to be applied on the local video stream based on the desired resolution\n     * and the codec in use.\n     *\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\n     * @param {CodecMimeType} codec - The codec currently in use.\n     * @param {number} maxHeight The resolution requested for the video track.\n     * @returns {Array<float>}\n     */\n    calculateEncodingsScaleFactor(localVideoTrack, codec, maxHeight) {\n        if (this.pc.isSpatialScalabilityOn() && this.isRunningInSimulcastMode(codec)) {\n            return this._getVideoStreamEncodings(localVideoTrack, codec)\n                .map(encoding => encoding.scaleResolutionDownBy);\n        }\n\n        // Single video stream.\n        const { scaleResolutionDownBy }\n            = this._calculateActiveEncodingParams(localVideoTrack, codec, maxHeight);\n\n        return [ scaleResolutionDownBy, undefined, undefined ];\n    }\n\n    /**\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e., the primary ssrc\n     * first and the secondary rtx ssrc later. This is important for unified plan since we have only one FID group per\n     * media description.\n     * @param {Object} description the webRTC session description instance for the remote description.\n     * @returns {Object} the modified webRTC session description instance.\n     */\n    ensureCorrectOrderOfSsrcs(description) {\n        const parsedSdp = transform.parse(description.sdp);\n\n        parsedSdp.media.forEach(mLine => {\n            if (mLine.type === MediaType.AUDIO) {\n                return;\n            }\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\n                return;\n            }\n            let reorderedSsrcs = [];\n\n            const ssrcs = new Set();\n\n            mLine.ssrcGroups.map(group =>\n                group.ssrcs\n                    .split(' ')\n                    .filter(Boolean)\n                    .forEach(ssrc => ssrcs.add(ssrc))\n            );\n\n            ssrcs.forEach(ssrc => {\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\n\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\n            });\n            mLine.ssrcs = reorderedSsrcs;\n        });\n\n        return {\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        };\n    }\n\n    /**\n     * Returns the codec that is configured on the client as the preferred video codec for the given local video track.\n     *\n     * @param {JitsiLocalTrack} localTrack - The local video track.\n     * @returns {CodecMimeType} The codec that is set as the preferred codec for the given local video track.\n     */\n    getConfiguredVideoCodec(localTrack) {\n        const localVideoTrack = localTrack ?? this.pc.getLocalVideoTracks()[0];\n        const rtpSender = this.pc.findSenderForTrack(localVideoTrack.getTrack());\n\n        if (this.pc.usesCodecSelectionAPI() && rtpSender) {\n            const { encodings } = rtpSender.getParameters();\n\n            if (encodings[0].codec) {\n                return encodings[0].codec.mimeType.split('/')[1].toLowerCase();\n            }\n        }\n\n        const sdp = this.pc.remoteDescription?.sdp;\n\n        if (!sdp) {\n            return CodecMimeType.VP8;\n        }\n        const parsedSdp = transform.parse(sdp);\n        const mLine = parsedSdp.media\n            .find(m => m.mid.toString() === this.pc.localTrackTransceiverMids.get(localVideoTrack.rtcId));\n        const payload = mLine.payloads.split(' ')[0];\n        const { codec } = mLine.rtp.find(rtp => rtp.payload === Number(payload));\n\n        if (codec) {\n            return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n        }\n\n        return CodecMimeType.VP8;\n    }\n\n    /**\n     * Returns the codecs in the current order of preference as configured on the peerconnection.\n     *\n     * @param {string} - The local SDP to be used.\n     * @returns {Array}\n     */\n    getConfiguredVideoCodecs(sdp) {\n        const currentSdp = sdp ?? this.pc.localDescription?.sdp;\n\n        if (!currentSdp) {\n            return [];\n        }\n        const parsedSdp = transform.parse(currentSdp);\n\n        return this._getConfiguredVideoCodecsImpl(parsedSdp);\n    }\n\n    /**\n     * Returns the desired media direction for the given media type based on the current state of the peerconnection.\n     *\n     * @param {MediaType} mediaType - The media type for which the desired media direction is to be obtained.\n     * @param {boolean} isAddOperation - Whether the direction is being set for a source add operation.\n     * @returns {MediaDirection} - The desired media direction for the given media type.\n     */\n    getDesiredMediaDirection(mediaType, isAddOperation = false) {\n        const hasLocalSource = this.pc.getLocalTracks(mediaType).length > 0;\n\n        if (isAddOperation) {\n            return hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.SENDONLY;\n        }\n\n        return hasLocalSource ? MediaDirection.RECVONLY : MediaDirection.INACTIVE;\n    }\n\n    /**\n     * Obtains stream encodings that need to be configured on the given track based\n     * on the track media type and the simulcast setting.\n     * @param {JitsiLocalTrack} localTrack\n     */\n    getStreamEncodings(localTrack) {\n        if (localTrack.isAudioTrack()) {\n            return [ { active: this.pc.audioTransferActive } ];\n        }\n        const codec = this.getConfiguredVideoCodec(localTrack);\n\n        if (this.pc.isSpatialScalabilityOn()) {\n            return this._getVideoStreamEncodings(localTrack, codec);\n        }\n\n        return [ {\n            active: this.pc.videoTransferActive,\n            maxBitrate: this.codecSettings[codec].maxBitratesVideo.high\n        } ];\n    }\n\n    /**\n     * Injects a 'SIM' ssrc-group line for simulcast into the given session description object to make Jicofo happy.\n     * This is needed only for Firefox since it does not generate it when simulcast is enabled but we run the check\n     * on all browsers just in case as it would break the functionality otherwise.\n     *\n     * @param desc A session description object (with 'type' and 'sdp' fields)\n     * @return A session description object with its sdp field modified to contain an inject ssrc-group for simulcast.\n     */\n    injectSsrcGroupForSimulcast(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        // Check if the browser supports RTX, add only the primary ssrcs to the SIM group if that is the case.\n        video.ssrcGroups = video.ssrcGroups || [];\n        const fidGroups = video.ssrcGroups.filter(group => group.semantics === SSRC_GROUP_SEMANTICS.FID);\n\n        if (video.simulcast || video.simulcast_03) {\n            const ssrcs = [];\n\n            if (fidGroups && fidGroups.length) {\n                fidGroups.forEach(group => {\n                    ssrcs.push(group.ssrcs.split(' ')[0]);\n                });\n            } else {\n                video.ssrcs.forEach(ssrc => {\n                    if (ssrc.attribute === 'msid') {\n                        ssrcs.push(ssrc.id);\n                    }\n                });\n            }\n            if (video.ssrcGroups.find(group => group.semantics === SSRC_GROUP_SEMANTICS.SIM)) {\n                // Group already exists, no need to do anything\n                return desc;\n            }\n\n            // Add a SIM group for every 3 FID groups.\n            for (let i = 0; i < ssrcs.length; i += 3) {\n                const simSsrcs = ssrcs.slice(i, i + 3);\n\n                video.ssrcGroups.push({\n                    semantics: SSRC_GROUP_SEMANTICS.SIM,\n                    ssrcs: simSsrcs.join(' ')\n                });\n            }\n        }\n\n        return {\n            type: desc.type,\n            sdp: transform.write(sdp)\n        };\n    }\n\n    /**\n     * Takes in a *unified plan* offer and inserts the appropriate parameters for adding simulcast receive support.\n     * @param {Object} desc - A session description object\n     * @param {String} desc.type - the type (offer/answer)\n     * @param {String} desc.sdp - the sdp content\n     *\n     * @return {Object} A session description (same format as above) object with its sdp field modified to advertise\n     * simulcast receive support.\n     */\n    insertUnifiedPlanSimulcastReceive(desc) {\n        // a=simulcast line is not needed on browsers where we SDP munging is used for enabling on simulcast.\n        // Remove this check when the client switches to RID/MID based simulcast on all browsers.\n        if (browser.usesSdpMungingForSimulcast()) {\n            return desc;\n        }\n        const rids = [\n            {\n                id: SIM_LAYERS[0].rid,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYERS[1].rid,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYERS[2].rid,\n                direction: 'recv'\n            }\n        ];\n\n        const ridLine = rids.map(val => val.id).join(';');\n        const simulcastLine = `recv ${ridLine}`;\n        const sdp = transform.parse(desc.sdp);\n        const mLines = sdp.media.filter(m => m.type === MediaType.VIDEO);\n        const senderMids = Array.from(this.pc.localTrackTransceiverMids.values());\n\n        mLines.forEach((mLine, idx) => {\n            // Make sure the simulcast recv line is only set on video descriptions that are associated with senders.\n            if (senderMids.find(sender => mLine.mid.toString() === sender.toString()) || idx === 0) {\n                if (!mLine.simulcast_03 || !mLine.simulcast) {\n                    mLine.rids = rids;\n\n                    // eslint-disable-next-line camelcase\n                    mLine.simulcast_03 = {\n                        value: simulcastLine\n                    };\n                }\n            } else {\n                mLine.rids = undefined;\n                mLine.simulcast = undefined;\n\n                // eslint-disable-next-line camelcase\n                mLine.simulcast_03 = undefined;\n            }\n        });\n\n        return {\n            type: desc.type,\n            sdp: transform.write(sdp)\n        };\n    }\n\n    /**\n     * Returns a boolean indicating whether the video encoder is running in Simulcast mode, i.e., three encodings need\n     * to be configured in 4:2:1 resolution order with temporal scalability.\n     *\n     * @param {CodecMimeType} videoCodec - The video codec in use.\n     * @returns {boolean}\n     */\n    isRunningInSimulcastMode(videoCodec) {\n        if (!this.codecSettings || !this.codecSettings[videoCodec]) {\n            // If codec settings are not available, assume no simulcast\n            return false;\n        }\n\n        return videoCodec === CodecMimeType.VP8 // VP8 always\n\n            // For FF: scalabilityModeEnabled is not supported and we have to use simulcast.\n            // For other browsers we use K-SVC mode for VP9 when no scalability mode is set. Although\n            // only one outbound-rtp stream is present, three separate encodings have to be configured.\n            || (!this.codecSettings[videoCodec].scalabilityModeEnabled && videoCodec === CodecMimeType.VP9)\n\n            // FF uses simulcast with AV1.\n            || (!this.codecSettings[videoCodec].scalabilityModeEnabled\n                && this.codecSettings[videoCodec].useSimulcast\n                && videoCodec === CodecMimeType.AV1)\n\n            // When scalability is enabled, always for H.264, and only when simulcast is explicitly enabled via\n            // config.js for VP9 and AV1 since full SVC is the default mode for these 2 codecs.\n            || (this.codecSettings[videoCodec].scalabilityModeEnabled\n                && (videoCodec === CodecMimeType.H264 || this.codecSettings[videoCodec].useSimulcast));\n    }\n\n    /**\n     * Munges the session description to ensure that the codec order is as per the preferred codec settings.\n     *\n     * @param {transform.SessionDescription} parsedSdp that needs to be munged\n     * @returns {transform.SessionDescription} the munged SDP.\n     */\n    mungeCodecOrder(parsedSdp) {\n        const codecSettings = this.pc.codecSettings;\n\n        if (!codecSettings) {\n            return parsedSdp;\n        }\n\n        const mungedSdp = parsedSdp;\n        const { isP2P } = this.options;\n        const mLines = mungedSdp.media.filter(m => m.type === codecSettings.mediaType);\n\n        for (const mLine of mLines) {\n            const currentCodecs = this._getConfiguredVideoCodecsImpl(mungedSdp);\n\n            for (const codec of currentCodecs) {\n                if (isP2P) {\n                    // 1. Strip the high profile H264 codecs on all clients. macOS started offering encoder for H.264\n                    //   level 5.2 but a decoder only for level 3.1. Therfore, strip all main and high level codecs for\n                    //   H.264.\n                    // 2. There are multiple VP9 payload types generated by the browser, more payload types are added\n                    //   if the endpoint doesn't have a local video source. Therefore, strip all the high profile codec\n                    //   variants for VP9 so that only one payload type for VP9 is negotiated between the peers.\n                    if (codec === CodecMimeType.H264 || codec === CodecMimeType.VP9) {\n                        SDPUtil.stripCodec(mLine, codec, true /* high profile */);\n                    }\n\n                    // Do not negotiate ULPFEC and RED either.\n                    if (codec === CodecMimeType.ULPFEC || codec === CodecMimeType.RED) {\n                        SDPUtil.stripCodec(mLine, codec, false);\n                    }\n                }\n            }\n\n            // Reorder the codecs based on the preferred settings.\n            if (!this.pc.usesCodecSelectionAPI()) {\n                for (const codec of codecSettings.codecList.slice().reverse()) {\n                    SDPUtil.preferCodec(mLine, codec, isP2P);\n                }\n            }\n        }\n\n        return mungedSdp;\n    }\n\n    /**\n     * Munges the stereo flag as well as the opusMaxAverageBitrate in the SDP, based on values set through config.js,\n     * if present.\n     *\n     * @param {transform.SessionDescription} parsedSdp that needs to be munged.\n     * @returns {transform.SessionDescription} the munged SDP.\n     */\n    mungeOpus(parsedSdp) {\n        const { audioQuality } = this.options;\n\n        if (!audioQuality?.enableOpusDtx && !audioQuality?.stereo && !audioQuality?.opusMaxAverageBitrate) {\n            return parsedSdp;\n        }\n\n        const mungedSdp = parsedSdp;\n        const mLines = mungedSdp.media.filter(m => m.type === MediaType.AUDIO);\n\n        for (const mLine of mLines) {\n            const { payload } = mLine.rtp.find(protocol => protocol.codec === CodecMimeType.OPUS);\n\n            if (!payload) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let fmtpOpus = mLine.fmtp.find(protocol => protocol.payload === payload);\n\n            if (!fmtpOpus) {\n                fmtpOpus = {\n                    payload,\n                    config: ''\n                };\n            }\n\n            const fmtpConfig = transform.parseParams(fmtpOpus.config);\n            let sdpChanged = false;\n\n            if (audioQuality?.stereo) {\n                fmtpConfig.stereo = 1;\n                sdpChanged = true;\n            }\n\n            if (audioQuality?.opusMaxAverageBitrate) {\n                fmtpConfig.maxaveragebitrate = audioQuality.opusMaxAverageBitrate;\n                sdpChanged = true;\n            }\n\n            // On Firefox, the OpusDtx enablement has no effect\n            if (!browser.isFirefox() && audioQuality?.enableOpusDtx) {\n                fmtpConfig.usedtx = 1;\n                sdpChanged = true;\n            }\n\n            if (!sdpChanged) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n\n            let mungedConfig = '';\n\n            for (const key of Object.keys(fmtpConfig)) {\n                mungedConfig += `${key}=${fmtpConfig[key]}; `;\n            }\n\n            fmtpOpus.config = mungedConfig.trim();\n        }\n\n        return mungedSdp;\n    }\n\n    /**\n     * Munges the session SDP by setting the max bitrates on the video m-lines when VP9 K-SVC codec is in use.\n     *\n     * @param {transform.SessionDescription} parsedSdp that needs to be munged.\n     * @param {boolean} isLocalSdp - Whether the max bitrate (via b=AS line in SDP) is set on local SDP.\n     * @returns {transform.SessionDescription} The munged SDP.\n     */\n    setMaxBitrates(parsedSdp, isLocalSdp = false) {\n        const pcCodecSettings = this.pc.codecSettings;\n\n        if (!pcCodecSettings) {\n            return parsedSdp;\n        }\n\n        // Find all the m-lines associated with the local sources.\n        const mungedSdp = parsedSdp;\n        const direction = isLocalSdp ? MediaDirection.RECVONLY : MediaDirection.SENDONLY;\n        const mLines = mungedSdp.media.filter(m => m.type === MediaType.VIDEO && m.direction !== direction);\n        const currentCodec = pcCodecSettings.codecList[0];\n        const codecScalabilityModeSettings = this.codecSettings[currentCodec];\n\n        for (const mLine of mLines) {\n            const isDoingVp9KSvc = currentCodec === CodecMimeType.VP9\n                && !codecScalabilityModeSettings.scalabilityModeEnabled;\n            const localTrack = this.pc.getLocalVideoTracks()\n                .find(track => this.pc.localTrackTransceiverMids.get(track.rtcId) === mLine.mid.toString());\n\n            if (localTrack\n                && (isDoingVp9KSvc\n\n                    // Setting bitrates in the SDP for SVC codecs is no longer needed in the newer versions where\n                    // maxBitrates from the RTCRtpEncodingParameters directly affect the target bitrate for the encoder.\n                    || (this._isRunningInFullSvcMode(currentCodec) && !this.pc.usesCodecSelectionAPI()))) {\n                let maxBitrate;\n\n                if (localTrack.getVideoType() === VideoType.DESKTOP) {\n                    maxBitrate = codecScalabilityModeSettings.maxBitratesVideo.ssHigh;\n                } else {\n                    const { level } = VIDEO_QUALITY_LEVELS.find(lvl => lvl.height <= localTrack.getCaptureResolution());\n\n                    maxBitrate = codecScalabilityModeSettings.maxBitratesVideo[level];\n                }\n\n                const limit = Math.floor(maxBitrate / 1000);\n\n                // Use only the highest spatial layer bitrates for now as there is no API available yet for configuring\n                // the bitrates on the individual SVC layers.\n                mLine.bandwidth = [ {\n                    type: 'AS',\n                    limit\n                } ];\n            } else {\n                // Clear the bandwidth limit in SDP when VP9 is no longer the preferred codec.\n                // This is needed on react native clients as react-native-webrtc returns the\n                // SDP that the application passed instead of returning the SDP off the native side.\n                // This line automatically gets cleared on web on every renegotiation.\n                mLine.bandwidth = undefined;\n            }\n        }\n\n        return mungedSdp;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { cloneDeep } from 'lodash-es';\nimport transform from 'sdp-transform';\n\nimport { CodecMimeType } from '../../service/RTC/CodecMimeType';\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport { getSourceIndexFromSourceName } from '../../service/RTC/SignalingLayer';\nimport { SSRC_GROUP_SEMANTICS, VIDEO_QUALITY_LEVELS } from '../../service/RTC/StandardVideoQualitySettings';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { VIDEO_CODEC_CHANGED } from '../../service/statistics/AnalyticsEvents';\nimport { SS_DEFAULT_FRAME_RATE } from '../RTC/ScreenObtainer';\nimport browser from '../browser';\nimport FeatureFlags from '../flags/FeatureFlags';\nimport LocalSdpMunger from '../sdp/LocalSdpMunger';\nimport RtxModifier from '../sdp/RtxModifier';\nimport SDP from '../sdp/SDP';\nimport SDPUtil from '../sdp/SDPUtil';\nimport SdpSimulcast from '../sdp/SdpSimulcast';\nimport { SdpTransformWrap } from '../sdp/SdpTransformUtil';\nimport Statistics from '../statistics/statistics';\nimport { isValidNumber } from '../util/MathUtil';\n\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport RTCUtils from './RTCUtils';\nimport { TPCUtils } from './TPCUtils';\n\n// FIXME SDP tools should end up in some kind of util module\n\nconst logger = getLogger('modules/RTC/TraceablePeerConnection');\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used in a peer to peer connection.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {Object} options.audioQuality - Quality settings to applied on the outbound audio stream.\n * @param {boolean} options.capScreenshareBitrate if set to true, lower layers will be disabled for screenshare.\n * @param {Array<CodecMimeType>} options.codecSettings - codec settings to be applied for video streams.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX.\n * @param {boolean} options.enableInsertableStreams set to true when the insertable streams constraints is to be\n * enabled on the PeerConnection.\n * @param {boolean} options.forceTurnRelay If set to true, the browser will generate only Relay ICE candidates.\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n * @param {Object} options.videoQuality - Quality settings to applied on the outbound video streams.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        pcConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    /**\n     * A map that holds remote tracks signaled on the peerconnection indexed by their SSRC.\n     * @type {Map<number, JitsiRemoteTrack>}\n     */\n    this.remoteTracksBySsrc = new Map();\n\n    /**\n     * The map holds remote tracks associated with this peer connection. It maps user's JID to media type and a set of\n     * remote tracks.\n     * @type {Map<string, Map<MediaType, Set<JitsiRemoteTrack>>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The set of remote SSRCs seen so far.\n     * Distinguishes new SSRCs from those that have been remapped.\n     * @type {Set<number>}\n     */\n    this.remoteSSRCs = new Set();\n\n    /**\n     * Mapping of source-names and their associated SSRCs that have been signaled by the JVB.\n     * @type {Map<string, number>}\n     */\n    this.remoteSources = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The DTLS transport object for the PeerConnection.\n     * Note: this assume only one shared transport exists because we bundled\n     *       all streams on the same underlying transport.\n     */\n    this._dtlsTransport = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.options = options;\n\n    // Setup SignalingLayer listeners for source-name based events.\n    this.signalingLayer.on(SignalingEvents.SOURCE_MUTED_CHANGED,\n        (sourceName, isMuted) => this._sourceMutedChanged(sourceName, isMuted));\n    this.signalingLayer.on(SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED,\n        (sourceName, videoType) => this._sourceVideoTypeChanged(sourceName, videoType));\n\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\n    // connection is P2P to rtcstats.\n    const safeConstraints = constraints || {};\n\n    safeConstraints.optional = safeConstraints.optional || [];\n\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\n    // Firefox and Safari just ignore it.\n    if (Array.isArray(safeConstraints.optional)) {\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\n    } else {\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\n    }\n\n    this.peerconnection = new RTCPeerConnection(pcConfig, safeConstraints);\n\n    this.tpcUtils = new TPCUtils(this, {\n        audioQuality: options.audioQuality,\n        isP2P: this.isP2P,\n        videoQuality: options.videoQuality\n    });\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * Flag used to indicate if low fps screenshare is desired.\n     */\n    this._capScreenshareBitrate = this.options.capScreenshareBitrate;\n\n    /**\n     * Codec preferences set for the peerconnection through config.js.\n     */\n    this.codecSettings = this.options.codecSettings;\n\n    /**\n     * Flag used to indicate if RTCRtpTransceiver#setCodecPreferences is to be used instead of SDP\n     * munging for codec selection.\n     */\n    browser.supportsCodecPreferences()\n        && logger.info('Using RTCRtpTransceiver#setCodecPreferences for codec selection');\n\n    /**\n     * Flag used to indicate if the codecs are configured using the codec selection API without having the need to\n     * trigger a renegotiation for the change to be effective.\n     */\n    this._usesCodecSelectionAPI = this.options.usesCodecSelectionAPI;\n\n    /**\n     * Indicates whether an audio track has ever been added to the peer connection.\n     */\n    this._hasHadAudioTrack = false;\n\n    /**\n     * Indicates whether a video track has ever been added to the peer connection.\n     */\n    this._hasHadVideoTrack = false;\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n\n    this.simulcast = new SdpSimulcast();\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this, this.rtc.getLocalEndpointId());\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    /**\n     * The height constraints to be applied on the sender per local video source (source name as the key).\n     * @type {Map<string, number>}\n     */\n    this._senderMaxHeights = new Map();\n\n    /**\n     * Holds the RTCRtpTransceiver mids that the local tracks are attached to, mapped per their\n     * {@link JitsiLocalTrack.rtcId}.\n     * @type {Map<string, string>}\n     */\n    this.localTrackTransceiverMids = new Map();\n\n    /**\n     * Holds the SSRC map for the local tracks mapped by their source names.\n     *\n     * @type {Map<string, TPCSourceInfo>}\n     * @property {string} msid - The track's MSID.\n     * @property {Array<string>} ssrcs - The SSRCs associated with the track.\n     * @property {Array<TPCGroupInfo>} groups - The SSRC groups associated with the track.\n     */\n    this._localSsrcMap = null;\n\n    /**\n     * Holds the SSRC map for the remote tracks mapped by their source names.\n     *\n     * @type {Map<string, TPCSourceInfo>}\n     * @property {string} mediaType - The media type of the track.\n     * @property {string} msid - The track's MSID.\n     * @property {Array<TPCGroupInfo>} groups - The SSRC groups associated with the track.\n     * @property {Array<string>} ssrcList - The SSRCs associated with the track.\n     * @property {VideoType} videoType - The videoType of the track (undefined for audio tracks).\n     */\n    this._remoteSsrcMap = new Map();\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.trace(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n\n    this.onTrack = evt => {\n        const stream = evt.streams[0];\n\n        this._remoteTrackAdded(stream, evt.track, evt.transceiver);\n        stream.addEventListener('removetrack', e => {\n            this._remoteTrackRemoved(stream, e.track);\n        });\n    };\n    this.peerconnection.addEventListener('track', this.onTrack);\n\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.onconnectionstatechange = null;\n    this.peerconnection.onconnectionstatechange = event => {\n        this.trace('onconnectionstatechange', this.connectionState);\n        if (this.onconnectionstatechange !== null) {\n            this.onconnectionstatechange(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats().then(stats => {\n                if (typeof stats?.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            });\n        }, 1000);\n    }\n\n    this._lastVideoSenderUpdatePromise = Promise.resolve();\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType} that needs to be set on a p2p peerconnection's remote SDP\n * after a source-add or source-remove action. The method takes into account whether or not there are any\n * local tracks for the given media type.\n * @param {MediaType} mediaType - The media type for which the direction is to be calculated.\n * @param {boolean} isAddOperation whether the direction is to be calculated after a source-add action.\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly' etc.) which should be used when setting\n * local description on the peerconnection.\n * @private\n */\nTraceablePeerConnection.prototype.getDesiredMediaDirection = function(mediaType, isAddOperation = false) {\n    return this.tpcUtils.getDesiredMediaDirection(mediaType, isAddOperation);\n};\n\n/**\n * Returns the list of RTCRtpReceivers created for the source of the given media type associated with\n * the set of remote endpoints specified.\n * @param {Array<string>} endpoints list of the endpoints\n * @param {string} mediaType 'audio' or 'video'\n * @returns {Array<RTCRtpReceiver>} list of receivers created by the peerconnection.\n */\nTraceablePeerConnection.prototype._getReceiversByEndpointIds = function(endpoints, mediaType) {\n    let remoteTracks = [];\n    let receivers = [];\n\n    for (const endpoint of endpoints) {\n        remoteTracks = remoteTracks.concat(this.getRemoteTracks(endpoint, mediaType));\n    }\n\n    // Get the ids of the MediaStreamTracks associated with each of these remote tracks.\n    const remoteTrackIds = remoteTracks.map(remote => remote.track?.id);\n\n    receivers = this.peerconnection.getReceivers()\n        .filter(receiver => receiver.track\n            && receiver.track.kind === mediaType\n            && remoteTrackIds.find(trackId => trackId === receiver.track.id));\n\n    return receivers;\n};\n\n/**\n * Tells whether or not this TPC instance has spatial scalability enabled.\n * @return {boolean} <tt>true</tt> if spatial scalability is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSpatialScalabilityOn = function() {\n    const h264SimulcastEnabled = this.tpcUtils.codecSettings[CodecMimeType.H264].scalabilityModeEnabled\n        && this.tpcUtils.supportsDDHeaderExt;\n\n    return !this.options.disableSimulcast\n        && (this.codecSettings.codecList[0] !== CodecMimeType.H264 || h264SimulcastEnabled);\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(endpointId, videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`${this} No endpointID on peerVideoTypeChanged`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(endpointId, mediaType, isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error(`${this} On peerMuteChanged - no endpoint ID`);\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Handles remote source mute and unmute changed events.\n *\n * @param {string} sourceName - The name of the remote source.\n * @param {boolean} isMuted - The new mute state.\n */\nTraceablePeerConnection.prototype._sourceMutedChanged = function(sourceName, isMuted) {\n    const track = this.getRemoteTracks().find(t => t.getSourceName() === sourceName);\n\n    if (!track) {\n        if (FeatureFlags.isSsrcRewritingSupported()) {\n            logger.debug(`Remote track not found for source=${sourceName}, mute update failed!`);\n        }\n\n        return;\n    }\n\n    track.setMute(isMuted);\n};\n\n/**\n * Handles remote source videoType changed events.\n *\n * @param {string} sourceName - The name of the remote source.\n * @param {boolean} isMuted - The new value.\n */\nTraceablePeerConnection.prototype._sourceVideoTypeChanged = function(sourceName, videoType) {\n    const track = this.getRemoteTracks().find(t => t.getSourceName() === sourceName);\n\n    if (!track) {\n        return;\n    }\n\n    track._setVideoType(videoType);\n};\n\n/**\n * Obtains audio levels of the remote audio tracks by getting the source information on the RTCRtpReceivers.\n * The information relevant to the ssrc is updated each time a RTP packet constaining the ssrc is received.\n * @param {Array<string>} speakerList list of endpoint ids for which audio levels are to be gathered.\n * @returns {Object} containing ssrc and audio level information as a key-value pair.\n */\nTraceablePeerConnection.prototype.getAudioLevels = function(speakerList = []) {\n    const audioLevels = {};\n    const audioReceivers = speakerList.length\n        ? this._getReceiversByEndpointIds(speakerList, MediaType.AUDIO)\n        : this.peerconnection.getReceivers()\n            .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO && receiver.track.enabled);\n\n    audioReceivers.forEach(remote => {\n        const ssrc = remote.getSynchronizationSources();\n\n        if (ssrc && ssrc.length) {\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\n        }\n    });\n\n    return audioLevels;\n};\n\n/**\n * Checks if the browser is currently doing true simulcast where in three different media streams are being sent to the\n * bridge. Currently this happens always for VP8 and only if simulcast is enabled for VP9/AV1/H264.\n *\n * @param {JitsiLocalTrack} localTrack - The local video track.\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.doesTrueSimulcast = function(localTrack) {\n    const currentCodec = this.tpcUtils.getConfiguredVideoCodec(localTrack);\n\n    return this.isSpatialScalabilityOn() && this.tpcUtils.isRunningInSimulcastMode(currentCodec);\n};\n\n/**\n * Returns the SSRCs associated with a given local video track.\n *\n * @param {JitsiLocalTrack} localTrack\n * @returns\n */\nTraceablePeerConnection.prototype.getLocalVideoSSRCs = function(localTrack) {\n    const ssrcs = [];\n\n    if (!localTrack || !localTrack.isVideoTrack()) {\n        return ssrcs;\n    }\n\n    const ssrcGroup = this.isSpatialScalabilityOn() ? SSRC_GROUP_SEMANTICS.SIM : SSRC_GROUP_SEMANTICS.FID;\n\n    return this.localSSRCs.get(localTrack.rtcId)?.groups?.find(group => group.semantics === ssrcGroup)?.ssrcs || ssrcs;\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Retrieves the local video tracks.\n *\n * @returns {Array<JitsiLocalTrack>} - local video tracks.\n */\nTraceablePeerConnection.prototype.getLocalVideoTracks = function() {\n    return this.getLocalTracks(MediaType.VIDEO);\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n *\n * @param {string} [endpointId] - The track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] - The remote tracks will be filtered by their media type if this argument is\n * specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(endpointId, mediaType) {\n    let remoteTracks = [];\n\n    if (FeatureFlags.isSsrcRewritingSupported()) {\n        for (const remoteTrack of this.remoteTracksBySsrc.values()) {\n            const owner = remoteTrack.getParticipantId();\n\n            if (owner && (!endpointId || owner === endpointId)) {\n                if (!mediaType || remoteTrack.getType() === mediaType) {\n                    remoteTracks.push(remoteTrack);\n                }\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    const endpoints = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTracksByMediaType = this.remoteTracks.get(endpoint);\n\n        if (endpointTracksByMediaType) {\n            for (const trackMediaType of endpointTracksByMediaType.keys()) {\n                // per media type filtering\n                if (!mediaType || mediaType === trackMediaType) {\n                    remoteTracks = remoteTracks.concat(Array.from(endpointTracksByMediaType.get(trackMediaType)));\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Returns the remote sourceInfo for a given source name.\n *\n * @param {string} sourceName - The source name.\n * @returns {TPCSourceInfo}\n */\nTraceablePeerConnection.prototype.getRemoteSourceInfoBySourceName = function(sourceName) {\n    return cloneDeep(this._remoteSsrcMap.get(sourceName));\n};\n\n/**\n * Returns a map of source names and their associated SSRCs for the remote participant.\n *\n * @param {string} id Endpoint id of the remote participant.\n * @returns {Map<string, TPCSourceInfo>} The map of source names and their associated SSRCs.\n */\nTraceablePeerConnection.prototype.getRemoteSourceInfoByParticipant = function(id) {\n    const removeSsrcInfo = new Map();\n    const remoteTracks = this.getRemoteTracks(id);\n\n    if (!remoteTracks?.length) {\n        return removeSsrcInfo;\n    }\n    const primarySsrcs = remoteTracks.map(track => track.getSSRC());\n\n    for (const [ sourceName, sourceInfo ] of this._remoteSsrcMap) {\n        if (sourceInfo.ssrcList?.some(ssrc => primarySsrcs.includes(Number(ssrc)))) {\n            removeSsrcInfo.set(sourceName, sourceInfo);\n        }\n    }\n\n    return removeSsrcInfo;\n};\n\n/**\n * Returns the target bitrates configured for the local video source.\n *\n * @param {JitsiLocalTrack} - The local video track.\n * @returns {Object}\n */\nTraceablePeerConnection.prototype.getTargetVideoBitrates = function(localTrack) {\n    const currentCodec = this.tpcUtils.getConfiguredVideoCodec(localTrack);\n\n    return this.tpcUtils.codecSettings[currentCodec].maxBitratesVideo;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both local and remote tracks bound to this\n * instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        const { ssrcs } = this.localSSRCs.get(localTrack.rtcId) ?? { ssrcs: [] };\n\n        if (ssrcs.find(localSsrc => Number(localSsrc) === ssrc)) {\n            return localTrack;\n        }\n    }\n\n    if (FeatureFlags.isSsrcRewritingSupported()) {\n        return this.remoteTracksBySsrc.get(ssrc);\n    }\n\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant.\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\n * for the remote participant in unified plan.\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\n    const streamId = stream.id;\n    const mediaType = track.kind;\n\n    // Do not create remote tracks for 'mixed' JVB SSRCs (used by JVB for RTCP termination).\n    if (!this.isP2P && !RTCUtils.isUserStreamById(streamId)) {\n        return;\n    }\n    logger.info(`${this} Received track event for remote stream[id=${streamId},type=${mediaType}]`);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        logger.error(`MediaType undefined for remote track, stream id: ${streamId}, track creation failed!`);\n\n        return;\n    }\n\n    const remoteSDP = new SDP(this.remoteDescription.sdp);\n    let mediaLine;\n\n    // Find the matching mline using 'mid' or the 'msid' attr of the stream.\n    if (transceiver?.mid) {\n        const mid = transceiver.mid;\n\n        mediaLine = remoteSDP.media.find(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\n    } else {\n        mediaLine = remoteSDP.media.find(mls => {\n            const msid = SDPUtil.findLine(mls, 'a=msid:');\n\n            return typeof msid === 'string' && streamId === msid.substring(7).split(' ')[0];\n        });\n    }\n\n    if (!mediaLine) {\n        logger.error(`Matching media line not found in remote SDP for remote stream[id=${streamId},type=${mediaType}],`\n                + 'track creation failed!');\n\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLine, 'a=ssrc:');\n\n    ssrcLines = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        logger.error(`No SSRC lines found in remote SDP for remote stream[msid=${streamId},type=${mediaType}]`\n                + 'track creation failed!');\n\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (!isValidNumber(trackSsrc) || trackSsrc < 0) {\n        logger.error(`Invalid SSRC for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`\n                + 'track creation failed!');\n\n        return;\n    }\n\n    if (!ownerEndpointId) {\n        logger.error(`No SSRC owner known for remote stream[ssrc=${trackSsrc},id=${streamId},type=${mediaType}]`\n            + 'track creation failed!');\n\n        return;\n    }\n\n    const sourceName = this.signalingLayer.getTrackSourceName(trackSsrc);\n    const peerMediaInfo = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType, sourceName);\n    const trackDetails = {\n        mediaType,\n        muted: peerMediaInfo?.muted ?? true,\n        stream,\n        track,\n        ssrc: trackSsrc,\n        videoType: peerMediaInfo?.videoType\n    };\n\n    if (this._remoteSsrcMap.has(sourceName) && mediaType === MediaType.VIDEO) {\n        trackDetails.videoType = this._remoteSsrcMap.get(sourceName).videoType;\n    }\n\n    this._createRemoteTrack(ownerEndpointId, sourceName, trackDetails);\n};\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId - The owner's endpoint ID (MUC nickname)\n * @param {String} sourceName - The track's source name\n * @param {Object} trackDetails - The track's details.\n * @param {MediaType} trackDetails.mediaType - media type, 'audio' or 'video'.\n * @param {boolean} trackDetails.muted - The initial muted status.\n * @param {number} trackDetails.ssrc - The track's main SSRC number.\n * @param {MediaStream} trackDetails.stream - The WebRTC stream instance.\n * @param {MediaStreamTrack} trackDetails.track - The WebRTC track instance.\n * @param {VideoType} trackDetails.videoType - The track's type of the video (if applicable).\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(ownerEndpointId, sourceName, trackDetails) {\n    const { mediaType, muted, ssrc, stream, track, videoType } = trackDetails;\n\n    logger.info(`${this} creating remote track[endpoint=${ownerEndpointId},ssrc=${ssrc},`\n        + `type=${mediaType},sourceName=${sourceName}]`);\n    let remoteTracksMap;\n    let userTracksByMediaType;\n\n    if (FeatureFlags.isSsrcRewritingSupported()) {\n        const existingTrack = this.remoteTracksBySsrc.get(ssrc);\n\n        if (existingTrack) {\n            logger.info(`${this} ignored duplicated track event for SSRC[ssrc=${ssrc},type=${mediaType}]`);\n\n            return;\n        }\n    } else {\n        remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n        if (!remoteTracksMap) {\n            remoteTracksMap = new Map();\n            remoteTracksMap.set(MediaType.AUDIO, new Set());\n            remoteTracksMap.set(MediaType.VIDEO, new Set());\n            this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n        }\n\n        userTracksByMediaType = remoteTracksMap.get(mediaType);\n\n        if (userTracksByMediaType?.size\n            && Array.from(userTracksByMediaType).find(jitsiTrack => jitsiTrack.getTrack() === track)) {\n            // Ignore duplicated event which can originate either from 'onStreamAdded' or 'onTrackAdded'.\n            logger.info(`${this} ignored duplicated track event for track[endpoint=${ownerEndpointId},`\n                + `type=${mediaType}]`);\n\n            return;\n        }\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P,\n                sourceName);\n\n    if (FeatureFlags.isSsrcRewritingSupported()) {\n        this.remoteTracksBySsrc.set(ssrc, remoteTrack);\n    } else {\n        userTracksByMediaType.add(remoteTrack);\n    }\n\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\n};\n\n/**\n * Handles remote media track removal.\n *\n * @param {MediaStream} stream - WebRTC MediaStream instance which is the parent of the track.\n * @param {MediaStreamTrack} track - WebRTC MediaStreamTrack which has been removed from the PeerConnection.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(stream, track) {\n    const streamId = stream.id;\n    const trackId = track?.id;\n\n    // Ignore stream removed events for JVB \"mixed\" sources (used for RTCP termination).\n    if (!RTCUtils.isUserStreamById(streamId)) {\n        return;\n    }\n\n    if (!streamId) {\n        logger.error(`${this} remote track removal failed - no stream ID`);\n\n        return;\n    }\n\n    if (!trackId) {\n        logger.error(`${this} remote track removal failed - no track ID`);\n\n        return;\n    }\n\n    const toBeRemoved = this.getRemoteTracks().find(\n        remoteTrack => remoteTrack.getStreamId() === streamId && remoteTrack.getTrackId() === trackId);\n\n    if (!toBeRemoved) {\n        logger.error(`${this} remote track removal failed - track not found`);\n\n        return;\n    }\n\n    this._removeRemoteTrack(toBeRemoved);\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n *\n * @param {JitsiRemoteTrack} toBeRemoved - The remote track to be removed.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    logger.info(`${this} Removing remote track stream[id=${toBeRemoved.getStreamId()},`\n        + `trackId=${toBeRemoved.getTrackId()}]`);\n\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n\n    if (FeatureFlags.isSsrcRewritingSupported() && !participantId) {\n        return;\n    } else if (!FeatureFlags.isSsrcRewritingSupported()) {\n        const userTracksByMediaType = this.remoteTracks.get(participantId);\n\n        if (!userTracksByMediaType) {\n            logger.error(`${this} removeRemoteTrack: no remote tracks map for endpoint=${participantId}`);\n        } else if (!userTracksByMediaType.get(toBeRemoved.getType())?.delete(toBeRemoved)) {\n            logger.error(`${this} Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n        }\n    }\n\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Processes the local SDP and creates an SSRC map for every local track.\n *\n * @param {string} localSDP - SDP from the local description.\n * @returns {void}\n */\nTraceablePeerConnection.prototype._processAndExtractSourceInfo = function(localSDP) {\n    /**\n     * @type {Map<string, TPCSourceInfo>} The map of source names and their associated SSRCs.\n     */\n    const ssrcMap = new Map();\n\n    if (!localSDP || typeof localSDP !== 'string') {\n        throw new Error('Local SDP must be a valid string, aborting!!');\n    }\n    const session = transform.parse(localSDP);\n    const media = session.media.filter(mline => mline.direction === MediaDirection.SENDONLY\n        || mline.direction === MediaDirection.SENDRECV);\n\n    if (!media.length) {\n        this._localSsrcMap = ssrcMap;\n\n        return;\n    }\n\n    for (const localTrack of this.localTracks.values()) {\n        const sourceName = localTrack.getSourceName();\n        const trackIndex = getSourceIndexFromSourceName(sourceName);\n        const mediaType = localTrack.getType();\n        const mLines = media.filter(m => m.type === mediaType);\n        const ssrcGroups = mLines[trackIndex].ssrcGroups;\n        let ssrcs = mLines[trackIndex].ssrcs;\n\n        if (ssrcs?.length) {\n            // Filter the ssrcs with 'cname' attribute.\n            ssrcs = ssrcs.filter(s => s.attribute === 'cname');\n\n            const msid = `${this.rtc.getLocalEndpointId()}-${mediaType}-${trackIndex}`;\n            const ssrcInfo = {\n                ssrcs: [],\n                groups: [],\n                msid\n            };\n\n            ssrcs.forEach(ssrc => ssrcInfo.ssrcs.push(ssrc.id));\n\n            if (ssrcGroups?.length) {\n                for (const group of ssrcGroups) {\n                    group.ssrcs = group.ssrcs.split(' ').map(ssrcStr => parseInt(ssrcStr, 10));\n                    ssrcInfo.groups.push(group);\n                }\n\n                const simGroup = ssrcGroups.find(group => group.semantics === SSRC_GROUP_SEMANTICS.SIM);\n\n                // Add a SIM group if its missing in the description (happens on Firefox).\n                if (this.isSpatialScalabilityOn() && !simGroup) {\n                    const groupSsrcs = ssrcGroups.map(group => group.ssrcs[0]);\n\n                    ssrcInfo.groups.push({\n                        semantics: SSRC_GROUP_SEMANTICS.SIM,\n                        ssrcs: groupSsrcs\n                    });\n                }\n            }\n\n            ssrcMap.set(sourceName, ssrcInfo);\n\n            const oldSsrcInfo = this.localSSRCs.get(localTrack.rtcId);\n            const oldSsrc = this._extractPrimarySSRC(oldSsrcInfo);\n            const newSsrc = this._extractPrimarySSRC(ssrcInfo);\n\n            if (oldSsrc !== newSsrc) {\n                oldSsrc && logger.debug(`${this} Overwriting SSRC for track=${localTrack}] with ssrc=${newSsrc}`);\n                this.localSSRCs.set(localTrack.rtcId, ssrcInfo);\n                localTrack.setSsrc(newSsrc);\n            }\n        }\n    }\n    this._localSsrcMap = ssrcMap;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    connectionState() {\n        return this.peerconnection.connectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getLocalDescription no localDescription found`);\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        if (!this.isP2P) {\n            desc = this.tpcUtils.injectSsrcGroupForSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)', dumpSDP(desc));\n        }\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc, this._localSsrcMap);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        if (!desc) {\n            logger.debug(`${this} getRemoteDescription no remoteDescription found`);\n\n            return {};\n        }\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        if (this.isP2P) {\n            // Adjust the media direction for p2p based on whether a local source has been added.\n            desc = this._adjustRemoteMediaDirection(desc);\n        }\n\n        return desc;\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Checks if low fps screensharing is in progress.\n *\n * @private\n * @returns {boolean} Returns true if 5 fps screensharing is in progress, false otherwise.\n */\nTraceablePeerConnection.prototype.isSharingLowFpsScreen = function() {\n    return this._isSharingScreen() && this._capScreenshareBitrate;\n};\n\n/**\n * Checks if screensharing is in progress.\n *\n * @returns {boolean}  Returns true if a desktop track has been added to the peerconnection, false otherwise.\n */\nTraceablePeerConnection.prototype._isSharingScreen = function() {\n    const tracks = this.getLocalVideoTracks();\n\n    return Boolean(tracks.find(track => track.videoType === VideoType.DESKTOP));\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\n * @returns {Promise<void>} - resolved when done.\n */\nTraceablePeerConnection.prototype.addTrack = async function(track, isInitiator = false) {\n    const rtcId = track.rtcId;\n\n    if (this.localTracks.has(rtcId)) {\n        throw new Error(`${track} is already in ${this}`);\n    }\n\n    logger.info(`${this} adding ${track}`);\n    const webrtcStream = track.getOriginalStream();\n    const mediaStreamTrack = track.getTrack();\n    let transceiver;\n\n    if (isInitiator) {\n        const streams = [];\n\n        webrtcStream && streams.push(webrtcStream);\n\n        // Use pc.addTransceiver() for the initiator case when local tracks are getting added\n        // to the peerconnection before a session-initiate is sent over to the peer.\n        const transceiverInit = {\n            direction: MediaDirection.SENDRECV,\n            streams,\n            sendEncodings: []\n        };\n\n        if (!browser.isFirefox()) {\n            transceiverInit.sendEncodings = this.tpcUtils.getStreamEncodings(track);\n        }\n\n        transceiver = this.peerconnection.addTransceiver(mediaStreamTrack, transceiverInit);\n    } else {\n        // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\n        // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\n        // unused \"recv-only\" transceiver.\n        const sender = this.peerconnection.addTrack(mediaStreamTrack);\n\n        // Find the corresponding transceiver that the track was attached to.\n        transceiver = this.peerconnection.getTransceivers().find(t => t.sender === sender);\n    }\n\n    if (transceiver?.mid) {\n        this.localTrackTransceiverMids.set(track.rtcId, transceiver.mid.toString());\n    }\n\n    if (track) {\n        this.localTracks.set(rtcId, track);\n        if (track.isAudioTrack()) {\n            this._hasHadAudioTrack = true;\n        } else {\n            this._hasHadVideoTrack = true;\n        }\n    }\n\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\n    if (browser.isFirefox() && webrtcStream && this.doesTrueSimulcast(track)) {\n        await this._setEncodings(track);\n    }\n};\n\n/**\n * Adds local track to the RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} track the track to be added to the pc.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's state has changed and\n * renegotiation is required, false if no renegotiation is needed or Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.addTrackToPc = function(track) {\n    logger.info(`${this} Adding track=${track} to PC`);\n\n    if (!this._assertTrackBelongs('addTrackToPc', track)) {\n        // Abort\n\n        return Promise.reject('Track not found on the peerconnection');\n    }\n\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(`${this} Unable to add track=${track} to PC - no WebRTC stream`);\n\n        return Promise.reject('Stream not found');\n    }\n\n    return this.replaceTrack(null, track, true /* isMuteOperation */).then(() => {\n        if (track) {\n            if (track.isAudioTrack()) {\n                this._hasHadAudioTrack = true;\n            } else {\n                this._hasHadVideoTrack = true;\n            }\n        }\n\n        return false;\n    });\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack?.rtcId);\n\n    if (!doesBelong) {\n        logger.error(`${this} ${methodName}: track=${localTrack} does not belong to pc`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Returns the codecs in the current order of preference as configured on the peerconnection.\n *\n * @param {RTCSessionDescription} - The local description to be used.\n * @returns {Array}\n */\nTraceablePeerConnection.prototype.getConfiguredVideoCodecs = function(description) {\n    return this.tpcUtils.getConfiguredVideoCodecs(description?.sdp);\n};\n\n/**\n * Enables or disables simulcast for screenshare based on the frame rate requested for desktop track capture.\n *\n * @param {number} maxFps framerate to be used for desktop track capture.\n */\nTraceablePeerConnection.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    const lowFps = maxFps <= SS_DEFAULT_FRAME_RATE;\n\n    this._capScreenshareBitrate = this.isSpatialScalabilityOn() && lowFps;\n};\n\n/**\n * Sets the codec preference on the peerconnection. The codec preference goes into effect when\n * the next renegotiation happens for older clients that do not support the codec selection API.\n *\n * @param {Array<CodecMimeType>} codecList - Preferred codecs for video.\n * @param {CodecMimeType} screenshareCodec - The preferred codec for screenshare.\n * @returns {boolean} - Returns true if the codec settings were updated, false otherwise.\n */\nTraceablePeerConnection.prototype.setVideoCodecs = function(codecList, screenshareCodec) {\n    let updated = false;\n\n    if (!this.codecSettings || !codecList?.length) {\n        return updated;\n    }\n\n    this.codecSettings.codecList = codecList;\n    if (screenshareCodec) {\n        this.codecSettings.screenshareCodec = screenshareCodec;\n    }\n\n    if (!this.usesCodecSelectionAPI()) {\n        return updated;\n    }\n\n    for (const track of this.getLocalVideoTracks()) {\n        const currentCodec = this.tpcUtils.getConfiguredVideoCodec(track);\n\n        if (screenshareCodec && track.getVideoType() === VideoType.DESKTOP && screenshareCodec !== currentCodec) {\n            this.configureVideoSenderEncodings(track, screenshareCodec);\n            updated = true;\n        } else if (currentCodec !== codecList[0]) {\n            this.configureVideoSenderEncodings(track);\n            updated = true;\n        }\n    }\n\n    return updated;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackFromPc}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        this.peerconnection.removeStream(webRtcStream);\n    }\n};\n\n/**\n * Returns the receiver corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\n * was found.\n */\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\n    return this.peerconnection.getReceivers().find(r => r.track === track);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStreamTrack.\n *\n * @param {MediaSreamTrack} track - The media stream track used for the search.\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\n    return this.peerconnection.getSenders().find(s => s.track === track);\n};\n\n/**\n * Processes the local description SDP and caches the mids of the mlines associated with the given tracks.\n *\n * @param {Array<JitsiLocalTrack>} localTracks - local tracks that are added to the peerconnection.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.processLocalSdpForTransceiverInfo = function(localTracks) {\n    const localSdp = this.localDescription?.sdp;\n\n    if (!localSdp) {\n        return;\n    }\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const tracks = localTracks.filter(t => t.getType() === mediaType);\n        const parsedSdp = transform.parse(localSdp);\n        const mLines = parsedSdp.media.filter(mline => mline.type === mediaType);\n\n        tracks.forEach((track, idx) => {\n            if (!this.localTrackTransceiverMids.has(track.rtcId)) {\n                this.localTrackTransceiverMids.set(track.rtcId, mLines[idx].mid.toString());\n            }\n        });\n    });\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be replaced on the pc.\n * @param {JitsiLocalTrack|null} newTrack - The new track to be used.\n * @param {boolean} isMuteOperation - Whether the operation is a mute/unmute operation.\n * @returns {Promise<boolean>} - If the promise resolves with true, renegotiation will be needed.\n * Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack, isMuteOperation = false) {\n    if (!(oldTrack || newTrack)) {\n        logger.info(`${this} replaceTrack called with no new track and no old track`);\n\n        return Promise.resolve();\n    }\n\n    logger.info(`${this} TPC.replaceTrack old=${oldTrack}, new=${newTrack}`);\n\n    let transceiver;\n    const mediaType = newTrack?.getType() ?? oldTrack?.getType();\n    const localTracks = this.getLocalTracks(mediaType);\n    const track = newTrack?.getTrack() ?? null;\n    const isNewLocalSource = localTracks?.length\n        && !oldTrack\n        && newTrack\n        && !localTracks.find(t => t === newTrack);\n\n    // If old track exists, replace the track on the corresponding sender.\n    if (oldTrack && !oldTrack.isMuted()) {\n        transceiver = this.peerconnection.getTransceivers().find(t => t.sender.track === oldTrack.getTrack());\n\n    // Find the first recvonly transceiver when more than one track of the same media type is being added to the pc.\n    // As part of the track addition, a new m-line was added to the remote description with direction set to\n    // recvonly.\n    } else if (isNewLocalSource) {\n        transceiver = this.peerconnection.getTransceivers().find(\n            t => t.receiver.track.kind === mediaType\n            && t.direction === MediaDirection.RECVONLY\n\n            // Re-use any existing recvonly transceiver (if available) for p2p case.\n            && ((this.isP2P && t.currentDirection === MediaDirection.RECVONLY)\n                || (t.currentDirection === MediaDirection.INACTIVE && !t.stopped)));\n\n    // For mute/unmute operations, find the transceiver based on the track index in the source name if present,\n    // otherwise it is assumed to be the first local track that was added to the peerconnection.\n    } else {\n        transceiver = this.peerconnection.getTransceivers().find(t => t.receiver.track.kind === mediaType);\n        const sourceName = newTrack?.getSourceName() ?? oldTrack?.getSourceName();\n\n        if (sourceName) {\n            const trackIndex = getSourceIndexFromSourceName(sourceName);\n\n            if (this.isP2P) {\n                transceiver = this.peerconnection.getTransceivers()\n                    .filter(t => t.receiver.track.kind === mediaType)[trackIndex];\n            } else if (oldTrack) {\n                const transceiverMid = this.localTrackTransceiverMids.get(oldTrack.rtcId);\n\n                transceiver = this.peerconnection.getTransceivers().find(t => t.mid === transceiverMid);\n            } else if (trackIndex) {\n                transceiver = this.peerconnection.getTransceivers()\n                        .filter(t => t.receiver.track.kind === mediaType\n                            && t.direction !== MediaDirection.RECVONLY)[trackIndex];\n            }\n        }\n    }\n\n    if (!transceiver) {\n        return Promise.reject(\n            new Error(`Replace track failed - no transceiver for old: ${oldTrack}, new: ${newTrack}`));\n    }\n\n    return transceiver.sender.replaceTrack(track)\n        .then(() => {\n            if (isMuteOperation) {\n                return Promise.resolve();\n            }\n            if (oldTrack) {\n                this.localTracks.delete(oldTrack.rtcId);\n                this.localTrackTransceiverMids.delete(oldTrack.rtcId);\n            }\n\n            if (newTrack) {\n                if (newTrack.isAudioTrack()) {\n                    this._hasHadAudioTrack = true;\n                } else {\n                    this._hasHadVideoTrack = true;\n                }\n                this.localTrackTransceiverMids.set(newTrack.rtcId, transceiver?.mid?.toString());\n                this.localTracks.set(newTrack.rtcId, newTrack);\n            }\n\n            // Update the local SSRC cache for the case when one track gets replaced with another and no\n            // renegotiation is triggered as a result of this.\n            if (oldTrack && newTrack) {\n                const oldTrackSSRC = this.localSSRCs.get(oldTrack.rtcId);\n\n                if (oldTrackSSRC) {\n                    this.localSSRCs.delete(oldTrack.rtcId);\n                    this.localSSRCs.set(newTrack.rtcId, oldTrackSSRC);\n                    const oldSsrcNum = this._extractPrimarySSRC(oldTrackSSRC);\n\n                    newTrack.setSsrc(oldSsrcNum);\n                }\n            }\n\n            // In the scenario where we remove the oldTrack (oldTrack is not null and newTrack is null) on FF\n            // if we change the direction to RECVONLY, create answer will generate SDP with only 1 receive\n            // only ssrc instead of keeping all 6 ssrcs that we currently have. Stopping the screen sharing\n            // and then starting it again will trigger 2 rounds of source-remove and source-add replacing\n            // the 6 ssrcs for the screen sharing with 1 receive only ssrc and then removing the receive\n            // only ssrc and adding the same 6 ssrcs. On the remote participant's side the same ssrcs will\n            // be reused on a new m-line and if the remote participant is FF due to\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=1768729 the video stream won't be rendered.\n            // That's why we need keep the direction to SENDRECV for FF.\n            //\n            // NOTE: If we return to the approach of not removing the track for FF and instead using the\n            // enabled property for muting the track, we may need to change the direction to\n            // RECVONLY if FF still sends the media even though the enabled flag is set to false.\n            transceiver.direction\n                = newTrack || browser.isFirefox() ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\n\n            // Configure simulcast encodings on Firefox when a track is added to the peerconnection for the first time.\n            const configureEncodingsPromise\n                = browser.isFirefox() && !oldTrack && newTrack && this.doesTrueSimulcast(newTrack)\n                    ? this._setEncodings(newTrack)\n                    : Promise.resolve();\n\n            return configureEncodingsPromise.then(() => this.isP2P);\n        });\n};\n\n/**\n * Removes local track from the RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} localTrack the local track to be removed.\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's state has changed and\n * renegotiation is required, false if no renegotiation is needed or Promise is rejected when something goes wrong.\n */\nTraceablePeerConnection.prototype.removeTrackFromPc = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace('removeTrack', localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeTrack', localTrack)) {\n        // Abort - nothing to be done here\n        return Promise.reject('Track not found in the peerconnection');\n    }\n\n    return this.replaceTrack(localTrack, null, true /* isMuteOperation */).then(() => false);\n};\n\n/**\n * Updates the remote source map with the given source map for adding or removing sources.\n *\n * @param {Map<string, TPCSourceInfo>} sourceMap - The map of source names to their corresponding SSRCs.\n * @param {boolean} isAdd - Whether the sources are being added or removed.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.updateRemoteSources = function(sourceMap, isAdd) {\n    for (const [ sourceName, ssrcInfo ] of sourceMap) {\n        if (isAdd) {\n            this._remoteSsrcMap.set(sourceName, ssrcInfo);\n        } else {\n            this._remoteSsrcMap.delete(sourceName);\n        }\n    }\n};\n\n/**\n * Returns true if the codec selection API is used for switching between codecs for the video sources.\n *\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.usesCodecSelectionAPI = function() {\n    // Browser throws an error when H.264 is set on the encodings. Therefore, munge the SDP when H.264 needs to be\n    // selected.\n    // TODO: Remove this check when the above issue is fixed.\n    return this._usesCodecSelectionAPI && this.codecSettings.codecList[0] !== CodecMimeType.H264;\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Adjusts the media direction on the remote description based on availability of local and remote sources in a p2p\n * media connection.\n *\n * @param {RTCSessionDescription} remoteDescription the WebRTC session description instance for the remote description.\n * @returns the transformed remoteDescription.\n * @private\n */\nTraceablePeerConnection.prototype._adjustRemoteMediaDirection = function(remoteDescription) {\n    const transformer = new SdpTransformWrap(remoteDescription.sdp);\n\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\n        const media = transformer.selectMedia(mediaType);\n        const localSources = this.getLocalTracks(mediaType).length;\n        const remoteSources = this.getRemoteTracks(null, mediaType).length;\n\n        media.forEach((mLine, idx) => {\n            if (localSources && localSources === remoteSources) {\n                mLine.direction = MediaDirection.SENDRECV;\n            } else if (!localSources && !remoteSources) {\n                mLine.direction = MediaDirection.INACTIVE;\n            } else if (!localSources) {\n                mLine.direction = MediaDirection.SENDONLY;\n            } else if (!remoteSources) {\n                mLine.direction = MediaDirection.RECVONLY;\n\n            // When there are 2 local sources and 1 remote source, the first m-line should be set to 'sendrecv' while\n            // the second one needs to be set to 'recvonly'.\n            } else if (localSources > remoteSources) {\n                mLine.direction = idx ? MediaDirection.RECVONLY : MediaDirection.SENDRECV;\n\n            // When there are 2 remote sources and 1 local source, the first m-line should be set to 'sendrecv' while\n            // the second one needs to be set to 'sendonly'.\n            } else {\n                mLine.direction = idx ? MediaDirection.SENDONLY : MediaDirection.SENDRECV;\n            }\n        });\n    });\n\n    return {\n        type: remoteDescription.type,\n        sdp: transformer.toRawSDP()\n    };\n};\n\n/**\n * Returns the codec to be used for screenshare based on the supported codecs and the preferred codec requested\n * through config.js setting.\n *\n * @param {CodecMimeType} defaultCodec - the preferred codec for video tracks.\n * @returns {CodecMimeType}\n */\nTraceablePeerConnection.prototype._getPreferredCodecForScreenshare = function(defaultCodec) {\n    // Use the same codec for both camera and screenshare if the client doesn't support the codec selection API.\n    if (!this.usesCodecSelectionAPI()) {\n        return defaultCodec;\n    }\n\n    const { screenshareCodec } = this.codecSettings;\n\n    if (screenshareCodec && this.codecSettings.codecList.find(c => c === screenshareCodec)) {\n        return screenshareCodec;\n    }\n\n    // Default to AV1 for screenshare if its supported and is not overriden through config.js.\n    if (this.codecSettings.codecList.find(c => c === CodecMimeType.AV1)) {\n        return CodecMimeType.AV1;\n    }\n\n    return defaultCodec;\n};\n\n/**\n * Sets up the _dtlsTransport object and initializes callbacks for it.\n */\nTraceablePeerConnection.prototype._initializeDtlsTransport = function() {\n    // We are assuming here that we only have one bundled transport here\n    if (!this.peerconnection.getSenders || this._dtlsTransport) {\n        return;\n    }\n\n    const senders = this.peerconnection.getSenders();\n\n    if (senders.length !== 0 && senders[0].transport) {\n        this._dtlsTransport = senders[0].transport;\n\n        this._dtlsTransport.onerror = error => {\n            logger.error(`${this} DtlsTransport error: ${error}`);\n        };\n\n        this._dtlsTransport.onstatechange = () => {\n            this.trace('dtlsTransport.onstatechange', this._dtlsTransport.state);\n        };\n    }\n};\n\n/**\n * Returns the expected send resolution for a local video track based on what encodings are currently active.\n *\n * @param {JitsiLocalTrack} localTrack - The local video track.\n * @returns {number}\n */\nTraceablePeerConnection.prototype.calculateExpectedSendResolution = function(localTrack) {\n    const captureResolution = localTrack.getCaptureResolution();\n    let result = Math.min(localTrack.maxEnabledResolution, captureResolution);\n\n    if (localTrack.getVideoType() === VideoType.CAMERA) {\n        // Find the closest matching resolution based on the current codec, simulcast config and the requested\n        // resolution by the bridge or the peer.\n        if (this.doesTrueSimulcast(localTrack)) {\n            const sender = this.findSenderForTrack(localTrack.getTrack());\n\n            if (!sender) {\n                return result;\n            }\n\n            const { encodings } = sender.getParameters();\n\n            result = encodings.reduce((maxValue, encoding) => {\n                if (encoding.active) {\n                    // eslint-disable-next-line no-param-reassign\n                    maxValue = Math.max(maxValue, Math.floor(captureResolution / encoding.scaleResolutionDownBy));\n                }\n\n                return maxValue;\n            }, 0);\n        }\n    }\n\n    return result;\n};\n\n/**\n * Configures the stream encodings for the audio tracks that are added to the peerconnection.\n *\n * @param {JitsiLocalTrack} localAudioTrack - The local audio track.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.configureAudioSenderEncodings = function(localAudioTrack = null) {\n    if (localAudioTrack) {\n        return this._setEncodings(localAudioTrack);\n    }\n    const promises = [];\n\n    for (const track of this.getLocalTracks(MediaType.AUDIO)) {\n        promises.push(this._setEncodings(track));\n    }\n\n    return Promise.allSettled(promises);\n};\n\n/**\n * Configures the RTCRtpEncodingParameters of the outbound rtp stream associated with the given track.\n *\n * @param {JitsiLocalTracj} localTrack - The local track whose outbound stream needs to be configured.\n * @returns {Promise} - A promise that resolves when the operation is successful, rejected otherwise.\n */\nTraceablePeerConnection.prototype._configureSenderEncodings = async function(localTrack) {\n    const mediaType = localTrack.getType();\n    const transceiver = localTrack?.track && localTrack.getOriginalStream()\n        ? this.peerconnection.getTransceivers().find(t => t.sender?.track?.id === localTrack.getTrackId())\n        : this.peerconnection.getTransceivers().find(t => t.receiver?.track?.kind === mediaType);\n    const parameters = transceiver?.sender?.getParameters();\n\n    // Resolve if the encodings are not available yet. This happens immediately after the track is added to the\n    // peerconnection on chrome in unified-plan. It is ok to ignore and not report the error here since the\n    // action that triggers 'addTrack' (like unmute) will also configure the encodings and set bitrates after that.\n    if (!parameters?.encodings?.length) {\n        return;\n    }\n\n    parameters.encodings = this.tpcUtils.getStreamEncodings(localTrack);\n    await transceiver.sender.setParameters(parameters);\n};\n\n/**\n * Enables/disables the streams by changing the active field on RTCRtpEncodingParameters for a given RTCRtpSender.\n *\n * @param {RTCRtpSender} sender - the sender associated with a MediaStreamTrack.\n * @param {boolean} enable - whether the streams needs to be enabled or disabled.\n * @returns {Promise} - A promise that resolves when the operation is successful, rejected otherwise.\n */\nTraceablePeerConnection.prototype._enableSenderEncodings = async function(sender, enable) {\n    const parameters = sender.getParameters();\n\n    if (parameters?.encodings?.length) {\n        for (const encoding of parameters.encodings) {\n            encoding.active = enable;\n        }\n    }\n\n    await sender.setParameters(parameters);\n};\n\n/**\n * Configures the stream encodings depending on the video type, scalability mode and the bitrate settings for the codec\n * that is currently selected.\n *\n * @param {JitsiLocalTrack} - The local track for which the sender encodings have to configured.\n * @param {CodecMimeType} - The preferred codec for the video track.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.configureVideoSenderEncodings = function(localVideoTrack, codec) {\n    const preferredCodec = codec ?? this.codecSettings.codecList[0];\n\n    if (localVideoTrack) {\n        const height = this._senderMaxHeights.get(localVideoTrack.getSourceName()) ?? VIDEO_QUALITY_LEVELS[0].height;\n\n        return this.setSenderVideoConstraints(height, localVideoTrack, preferredCodec);\n    }\n    const promises = [];\n\n    for (const track of this.getLocalVideoTracks()) {\n        const maxHeight = this._senderMaxHeights.get(track.getSourceName()) ?? VIDEO_QUALITY_LEVELS[0].height;\n\n        promises.push(this.setSenderVideoConstraints(maxHeight, track, preferredCodec));\n    }\n\n    return Promise.allSettled(promises);\n};\n\n/**\n * Set the simulcast stream encoding properties on the RTCRtpSender.\n *\n * @param {JitsiLocalTrack} localTrack - the current track in use for which the encodings are to be set.\n * @returns {Promise<void>} - resolved when done.\n */\nTraceablePeerConnection.prototype._setEncodings = function(localTrack) {\n    if (localTrack.getType() === MediaType.VIDEO) {\n        return this._updateVideoSenderParameters(() => this._configureSenderEncodings(localTrack));\n    }\n\n    return this._configureSenderEncodings(localTrack);\n};\n\n/**\n * Munges the provided description to update the codec order, set the max bitrates (for VP9 K-SVC), set stereo flag\n * and update the DD Header extensions for AV1.\n *\n * @param {RTCSessionDescription} description - The description to be munged.\n * @returns {RTCSessionDescription} - The munged description.\n */\nTraceablePeerConnection.prototype._mungeDescription = function(description) {\n    this.trace('RTCSessionDescription::preTransform', dumpSDP(description));\n    let mungedSdp = transform.parse(description.sdp);\n\n    mungedSdp = this.tpcUtils.mungeOpus(mungedSdp);\n    mungedSdp = this.tpcUtils.mungeCodecOrder(mungedSdp);\n    mungedSdp = this.tpcUtils.setMaxBitrates(mungedSdp, true);\n    const mungedDescription = {\n        type: description.type,\n        sdp: transform.write(mungedSdp)\n    };\n\n    this.trace('RTCSessionDescription::postTransform', dumpSDP(mungedDescription));\n\n    return mungedDescription;\n};\n\n/**\n * Sets the local description on the peerconnection.\n *\n * @param {RTCSessionDescription} description - The local description to be set.\n * @returns {Promise<void>} - Resolved when the operation is successful and rejected with an error otherwise.\n */\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localDescription = description;\n\n    localDescription = this._mungeDescription(localDescription);\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localDescription)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localDescription.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Sets the remote description on the peerconnection.\n *\n * @param {RTCSessionDescription} description - The remote description to be set.\n * @returns {Promise<void>} - Resolved when the operation is successful and rejected with an error otherwise.\n */\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    let remoteDescription = description;\n\n    if (this.isSpatialScalabilityOn()) {\n        remoteDescription = this.tpcUtils.insertUnifiedPlanSimulcastReceive(remoteDescription);\n        this.trace('setRemoteDescription::postTransform (sim receive)', dumpSDP(remoteDescription));\n    }\n    remoteDescription = this.tpcUtils.ensureCorrectOrderOfSsrcs(remoteDescription);\n    this.trace('setRemoteDescription::postTransform (correct ssrc order)', dumpSDP(remoteDescription));\n\n    remoteDescription = this._mungeDescription(remoteDescription);\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(remoteDescription.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n\n                this._initializeDtlsTransport();\n\n                resolve();\n            })\n            .catch(err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Changes the resolution of the video stream that is sent to the peer based on the resolution requested by the peer\n * and user preference, sets the degradation preference on the sender based on the video type, configures the maximum\n * bitrates on the send stream.\n *\n * @param {number} frameHeight - The max frame height to be imposed on the outgoing video stream.\n * @param {JitsiLocalTrack} - The local track for which the sender constraints have to be applied.\n * @param {preferredCodec} - The video codec that needs to be configured on the sender associated with the video source.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype.setSenderVideoConstraints = function(frameHeight, localVideoTrack, preferredCodec) {\n    if (frameHeight < 0 || !isValidNumber(frameHeight)) {\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\n    }\n    if (!localVideoTrack) {\n        throw new Error('Local video track is missing');\n    }\n    const sourceName = localVideoTrack.getSourceName();\n\n    this._senderMaxHeights.set(sourceName, frameHeight);\n\n    // Ignore sender constraints if the video track is muted.\n    if (localVideoTrack.isMuted()) {\n        return Promise.resolve();\n    }\n\n    const codec = preferredCodec ?? this.codecSettings.codecList[0];\n\n    return this._updateVideoSenderParameters(\n        () => this._updateVideoSenderEncodings(frameHeight, localVideoTrack, codec));\n};\n\n/**\n * Returns a wrapped-up promise so that the setParameters() call on the RTCRtpSender for video sources are chained.\n * This is needed on Chrome as it resets the transaction id after executing setParameters() and can affect the next on\n * the fly updates if they are not chained.\n * https://chromium.googlesource.com/external/webrtc/+/master/pc/rtp_sender.cc#340\n * @param {Function} nextFunction - The function to be called when the last video sender update promise is settled.\n * @returns {Promise}\n */\nTraceablePeerConnection.prototype._updateVideoSenderParameters = function(nextFunction) {\n    const nextPromise = this._lastVideoSenderUpdatePromise\n        .finally(nextFunction);\n\n    this._lastVideoSenderUpdatePromise = nextPromise;\n\n    return nextPromise;\n};\n\n/**\n * Configures the video stream with resolution / degradation / maximum bitrates\n *\n * @param {number} frameHeight - The max frame height to be imposed on the outgoing video stream.\n * @param {JitsiLocalTrack} - The local track for which the sender constraints have to be applied.\n * @param {preferredCodec} - The video codec that needs to be configured on the sender associated with the video source.\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\n */\nTraceablePeerConnection.prototype._updateVideoSenderEncodings = function(frameHeight, localVideoTrack, preferredCodec) {\n    const videoSender = this.findSenderForTrack(localVideoTrack.getTrack());\n    const videoType = localVideoTrack.getVideoType();\n    const isScreensharingTrack = videoType === VideoType.DESKTOP;\n\n    if (!videoSender) {\n        return Promise.resolve();\n    }\n    const parameters = videoSender.getParameters();\n\n    if (!parameters?.encodings?.length) {\n        return Promise.resolve();\n    }\n\n    const isSharingLowFpsScreen = isScreensharingTrack && this._capScreenshareBitrate;\n\n    // Set the degradation preference.\n    const preference = isSharingLowFpsScreen\n        ? DEGRADATION_PREFERENCE_DESKTOP // Prefer resolution for low fps share.\n        : DEGRADATION_PREFERENCE_CAMERA; // Prefer frame-rate for high fps share and camera.\n\n    parameters.degradationPreference = preference;\n\n    // Calculate the encodings active state based on the resolution requested by the bridge.\n    const codecForCamera = preferredCodec ?? this.tpcUtils.getConfiguredVideoCodec(localVideoTrack);\n    const codec = isScreensharingTrack ? this._getPreferredCodecForScreenshare(codecForCamera) : codecForCamera;\n    const activeState = this.tpcUtils.calculateEncodingsActiveState(localVideoTrack, codec, frameHeight);\n    let bitrates = this.tpcUtils.calculateEncodingsBitrates(localVideoTrack, codec, frameHeight);\n    const scalabilityModes = this.tpcUtils.calculateEncodingsScalabilityMode(localVideoTrack, codec, frameHeight);\n    let scaleFactors = this.tpcUtils.calculateEncodingsScaleFactor(localVideoTrack, codec, frameHeight);\n    let needsUpdate = false;\n\n    // Do not configure 'scaleResolutionDownBy' and 'maxBitrate' for encoders running in VP9 legacy K-SVC mode since\n    // the browser sends only the lowest resolution layer when those are configured. Those fields need to be reset in\n    // case they were set when the endpoint was encoding video using the other codecs before switching over to VP9\n    // K-SVC codec.\n    if (codec === CodecMimeType.VP9\n        && browser.supportsSVC()\n        && this.isSpatialScalabilityOn()\n        && !this.tpcUtils.codecSettings[codec].scalabilityModeEnabled) {\n        scaleFactors = scaleFactors.map(() => undefined);\n        bitrates = bitrates.map(() => undefined);\n    }\n\n    for (const idx in parameters.encodings) {\n        if (parameters.encodings.hasOwnProperty(idx)) {\n            const {\n                active = undefined,\n                codec: currentCodec = undefined,\n                maxBitrate = undefined,\n                scalabilityMode = undefined,\n                scaleResolutionDownBy = undefined\n            } = parameters.encodings[idx];\n\n            if (active !== activeState[idx]) {\n                parameters.encodings[idx].active = activeState[idx];\n                needsUpdate = true;\n            }\n\n            // Firefox doesn't follow the spec and lets application specify the degradation preference on the\n            // encodings.\n            browser.isFirefox() && (parameters.encodings[idx].degradationPreference = preference);\n\n            if (scaleResolutionDownBy !== scaleFactors[idx]) {\n                parameters.encodings[idx].scaleResolutionDownBy = scaleFactors[idx];\n                needsUpdate = true;\n            }\n            if (maxBitrate !== bitrates[idx]) {\n                parameters.encodings[idx].maxBitrate = bitrates[idx];\n                needsUpdate = true;\n            }\n\n            // Configure scalability mode when its supported and enabled.\n            if (scalabilityModes) {\n                if (scalabilityMode !== scalabilityModes[idx]) {\n                    parameters.encodings[idx].scalabilityMode = scalabilityModes[idx];\n                    needsUpdate = true;\n                }\n            } else {\n                parameters.encodings[idx].scalabilityMode = undefined;\n            }\n\n            const expectedPattern = `${MediaType.VIDEO}/${codec.toUpperCase()}`;\n\n            // Configure the codec here if its supported.\n            if (this.usesCodecSelectionAPI() && currentCodec?.mimeType !== expectedPattern) {\n                const matchingCodec = parameters.codecs.find(pt => pt.mimeType === expectedPattern);\n\n                parameters.encodings[idx].codec = matchingCodec;\n                needsUpdate = true;\n\n                Statistics.sendAnalytics(\n                    VIDEO_CODEC_CHANGED,\n                    {\n                        value: codec,\n                        videoType\n                    });\n            }\n        }\n    }\n\n    if (!needsUpdate) {\n        return Promise.resolve();\n    }\n\n    logger.info(`${this} setting max height=${frameHeight},encodings=${JSON.stringify(parameters.encodings)}`);\n\n    return videoSender.setParameters(parameters).then(() => {\n        localVideoTrack.maxEnabledResolution = frameHeight;\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\n    });\n};\n\n/**\n * Resumes or suspends media on the peerconnection by setting the active state on RTCRtpEncodingParameters\n * associated with all the senders that have a track attached to it.\n *\n * @param {boolean} enable - whether outgoing media needs to be enabled or disabled.\n * @param {string} mediaType - media type, 'audio' or 'video', if neither is passed, all outgoing media will either\n * be enabled or disabled.\n * @returns {Promise} - A promise that is resolved when the change is succesful on all the senders, rejected\n * otherwise.\n */\nTraceablePeerConnection.prototype.setMediaTransferActive = function(enable, mediaType) {\n    logger.info(`${this} ${enable ? 'Resuming' : 'Suspending'} media transfer.`);\n\n    const senders = this.peerconnection.getSenders()\n        .filter(s => Boolean(s.track) && (!mediaType || s.track.kind === mediaType));\n    const promises = [];\n\n    for (const sender of senders) {\n        if (sender.track.kind === MediaType.VIDEO) {\n            promises.push(this._updateVideoSenderParameters(() => this._enableSenderEncodings(sender, enable)));\n        } else {\n            promises.push(this._enableSenderEncodings(sender, enable));\n        }\n    }\n\n    return Promise.allSettled(promises)\n        .then(settledResult => {\n            const errors = settledResult\n                .filter(result => result.status === 'rejected')\n                .map(result => result.reason);\n\n            if (errors.length) {\n                return Promise.reject(new Error('Failed to change encodings on the RTCRtpSenders'\n                    + `${errors.join(' ')}`));\n            }\n\n            return Promise.resolve();\n        });\n};\n\n/**\n * Enables/disables outgoing video media transmission on this peer connection. When disabled the stream encoding's\n * active state is enabled or disabled to send or stop the media.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or <tt>false</tt> to disable. If the value\n * is not a boolean the call will have no effect.\n * @return {Promise} A promise that is resolved when the change is succesful, rejected otherwise.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    if (changed) {\n        return this.setMediaTransferActive(active, MediaType.VIDEO);\n    }\n\n    return Promise.resolve();\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n    this.peerconnection.removeEventListener('track', this.onTrack);\n\n    if (FeatureFlags.isSsrcRewritingSupported()) {\n        for (const remoteTrack of this.remoteTracksBySsrc.values()) {\n            this._removeRemoteTrack(remoteTrack);\n        }\n        this.remoteTracksBySsrc.clear();\n    } else {\n        for (const peerTracks of this.remoteTracks.values()) {\n            for (const remoteTracks of peerTracks.values()) {\n                for (const remoteTrack of remoteTracks) {\n                    this._removeRemoteTrack(remoteTrack);\n                }\n            }\n        }\n        this.remoteTracks.clear();\n    }\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error(`${this} rtc._removePeerConnection returned false`);\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`${this} Closing peerconnection`);\n    this.peerconnection.close();\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(isOffer, constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            // Munge local description to add 3 SSRCs for video tracks when spatial scalability is enabled.\n            if (this.isSpatialScalabilityOn() && browser.usesSdpMungingForSimulcast()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(`create${logName} OnSuccess::postTransform (simulcast)`, dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = {\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                };\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            this._processAndExtractSourceInfo(resultSdp.sdp);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`${this} create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        rejectFn(err);\n    };\n\n    // Set the codec preference before creating an offer or answer so that the generated SDP will have\n    // the correct preference order.\n    if (browser.supportsCodecPreferences() && this.codecSettings) {\n        const { codecList, mediaType } = this.codecSettings;\n        const transceivers = this.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver?.track?.kind === mediaType);\n        let capabilities = RTCRtpReceiver.getCapabilities(mediaType)?.codecs;\n\n        if (transceivers.length && capabilities) {\n            // Rearrange the codec list as per the preference order.\n            for (const codec of codecList.slice().reverse()) {\n                // Move the desired codecs (all variations of it as well) to the beginning of the list\n                /* eslint-disable-next-line arrow-body-style */\n                capabilities.sort(caps => {\n                    return caps.mimeType.toLowerCase() === `${mediaType}/${codec}` ? -1 : 1;\n                });\n            }\n\n            // Disable ulpfec and RED on the p2p peerconnection.\n            if (this.isP2P && mediaType === MediaType.VIDEO) {\n                capabilities = capabilities\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${CodecMimeType.ULPFEC}`\n                            && caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${CodecMimeType.RED}`);\n            }\n\n            // Apply codec preference to all the transceivers associated with the given media type.\n            for (const transceiver of transceivers) {\n                transceiver.setCodecPreferences(capabilities);\n            }\n        }\n    }\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n};\n\n/**\n * Track the SSRCs seen so far.\n * @param {number} ssrc - SSRC.\n * @return {boolean} - Whether this is a new SSRC.\n */\nTraceablePeerConnection.prototype.addRemoteSsrc = function(ssrc) {\n    const existing = this.remoteSSRCs.has(ssrc);\n\n    if (!existing) {\n        this.remoteSSRCs.add(ssrc);\n    }\n\n    return !existing;\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @returns {Promise<Object>} Promise which resolves with data providing statistics about\n * the peerconnection.\n */\nTraceablePeerConnection.prototype.getStats = function() {\n    return this.peerconnection.getStats();\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[id=${this.id},type=${this.isP2P ? 'P2P' : 'JVB'}]`;\n};\n","import { getLogger } from '@jitsi/logger';\nimport { cloneDeep, isEqual } from 'lodash-es';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport browser from '../browser';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\n\nimport BridgeChannel from './BridgeChannel';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport RTCUtils from './RTCUtils';\nimport TraceablePeerConnection from './TraceablePeerConnection';\n\n\nconst logger = getLogger('modules/RTC/RTC');\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _createLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            constraints,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            constraints,\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = undefined;\n\n        /**\n         * Defines the forwarded sources list. It can be null or an array once initialised with a channel forwarded\n         * sources event.\n         *\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._forwardedSources = null;\n\n        // The forwarded sources change listener.\n        this._forwardedSourcesChangeListener = this._onForwardedSourcesChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks = this._updateAudioOutputForAudioTracks.bind(this);\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED, this._updateAudioOutputForAudioTracks);\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_CHANGED, this._onDeviceListChanged);\n\n        if (this._channelOpenListener) {\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static createLocalTracks(tracksInfo) {\n        return _createLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {Array=} options.devices The devices that will be requested.\n     * @param {string=} options.resolution Resolution constraints.\n     * @param {string=} options.cameraDeviceId\n     * @param {string=} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        return RTCUtils.obtainAudioAndVideoPermissions(options)\n            .then(tracksInfo => _createLocalTracks(tracksInfo));\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(peerconnection, wsUrl, this.eventEmitter, this.conference);\n\n        this._channelOpenListener = () => {\n            const logError = (error, msgType, value) => {\n                logger.error(`Cannot send ${msgType}(${JSON.stringify(value)}) endpoint message`, error);\n            };\n\n            // When the channel becomes available, tell the bridge about video selections so that it can do adaptive\n            // simulcast, we want the notification to trigger even if userJid is undefined, or null.\n            if (this._receiverVideoConstraints) {\n                try {\n                    this._channel.sendReceiverVideoConstraintsMessage(this._receiverVideoConstraints);\n                } catch (error) {\n                    logError(error, 'ReceiverVideoConstraints', this._receiverVideoConstraints);\n                }\n            }\n            if (typeof this._lastN !== 'undefined' && this._lastN !== -1) {\n                try {\n                    this._channel.sendSetLastNMessage(this._lastN);\n                } catch (error) {\n                    logError(error, 'LastNChangedEvent', this._lastN);\n                }\n            }\n        };\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\n\n        // Add forwarded sources change listener.\n        this.addListener(RTCEvents.FORWARDED_SOURCES_CHANGED, this._forwardedSourcesChangeListener);\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when forwarded sources had changed.\n     *\n     * @param {array} forwardedSources The new forwarded sources.\n     * @private\n     */\n    _onForwardedSourcesChanged(forwardedSources = []) {\n        const oldForwardedSources = this._forwardedSources || [];\n        let leavingForwardedSources = [];\n        let enteringForwardedSources = [];\n        const timestamp = Date.now();\n\n        this._forwardedSources = forwardedSources;\n\n        leavingForwardedSources = oldForwardedSources.filter(sourceName => !this.isInForwardedSources(sourceName));\n\n        enteringForwardedSources = forwardedSources.filter(\n            sourceName => oldForwardedSources.indexOf(sourceName) === -1);\n\n        logger.debug(`Fowarded sources changed leaving=${leavingForwardedSources}, entering=`\n            + `${enteringForwardedSources} at ${timestamp}`);\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED,\n            leavingForwardedSources,\n            enteringForwardedSources,\n            timestamp);\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Sets the capture frame rate to be used for desktop tracks.\n     *\n     * @param {number} maxFps framerate to be used for desktop track capture.\n     */\n    setDesktopSharingFrameRate(maxFps) {\n        RTCUtils.setDesktopSharingFrameRate(maxFps);\n    }\n\n    /**\n     * Sets the receiver video constraints that determine how bitrate is allocated to each of the video streams\n     * requested from the bridge. The constraints are cached and sent through the bridge channel once the channel\n     * is established.\n     * @param {*} constraints\n     */\n    setReceiverVideoConstraints(constraints) {\n        if (isEqual(this._receiverVideoConstraints, constraints)) {\n            return;\n        }\n\n        this._receiverVideoConstraints = cloneDeep(constraints);\n\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendReceiverVideoConstraintsMessage(constraints);\n        }\n    }\n\n    /**\n     * Sends the track's  video type to the JVB.\n     * @param {SourceName} sourceName - the track's source name.\n     * @param {BridgeVideoType} videoType - the track's video type.\n     */\n    sendSourceVideoType(sourceName, videoType) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendSourceVideoTypeMessage(sourceName, videoType);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will provide information about the media or\n     * participants which is not carried over SDP.\n     * @param {object} pcConfig The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {Object} options.audioQuality - Quality settings to applied on the outbound audio stream.\n     * @param {boolean} options.capScreenshareBitrate if set to true, lower layers will be disabled for screenshare.\n     * @param {Array<CodecMimeType>} options.codecSettings - codec settings to be applied for video streams.\n     * @param {boolean} options.disableSimulcast if set to 'true' will disable the simulcast.\n     * @param {boolean} options.disableRtx if set to 'true' will disable the RTX.\n     * @param {boolean} options.enableInsertableStreams set to true when the insertable streams constraints is to be\n     * enabled on the PeerConnection.\n     * @param {boolean} options.forceTurnRelay If set to true, the browser will generate only Relay ICE candidates.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @param {Object} options.videoQuality - Quality settings to applied on the outbound video streams.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, pcConfig, isP2P, options) {\n        const pcConstraints = {};\n\n        if (options.enableInsertableStreams) {\n            logger.debug('E2EE - setting insertable streams constraints');\n            pcConfig.encodedInsertableStreams = true;\n        }\n\n        if (options.forceTurnRelay) {\n            pcConfig.iceTransportPolicy = 'relay';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        pcConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                pcConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Get forwarded sources list.\n     * @returns {Array<string>|null}\n     */\n    getForwardedSources() {\n        return this._forwardedSources;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Returns all the local video tracks.\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    getLocalVideoTracks() {\n        return this.getLocalTracks(MediaType.VIDEO);\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the endpoint id for the local user.\n     * @returns {string}\n     */\n    getLocalEndpointId() {\n        return this.conference.myUserId();\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n    * Set mute for all local video streams attached to the conference.\n    * @param value The mute value.\n    * @returns {Promise}\n    */\n    setVideoMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.VIDEO)\n            .forEach(videoTrack => {\n                // this is a Promise\n                mutePromises.push(value ? videoTrack.mute() : videoTrack.unmute());\n            });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channel = null;\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('BridgeChannel has not been initialized yet');\n        }\n    }\n\n    /**\n     * Sends the local stats via the bridge channel.\n     * @param {Object} payload The payload of the message.\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n     */\n    sendEndpointStatsMessage(payload) {\n        if (this._channel && this._channel.isOpen()) {\n            this._channel.sendEndpointStatsMessage(payload);\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channel.isOpen()) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the source name is currently included in the forwarded sources.\n     *\n     * @param {string} sourceName The source name that we check for forwarded sources.\n     * @returns {boolean} true if the source name is in the forwarded sources or if we don't have bridge channel\n     * support, otherwise we return false.\n     */\n    isInForwardedSources(sourceName) {\n        return !this._forwardedSources // forwardedSources not initialised yet.\n            || this._forwardedSources.indexOf(sourceName) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","export enum ConnectionQualityEvents {\n\n    /**\n     * Indicates that the local connection statistics were updated.\n     */\n    LOCAL_STATS_UPDATED = 'cq.local_stats_updated',\n\n    /**\n     * Indicates that the connection statistics for a particular remote participant\n     * were updated.\n     */\n    REMOTE_STATS_UPDATED = 'cq.remote_stats_updated'\n}\n\n// exported for backward compatibility\nexport const LOCAL_STATS_UPDATED = ConnectionQualityEvents.LOCAL_STATS_UPDATED;\nexport const REMOTE_STATS_UPDATED = ConnectionQualityEvents.REMOTE_STATS_UPDATED;\n\n","import { getLogger } from '@jitsi/logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\nimport { VIDEO_QUALITY_LEVELS } from '../../service/RTC/StandardVideoQualitySettings';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\n\nconst Resolutions = require('../../service/RTC/Resolutions');\nconst { VideoType } = require('../../service/RTC/VideoType');\nconst { XMPPEvents } = require('../../service/xmpp/XMPPEvents');\n\nconst logger = getLogger('modules/connectivity/ConnectionQuality');\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending video started.\n * @param bitrates {Object} the bitrates for the local video source.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart, bitrates) {\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    // Find the first format with height no bigger than ours.\n    let qualityLevel = VIDEO_QUALITY_LEVELS.find(f => f.height <= height);\n\n    if (qualityLevel && simulcast) {\n        // Sum the target fields from all simulcast layers for the given\n        // resolution (e.g. 720p + 360p + 180p) for VP8 simulcast.\n        for (height = qualityLevel.height; height >= 180; height /= 2) {\n            const targetHeight = height;\n\n            qualityLevel = VIDEO_QUALITY_LEVELS.find(f => f.height === targetHeight);\n            if (qualityLevel) {\n                target += bitrates[qualityLevel.level];\n            } else {\n                break;\n            }\n        }\n    } else if (qualityLevel) {\n        // For VP9 SVC, H.264 (simulcast automatically disabled) and p2p, target bitrate will be\n        // same as that of the individual stream bitrate.\n        target = bitrates[qualityLevel.level];\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second. Convert target from bps to kbps.\n    return Math.min(target / 1000, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Conference options.\n         */\n        this._options = options;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (this._options.config?.startBitrate > 0) {\n            startBitrate = this._options.config.startBitrate;\n        }\n\n        conference.on(\n            ConferenceEvents.BRIDGE_BWE_STATS_RECEIVED,\n            bwe => {\n                if (bwe && this._localStats?.bandwidth) {\n                    this._localStats.bandwidth.download = Math.floor(bwe / 1000);\n                }\n            });\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(ConnectionQualityEvents.LOCAL_STATS_UPDATED, this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        // TODO - Delete this when all the mobile endpoints switch to using the new Colibri\n        // message format for sending the endpoint stats.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(participant.getId(), payload.values);\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.ENDPOINT_STATS_RECEIVED,\n            (participant, payload) => {\n                this._updateRemoteStats(participant.getId(), payload);\n            });\n\n        if (!this._options.config.disableLocalStats) {\n            // Listen to local statistics events originating from the RTC module and update the _localStats field.\n            conference.statistics.addConnectionStatsListener(this._updateLocalStats.bind(this));\n        }\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n\n        conference.on(ConferenceEvents.VIDEO_CODEC_CHANGED, this._resetVideoUnmuteTime.bind(this));\n\n        conference.on(ConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, this._resetVideoUnmuteTime.bind(this));\n\n        conference.rtc.on(\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\n            track => {\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Resets the time video was unmuted and triggers a new ramp-up.\n     *\n     * @private\n     * @returns {void}\n     */\n    _resetVideoUnmuteTime() {\n        this._timeVideoUnmuted = -1;\n        this._maybeUpdateUnmuteTime();\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the send video bitrate on the active TPC.\n            const activeTPC = this._conference.getActivePeerConnection();\n\n            if (activeTPC) {\n                // Time since sending of video was enabled.\n                const millisSinceStart = window.performance.now()\n                    - Math.max(this._timeVideoUnmuted, this._timeIceConnected);\n                const statsInterval = this._options.config?.pcStatsInterval ?? 10000;\n\n                // Expected sending bitrate in perfect conditions.\n                let target = getTarget(\n                    activeTPC.doesTrueSimulcast(),\n                    resolution,\n                    millisSinceStart,\n                    activeTPC.getTargetVideoBitrates());\n\n                target = Math.min(target, MAX_TARGET_BITRATE);\n\n                // Calculate the quality only after the stats are available (after video was enabled).\n                if (millisSinceStart > statsInterval) {\n                    quality = 100 * this._localStats.bitrate.upload / target;\n                }\n            }\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds = (window.performance.now() - this._lastConnectionQualityUpdate) / 1000;\n\n            quality = Math.min(quality, prevConnectionQuality + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // broadcasting local stats is disabled\n        if (this._options.config.disableLocalStatsBroadcast) {\n            return;\n        }\n\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            maxEnabledResolution: this._localStats.maxEnabledResolution\n        };\n\n        try {\n            this._conference.sendEndpointStatsMessage(data);\n        } catch (err) {\n            // Ignore the error as we might hit it in the beginning of the call before the channel is ready.\n            // The statistics will be sent again after few seconds and error is logged elseware as well.\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality = !this._conference.isConnectionInterrupted();\n        const localVideoTrack = this._conference.getLocalVideoTrack();\n        const videoType = localVideoTrack?.videoType;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                // Prevent overwriting available download bandwidth as this statistic is provided by the bridge.\n                if (key === 'bandwidth' && data[key].hasOwnProperty('download') && !tpc.isP2P) {\n                    if (!this._localStats[key]) {\n                        this._localStats[key] = {};\n                    }\n                    this._localStats[key].download = this._localStats[key].download || data[key].download;\n                    this._localStats[key].upload = data[key].upload;\n                } else {\n                    this._localStats[key] = data[key];\n                }\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(ConnectionQualityEvents.LOCAL_STATS_UPDATED, this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            maxEnabledResolution: data.maxEnabledResolution\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport JitsiConference from '../../JitsiConference';\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger('modules/connectivity/IceFailedHandling');\n\n/**\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\n *\n * If ICE connection is not re-established within 2 secs after the internet comes back online, the client will initiate\n * a session restart via 'session-terminate'. This results in Jicofo re-inviting the participant into the conference by\n * recreating the jvb media session so that there is minimla disruption to the user by default. However, if the\n * 'enableForcedReload' option is set in config.js, the conference will be forcefully reloaded.\n */\nexport default class IceFailedHandling {\n    private _conference: JitsiConference;\n    private _canceled: boolean = false;\n    private _iceFailedTimeout?: number;\n\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference: JitsiConference) {\n        this._conference = conference;\n    }\n\n    /**\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\n     * notification to Jicofo or emits the ice failed conference event.\n     * @private\n     * @returns {void}\n     */\n    _actOnIceFailed(): void {\n        if (!this._conference.room) {\n            return;\n        }\n\n        const { enableForcedReload } = this._conference.options.config;\n\n        logger.info(`ICE failed, enableForcedReload: ${enableForcedReload}`);\n\n        if (enableForcedReload) {\n            logger.info('ICE failed, force reloading the conference');\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.CONFERENCE_RESTARTED);\n\n            return;\n        }\n\n        const jvbConnection = this._conference.jvbJingleSession;\n        const jvbConnIceState = jvbConnection?.getIceConnectionState();\n\n        if (!jvbConnection) {\n            logger.warn('Not sending ICE failed - no JVB connection');\n        } else if (jvbConnIceState === 'connected') {\n            logger.info('ICE connection restored - not sending ICE failed');\n        } else {\n            logger.info(`Sending ICE failed - the connection did not recover, ICE state: ${jvbConnIceState}`);\n            this._conference._stopJvbSession({\n                reason: 'connectivity-error',\n                reasonDescription: 'ICE FAILED',\n                requestRestart: true,\n                sendSessionTerminate: true\n            });\n        }\n    }\n\n    /**\n     * Starts the task.\n     * @returns {void}\n     */\n    start(): void {\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\n        // gets reconnected.\n        //  This also handles the case about waiting for the internet to come back online, because ping\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\n        // CONNECTED which is the extra 2 second timeout after ping.\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\n        // to 'item-not-found' error returned by the server.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (!this._canceled) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        this._iceFailedTimeout = undefined;\n                        this._actOnIceFailed();\n                    }, 2000);\n                }\n            },\n            error => {\n                logger.error('PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     * @returns {void}\n     */\n    cancel(): void {\n        this._canceled = true;\n        window.clearTimeout(this._iceFailedTimeout);\n    }\n}\n","export enum DetectionEvents {\n\n    /** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\n     * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n     * it starts receiving audio levels !== 0 after being in a state of no audio.\n     * @event\n     * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n     */\n    AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed',\n\n    /**\n     * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n     * versa.\n     * @event\n     * @type {boolean} - true when service has changed to active false otherwise.\n     */\n    DETECTOR_STATE_CHANGE = 'detector_state_change',\n\n    /** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes\n     * silent for a period of time, meaning that the device is either broken or hardware/software muted.\n     * @event\n     * @type {void}\n     */\n    NO_AUDIO_INPUT = 'no_audio_input_detected',\n\n    /**\n     *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n     *  @event\n     *  @type {Object}\n     */\n    VAD_NOISY_DEVICE = 'detection.vad_noise_device',\n\n    /**\n     * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n     * The generated objects are of type Array<Object>, one score for each monitored device.\n     * @event VAD_REPORT_PUBLISHED\n     * @type Array<Object> with the following structure:\n     * @property {Date} timestamp - Timestamp at which the compute took place.\n     * @property {number} avgVAD - Average VAD score over monitored period of time.\n     * @property {string} deviceId - Associate local audio device ID.\n     */\n    VAD_REPORT_PUBLISHED = 'vad-report-published',\n\n    /**\n     * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n     *\n     * @event\n     * @type {Object}\n     * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n     * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @property {string} deviceId - Device id of the associated track.\n     */\n    VAD_SCORE_PUBLISHED = 'detection.vad_score_published',\n\n    /**\n     *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n     *\n     *  @event\n     *  @type {Object}\n     */\n    VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted'\n}\n\n// exported for backward compatibility\nexport const DETECTOR_STATE_CHANGE = DetectionEvents.DETECTOR_STATE_CHANGE;\nexport const AUDIO_INPUT_STATE_CHANGE = DetectionEvents.AUDIO_INPUT_STATE_CHANGE;\nexport const NO_AUDIO_INPUT = DetectionEvents.NO_AUDIO_INPUT;\nexport const VAD_NOISY_DEVICE = DetectionEvents.VAD_NOISY_DEVICE;\nexport const VAD_REPORT_PUBLISHED = DetectionEvents.VAD_REPORT_PUBLISHED;\nexport const VAD_SCORE_PUBLISHED = DetectionEvents.VAD_SCORE_PUBLISHED;\nexport const VAD_TALK_WHILE_MUTED = DetectionEvents.VAD_TALK_WHILE_MUTED;\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport EventEmitter from '../util/EventEmitter';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {JitsiTrack} track - The added JitsiTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n\n            // Listen for the audio levels on the newly added audio track\n            track.on(\n                JitsiTrackEvents.NO_AUDIO_INPUT,\n                audioLevel => {\n                    this._handleNoAudioInputDetection(audioLevel);\n                }\n            );\n            track.on(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                audioLevel => {\n                    this._handleNoAudioInputDetection(audioLevel);\n                    this._handleAudioInputStateChange(audioLevel);\n                }\n            );\n        }\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport JitsiConference from '../../JitsiConference';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD: number = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    private conference: JitsiConference;\n    private myUserID: string;\n\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference: JitsiConference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    private _audioLevel(id: string, audioLevel: number): void {\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","import RTC from '../RTC/RTC';\nimport EventEmitter from '../util/EventEmitter';\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\n\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The JitsiLocalTrack instance.\n         */\n        this._localTrack = jitsiLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport EventEmitter from '../util/EventEmitter';\n\nimport { DETECTOR_STATE_CHANGE, VAD_SCORE_PUBLISHED } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger('modules/detection/VADAudioAnalyser');\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.start();\n            this._isVADEmitterRunning = true;\n        }\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        if (this._vadEmitter) {\n            this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n            this._vadEmitter.stop();\n        }\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\n     * Only take into account local audio tracks.\n     * @param {JitsiTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                })\n                .catch(error => {\n                    logger.warn('Failed to start VADAudioAnalyser', error);\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {JitsiTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {JitsiTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import EventEmitter from '../util/EventEmitter';\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { DETECTOR_STATE_CHANGE, VAD_NOISY_DEVICE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import EventEmitter from '../util/EventEmitter';\nimport { calculateAverage } from '../util/MathUtil';\nimport { DETECTOR_STATE_CHANGE, VAD_TALK_WHILE_MUTED } from './DetectionEvents';\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\nexport interface IVADScore {\n    deviceId: string;\n    score: number;\n    timestamp: Date;\n}\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    private _processing: boolean;\n    private _scoreArray: number[];\n    private _active: boolean;\n    private _processTimeout?: ReturnType<typeof setTimeout>;\n\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    private _calculateVADScore(): void {\n        const score = calculateAverage(new Float32Array(this._scoreArray));\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    private _setActiveState(active: boolean): void {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    public changeMuteState(isMuted: boolean): void {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    public isActive(): boolean {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    public processVADScore(vadScore: IVADScore): void {\n        if (!this._active) {\n            return;\n        }\n        // There is a processing phase on going, add score to buffer array.\n\n\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    public reset(): void {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","export enum E2ePingEvents {\n\n    /**\n     * Indicates that the end-to-end round-trip-time for a participant has changed.\n     */\n    E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed'\n}\n\n// exported for backward compatibility\nexport const E2E_RTT_CHANGED = E2ePingEvents.E2E_RTT_CHANGED;\n","import { getLogger } from '@jitsi/logger';\n\nimport JitsiConference from '../../JitsiConference';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiParticipant from '../../JitsiParticipant';\nimport * as JitsiE2EPingEvents from '../../service/e2eping/E2ePingEvents';\n\nconst logger = getLogger('modules/e2eping/e2eping');\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST: string = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE: string = 'e2e-ping-response';\n\n/**\n * The number of requests to wait for before emitting an RTT value.\n */\nconst DEFAULT_NUM_REQUESTS: number = 5;\n\n/**\n * The maximum number of messages per second to aim for. This is for the entire\n * conference, with the assumption that all endpoints join at once.\n */\nconst DEFAULT_MAX_MESSAGES_PER_SECOND: number = 250;\n\n/**\n * The conference size beyond which e2e pings will be disabled.\n */\nconst DEFAULT_MAX_CONFERENCE_SIZE: number = 200;\n\nexport interface IPingMessage {\n    id: number;\n    type: string;\n}\n\nexport interface IE2ePingOptions {\n    e2eping?: {\n        maxConferenceSize?: number;\n        maxMessagesPerSecond?: number;\n        numRequests?: number;\n    };\n}\n\nexport interface IRequest {\n    id: number;\n    rtt?: number;\n    timeSent: number;\n}\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    participant: JitsiParticipant;\n    e2eping: E2ePing;\n    id: string;\n    requests: { [key: number]: IRequest; };\n    lastRequestId: number;\n    timeout: number | null;\n\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant: JitsiParticipant, e2eping: E2ePing) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeLogRttAndStop = this.maybeLogRttAndStop.bind(this);\n        this.scheduleNext = this.scheduleNext.bind(this);\n        this.stop = this.stop.bind(this);\n        this.getDelay = this.getDelay.bind(this);\n        this.timeout = this.scheduleNext();\n    }\n\n    /**\n     * Schedule the next ping to be sent.\n     */\n    scheduleNext(): number {\n        return window.setTimeout(this.sendRequest, this.getDelay());\n    }\n\n    /**\n     * Stop pinging this participant, canceling a scheduled ping, if any.\n     */\n    stop(): void {\n        if (this.timeout) {\n            window.clearTimeout(this.timeout);\n        }\n        this.e2eping.removeParticipant(this.id);\n    }\n\n    /**\n     * Get the delay until the next ping in milliseconds.\n     */\n    getDelay(): number {\n        const conferenceSize = this.e2eping.conference.getParticipants().length;\n        const endpointPairs = conferenceSize * (conferenceSize - 1) / 2;\n        const totalMessages = endpointPairs * this.e2eping.numRequests;\n        const totalSeconds = totalMessages / this.e2eping.maxMessagesPerSecond;\n\n        // Randomize between .5 and 1.5\n        const r = 1.5 - Math.random();\n        const delayBetweenMessages = r * Math.max(1000 * (totalSeconds / this.e2eping.numRequests), 1000);\n\n        return delayBetweenMessages;\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest(): void {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response: any): void {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n        }\n        this.maybeLogRttAndStop();\n    }\n\n    /**\n     * Check if we've received the pre-configured number of responses, and if\n     * so log the measured RTT and stop sending requests.\n     * @type {*}\n     */\n    maybeLogRttAndStop(): void {\n        // The RTT we'll report is the minimum RTT measured\n        let rtt = Infinity;\n        let request: any, requestId: any;\n        let numRequestsWithResponses = 0;\n        let totalNumRequests = 0;\n\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                totalNumRequests++;\n                if (request.rtt) {\n                    numRequestsWithResponses++;\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (numRequestsWithResponses >= this.e2eping.numRequests) {\n            logger.info(`Measured RTT=${rtt} ms to ${this.id} (in ${this.participant.getProperty('region')})`);\n            this.stop();\n\n            this.e2eping.conference.eventEmitter.emit(\n                JitsiE2EPingEvents.E2E_RTT_CHANGED, this.participant, rtt);\n\n            return;\n        } else if (totalNumRequests > 2 * this.e2eping.numRequests) {\n            logger.info(`Stopping e2eping for ${this.id} because we sent ${totalNumRequests} with only `\n                + `${numRequestsWithResponses} responses.`);\n            this.stop();\n\n            return;\n        }\n\n        this.timeout = this.scheduleNext();\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n\n    conference: JitsiConference;\n    eventEmitter: any;\n    sendMessage: (message: IPingMessage, participantId: string) => void;\n    participants: { [key: string]: ParticipantWrapper; };\n    numRequests: number;\n    maxConferenceSize: number;\n    maxMessagesPerSecond: number;\n\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(\n            conference: JitsiConference,\n            options: IE2ePingOptions,\n            sendMessage: (message: IPingMessage, participantId: string) => void) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        this.numRequests = DEFAULT_NUM_REQUESTS;\n        this.maxConferenceSize = DEFAULT_MAX_CONFERENCE_SIZE;\n        this.maxMessagesPerSecond = DEFAULT_MAX_MESSAGES_PER_SECOND;\n\n        if (options?.e2eping) {\n            if (typeof options.e2eping.numRequests === 'number') {\n                this.numRequests = options.e2eping.numRequests;\n            }\n            if (typeof options.e2eping.maxConferenceSize === 'number') {\n                this.maxConferenceSize = options.e2eping.maxConferenceSize;\n            }\n            if (typeof options.e2eping.maxMessagesPerSecond === 'number') {\n                this.maxMessagesPerSecond = options.e2eping.maxMessagesPerSecond;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping with numRequests=${this.numRequests}, maxConferenceSize=${this.maxConferenceSize}, `\n            + `maxMessagesPerSecond=${this.maxMessagesPerSecond}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(JitsiConferenceEvents.USER_LEFT, this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this.messageReceived);\n\n        this.conferenceJoined = this.conferenceJoined.bind(this);\n        conference.on(JitsiConferenceEvents.CONFERENCE_JOINED, this.conferenceJoined);\n    }\n\n    /**\n     * Delay processing USER_JOINED events until the MUC is fully joined,\n     * otherwise the apparent conference size will be wrong.\n     */\n    conferenceJoined(): void {\n        this.conference.getParticipants().forEach(p => this.participantJoined(p.getId(), p));\n        this.conference.on(JitsiConferenceEvents.USER_JOINED, this.participantJoined);\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant: JitsiParticipant, payload: IPingMessage): void {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id: string, participant: JitsiParticipant): void {\n        if (this.participants[id]) {\n            logger.info(`Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].stop();\n        }\n\n        if (this.conference.getParticipants().length > this.maxConferenceSize) {\n            return;\n        }\n\n        // We don't need to send e2eping in both directions for a pair of\n        // endpoints. Force only one direction with just string comparison of\n        // the IDs.\n        if (this.conference.myUserId() > id) {\n            logger.info(`Starting e2eping for participant ${id}`);\n            this.participants[id] = new ParticipantWrapper(participant, this);\n        }\n    }\n\n    /**\n     * Remove a participant without calling \"stop\".\n     */\n    removeParticipant(id: string): void {\n        if (this.participants[id]) {\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id: string): void {\n        if (this.participants[id]) {\n            this.participants[id].stop();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId: string, request: { id: number; }): void {\n        // If it's a valid request, just send a response.\n        if (request?.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(`Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId: string, response: { id: number; }): void {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop(): void {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(JitsiConferenceEvents.USER_JOINED, this.participantJoined);\n        this.conference.off(JitsiConferenceEvents.USER_LEFT, this.participantLeft);\n        this.conference.off(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this.messageReceived);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].stop();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport JitsiConference from '../../JitsiConference';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger('modules/event/Jvb121EventGenerator');\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    private _conference: JitsiConference;\n    private _jvb121: boolean;\n\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference: JitsiConference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport JitsiConference from '../../JitsiConference';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport JitsiRemoteTrack from '../RTC/JitsiRemoteTrack';\nimport TraceablePeerConnection from '../RTC/TraceablePeerConnection';\nimport FeatureFlags from '../flags/FeatureFlags';\n\n// Flag to set on receivers to avoid setting up the lite mode\n// more than once.\nconst kJitsiLiteMode = Symbol('kJitsiLiteMode');\n\nconst logger = getLogger('modules/litemode/LiteModeContext');\n\n/**\n * This module implements a discard-all insertable stream.  Use to reduce decoder CPU load for testing.\n */\nexport class LiteModeContext {\n    private enabled: boolean;\n\n    /**\n     * A constructor.\n     * @param {JitsiConference} conference - The conference instance for which lite mode is to be enabled.\n     */\n    constructor(conference: JitsiConference) {\n        this.enabled = FeatureFlags.isRunInLiteModeEnabled();\n        if (!this.enabled) {\n            return;\n        }\n\n        conference.rtc.on(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            (track: JitsiRemoteTrack, tpc: TraceablePeerConnection) => this._setupLiteModeForTrack(tpc, track));\n    }\n\n    /**\n     * Setup Lite Mode for a track.\n     *\n     * @private\n     */\n    private _setupLiteModeForTrack(tpc: TraceablePeerConnection, track: JitsiRemoteTrack): void {\n        if (!this.enabled) {\n            return;\n        }\n\n        const receiver = tpc.findReceiverForTrack(track.track);\n\n        if (!receiver) {\n            logger.warn(`Could not set up lite mode for ${track}: receiver not found in: ${tpc}`);\n\n            return;\n        }\n\n        if (receiver[kJitsiLiteMode]) {\n            return;\n        }\n        receiver[kJitsiLiteMode] = true;\n\n        const receiverStreams = receiver.createEncodedStreams();\n\n        const transformStream = new TransformStream({\n            transform: () => {\n                // Don't call controller.enqueue(encodedFrame), and so drop everything\n            }\n        });\n\n        receiverStreams.readable.pipeThrough(transformStream).pipeTo(receiverStreams.writable);\n    }\n}\n","\nimport { getLogger } from '@jitsi/logger';\n\nimport { CodecMimeType } from '../../service/RTC/CodecMimeType';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VIDEO_CODECS_BY_COMPLEXITY } from '../../service/RTC/StandardVideoQualitySettings';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport browser from '../browser';\n\nconst logger = getLogger('modules/qualitycontrol/CodecSelection');\n\n// Default video codec preferences on mobile and desktop endpoints.\nconst DESKTOP_VIDEO_CODEC_ORDER = [ CodecMimeType.AV1, CodecMimeType.VP9, CodecMimeType.VP8, CodecMimeType.H264 ];\nconst MOBILE_P2P_VIDEO_CODEC_ORDER = [ CodecMimeType.H264, CodecMimeType.VP8, CodecMimeType.VP9, CodecMimeType.AV1 ];\nconst MOBILE_VIDEO_CODEC_ORDER = [ CodecMimeType.VP8, CodecMimeType.VP9, CodecMimeType.H264, CodecMimeType.AV1 ];\n\n/**\n * This class handles the codec selection mechanism for the conference based on the config.js settings.\n * The preferred codec is selected based on the settings and the list of codecs supported by the browser.\n * The preferred codec is published in presence which is then used by the other endpoints in the\n * conference to pick a supported codec at join time and when the call transitions between p2p and jvb\n * connections.\n */\nexport class CodecSelection {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance\n     * @param {*} options\n     * @param {string} options.jvb settings (codec list, preferred and disabled) for the jvb connection.\n     * @param {string} options.p2p settings (codec list, preferred and disabled) for the p2p connection.\n     */\n    constructor(conference, options) {\n        this.codecPreferenceOrder = {};\n        this.conference = conference;\n        this.encodeTimeStats = new Map();\n        this.options = options;\n        this.screenshareCodec = {};\n        this.visitorCodecs = [];\n\n        for (const connectionType of Object.keys(options)) {\n            let { disabledCodec, preferredCodec, preferenceOrder } = options[connectionType];\n            const { enableAV1ForFF = false, screenshareCodec } = options[connectionType];\n            const supportedCodecs = new Set(this._getSupportedVideoCodecs(connectionType));\n\n            // Default preference codec order when no codec preferences are set in config.js\n            let selectedOrder = Array.from(supportedCodecs);\n\n            if (preferenceOrder) {\n                preferenceOrder = preferenceOrder.map(codec => codec.toLowerCase());\n\n                // Select all codecs that are supported by the browser.\n                selectedOrder = preferenceOrder.filter(codec => supportedCodecs.has(codec));\n\n            // Generate the codec list based on the supported codecs and the preferred/disabled (deprecated) settings\n            } else if (preferredCodec || disabledCodec) {\n                disabledCodec = disabledCodec?.toLowerCase();\n                preferredCodec = preferredCodec?.toLowerCase();\n\n                // VP8 cannot be disabled since it the default codec.\n                if (disabledCodec && disabledCodec !== CodecMimeType.VP8) {\n                    selectedOrder = selectedOrder.filter(codec => codec !== disabledCodec);\n                }\n\n                const index = selectedOrder.findIndex(codec => codec === preferredCodec);\n\n                // Move the preferred codec to the top of the list.\n                if (preferredCodec && index !== -1) {\n                    selectedOrder.splice(index, 1);\n                    selectedOrder.unshift(preferredCodec);\n                }\n            }\n\n            // Push AV1 and VP9 to the end of the list if they are supported by the browser but has implementation bugs\n            // For example, 136 and newer versions of Firefox supports AV1 but only simulcast and not SVC. Even with\n            // simulcast, temporal scalability is not supported. This way Firefox will continue to decode AV1 from\n            // other endpoints but will use VP8 for encoding. Similar issues exist with VP9 on Safari and Firefox.\n            const isVp9EncodeSupported = browser.supportsVP9() || (browser.isWebKitBased() && connectionType === 'p2p');\n\n            [ CodecMimeType.AV1, CodecMimeType.VP9 ].forEach(codec => {\n                if ((codec === CodecMimeType.AV1 && browser.isFirefox() && !enableAV1ForFF)\n                    || (codec === CodecMimeType.VP9 && !isVp9EncodeSupported)) {\n                    const index = selectedOrder.findIndex(selectedCodec => selectedCodec === codec);\n\n                    if (index !== -1) {\n                        selectedOrder.splice(index, 1);\n\n                        selectedOrder.push(codec);\n                    }\n                }\n            });\n\n            logger.info(`Codec preference order for ${connectionType} connection is ${selectedOrder}`);\n            this.codecPreferenceOrder[connectionType] = selectedOrder;\n\n            // Set the preferred screenshare codec.\n            if (screenshareCodec && supportedCodecs.has(screenshareCodec.toLowerCase())) {\n                this.screenshareCodec[connectionType] = screenshareCodec.toLowerCase();\n            }\n        }\n    }\n\n    /**\n     * Returns a list of video codecs that are supported by the browser.\n     *\n     * @param {string} connectionType - media connection type, p2p or jvb.\n     * @returns {Array}\n     */\n    _getSupportedVideoCodecs(connectionType) {\n        const videoCodecMimeTypes = browser.isMobileDevice() && connectionType === 'p2p'\n            ? MOBILE_P2P_VIDEO_CODEC_ORDER\n            : browser.isMobileDevice() ? MOBILE_VIDEO_CODEC_ORDER : DESKTOP_VIDEO_CODEC_ORDER;\n\n        const supportedCodecs = videoCodecMimeTypes.filter(codec =>\n            (window.RTCRtpReceiver?.getCapabilities?.(MediaType.VIDEO)?.codecs ?? [])\n                .some(supportedCodec => supportedCodec.mimeType.toLowerCase() === `${MediaType.VIDEO}/${codec}`));\n\n        // Select VP8 as the default codec if RTCRtpReceiver.getCapabilities() is not supported by the browser or if it\n        // returns an empty set.\n        !supportedCodecs.length && supportedCodecs.push(CodecMimeType.VP8);\n\n        return supportedCodecs;\n    }\n\n    /**\n     * Returns the current codec preference order for the given connection type.\n     *\n     * @param {String} connectionType The media connection type, 'p2p' or 'jvb'.\n     * @returns {Array<string>}\n     */\n    getCodecPreferenceList(connectionType) {\n        return this.codecPreferenceOrder[connectionType];\n    }\n\n    /**\n     * Returns the preferred screenshare codec for the given connection type.\n     *\n     * @param {String} connectionType The media connection type, 'p2p' or 'jvb'.\n     * @returns CodecMimeType\n     */\n    getScreenshareCodec(connectionType) {\n        return this.screenshareCodec[connectionType];\n    }\n\n    /**\n     * Sets the codec on the media session based on the codec preference order configured in config.js and the supported\n     * codecs published by the remote participants in their presence.\n     *\n     * @param {JingleSessionPC} mediaSession session for which the codec selection has to be made.\n     */\n    selectPreferredCodec(mediaSession) {\n        const session = mediaSession ? mediaSession : this.conference.jvbJingleSession;\n\n        if (!session) {\n            return;\n        }\n\n        let localPreferredCodecOrder = this.codecPreferenceOrder.jvb;\n\n        // E2EE is curently supported only for VP8 codec.\n        if (this.conference.isE2EEEnabled()) {\n            localPreferredCodecOrder = [ CodecMimeType.VP8 ];\n        }\n\n        const remoteParticipants = this.conference.getParticipants().map(participant => participant.getId());\n        const remoteCodecsPerParticipant = remoteParticipants?.map(remote => {\n            const peerMediaInfo = session._signalingLayer.getPeerMediaInfo(remote, MediaType.VIDEO);\n\n            if (peerMediaInfo?.codecList) {\n                return peerMediaInfo.codecList;\n            } else if (peerMediaInfo?.codecType) {\n                return [ peerMediaInfo.codecType ];\n            }\n\n            return [];\n        });\n\n        // Include the visitor codecs.\n        this.visitorCodecs.length && remoteCodecsPerParticipant.push(this.visitorCodecs);\n\n        const selectedCodecOrder = localPreferredCodecOrder.reduce((acc, localCodec) => {\n            let codecNotSupportedByRemote = false;\n\n            // Remove any codecs that are not supported by any of the remote endpoints. The order of the supported\n            // codecs locally however will remain the same since we want to support asymmetric codecs.\n            for (const remoteCodecs of remoteCodecsPerParticipant) {\n                // Ignore remote participants that do not publish codec preference in presence (transcriber).\n                if (remoteCodecs.length) {\n                    codecNotSupportedByRemote = codecNotSupportedByRemote\n                    || !remoteCodecs.find(participantCodec => participantCodec === localCodec);\n                }\n            }\n\n            if (!codecNotSupportedByRemote) {\n                acc.push(localCodec);\n            }\n\n            return acc;\n        }, []);\n\n        if (!selectedCodecOrder.length) {\n            logger.warn('Invalid codec list generated because of a user joining/leaving the call');\n\n            return;\n        }\n\n        session.setVideoCodecs(selectedCodecOrder, this.screenshareCodec?.jvb);\n    }\n\n    /**\n     * Changes the codec preference order.\n     *\n     * @param {JitsiLocalTrack} localTrack - The local video track.\n     * @param {CodecMimeType} codec - The codec used for encoding the given local video track.\n     * @returns boolean - Returns true if the codec order has been updated, false otherwise.\n     */\n    changeCodecPreferenceOrder(localTrack, codec) {\n        const session = this.conference.getActiveMediaSession();\n        const connectionType = session.isP2P ? 'p2p' : 'jvb';\n        const codecOrder = this.codecPreferenceOrder[connectionType];\n        const videoType = localTrack.getVideoType();\n        const codecsByVideoType = VIDEO_CODECS_BY_COMPLEXITY[videoType]\n            .filter(val => Boolean(codecOrder.find(supportedCodec => supportedCodec === val)));\n        const codecIndex = codecsByVideoType.findIndex(val => val === codec.toLowerCase());\n\n        // Do nothing if we are using the lowest complexity codec already.\n        if (codecIndex === codecsByVideoType.length - 1) {\n            return false;\n        }\n\n        const newCodec = codecsByVideoType[codecIndex + 1];\n\n        if (videoType === VideoType.CAMERA) {\n            const idx = codecOrder.findIndex(val => val === newCodec);\n\n            codecOrder.splice(idx, 1);\n            codecOrder.unshift(newCodec);\n            logger.info(`QualityController - switching camera codec to ${newCodec} because of cpu restriction`);\n        } else {\n            this.screenshareCodec[connectionType] = newCodec;\n            logger.info(`QualityController - switching screenshare codec to ${newCodec} because of cpu restriction`);\n        }\n\n        this.selectPreferredCodec(session);\n\n        return true;\n    }\n\n    /**\n     * Updates the aggregate list of the codecs supported by all the visitors in the call and calculates the\n     * selected codec if needed.\n     * @param {Array} codecList - visitor codecs.\n     * @returns {void}\n     */\n    updateVisitorCodecs(codecList) {\n        if (this.visitorCodecs === codecList) {\n            return;\n        }\n\n        this.visitorCodecs = codecList;\n        this.selectPreferredCodec();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport { isEqual } from 'lodash-es';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { ASSUMED_BANDWIDTH_BPS, LAST_N_UNLIMITED } from '../../service/RTC/StandardVideoQualitySettings';\n\nconst logger = getLogger('modules/qualitycontrol/ReceiveVideoController');\nconst MAX_HEIGHT = 2160;\n\n/**\n * This class manages the receive video contraints for a given {@link JitsiConference}. These constraints are\n * determined by the application based on how the remote video streams need to be displayed. This class is responsible\n * for communicating these constraints to the bridge over the bridge channel.\n */\nexport default class ReceiveVideoController {\n    /**\n     * Creates a new instance for a given conference.\n     *\n     * @param {JitsiConference} conference the conference instance for which the new instance will be managing\n     * the receive video quality constraints.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._rtc = conference.rtc;\n        const { config } = conference.options;\n\n        // The number of videos requested from the bridge, -1 represents unlimited or all available videos.\n        this._lastN = config?.startLastN ?? (config?.channelLastN || LAST_N_UNLIMITED);\n\n        // The number representing the maximum video height the local client should receive from the bridge.\n        this._maxFrameHeight = MAX_HEIGHT;\n\n        /**\n         * The map that holds the max frame height requested per remote source for p2p connection.\n         *\n         * @type Map<string, number>\n         */\n        this._sourceReceiverConstraints = new Map();\n\n        /**\n         * The number of bps requested from the bridge.\n         */\n        this._assumedBandwidthBps = ASSUMED_BANDWIDTH_BPS;\n\n        this._lastNLimitedByCpu = false;\n        this._receiveResolutionLimitedByCpu = false;\n\n        // The default receiver video constraints.\n        this._receiverVideoConstraints = {\n            assumedBandwidthBps: this._assumedBandwidthBps,\n            lastN: this._lastN\n        };\n    }\n\n    /**\n     * Returns a map of all the remote source names and the corresponding max frame heights.\n     *\n     * @param {JingleSessionPC} mediaSession - the media session.\n     * @param {number} maxFrameHeight - the height to be requested for remote sources.\n     * @returns\n     */\n    _getDefaultSourceReceiverConstraints(mediaSession, maxFrameHeight) {\n        const height = maxFrameHeight ?? MAX_HEIGHT;\n        const remoteVideoTracks = mediaSession.peerconnection?.getRemoteTracks(null, MediaType.VIDEO) || [];\n        const receiverConstraints = new Map();\n\n        for (const track of remoteVideoTracks) {\n            receiverConstraints.set(track.getSourceName(), height);\n        }\n\n        return receiverConstraints;\n    }\n\n    /**\n     * Updates the source based constraints based on the maxHeight set.\n     *\n     * @param {number} maxFrameHeight - the height to be requested for remote sources.\n     * @returns {void}\n     */\n    _updateIndividualConstraints(maxFrameHeight) {\n        const individualConstraints = this._receiverVideoConstraints.constraints;\n\n        if (individualConstraints && Object.keys(individualConstraints).length) {\n            for (const value of Object.values(individualConstraints)) {\n                value.maxHeight = maxFrameHeight ?? Math.min(value.maxHeight, this._maxFrameHeight);\n            }\n        } else {\n            this._receiverVideoConstraints.defaultConstraints = { 'maxHeight': this._maxFrameHeight };\n        }\n    }\n\n    /**\n     * Returns the last set of receiver constraints that were set on the bridge channel.\n     *\n     * @returns {Object}\n     */\n    getCurrentReceiverConstraints() {\n        return this._receiverVideoConstraints;\n    }\n\n    /**\n     * Returns the lastN value for the conference.\n     *\n     * @returns {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Checks whether last-n was lowered because of a cpu limitation.\n     *\n     * @returns {boolean}\n     */\n    isLastNLimitedByCpu() {\n        return this._lastNLimitedByCpu;\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. The preferred receive frameHeight is applied on the media session.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @returns {void}\n     */\n    onMediaSessionStarted(mediaSession) {\n        if (mediaSession.isP2P) {\n            mediaSession.setReceiverVideoConstraint(this._getDefaultSourceReceiverConstraints(mediaSession));\n        } else {\n            this._rtc.setReceiverVideoConstraints(this._receiverVideoConstraints);\n        }\n    }\n\n    /**\n     * Sets the assumed bandwidth bps the local participant should receive from remote participants.\n     *\n     * @param {number|undefined} assumedBandwidthBps - the new value.\n     * @returns {void}\n     */\n    setAssumedBandwidthBps(assumedBandwidthBps) {\n        if (this._receiverVideoConstraints.assumedBandwidthBps !== assumedBandwidthBps) {\n            this._receiverVideoConstraints.assumedBandwidthBps = assumedBandwidthBps;\n            this._rtc.setReceiverVideoConstraints(this._receiverVideoConstraints);\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going to be delivered after the value is\n     * in effect. Set to -1 for unlimited or all available videos.\n     *\n     * @param {number} value the new value for lastN.\n     * @returns {void}\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            this._receiverVideoConstraints.lastN = value;\n            this._rtc.setReceiverVideoConstraints(this._receiverVideoConstraints);\n        }\n    }\n\n    /**\n     * Updates the lastNLimitedByCpu field.\n     *\n     * @param {boolean} enabled\n     * @returns {void}\n     */\n    setLastNLimitedByCpu(enabled) {\n        if (this._lastNLimitedByCpu !== enabled) {\n            this._lastNLimitedByCpu = enabled;\n            logger.info(`ReceiveVideoController - Setting the lastNLimitedByCpu flag to ${enabled}`);\n        }\n    }\n\n    /**\n     * Sets the maximum video resolution the local participant should receive from remote participants.\n     *\n     * @param {number|undefined} maxFrameHeight - the new value.\n     * @returns {void}\n     */\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        for (const session of this._conference.getMediaSessions()) {\n            if (session.isP2P) {\n                session.setReceiverVideoConstraint(this._getDefaultSourceReceiverConstraints(session, maxFrameHeight));\n            } else {\n                this._updateIndividualConstraints(maxFrameHeight);\n                this._rtc.setReceiverVideoConstraints(this._receiverVideoConstraints);\n            }\n        }\n    }\n\n    /**\n     * Sets the receiver constraints for the conference.\n     *\n     * @param {Object} constraints The video constraints.\n     */\n    setReceiverConstraints(constraints) {\n        if (!constraints) {\n            return;\n        }\n\n        const constraintsChanged = !isEqual(this._receiverVideoConstraints, constraints);\n\n        if (constraintsChanged || this._lastNLimitedByCpu || this._receiveResolutionLimitedByCpu) {\n            this._receiverVideoConstraints = constraints;\n\n            this._assumedBandwidthBps = constraints.assumedBandwidthBps ?? this._assumedBandwidthBps;\n            this._lastN = typeof constraints.lastN !== 'undefined' && !this._lastNLimitedByCpu\n                ? constraints.lastN : this._lastN;\n            this._receiverVideoConstraints.lastN = this._lastN;\n            this._receiveResolutionLimitedByCpu && this._updateIndividualConstraints();\n\n            // Send the constraints on the bridge channel.\n            this._rtc.setReceiverVideoConstraints(this._receiverVideoConstraints);\n\n            const p2pSession = this._conference.getMediaSessions().find(session => session.isP2P);\n\n            if (!p2pSession || !this._receiverVideoConstraints.constraints) {\n                return;\n            }\n\n            const mappedConstraints = Array.from(Object.entries(this._receiverVideoConstraints.constraints))\n                .map(constraint => {\n                    constraint[1] = constraint[1].maxHeight;\n\n                    return constraint;\n                });\n\n            this._sourceReceiverConstraints = new Map(mappedConstraints);\n\n            // Send the receiver constraints to the peer through a \"content-modify\" message.\n            p2pSession.setReceiverVideoConstraint(this._sourceReceiverConstraints);\n        }\n    }\n\n    /**\n     * Updates the receivedResolutioLimitedByCpu field.\n     *\n     * @param {booem} enabled\n     * @return {void}\n     */\n    setReceiveResolutionLimitedByCpu(enabled) {\n        if (this._receiveResolutionLimitedByCpu !== enabled) {\n            this._receiveResolutionLimitedByCpu = enabled;\n            logger.info(`ReceiveVideoController - Setting the receiveResolutionLimitedByCpu flag to ${enabled}`);\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\n\nconst logger = getLogger('modules/qualitycontrol/SendVideoController');\nconst MAX_LOCAL_RESOLUTION = 2160;\n\n/**\n * The class manages send video constraints across media sessions({@link JingleSessionPC}) which belong to\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\n * different.\n */\nexport default class SendVideoController {\n    /**\n     * Creates new instance for a given conference.\n     *\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\n     * the send video quality constraints.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._preferredSendMaxFrameHeight = MAX_LOCAL_RESOLUTION;\n\n        /**\n         * Source name based sender constraints.\n         * @type {Map<string, number>};\n         */\n        this._sourceSenderConstraints = new Map();\n    }\n\n    /**\n     * Figures out the send video constraint as specified by {@link _selectSendMaxFrameHeight} and sets it on all media\n     * sessions for the reasons mentioned in this class description.\n     *\n     * @param {string} sourceName - The source for which sender constraints have changed.\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _propagateSendMaxFrameHeight(sourceName) {\n        if (!sourceName) {\n            throw new Error('sourceName missing for calculating the sendMaxHeight for video tracks');\n        }\n        const sendMaxFrameHeight = this._selectSendMaxFrameHeight(sourceName);\n        const promises = [];\n\n        if (sendMaxFrameHeight >= 0) {\n            for (const session of this._conference.getMediaSessions()) {\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight, sourceName));\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\n     * the active media session's receive preference set by the remote party.\n     *\n     * @param {string} sourceName - The source for which sender constraints have changed.\n     * @returns {number|undefined}\n     * @private\n     */\n    _selectSendMaxFrameHeight(sourceName) {\n        if (!sourceName) {\n            throw new Error('sourceName missing for calculating the sendMaxHeight for video tracks');\n        }\n        const activeMediaSession = this._conference.getActiveMediaSession();\n        const remoteRecvMaxFrameHeight = activeMediaSession\n            ? this._sourceSenderConstraints.get(sourceName)\n            : undefined;\n\n        if (this._preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\n            return Math.min(this._preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\n        } else if (remoteRecvMaxFrameHeight >= 0) {\n            return remoteRecvMaxFrameHeight;\n        }\n\n        return this._preferredSendMaxFrameHeight;\n    }\n\n    /**\n     * Configures the video encodings on the local sources when a media connection is established or becomes active.\n     *\n     * @returns {void}\n     */\n    configureConstraintsForLocalSources() {\n        for (const track of this._conference.getLocalVideoTracks()) {\n            const sourceName = track.getSourceName();\n\n            sourceName && this._propagateSendMaxFrameHeight(sourceName);\n        }\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\n     * the conference has entered the p2p mode already.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     */\n    onMediaSessionStarted(mediaSession) {\n        mediaSession.addListener(\n            MediaSessionEvents.REMOTE_SOURCE_CONSTRAINTS_CHANGED,\n            (session, sourceConstraints) => {\n                session === this._conference.getActiveMediaSession()\n                    && sourceConstraints.forEach(constraint => this.onSenderConstraintsReceived(constraint));\n            });\n    }\n\n    /**\n     * Propagates the video constraints if they have changed.\n     *\n     * @param {Object} videoConstraints - The sender video constraints received from the bridge.\n     * @returns {Promise<void[]>}\n     */\n    onSenderConstraintsReceived(videoConstraints) {\n        const { maxHeight, sourceName } = videoConstraints;\n        const localVideoTracks = this._conference.getLocalVideoTracks() ?? [];\n\n        for (const track of localVideoTracks) {\n            // Propagate the sender constraint only if it has changed.\n            if (track.getSourceName() === sourceName\n                && this._sourceSenderConstraints.get(sourceName) !== maxHeight) {\n                this._sourceSenderConstraints.set(\n                    sourceName,\n                    maxHeight === -1\n                        ? Math.min(MAX_LOCAL_RESOLUTION, this._preferredSendMaxFrameHeight)\n                        : maxHeight);\n                logger.debug(`Sender constraints for source:${sourceName} changed to maxHeight:${maxHeight}`);\n                this._propagateSendMaxFrameHeight(sourceName);\n            }\n        }\n    }\n\n    /**\n     * Sets local preference for max send video frame height.\n     *\n     * @param {number} maxFrameHeight - the new value to set.\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\n     */\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\n        this._preferredSendMaxFrameHeight = maxFrameHeight;\n        const promises = [];\n\n        for (const sourceName of this._sourceSenderConstraints.keys()) {\n            promises.push(this._propagateSendMaxFrameHeight(sourceName));\n        }\n\n        return Promise.allSettled(promises);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport JitsiConference from '../../JitsiConference';\nimport { JitsiConferenceEvents } from '../../JitsiConferenceEvents';\nimport { CodecMimeType } from '../../service/RTC/CodecMimeType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport {\n    DEFAULT_LAST_N,\n    LAST_N_UNLIMITED,\n    VIDEO_CODECS_BY_COMPLEXITY,\n    VIDEO_QUALITY_LEVELS\n} from '../../service/RTC/StandardVideoQualitySettings';\nimport JitsiLocalTrack from '../RTC/JitsiLocalTrack';\nimport TraceablePeerConnection from '../RTC/TraceablePeerConnection';\nimport { isValidNumber } from '../util/MathUtil';\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\n\nimport { CodecSelection } from './CodecSelection';\nimport ReceiveVideoController from './ReceiveVideoController';\nimport SendVideoController from './SendVideoController';\n\nconst logger = getLogger('modules/qualitycontrol/QualityController');\n\n// Period for which the client will wait for the cpu limitation flag to be reset in the peerconnection stats before it\n// attempts to rectify the situation by attempting a codec switch.\nconst LIMITED_BY_CPU_TIMEOUT = 60000;\n\n// The min. value that lastN will be set to while trying to fix video qaulity issues.\nconst MIN_LAST_N = 3;\n\nenum QualityLimitationReason {\n    BANDWIDTH = 'bandwidth',\n    CPU = 'cpu',\n    NONE = 'none'\n}\n\ninterface IResolution {\n    height: number;\n    width: number;\n}\n\ninterface IOutboundRtpStats {\n    codec: CodecMimeType;\n    encodeTime: number;\n    qualityLimitationReason: QualityLimitationReason;\n    resolution: IResolution;\n    timestamp: number;\n}\n\ninterface ISourceStats {\n    avgEncodeTime: number;\n    codec: CodecMimeType;\n    encodeResolution: number;\n    localTrack: JitsiLocalTrack;\n    qualityLimitationReason: QualityLimitationReason;\n    timestamp: number;\n    tpc: TraceablePeerConnection;\n}\n\ninterface ITrackStats {\n    encodeResolution: number;\n    encodeTime: number;\n    qualityLimitationReason: QualityLimitationReason;\n}\n\ninterface IVideoConstraints {\n    maxHeight: number;\n    sourceName: string;\n}\n\n/* eslint-disable require-jsdoc */\nexport class FixedSizeArray {\n    private _data: ISourceStats[];\n    private _maxSize: number;\n\n    constructor(size: number) {\n        this._maxSize = size;\n        this._data = [];\n    }\n\n    add(item: ISourceStats): void {\n        if (this._data.length >= this._maxSize) {\n            this._data.shift();\n        }\n        this._data.push(item);\n    }\n\n    get(index: number): ISourceStats | undefined {\n        if (index < 0 || index >= this._data.length) {\n            throw new Error('Index out of bounds');\n        }\n\n        return this._data[index];\n    }\n\n    size(): number {\n        return this._data.length;\n    }\n}\n/* eslint-enable require-jsdoc */\n\n/**\n * QualityController class that is responsible for maintaining optimal video quality experience on the local endpoint\n * by controlling the codec, encode resolution and receive resolution of the remote video streams. It also makes\n * adjustments based on the outbound and inbound rtp stream stats reported by the underlying peer connection.\n */\nexport class QualityController {\n    private _codecController: CodecSelection;\n    private _conference: JitsiConference;\n    private _enableAdaptiveMode: boolean;\n    private _encodeTimeStats: Map<number, FixedSizeArray>;\n    private _isLastNRampupBlocked: boolean;\n    private _lastNRampupTime: number;\n    private _lastNRampupTimeout: number | undefined;\n    private _limitedByCpuTimeout: number | undefined;\n    private _receiveVideoController: ReceiveVideoController;\n    private _sendVideoController: SendVideoController;\n\n    /**\n     *\n     * @param {JitsiConference} conference - The JitsiConference instance.\n     * @param {Object} options - video quality settings passed through config.js.\n     */\n    constructor(conference: JitsiConference, options: {\n        enableAdaptiveMode: boolean;\n        jvb: object;\n        lastNRampupTime: number;\n        p2p: object;\n    }) {\n        this._conference = conference;\n        const { jvb, p2p } = options;\n\n        this._codecController = new CodecSelection(conference, { jvb,\n            p2p });\n        this._enableAdaptiveMode = options.enableAdaptiveMode ?? true;\n        this._encodeTimeStats = new Map();\n        this._isLastNRampupBlocked = false;\n        this._lastNRampupTime = options.lastNRampupTime;\n        this._receiveVideoController = new ReceiveVideoController(conference);\n        this._sendVideoController = new SendVideoController(conference);\n\n        this._conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            (session: JingleSessionPC) => {\n                this._codecController.selectPreferredCodec(session);\n                this._receiveVideoController.onMediaSessionStarted(session);\n                this._sendVideoController.onMediaSessionStarted(session);\n            });\n        this._conference.on(\n                JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n                () => this._sendVideoController.configureConstraintsForLocalSources());\n        this._conference.on(\n            JitsiConferenceEvents.CONFERENCE_VISITOR_CODECS_CHANGED,\n            (codecList: CodecMimeType[]) => this._codecController.updateVisitorCodecs(codecList));\n\n        // Debounce the calls to codec selection when there is a burst of joins and leaves.\n        const debouncedSelectCodec = this._debounce(\n            () => this._codecController.selectPreferredCodec(this._conference.jvbJingleSession),\n            1000);\n\n        this._conference.on(JitsiConferenceEvents.USER_JOINED, debouncedSelectCodec.bind(this));\n        this._conference.on(JitsiConferenceEvents.USER_LEFT, debouncedSelectCodec.bind(this));\n        this._conference.rtc.on(\n            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED,\n            (videoConstraints: IVideoConstraints) =>\n                this._sendVideoController.onSenderConstraintsReceived(videoConstraints));\n        this._conference.on(\n            JitsiConferenceEvents.ENCODE_TIME_STATS_RECEIVED,\n            (tpc: TraceablePeerConnection, stats: Map<number, IOutboundRtpStats>) =>\n                this._processOutboundRtpStats(tpc, stats));\n    }\n\n    /**\n     * Creates a debounced function that delays the execution of the provided function until after the specified delay\n     * has elapsed. Unlike typical debounce implementations, the timer does not reset when the function is called again\n     * within the delay period.\n     *\n     * @param {Function} func - The function to be debounced.\n     * @param {number} delay - The delay in milliseconds.\n     * @returns {Function} - The debounced function.\n     */\n    _debounce(func: Function, delay: number) { // eslint-disable-line @typescript-eslint/no-unsafe-function-type\n        return function(...args: any) {\n            /* eslint-disable @typescript-eslint/no-invalid-this */\n            if (!this._timer) {\n                this._timer = setTimeout(() => {\n                    this._timer = null;\n                    func.apply(this, args);\n                }, delay);\n            }\n            /* eslint-enable @typescript-eslint/no-invalid-this */\n        };\n    }\n\n    /**\n     * Adjusts the lastN value so that fewer remote video sources are received from the bridge in an attempt to improve\n     * encode resolution of the outbound video streams based on cpuLimited parameter passed. If cpuLimited is false,\n     * the lastN value will slowly be ramped back up to the channelLastN value set in config.js.\n     *\n     * @param {boolean} cpuLimited - whether the endpoint is cpu limited or not.\n     * @returns boolean - Returns true if an action was taken, false otherwise.\n     */\n    _lowerOrRaiseLastN(cpuLimited: boolean): boolean {\n        const lastN = this.receiveVideoController.getLastN();\n        let newLastN = lastN;\n\n        if (cpuLimited && (lastN !== LAST_N_UNLIMITED && lastN <= MIN_LAST_N)) {\n            return false;\n        }\n\n        // If channelLastN is not set or set to -1 in config.js, the client will ramp up lastN to only up to 25.\n        let { channelLastN = DEFAULT_LAST_N } = this._conference.options.config;\n\n        channelLastN = channelLastN === LAST_N_UNLIMITED ? DEFAULT_LAST_N : channelLastN;\n        if (cpuLimited) {\n            const videoStreamsReceived = this._conference.getForwardedSources().length;\n\n            newLastN = Math.floor(videoStreamsReceived / 2);\n            if (newLastN < MIN_LAST_N) {\n                newLastN = MIN_LAST_N;\n            }\n\n        // Increment lastN by 1 every LAST_N_RAMPUP_TIME (60) secs.\n        } else if (lastN < channelLastN) {\n            newLastN++;\n        }\n\n        if (newLastN === lastN) {\n            return false;\n        }\n\n        const isStillLimitedByCpu = newLastN < channelLastN;\n\n        this.receiveVideoController.setLastNLimitedByCpu(isStillLimitedByCpu);\n        logger.info(`QualityController - setting lastN=${newLastN}, limitedByCpu=${isStillLimitedByCpu}`);\n        this.receiveVideoController.setLastN(newLastN);\n\n        return true;\n    }\n\n    /**\n     * Adjusts the requested resolution for remote video sources by updating the receiver constraints in an attempt to\n     * improve the encode resolution of the outbound video streams.\n     * @return {void}\n     */\n    _maybeLowerReceiveResolution(): void {\n        const currentConstraints = this.receiveVideoController.getCurrentReceiverConstraints();\n        const individualConstraints = currentConstraints.constraints;\n        let maxHeight = 0;\n\n        if (individualConstraints && Object.keys(individualConstraints).length) {\n            for (const value of Object.values(individualConstraints)) {\n                const v: any = value;\n\n                maxHeight = Math.max(maxHeight, v.maxHeight);\n            }\n        }\n\n        const currentLevel = VIDEO_QUALITY_LEVELS.findIndex(lvl => lvl.height <= maxHeight);\n\n        // Do not lower the resolution to less than 180p.\n        if (VIDEO_QUALITY_LEVELS[currentLevel].height === 180) {\n            return;\n        }\n\n        this.receiveVideoController.setPreferredReceiveMaxFrameHeight(VIDEO_QUALITY_LEVELS[currentLevel + 1].height);\n    }\n\n    /**\n     * Updates the codec preference order for the local endpoint on the active media session and switches the video\n     * codec if needed.\n     *\n     * @param {number} trackId - The track ID of the local video track for which stats have been captured.\n     * @returns {boolean} - Returns true if video codec was changed.\n     */\n    _maybeSwitchVideoCodec(trackId: number): boolean {\n        const stats = this._encodeTimeStats.get(trackId);\n        const { codec, encodeResolution, localTrack } = stats.get(stats.size() - 1);\n        const codecsByVideoType = VIDEO_CODECS_BY_COMPLEXITY[localTrack.getVideoType()];\n        const codecIndex = codecsByVideoType.findIndex(val => val === codec.toLowerCase());\n\n        // Do nothing if the encoder is using the lowest complexity codec already.\n        if (codecIndex === codecsByVideoType.length - 1) {\n            return false;\n        }\n\n        if (!this._limitedByCpuTimeout) {\n            this._limitedByCpuTimeout = window.setTimeout(() => {\n                this._limitedByCpuTimeout = undefined;\n                const updatedStats = this._encodeTimeStats.get(trackId);\n                const latestSourceStats: ISourceStats = updatedStats.get(updatedStats.size() - 1);\n                const expectedSendResolution\n                    = Math.min(localTrack.maxEnabledResolution, localTrack.getCaptureResolution());\n\n                // If the encoder is still limited by CPU, switch to a lower complexity codec.\n                if (latestSourceStats.qualityLimitationReason === QualityLimitationReason.CPU\n                        || encodeResolution < expectedSendResolution) {\n                    return this.codecController.changeCodecPreferenceOrder(localTrack, codec);\n                }\n            }, LIMITED_BY_CPU_TIMEOUT);\n        }\n\n        return false;\n    }\n\n    /**\n     * Adjusts codec, lastN or receive resolution based on the send resolution (of the outbound streams) and limitation\n     * reported by the browser in the WebRTC stats. Recovery is also attempted if the limitation goes away. No action\n     * is taken if the adaptive mode has been disabled through config.js.\n     *\n     * @param {ISourceStats} sourceStats - The outbound-rtp stats for a local video track.\n     * @returns {void}\n     */\n    _performQualityOptimizations(sourceStats: ISourceStats): void {\n        // Do not attempt run time adjustments if the adaptive mode is disabled.\n        if (!this._enableAdaptiveMode) {\n            return;\n        }\n        const { encodeResolution, localTrack, qualityLimitationReason, tpc } = sourceStats;\n\n        // Older browser versions might not report the resolution in the stats.\n        if (!isValidNumber(encodeResolution)) {\n            return;\n        }\n        const trackId = localTrack.rtcId;\n\n        if (encodeResolution === tpc.calculateExpectedSendResolution(localTrack)) {\n            if (this._limitedByCpuTimeout) {\n                window.clearTimeout(this._limitedByCpuTimeout);\n                this._limitedByCpuTimeout = undefined;\n            }\n\n            if (qualityLimitationReason === QualityLimitationReason.NONE\n                && this.receiveVideoController.isLastNLimitedByCpu()) {\n                if (!this._lastNRampupTimeout && !this._isLastNRampupBlocked) {\n                    // Ramp up the number of received videos if CPU limitation no longer exists. If the cpu\n                    // limitation returns as a consequence, do not attempt to ramp up again, continue to\n                    // increment the lastN value otherwise until it is equal to the channelLastN value.\n                    this._lastNRampupTimeout = window.setTimeout(() => {\n                        this._lastNRampupTimeout = undefined;\n                        const updatedStats = this._encodeTimeStats.get(trackId);\n                        const latestSourceStats: ISourceStats = updatedStats.get(updatedStats.size() - 1);\n\n                        if (latestSourceStats.qualityLimitationReason === QualityLimitationReason.CPU) {\n                            this._isLastNRampupBlocked = true;\n                        } else {\n                            this._lowerOrRaiseLastN(false /* raise */);\n                        }\n                    }, this._lastNRampupTime);\n                }\n            }\n\n            return;\n        }\n\n        // Do nothing if the limitation reason is bandwidth since the browser will dynamically adapt the outbound\n        // resolution based on available uplink bandwith. Otherwise,\n        // 1. Switch the codec to the lowest complexity one incrementally.\n        // 2. Switch to a lower lastN value, cutting the receive videos by half in every iteration until\n        // MIN_LAST_N value is reached.\n        // 3. Lower the receive resolution of individual streams up to 180p.\n        if (qualityLimitationReason === QualityLimitationReason.CPU) {\n            if (this._lastNRampupTimeout) {\n                window.clearTimeout(this._lastNRampupTimeout);\n                this._lastNRampupTimeout = undefined;\n                this._isLastNRampupBlocked = true;\n            }\n            const codecSwitched = this._maybeSwitchVideoCodec(trackId);\n\n            if (!codecSwitched && !this._limitedByCpuTimeout) {\n                const lastNChanged = this._lowerOrRaiseLastN(true /* lower */);\n\n                if (!lastNChanged) {\n                    this.receiveVideoController.setReceiveResolutionLimitedByCpu(true);\n                    this._maybeLowerReceiveResolution();\n                }\n            }\n        }\n    }\n\n    /**\n     * Processes the outbound RTP stream stats as reported by the WebRTC peerconnection and makes runtime adjustments\n     * to the client for better quality experience if the adaptive mode is enabled.\n     *\n     * @param {TraceablePeerConnection} tpc - The underlying WebRTC peerconnection where stats have been captured.\n     * @param {Map<number, IOutboundRtpStats>} stats - Outbound-rtp stream stats per SSRC.\n     * @returns void\n     */\n    _processOutboundRtpStats(tpc: TraceablePeerConnection, stats: Map<number, IOutboundRtpStats>): void {\n        const activeSession = this._conference.getActiveMediaSession();\n\n        // Process stats only for the active media session.\n        if (activeSession.peerconnection !== tpc) {\n            return;\n        }\n\n        const statsPerTrack = new Map();\n\n        for (const ssrc of stats.keys()) {\n            const { codec, encodeTime, qualityLimitationReason, resolution, timestamp } = stats.get(ssrc);\n            const track = tpc.getTrackBySSRC(ssrc);\n            const trackId = track.rtcId;\n            let existingStats = statsPerTrack.get(trackId);\n            const encodeResolution = Math.min(resolution?.height, resolution?.width);\n            const ssrcStats = {\n                encodeResolution,\n                encodeTime,\n                qualityLimitationReason\n            };\n\n            if (existingStats) {\n                existingStats.codec = codec;\n                existingStats.timestamp = timestamp;\n                existingStats.trackStats.push(ssrcStats);\n            } else {\n                existingStats = {\n                    codec,\n                    timestamp,\n                    trackStats: [ ssrcStats ]\n                };\n\n                statsPerTrack.set(trackId, existingStats);\n            }\n        }\n\n        // Aggregate the stats for multiple simulcast streams with different SSRCs but for the same video stream.\n        for (const trackId of statsPerTrack.keys()) {\n            const { codec, timestamp, trackStats } = statsPerTrack.get(trackId);\n            const totalEncodeTime = trackStats\n                .map((stat: ITrackStats) => stat.encodeTime)\n                .reduce((totalValue: number, currentValue: number) => totalValue + currentValue, 0);\n            const avgEncodeTime: number = totalEncodeTime / trackStats.length;\n            const { qualityLimitationReason = QualityLimitationReason.NONE }\n                = trackStats\n                    .find((stat: ITrackStats) => stat.qualityLimitationReason !== QualityLimitationReason.NONE) ?? {};\n            const encodeResolution: number = trackStats\n                .map((stat: ITrackStats) => stat.encodeResolution)\n                .reduce((resolution: number, currentValue: number) => Math.max(resolution, currentValue), 0);\n            const localTrack = this._conference.getLocalVideoTracks().find(t => t.rtcId === trackId);\n\n            const exisitingStats: FixedSizeArray = this._encodeTimeStats.get(trackId);\n            const sourceStats = {\n                avgEncodeTime,\n                codec,\n                encodeResolution,\n                qualityLimitationReason,\n                localTrack,\n                timestamp,\n                tpc\n            };\n\n            if (exisitingStats) {\n                exisitingStats.add(sourceStats);\n            } else {\n                // Save stats for only the last 5 mins.\n                const data = new FixedSizeArray(300);\n\n                data.add(sourceStats);\n                this._encodeTimeStats.set(trackId, data);\n            }\n\n            logger.debug(`Encode stats for ${localTrack}: codec=${codec}, time=${avgEncodeTime},`\n                + `resolution=${encodeResolution}, qualityLimitationReason=${qualityLimitationReason}`);\n\n            this._performQualityOptimizations(sourceStats);\n        }\n    }\n\n    /**\n     * Gets the codec controller instance.\n     */\n    get codecController() {\n        return this._codecController;\n    }\n\n    /**\n     * Gets the receive video controller instance.\n     */\n    get receiveVideoController() {\n        return this._receiveVideoController;\n    }\n\n    /**\n     * Gets the send video controller instance.\n     */\n    get sendVideoController() {\n        return this._sendVideoController;\n    }\n}\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\nimport JitsiParticipant from '../../JitsiParticipant';\n\nexport interface IJibriSessionOptions {\n    connection?: any;\n    focusMucJid?: string;\n    mode?: string;\n    sessionID?: string;\n    status?: string;\n}\n\nexport interface IStartOptions {\n    appData?: string;\n    broadcastId?: string;\n    focusMucJid: string;\n    streamId?: string;\n}\n\nexport interface IStopOptions {\n    focusMucJid: string;\n}\n\nexport interface IQOptions {\n    action?: 'start' | 'stop';\n    appData?: string;\n    broadcastId?: string;\n    focusMucJid: string;\n    streamId?: string;\n}\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    private _connection?: any;\n    private _mode?: string;\n    private _jibriJid: string | null = null;\n    private _statusFromJicofo: string = '';\n    private _sessionID?: string;\n    private _status?: string;\n    private _error?: string;\n    private _liveStreamViewURL?: string;\n    private _initiator?: JitsiParticipant | string;\n    private _terminator?: JitsiParticipant | string;\n    private _focusMucJid?: string;\n\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options: IJibriSessionOptions = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n        this._jibriJid = null;\n        this._statusFromJicofo = '';\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n        this._focusMucJid = options.focusMucJid;\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError(): string | undefined {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID(): string | undefined {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {JitsiParticipant|string} The participant that started the session.\n     */\n    getInitiator(): JitsiParticipant | string {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL(): string | undefined {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus(): string | undefined {\n        // If _status is not set fallback to the status reported by jicofo.\n        if (this._status) {\n            return this._status;\n        }\n\n        return this._statusFromJicofo;\n    }\n\n    /**\n     * @returns {string|undefined} the JID of jibri associated with this session.\n     */\n    getJibriJid(): string | undefined {\n        return this._jibriJid;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {JitsiParticipant|string} The participant that stopped the session.\n     */\n    getTerminator(): JitsiParticipant | string {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode(): string {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error: string): void {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url: string): void {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status?: string): void {\n        this._status = status;\n    }\n\n    /**\n     * Set the session status reported by jicofo. If a jibri is present in the room,\n     * the status is always 'on'. Otherwise, we fallback to the status reported by jicofo.\n     *\n     * @param {string} status\n     */\n    setStatusFromJicofo(status: string): void {\n        this._statusFromJicofo = status;\n    }\n\n    /**\n     * Set the JID of the jibri associated with this session.\n     *\n     * @param {*} jibriJid\n     */\n    setJibriJid(jibriJid: string | null): void {\n        this._jibriJid = jibriJid;\n    }\n\n    /**\n     * Sets the participant that started the session.\n     * @param {JitsiParticipant | string} participant - The participant or resource id\n     * if local participant.\n     */\n    setInitiator(participant: JitsiParticipant | string): void {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the participant that stopped the session.\n     * @param {JitsiParticipant | string} participant - The participant or the resource id\n     * if local participant.\n     */\n    setTerminator(participant: JitsiParticipant | string): void {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }: IStartOptions): Promise<void> {\n        return new Promise((resolve, reject) => {\n            this._connection?.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                (result: any) => {\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result)\n                    );\n\n                    resolve();\n                },\n                (error: any) => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                }\n            );\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }: IStopOptions): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this._connection?.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject\n            );\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} [options.action] - The action to set the IQ\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }: IQOptions) {\n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': appData,\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq: any): void {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID?: string): void {\n        this._sessionID = sessionID;\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport ChatRoom from '../xmpp/ChatRoom';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger('modules/recording/RecordingManager');\n\nexport interface IRecordingOptions {\n    appData?: string;\n    broadcastId?: string;\n    mode: string;\n    streamId?: string;\n}\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    private _sessions: { [key: string]: JibriSession; } = {};\n    private _chatRoom: any;\n\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom: ChatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this.onMemberLeft = this.onMemberLeft.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.MUC_MEMBER_LEFT, this.onMemberLeft);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID: string): JibriSession | undefined {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Find a session with a specific jibri JID.\n     *\n     * @param {string} jibriJid the JID to search for.\n     * @returns\n     */\n    getSessionByJibriJid(jibriJid: string): JibriSession | undefined {\n        let s: JibriSession | undefined;\n\n        Object.values(this._sessions).forEach(session => {\n            if (session.getJibriJid() === jibriJid) {\n                s = session;\n            }\n        });\n\n        return s;\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }: { fromHiddenDomain: boolean; presence: Node; }): void {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Handle a participant leaving the room.\n     * @param {string} jid the JID of the participant that left.\n     */\n    onMemberLeft(jid: string): void {\n        const session = this.getSessionByJibriJid(jid);\n\n        if (session) {\n\n            const prevStatus = session.getStatus();\n\n            // Setting to ''\n            session.setStatus('');\n            session.setJibriJid(null);\n\n            if (session.getStatus() !== prevStatus) {\n                this._emitSessionUpdate(session);\n            }\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options: IRecordingOptions): Promise<JibriSession> {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID: string): Promise<any> {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session: JibriSession): void {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID: string, status: string, mode: string): JibriSession {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session: JibriSession, initiator?: string): void {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence: Node): void {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatusFromJicofo(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence: any): void {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, 'on', mode);\n        }\n\n        // When a jibri is present the status is always 'on';\n        session.setStatus('on');\n        session.setJibriJid(presence.getAttribute('from'));\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import { getLogger } from '@jitsi/logger';\nimport { isEqual } from 'lodash-es';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport browser from '../browser';\nimport { isValidNumber } from '../util/MathUtil';\n\nimport Statistics from './statistics';\n\n\nconst logger = getLogger('modules/statistics/AvgRTPStatsReporter');\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue === 'undefined') {\n            return;\n        }\n\n        if (typeof nextValue !== 'number') {\n            logger.error(`${this.name} - invalid value for idx: ${this.count}`, nextValue);\n        } else if (isValidNumber(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (isValidNumber(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (isValidNumber(avgLocalRTT) && isValidNumber(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (isValidNumber(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (isValidNumber(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (isValidNumber(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (isValidNumber(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (isValidNumber(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (isValidNumber(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (isValidNumber(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (isValidNumber(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (isValidNumber(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","/**\n * Interface for face landmarks.\n */\ninterface IFaceLandmarks {\n    duration: number;\n    faceExpression: string;\n}\n\n/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    private _userId: string;\n    private displayName: string;\n    private _isLocalStats: boolean;\n    private totalDominantSpeakerTime: number;\n    private _dominantSpeakerStart: number;\n    private _isDominantSpeaker: boolean;\n    private _isSilent: boolean;\n    private _hasLeft: boolean;\n    private _faceLandmarks: IFaceLandmarks[];\n\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId: string, displayName: string, isLocalStats: boolean) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false, false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._isDominantSpeaker = false;\n        this._isSilent = false;\n        this._hasLeft = false;\n        this._faceLandmarks = [];\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId(): string {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName(): string {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} newName - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName: string): void {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats(): boolean {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker(): boolean {\n        return this._isDominantSpeaker;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} isNowDominantSpeaker - If true, the user will be accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @param {boolean} silence - Indicates whether the dominant speaker is silent or not.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker: boolean, silence: boolean): void {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker && !silence) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker()) {\n            if (!isNowDominantSpeaker) {\n                if (!this._isSilent) {\n                    const now = Date.now();\n                    const timeElapsed = now - this._dominantSpeakerStart;\n\n                    this.totalDominantSpeakerTime += timeElapsed;\n                    this._dominantSpeakerStart = 0;\n                }\n            } else if (this._isSilent && !silence) {\n                this._dominantSpeakerStart = Date.now();\n            } else if (!this._isSilent && silence) {\n                const now = Date.now();\n                const timeElapsed = now - this._dominantSpeakerStart;\n\n                this.totalDominantSpeakerTime += timeElapsed;\n                this._dominantSpeakerStart = 0;\n            }\n        }\n\n        this._isDominantSpeaker = isNowDominantSpeaker;\n        this._isSilent = silence;\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime(): number {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker() && !this._isSilent) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft(): boolean {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft(): void {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false, false);\n    }\n\n    /**\n     * Gets the face landmarks of the user.\n     *\n     * @returns {IFaceLandmarks[]}\n     */\n    getFaceLandmarks(): IFaceLandmarks[] {\n        return this._faceLandmarks;\n    }\n\n    /**\n     * Sets the face landmarks of the user.\n     *\n     * @param {IFaceLandmarks[]} faceLandmarks - object with face expressions.\n     * @returns {void}\n     */\n    setFaceLandmarks(faceLandmarks: IFaceLandmarks[]): void {\n        this._faceLandmarks = faceLandmarks;\n    }\n\n    /**\n     * Adds new face landmarks to speaker stats.\n     *\n     * @param  {IFaceLandmarks} faceLandmarks\n     */\n    addFaceLandmarks(faceLandmarks: IFaceLandmarks): void {\n        this._faceLandmarks.push(faceLandmarks);\n    }\n}\n\nexport default SpeakerStats;\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport SpeakerStats from './SpeakerStats';\n\n\n/**\n * The value to use for the \"type\" field for messages sent\n * over the data channel that contain a face landmark.\n */\n\nconst FACE_LANDMARK_MESSAGE_TYPE = 'face-landmarks';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n\n        conference.on(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                (participant, { type, faceLandmarks }) => {\n                    if (type === FACE_LANDMARK_MESSAGE_TYPE) {\n                        this._onFaceLandmarkAdd(participant.getId(), faceLandmarks);\n                    }\n                });\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new dominant speaker.\n     * @param {Array[string]} previous - The array with previous speakers.\n     * @param {boolean} silence - Indecates whether the dominant speaker is silent or not.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId, previous, silence) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true, silence);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Processes a new face landmark object of a remote user.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @param {Object} data - The face landmark object.\n     * @returns {void}\n     * @private\n     */\n    _onFaceLandmarkAdd(userId, data) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser && data) {\n            savedUser.addFaceLandmarks(data);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n\n                speakerStatsToUpdate.totalDominantSpeakerTime\n                    = newStats[userId].totalDominantSpeakerTime;\n\n                if (Array.isArray(newStats[userId].faceLandmarks)) {\n                    speakerStatsToUpdate.setFaceLandmarks(newStats[userId].faceLandmarks);\n                }\n            }\n        }\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nconst logger = getLogger('modules/version/ComponentsVersions');\n\n/**\n * Discovers component versions in a conference.\n */\nexport default class ComponentsVersions {\n    versions: { [key: string]: string; };\n    conference: any;\n\n    /**\n     * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n     * the versions of conferencing system components in given\n     * <tt>JitsiConference</tt>.\n     * @param conference <tt>JitsiConference</tt> instance which will be used to\n     *        listen for focus presence updates.\n     * @constructor\n     */\n    constructor(conference) {\n        this.versions = {};\n\n        this.conference = conference;\n        this.conference.addCommandListener('versions', this._processVersions.bind(this));\n    }\n\n    /**\n     * Processes versions information from presence.\n     *\n     * @param {*} versions - The versions element.\n     * @param {*} mucJid - MUC JID for the sender.\n     * @returns {void}\n     */\n    _processVersions(versions, _, mucJid) {\n        if (!this.conference.isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        versions.children.forEach(component => {\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n            }\n        });\n    }\n\n    /**\n     * Obtains the version of conferencing system component.\n     * @param componentName the name of the component for which we want to obtain\n     *        the version.\n     * @returns {String} which describes the version of the component identified by\n     *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n     */\n    getComponentVersion(componentName) {\n        return this.versions[componentName];\n    }\n}\n","export enum VideoSIPGWStatusConstants {\n\n    /**\n     * Status that video SIP GW service is available.\n     */\n    STATUS_AVAILABLE = 'available',\n\n    /**\n     * Status that video SIP GW service is available but there are no free nodes\n     * at the moment to serve new requests.\n     */\n    STATUS_BUSY = 'busy',\n\n    /**\n     * Status that video SIP GW service is not available.\n     */\n    STATUS_UNDEFINED = 'undefined'\n}\n\nexport enum VideoSIPGWStateConstants {\n\n    /**\n     * Video SIP GW session state, tried to start but it failed.\n     */\n    STATE_FAILED = 'failed',\n\n    /**\n     * Video SIP GW session state, currently stopped and not running.\n     */\n    STATE_OFF = 'off',\n\n    /**\n     * Video SIP GW session state, currently running.\n     */\n    STATE_ON = 'on',\n\n    /**\n     * Video SIP GW session state, currently is starting.\n     */\n    STATE_PENDING = 'pending',\n\n    /**\n     * Video SIP GW session state, has observed some issues and is retrying at the\n     * moment.\n     */\n    STATE_RETRYING = 'retrying'\n}\n\nexport enum VideoSIPGWErrorConstants {\n\n    /**\n     * Error on trying to create video SIP GW session in conference where\n     * there is no room connection (hasn't joined or has left the room).\n     */\n    ERROR_NO_CONNECTION = 'error_no_connection',\n\n    /**\n     * Error on trying to create video SIP GW session with address for which\n     * there is an already created session.\n     */\n    ERROR_SESSION_EXISTS = 'error_session_already_exists'\n}\n\n// exported for backward compatibility\nexport const STATUS_AVAILABLE = VideoSIPGWStatusConstants.STATUS_AVAILABLE;\nexport const STATUS_UNDEFINED = VideoSIPGWStatusConstants.STATUS_UNDEFINED;\nexport const STATUS_BUSY = VideoSIPGWStatusConstants.STATUS_BUSY;\n\nexport const STATE_ON = VideoSIPGWStateConstants.STATE_ON;\nexport const STATE_OFF = VideoSIPGWStateConstants.STATE_OFF;\nexport const STATE_PENDING = VideoSIPGWStateConstants.STATE_PENDING;\nexport const STATE_RETRYING = VideoSIPGWStateConstants.STATE_RETRYING;\nexport const STATE_FAILED = VideoSIPGWStateConstants.STATE_FAILED;\n\nexport const ERROR_NO_CONNECTION = VideoSIPGWErrorConstants.ERROR_NO_CONNECTION;\nexport const ERROR_SESSION_EXISTS = VideoSIPGWErrorConstants.ERROR_SESSION_EXISTS;\n","import { getLogger } from '@jitsi/logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger('modules/videosipgw/JitsiVideoSIPGWSession');\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nconst logger = getLogger('modules/videosipgw/VideoSIPGW');\n\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { safeJsonParse } from '@jitsi/js-utils/json';\nimport { getLogger } from '@jitsi/logger';\nimport { Strophe } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer, { getMediaTypeFromSourceName } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport FeatureFlags from '../flags/FeatureFlags';\n\nimport { filterNodeFromPresenceJSON } from './ChatRoom';\n\nconst logger = getLogger('modules/xmpp/SignalingLayerImpl');\n\nexport const SOURCE_INFO_PRESENCE_ELEMENT = 'SourceInfo';\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams and the corresponding jid and source name.\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, { endpointId: string, sourceName: string }>} maps SSRC number to jid and source name.\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n\n        /**\n         * @type {Map<SourceName, SourceInfo>}\n         * @private\n         */\n        this._localSourceState = { };\n\n        /**\n         * @type {Map<EndpointId, Map<SourceName, SourceInfo>>}\n         * @private\n         */\n        this._remoteSourceState = { };\n    }\n\n    /**\n     * Adds <SourceInfo> element to the local presence.\n     *\n     * @returns {void}\n     * @private\n     */\n    _addLocalSourceInfoToPresence() {\n        if (this.chatRoom) {\n            return this.chatRoom.addOrReplaceInPresence(\n                SOURCE_INFO_PRESENCE_ELEMENT,\n                { value: JSON.stringify(this._localSourceState) });\n        }\n\n        return false;\n    }\n\n    /**\n     * Binds event listeners to the chat room instance.\n     * @param {ChatRoom} room\n     * @private\n     * @returns {void}\n     */\n    _bindChatRoomEventHandlers(room) {\n        // Add handlers for 'audiomuted', 'videomuted' and 'videoType' fields in presence in order to support interop\n        // with very old versions of mobile clients and jigasi that do not support source-name signaling.\n        const emitAudioMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.AUDIO,\n                muted);\n        };\n\n        this._audioMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitAudioMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n        const emitVideoMutedEvent = (endpointId, muted) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_MUTED_CHANGED,\n                endpointId,\n                MediaType.VIDEO,\n                muted);\n        };\n\n        this._videoMuteHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoMutedEvent(from, node.value === 'true');\n            }\n        };\n        room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n        const emitVideoTypeEvent = (endpointId, videoType) => {\n            this.eventEmitter.emit(\n                SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                endpointId, videoType);\n        };\n\n        this._videoTypeHandler = (node, from) => {\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\n                emitVideoTypeEvent(from, node.value);\n            }\n        };\n        room.addPresenceListener('videoType', this._videoTypeHandler);\n\n        // Add handlers for presence in the new format.\n        this._sourceInfoHandler = (node, mucNick) => {\n            const endpointId = mucNick;\n            const { value } = node;\n            const sourceInfoJSON = safeJsonParse(value);\n            const emitEventsFromHere = this._doesEndpointSendNewSourceInfo(endpointId);\n            const endpointSourceState\n                = this._remoteSourceState[endpointId] || (this._remoteSourceState[endpointId] = {});\n\n            for (const sourceName of Object.keys(sourceInfoJSON)) {\n                let sourceChanged = false;\n                const mediaType = getMediaTypeFromSourceName(sourceName);\n                const newMutedState = Boolean(sourceInfoJSON[sourceName].muted);\n                const oldSourceState = endpointSourceState[sourceName]\n                    || (endpointSourceState[sourceName] = { sourceName });\n\n                if (oldSourceState.muted !== newMutedState) {\n                    sourceChanged = true;\n                    oldSourceState.muted = newMutedState;\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_MUTED_CHANGED, sourceName, newMutedState);\n                    }\n                }\n\n                // Assume a default videoType of 'camera' for video sources.\n                const newVideoType = mediaType === MediaType.VIDEO\n                    ? sourceInfoJSON[sourceName].videoType ?? VideoType.CAMERA\n                    : undefined;\n\n                if (oldSourceState.videoType !== newVideoType) {\n                    oldSourceState.videoType = newVideoType;\n                    sourceChanged = true;\n\n                    // Since having a mix of eps that do/don't support multi-stream in the same call is supported, emit\n                    // SOURCE_VIDEO_TYPE_CHANGED event when the remote source changes videoType.\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED, sourceName, newVideoType);\n                    }\n                }\n\n                if (sourceChanged && FeatureFlags.isSsrcRewritingSupported()) {\n                    this.eventEmitter.emit(\n                        SignalingEvents.SOURCE_UPDATED,\n                        sourceName,\n                        mucNick,\n                        newMutedState,\n                        newVideoType);\n                }\n            }\n\n            // Cleanup removed source names\n            const newSourceNames = Object.keys(sourceInfoJSON);\n\n            for (const sourceName of Object.keys(endpointSourceState)) {\n                if (newSourceNames.indexOf(sourceName) === -1) {\n                    delete endpointSourceState[sourceName];\n                }\n            }\n        };\n        room.addPresenceListener('SourceInfo', this._sourceInfoHandler);\n\n        // Cleanup when participant leaves\n        this._memberLeftHandler = jid => {\n            const endpointId = Strophe.getResourceFromJid(jid);\n\n            delete this._remoteSourceState[endpointId];\n        };\n        room.addEventListener(XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n    }\n\n    /**\n     * Check is given endpoint has advertised <SourceInfo/> in it's presence which means that the source name signaling\n     * is used by this endpoint.\n     *\n     * @param {EndpointId} endpointId\n     * @returns {boolean}\n     */\n    _doesEndpointSendNewSourceInfo(endpointId) {\n        const presence = this.chatRoom?.getLastPresence(endpointId);\n\n        return Boolean(presence && presence.find(node => node.tagName === SOURCE_INFO_PRESENCE_ELEMENT));\n    }\n\n    /**\n     * Logs a debug or error message to console depending on whether SSRC rewriting is enabled or not.\n     * Owner changes are permitted only when SSRC rewriting is enabled.\n     *\n     * @param {string} message - The message to be logged.\n     * @returns {void}\n     */\n    _logOwnerChangedMessage(message) {\n        if (FeatureFlags.isSsrcRewritingSupported()) {\n            logger.debug(message);\n        } else {\n            logger.error(message);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType, sourceName) {\n        const legacyGetPeerMediaInfo = () => {\n            if (this.chatRoom) {\n                return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n            }\n            logger.warn('Requested peer media info, before room was set');\n        };\n\n        const lastPresence = this.chatRoom?.getLastPresence(owner);\n\n        if (!lastPresence) {\n            logger.warn(`getPeerMediaInfo - no presence stored for: ${owner}`);\n\n            return;\n        }\n        if (!this._doesEndpointSendNewSourceInfo(owner)) {\n            return legacyGetPeerMediaInfo();\n        }\n\n        if (sourceName) {\n            return this.getPeerSourceInfo(owner, sourceName);\n        }\n\n        const mediaInfo = {\n            muted: true\n        };\n\n        if (mediaType === MediaType.VIDEO) {\n            mediaInfo.videoType = undefined;\n            const codecListNode = filterNodeFromPresenceJSON(lastPresence, 'jitsi_participant_codecList');\n            const codecTypeNode = filterNodeFromPresenceJSON(lastPresence, 'jitsi_participant_codecType');\n\n            if (codecListNode.length) {\n                mediaInfo.codecList = codecListNode[0].value?.split(',') ?? [];\n            } else if (codecTypeNode.length > 0) {\n                mediaInfo.codecType = codecTypeNode[0].value;\n            }\n        }\n\n        return mediaInfo;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerSourceInfo(owner, sourceName) {\n        const mediaType = getMediaTypeFromSourceName(sourceName);\n        const mediaInfo = {\n            muted: true, // muted by default\n            videoType: mediaType === MediaType.VIDEO ? VideoType.CAMERA : undefined // 'camera' by default\n        };\n\n        return this._remoteSourceState[owner]\n            ? this._remoteSourceState[owner][sourceName] ?? mediaInfo\n            : undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc)?.endpointId;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getTrackSourceName(ssrc) {\n        return this.ssrcOwners.get(ssrc)?.sourceName;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    removeSSRCOwners(ssrcList) {\n        if (!ssrcList?.length) {\n            return;\n        }\n\n        for (const ssrc of ssrcList) {\n            this.ssrcOwners.delete(ssrc);\n        }\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n            this._sourceInfoHandler\n                && oldChatRoom.removePresenceListener(SOURCE_INFO_PRESENCE_ELEMENT, this._sourceInfoHandler);\n            this._memberLeftHandler\n                && oldChatRoom.removeEventListener(XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\n        }\n        if (room) {\n            this._bindChatRoomEventHandlers(room);\n            this._addLocalSourceInfoToPresence();\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setSSRCOwner(ssrc, newEndpointId, newSourceName) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingOwner = this.ssrcOwners.get(ssrc);\n\n        if (existingOwner) {\n            const { endpointId, sourceName } = existingOwner;\n\n            if (endpointId !== newEndpointId || sourceName !== newSourceName) {\n                this._logOwnerChangedMessage(\n                    `SSRC owner re-assigned from ${existingOwner}(source-name=${sourceName}) to ${\n                        newEndpointId}(source-name=${newSourceName})`);\n            }\n        }\n        this.ssrcOwners.set(ssrc, {\n            endpointId: newEndpointId,\n            sourceName: newSourceName\n        });\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackMuteStatus(sourceName, muted) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        this._localSourceState[sourceName].muted = muted;\n        logger.debug(`Mute state of ${sourceName} changed to muted=${muted}`);\n\n        if (this.chatRoom) {\n            return this._addLocalSourceInfoToPresence();\n        }\n\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackVideoType(sourceName, videoType) {\n        if (!this._localSourceState[sourceName]) {\n            this._localSourceState[sourceName] = {};\n        }\n\n        if (this._localSourceState[sourceName].videoType !== videoType) {\n            // Include only if not a camera (default)\n            this._localSourceState[sourceName].videoType = videoType === VideoType.CAMERA ? undefined : videoType;\n\n            return this._addLocalSourceInfoToPresence();\n        }\n\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    updateSsrcOwnersOnLeave(id) {\n        const ssrcs = [];\n\n        this.ssrcOwners.forEach(({ endpointId }, ssrc) => {\n            if (endpointId === id) {\n                ssrcs.push(ssrc);\n            }\n        });\n\n        if (!ssrcs?.length) {\n            return;\n        }\n\n        this.removeSSRCOwners(ssrcs);\n    }\n\n}\n","/**\n * Enumeration of the video types that are signaled to the bridge\n * @type {{CAMERA: string, DESKTOP: string, DESKTOP_HIGH_FPS: string, NONE: string}}\n */\nexport enum BridgeVideoType {\n\n    /**\n     * The camera video type.\n     */\n    CAMERA = 'camera',\n\n    /**\n     * The low fps desktop video type.\n     */\n    DESKTOP = 'desktop',\n\n    /**\n     * The high fps desktop video type.\n     */\n    DESKTOP_HIGH_FPS = 'desktop_high_fps',\n\n    /**\n     * Video type when no local source is present.\n     */\n    NONE = 'none'\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { isEqual } from 'lodash-es';\nimport { Strophe } from 'strophe.js';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport RTC from './modules/RTC/RTC';\nimport { SS_DEFAULT_FRAME_RATE } from './modules/RTC/ScreenObtainer';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedHandling from './modules/connectivity/IceFailedHandling';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport { LiteModeContext } from './modules/litemode/LiteModeContext';\nimport { QualityController } from './modules/qualitycontrol/QualityController';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport Settings from './modules/settings/Settings';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport EventEmitter from './modules/util/EventEmitter';\nimport { isValidNumber, safeSubtract } from './modules/util/MathUtil';\nimport RandomUtil from './modules/util/RandomUtil';\nimport { getJitterDelay } from './modules/util/Retry';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport MediaSessionEvents from './modules/xmpp/MediaSessionEvents';\nimport SignalingLayerImpl from './modules/xmpp/SignalingLayerImpl';\nimport {\n    FEATURE_E2EE,\n    FEATURE_JIGASI,\n    JITSI_MEET_MUC_TYPE\n} from './modules/xmpp/xmpp';\nimport { BridgeVideoType } from './service/RTC/BridgeVideoType';\nimport { CodecMimeType } from './service/RTC/CodecMimeType';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport { SignalingEvents } from './service/RTC/SignalingEvents';\nimport { getMediaTypeFromSourceName, getSourceNameForJitsiTrack } from './service/RTC/SignalingLayer';\nimport { VideoType } from './service/RTC/VideoType';\nimport { MAX_CONNECTION_RETRIES } from './service/connectivity/Constants';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_JVB_ICE_FAILED,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createJvbIceFailedEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nimport { XMPPEvents } from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger('JitsiConference');\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Default source language for transcribing the local participant.\n */\nconst DEFAULT_TRANSCRIPTION_LANGUAGE = 'en-US';\n\n/**\n * Checks if a given string is a valid video codec mime type.\n *\n * @param {string} codec the codec string that needs to be validated.\n * @returns {CodecMimeType|null} mime type if valid, null otherwise.\n * @private\n */\nfunction _getCodecMimeType(codec) {\n    if (typeof codec === 'string') {\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\n    }\n\n    return null;\n}\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name.toString()) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n        const additionalLogMsg = options.name\n            ? `roomName=${options.name}; condition - ${options.name.toLowerCase()}!==${options.name.toString()}`\n            : 'No room name passed!';\n\n        logger.error(`${errmsg} ${additionalLogMsg}`);\n        throw new Error(errmsg);\n    }\n    this.connection = options.connection;\n    this.xmpp = this.connection?.xmpp;\n\n    if (this.xmpp.isRoomCreated(options.name, options.customDomain)) {\n        const errmsg = 'A conference with the same name has already been created!';\n\n        delete this.connection;\n        delete this.xmpp;\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n\n    /**\n     * List of all the participants in the conference.\n     * @type {Map<string, JitsiParticipant>};\n     */\n    this.participants = new Map();\n\n    /**\n     * The signaling layer instance.\n     * @type {SignalingLayerImpl}\n     * @private\n     */\n    this._signalingLayer = new SignalingLayerImpl();\n\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    this.isVideoMutedByFocus = false;\n\n    // when video muted by focus we receive the jid of the initiator of the mute\n    this.mutedVideoByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay = Number.parseInt(options.config.p2p?.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isValidNumber(delay) ? delay : 5;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n\n    /**\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\n     *\n     * @type {undefined|number}\n     * @private\n     */\n    this._conferenceJoinAnalyticsEventSent = undefined;\n\n    /**\n     * End-to-End Encryption. Make it available if supported.\n     */\n    if (this.isE2EESupported()) {\n        logger.info('End-to-End Encryption is supported');\n\n        this._e2eEncryption = new E2EEncryption(this);\n    }\n\n    if (FeatureFlags.isRunInLiteModeEnabled()) {\n        logger.info('Lite mode enabled');\n\n        this._liteModeContext = new LiteModeContext(this);\n    }\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max audio sender limit has\n     * been reached for the call. Once this is set, unmuting audio will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._audioSenderLimitReached = undefined;\n\n    /**\n     * Flag set to <tt>true</tt> when Jicofo sends a presence message indicating that the max video sender limit has\n     * been reached for the call. Once this is set, unmuting video will be disabled from the client until it gets reset\n     * again by Jicofo.\n     */\n    this._videoSenderLimitReached = undefined;\n\n    this._firefoxP2pEnabled = browser.isVersionGreaterThan(109)\n        && (this.options.config.testing?.enableFirefoxP2p ?? true);\n\n    /**\n     * Number of times ICE restarts that have been attempted after ICE connectivity with the JVB was lost.\n     */\n    this._iceRestarts = 0;\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid, isAuthenticatedUser) {\n    let mucNickname;\n\n    if (isAuthenticatedUser) {\n        // For authenticated users generate a random ID.\n        mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n    } else {\n        // We try to use the first part of the node (which for anonymous users\n        // on prosody is a UUID) to match the previous behavior (and maybe make\n        // debugging easier).\n        mucNickname = Strophe.getNodeFromJid(jid)?.substr(0, 8)\n            .toLowerCase();\n\n        // But if this doesn't have the required format we just generate a new\n        // random nickname.\n        const re = /[0-9a-f]{8}/g;\n\n        if (!mucNickname || !re.test(mucNickname)) {\n            mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n        }\n    }\n\n    return mucNickname;\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    this.eventManager.setupXMPPListeners();\n\n    const { config } = this.options;\n\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        JitsiConference.resourceCreator\n    );\n\n    this._signalingLayer.setChatRoom(this.room);\n    this._signalingLayer.on(\n        SignalingEvents.SOURCE_UPDATED,\n        (sourceName, endpointId, muted, videoType) => {\n            const participant = this.participants.get(endpointId);\n            const mediaType = getMediaTypeFromSourceName(sourceName);\n\n            if (participant) {\n                participant._setSources(mediaType, muted, sourceName, videoType);\n                this.eventEmitter.emit(JitsiConferenceEvents.PARTICIPANT_SOURCE_UPDATED, participant);\n            }\n        });\n\n    // ICE Connection interrupted/restored listeners.\n    this._onIceConnectionEstablished = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._onIceConnectionFailed = this._onIceConnectionFailed.bind(this);\n    this.room.addListener(XMPPEvents.CONNECTION_ICE_FAILED, this._onIceConnectionFailed);\n\n    this._onIceConnectionInterrupted = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this._removeLocalSourceOnReject = this._removeLocalSourceOnReject.bind(this);\n    this._updateRoomPresence = this._updateRoomPresence.bind(this);\n    this.room.addListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    this.room.addListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    this.room.addListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    if (config.e2eping?.enabled) {\n        this.e2eping = new E2ePing(\n            this,\n            config,\n            (message, to) => {\n                try {\n                    this.sendMessage(message, to, true /* sendThroughVideobridge */);\n                } catch (error) {\n                    logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n                }\n            });\n    }\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n        this._registerRtcListeners(this.rtc);\n    }\n\n    // Get the codec preference settings from config.js.\n    const qualityOptions = {\n        enableAdaptiveMode: config.videoQuality?.enableAdaptiveMode,\n        lastNRampupTime: config.testing?.lastNRampupTime ?? 60000,\n        jvb: {\n            preferenceOrder: browser.isMobileDevice()\n                ? config.videoQuality?.mobileCodecPreferenceOrder\n                : config.videoQuality?.codecPreferenceOrder,\n            disabledCodec: _getCodecMimeType(config.videoQuality?.disabledCodec),\n            preferredCodec: _getCodecMimeType(config.videoQuality?.preferredCodec),\n            screenshareCodec: browser.isMobileDevice()\n                ? _getCodecMimeType(config.videoQuality?.mobileScreenshareCodec)\n                : _getCodecMimeType(config.videoQuality?.screenshareCodec),\n            enableAV1ForFF: config.testing?.enableAV1ForFF\n        },\n        p2p: {\n            preferenceOrder: browser.isMobileDevice()\n                ? config.p2p?.mobileCodecPreferenceOrder\n                : config.p2p?.codecPreferenceOrder,\n            disabledCodec: _getCodecMimeType(config.p2p?.disabledCodec),\n            preferredCodec: _getCodecMimeType(config.p2p?.preferredCodec),\n            screenshareCodec: browser.isMobileDevice()\n                ? _getCodecMimeType(config.p2p?.mobileScreenshareCodec)\n                : _getCodecMimeType(config.p2p?.screenshareCodec),\n            enableAV1ForFF: true // For P2P no simulcast is needed, therefore AV1 can be used.\n        }\n    };\n\n    this.qualityController = new QualityController(this, qualityOptions);\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            roomName: this.options.name,\n            applicationName: config.applicationName\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n\n        // Start performance observer for monitoring long tasks\n        if (config.longTasksStatsInterval) {\n            this.statistics.attachLongTasksStats();\n        }\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    // Disable VAD processing on Safari since it causes audio input to\n    // fail on some of the mobile devices.\n    if (config.enableTalkWhileMuted && browser.supportsVADDetection()) {\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\n        }\n    }\n\n    // Disable noisy mic detection on safari since it causes the audio input to\n    // fail on Safari on iPadOS.\n    if (config.enableNoisyMicDetection && browser.supportsVADDetection()) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection && !config.disableAudioLevels && LocalStatsCollector.isLocalStatsSupported()) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    // TODO: Drop this after the change to use the region from the http requests\n    //  to prosody is propagated to majority of deployments\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n\n    // Publish the codec preference to presence.\n    this.setLocalParticipantProperty('codecList', this.qualityController.codecController.getCodecPreferenceList('jvb'));\n\n    // Set transcription language presence extension.\n    // In case the language config is undefined or has the default value that the transcriber uses\n    // (in our case Jigasi uses 'en-US'), don't set the participant property in order to avoid\n    // needlessly polluting the presence stanza.\n    const transcriptionLanguage = config?.transcriptionLanguage ?? DEFAULT_TRANSCRIPTION_LANGUAGE;\n\n    if (transcriptionLanguage !== DEFAULT_TRANSCRIPTION_LANGUAGE) {\n        this.setTranscriptionLanguage(transcriptionLanguage);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n * @param replaceParticipant {boolean} whether the current join replaces\n * an existing participant with same jwt from the meeting.\n */\nJitsiConference.prototype.join = function(password = '', replaceParticipant = false) {\n    if (this.room) {\n        this.room.join(password, replaceParticipant).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @param reason {string|undefined} The reason for leaving the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = async function(reason) {\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n\n    this._sendConferenceLeftAnalyticsEvent();\n\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    this._maybeClearSITimeout();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // Leave the conference. If this.room == null we are calling second time leave().\n    if (!this.room) {\n        return;\n    }\n\n    // let's check is this breakout\n    if (reason === 'switch_room' && this.getBreakoutRooms()?.isBreakoutRoom()) {\n        const mJid = this.getBreakoutRooms().getMainRoomJid();\n\n        this.xmpp.connection._breakoutMovingToMain = mJid;\n    }\n\n    const room = this.room;\n\n    // Unregister connection state listeners\n    room.removeListener(\n        XMPPEvents.CONNECTION_INTERRUPTED,\n        this._onIceConnectionInterrupted);\n    room.removeListener(\n        XMPPEvents.CONNECTION_RESTORED,\n        this._onIceConnectionRestored);\n    room.removeListener(\n        XMPPEvents.CONNECTION_ESTABLISHED,\n        this._onIceConnectionEstablished);\n\n    room.removeListener(\n        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n    room.removeListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\n    room.removeListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\n    room.removeListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\n\n    this.eventManager.removeXMPPListeners();\n\n    this._signalingLayer.setChatRoom(null);\n\n    this.room = null;\n\n    let leaveError;\n\n    try {\n        await room.leave(reason);\n    } catch (err) {\n        leaveError = err;\n\n        // Remove all participants because currently the conference\n        // won't be usable anyway. This is done on success automatically\n        // by the ChatRoom instance.\n        this.getParticipants().forEach(\n            participant => this.onMemberLeft(participant.getJid()));\n    }\n\n    if (this.rtc) {\n        this.rtc.destroy();\n    }\n\n    if (leaveError) {\n        throw leaveError;\n    }\n};\n\n/**\n * Disposes of conference resources. This operation is a short-hand for leaving\n * the conference and disconnecting the connection.\n */\nJitsiConference.prototype.dispose = async function() {\n    await this.leave();\n    await this.connection?.disconnect();\n};\n\n/**\n * Returns <tt>true</tt> if end conference support is enabled in the backend.\n *\n * @returns {boolean} whether end conference is supported in the backend.\n */\nJitsiConference.prototype.isEndConferenceSupported = function() {\n    return Boolean(this.room && this.room.xmpp.endConferenceComponentAddress);\n};\n\n/**\n * Ends the conference.\n */\nJitsiConference.prototype.end = function() {\n    if (!this.isEndConferenceSupported()) {\n        logger.warn('Cannot end conference: is not supported.');\n\n        return;\n    }\n    if (!this.room) {\n        throw new Error('You have already left the conference');\n    }\n\n    this.room.end();\n};\n\n/**\n * Returns the currently active media session if any.\n *\n * @returns {JingleSessionPC|undefined}\n */\nJitsiConference.prototype.getActiveMediaSession = function() {\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n};\n\n/**\n * Returns an array containing all media sessions existing in this conference.\n *\n * @returns {Array<JingleSessionPC>}\n */\nJitsiConference.prototype.getMediaSessions = function() {\n    const sessions = [];\n\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\n\n    return sessions;\n};\n\n/**\n * Registers event listeners on the RTC instance.\n * @param {RTC} rtc - the RTC module instance used by this conference.\n * @private\n * @returns {void}\n */\nJitsiConference.prototype._registerRtcListeners = function(rtc) {\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        for (const localTrack of this.rtc.localTracks) {\n            localTrack.isVideoTrack() && this._sendBridgeVideoTypeMessage(localTrack);\n        }\n    });\n};\n\n/**\n * Sends the 'VideoTypeMessage' to the bridge on the bridge channel so that the bridge can make bitrate allocation\n * decisions based on the video type of the local source.\n *\n * @param {JitsiLocalTrack} localtrack - The track associated with the local source signaled to the bridge.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._sendBridgeVideoTypeMessage = function(localtrack) {\n    let videoType = !localtrack || localtrack.isMuted() ? BridgeVideoType.NONE : localtrack.getVideoType();\n\n    if (videoType === BridgeVideoType.DESKTOP && this._desktopSharingFrameRate > SS_DEFAULT_FRAME_RATE) {\n        videoType = BridgeVideoType.DESKTOP_HIGH_FPS;\n    }\n\n    localtrack && this.rtc.sendSourceVideoType(localtrack.getSourceName(), videoType);\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name.toString();\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Returns all the local video tracks.\n * @returns {Array<JitsiLocalTrack>}\n */\nJitsiConference.prototype.getLocalVideoTracks = function() {\n    return this.rtc ? this.rtc.getLocalVideoTracks() : null;\n};\n\n/**\n * Obtains the performance statistics.\n * @returns {Object|null}\n */\nJitsiConference.prototype.getPerformanceStats = function() {\n    return {\n        longTasksStats: this.statistics.getLongTasksStats()\n    };\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Adds a one-time`listener` function for the event.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n */\nJitsiConference.prototype.once = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.once(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendMessage(message, elementName);\n    }\n};\n\n/**\n * Sends a reaction to the other participants in the conference\n * @param reaction the reaction.\n * @param messageId the ID of the message to attach the reaction to.\n * @param receiverId the intended recipient, if the message is private.\n */\nJitsiConference.prototype.sendReaction = function(reaction, messageId, receiverId) {\n    if (this.room) {\n        this.room.sendReaction(reaction, messageId, receiverId);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence(name, values) && this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        const nickKey = 'nick';\n\n        if (name) {\n            this.room.addOrReplaceInPresence(nickKey, {\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n                value: name\n            }) && this.room.sendPresence();\n        } else if (this.room.getFromPresence(nickKey)) {\n            this.room.removeFromPresence(nickKey);\n            this.room.sendPresence();\n        }\n    }\n};\n\n/**\n * Set join without audio\n * @param silent whether user joined without audio\n */\nJitsiConference.prototype.setIsSilent = function(silent) {\n    if (this.room) {\n        this.room.addOrReplaceInPresence('silent', {\n            attributes: { xmlns: 'http://jitsi.org/protocol/silent' },\n            value: silent\n        }) && this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    } else {\n        logger.warn(`Failed to set subject, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param {JitsiLocalTrack} track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    if (!track) {\n        throw new Error('addTrack - a track is required');\n    }\n\n    const mediaType = track.getType();\n    const localTracks = this.rtc.getLocalTracks(mediaType);\n\n    // Ensure there's exactly 1 local track of each media type in the conference.\n    if (localTracks.length > 0) {\n        // Don't be excessively harsh and severe if the API client happens to attempt to add the same local track twice.\n        if (track === localTracks[0]) {\n            return Promise.resolve(track);\n        }\n\n        // Currently, only adding multiple video streams of different video types is supported.\n        // TODO - remove this limitation once issues with jitsi-meet trying to add multiple camera streams is fixed.\n        if (this.options.config.testing?.allowMultipleTracks\n            || (mediaType === MediaType.VIDEO && !localTracks.find(t => t.getVideoType() === track.getVideoType()))) {\n            const sourceName = getSourceNameForJitsiTrack(\n                this.myUserId(),\n                mediaType,\n                this.getLocalTracks(mediaType)?.length);\n\n            track.setSourceName(sourceName);\n            const addTrackPromises = [];\n\n            this.p2pJingleSession && addTrackPromises.push(this.p2pJingleSession.addTracks([ track ]));\n            this.jvbJingleSession && addTrackPromises.push(this.jvbJingleSession.addTracks([ track ]));\n\n            return Promise.all(addTrackPromises)\n                .then(() => {\n                    this._setupNewTrack(track);\n                    mediaType === MediaType.VIDEO && this._sendBridgeVideoTypeMessage(track);\n                    this._updateRoomPresence(this.getActiveMediaSession());\n\n                    if (this.isMutedByFocus || this.isVideoMutedByFocus) {\n                        this._fireMuteChangeEvent(track);\n                    }\n                });\n        }\n\n        return Promise.reject(new Error(`Cannot add second ${mediaType} track to the conference`));\n    }\n\n    return this.replaceTrack(null, track)\n        .then(() => {\n            // Presence needs to be sent here for desktop track since we need the presence to reach the remote peer\n            // before signaling so that a fake participant tile is created for screenshare. Otherwise, presence will\n            // only be sent after a session-accept or source-add is ack'ed.\n            if (track.getVideoType() === VideoType.DESKTOP) {\n                this._updateRoomPresence(this.getActiveMediaSession());\n            }\n        });\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(audioLevel, tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.AUDIO);\n    } else if (this.isVideoMutedByFocus && track.isVideoTrack() && !track.isMuted()) {\n        this.isVideoMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false, MediaType.VIDEO);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor && track.isAudioTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants.get(actorId);\n    } else if (this.mutedVideoByFocusActor && track.isVideoTrack()) {\n        const actorId = Strophe.getResourceFromJid(this.mutedVideoByFocusActor);\n\n        actorParticipant = this.participants.get(actorId);\n    }\n\n    // Send the video type message to the bridge if the track is not removed/added to the pc as part of\n    // the mute/unmute operation.\n    // In React Native we mute the camera by setting track.enabled but that doesn't\n    // work for screen-share tracks, so do the remove-as-mute for those.\n    const doesVideoMuteByStreamRemove\n        = browser.isReactNative() ? track.videoType === VideoType.DESKTOP : browser.doesVideoMuteByStreamRemove();\n\n    if (track.isVideoTrack() && !doesVideoMuteByStreamRemove) {\n        this._sendBridgeVideoTypeMessage(track);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track.setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, track.muteHandler);\n    if (track.isAudioTrack()) {\n        track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, track.audioLevelHandler);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    const oldVideoType = oldTrack?.getVideoType();\n    const mediaType = oldTrack?.getType() || newTrack?.getType();\n    const newVideoType = newTrack?.getVideoType();\n\n    if (oldTrack && newTrack && oldVideoType !== newVideoType) {\n        throw new Error(`Replacing a track of videoType=${oldVideoType} with a track of videoType=${newVideoType} is`\n            + ' not supported in this mode.');\n    }\n\n    if (newTrack) {\n        const sourceName = oldTrack\n            ? oldTrack.getSourceName()\n            : getSourceNameForJitsiTrack(\n                this.myUserId(),\n                mediaType,\n                this.getLocalTracks(mediaType)?.length);\n\n        newTrack.setSourceName(sourceName);\n    }\n    const oldTrackBelongsToConference = this === oldTrack?.conference;\n\n    if (oldTrackBelongsToConference && oldTrack.disposed) {\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n    }\n    if (newTrack?.disposed) {\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n    }\n\n    if (oldTrack && !oldTrackBelongsToConference) {\n        logger.warn(`JitsiConference.replaceTrack oldTrack (${oldTrack} does not belong to this conference`);\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrackBelongsToConference ? oldTrack : null, newTrack)\n        .then(() => {\n            if (oldTrackBelongsToConference && !oldTrack.isMuted() && !newTrack) {\n                oldTrack._sendMuteStatus(true);\n            }\n            oldTrackBelongsToConference && this.onLocalTrackRemoved(oldTrack);\n            newTrack && this._setupNewTrack(newTrack);\n\n            // Send 'VideoTypeMessage' on the bridge channel when a video track is added/removed.\n            if ((oldTrackBelongsToConference && oldTrack?.isVideoTrack()) || newTrack?.isVideoTrack()) {\n                this._sendBridgeVideoTypeMessage(newTrack);\n            }\n            this._updateRoomPresence(this.getActiveMediaSession());\n            if (newTrack !== null && (this.isMutedByFocus || this.isVideoMutedByFocus)) {\n                this._fireMuteChangeEvent(newTrack);\n            }\n\n            return Promise.resolve();\n        })\n        .catch(error => {\n            logger.error(`replaceTrack failed: ${error?.stack}`);\n\n            return Promise.reject(error);\n        });\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Handler for when a source-add for a local source is rejected by Jicofo.\n *\n * @param {JingleSessionPC} jingleSession - The media session.\n * @param {Error} error - The error message.\n * @param {MediaType} mediaType - The media type of the track associated with the source that was rejected.\n * @returns {void}\n */\nJitsiConference.prototype._removeLocalSourceOnReject = function(jingleSession, error, mediaType) {\n    if (!jingleSession) {\n        return;\n    }\n    logger.warn(`Source-add rejected on ${jingleSession}, reason=\"${error?.reason}\", message=\"${error?.msg}\"`);\n    const track = this.getLocalTracks(mediaType)[0];\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_UNMUTE_REJECTED, track);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    const mediaType = newTrack.getType();\n\n    // Create a source name for this track if it doesn't exist.\n    if (!newTrack.getSourceName()) {\n        const sourceName = getSourceNameForJitsiTrack(\n            this.myUserId(),\n            mediaType,\n            this.getLocalTracks(mediaType)?.length);\n\n        newTrack.setSourceName(sourceName);\n    }\n\n    this.rtc.addLocalTrack(newTrack);\n    newTrack.setConference(this);\n\n    // Add event handlers.\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.addEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, newTrack.muteHandler);\n\n    if (newTrack.isAudioTrack()) {\n        newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n        newTrack.addEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, newTrack.audioLevelHandler);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Sets the video type.\n * @param track\n * @return <tt>true</tt> if video type was changed in presence.\n * @private\n */\nJitsiConference.prototype._setNewVideoType = function(track) {\n    let videoTypeChanged = false;\n\n    if (track) {\n        videoTypeChanged = this._signalingLayer.setTrackVideoType(track.getSourceName(), track.videoType);\n    }\n\n    return videoTypeChanged;\n};\n\n/**\n * Sets mute status.\n * @param mediaType\n * @param localTrack\n * @param isMuted\n * @param <tt>true</tt> when presence was changed, <tt>false</tt> otherwise.\n * @private\n */\nJitsiConference.prototype._setTrackMuteStatus = function(mediaType, localTrack, isMuted) {\n    let presenceChanged = false;\n\n    if (localTrack) {\n        presenceChanged = this._signalingLayer.setTrackMuteStatus(localTrack.getSourceName(), isMuted);\n        presenceChanged && logger.debug(`Mute state of ${localTrack} changed to muted=${isMuted}`);\n    }\n\n    return presenceChanged;\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} in order to add the underlying MediaStream to the RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} track the local track that will be added to the pc.\n * @return {Promise} resolved when the process is done or rejected with a string which describes the error.\n */\nJitsiConference.prototype._addLocalTrackToPc = function(track) {\n    const addPromises = [];\n\n    if (track.conference === this) {\n        if (this.jvbJingleSession) {\n            addPromises.push(this.jvbJingleSession.addTrackToPc(track));\n        } else {\n            logger.debug('Add local MediaStream - no JVB Jingle session started yet');\n        }\n\n        if (this.p2pJingleSession) {\n            addPromises.push(this.p2pJingleSession.addTrackToPc(track));\n        } else {\n            logger.debug('Add local MediaStream - no P2P Jingle session started yet');\n        }\n    } else {\n        // If the track hasn't been added to the conference yet because of start muted by focus, add it to the\n        // conference instead of adding it only to the media sessions.\n        addPromises.push(this.addTrack(track));\n    }\n\n    return Promise.allSettled(addPromises);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} in order to remove the underlying MediaStream from the\n * RTCPeerConnection.\n *\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise} resolved when the process is done or rejected with a string which describes the error.\n */\nJitsiConference.prototype._removeLocalTrackFromPc = function(track) {\n    const removePromises = [];\n\n    if (track.conference === this) {\n        if (this.jvbJingleSession) {\n            removePromises.push(this.jvbJingleSession.removeTrackFromPc(track));\n        } else {\n            logger.debug('Remove local MediaStream - no JVB JingleSession started yet');\n        }\n        if (this.p2pJingleSession) {\n            removePromises.push(this.p2pJingleSession.removeTrackFromPc(track));\n        } else {\n            logger.debug('Remove local MediaStream - no P2P JingleSession started yet');\n        }\n    }\n\n    return Promise.allSettled(removePromises);\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return Strophe.getDomainFromJid(this.connection.getJid())\n        === this.options.config.hiddenDomain;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.qualityController.receiveVideoController.getLastN();\n};\n\n/**\n * Obtains the forwarded sources list in this conference.\n * @return {Array<string>|null}\n */\nJitsiConference.prototype.getForwardedSources = function() {\n    return this.rtc.getForwardedSources();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.qualityController.receiveVideoController.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setP2pVideoTransferActive(isVideoActive)\n            .catch(error => {\n                logger.error(`Failed to adjust video transfer status (${isVideoActive})`, error);\n            });\n    }\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Array.from(this.participants.values());\n};\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount = function(countHidden = false) {\n    let participants = this.getParticipants();\n\n    if (!countHidden) {\n        participants = participants.filter(p => !p.isHidden());\n    }\n\n    // Add one for the local participant.\n    return participants.length + 1;\n};\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants.get(id);\n};\n\n/**\n * Grant owner rights to the participant.\n * @param {string} id id of the participant to grant owner rights to.\n */\nJitsiConference.prototype.grantOwner = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.setAffiliation(participant.getConnectionJid(), 'owner');\n};\n\n/**\n * Revoke owner rights to the participant or local Participant as\n * the user might want to refuse to be a moderator.\n * @param {string} id id of the participant to revoke owner rights to.\n */\nJitsiConference.prototype.revokeOwner = function(id) {\n    const participant = this.getParticipantById(id);\n    const isMyself = this.myUserId() === id;\n    const role = this.isMembersOnly() ? 'member' : 'none';\n\n    if (isMyself) {\n        this.room.setAffiliation(this.connection.getJid(), role);\n    } else if (participant) {\n        this.room.setAffiliation(participant.getConnectionJid(), role);\n    }\n};\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n * @param {string} reason reason of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id, reason) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid(), reason);\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id, mediaType) {\n    const muteMediaType = mediaType ? mediaType : MediaType.AUDIO;\n\n    if (muteMediaType !== MediaType.AUDIO && muteMediaType !== MediaType.VIDEO) {\n        logger.error(`Unsupported media type: ${muteMediaType}`);\n\n        return;\n    }\n\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true, muteMediaType);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n * @param fullJid the member full jid, if any\n * @param features the member botType, if any\n * @param isReplaceParticipant whether this join replaces a participant with\n * the same jwt.\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType, fullJid, features, isReplaceParticipant) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n    const participant = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant.setConnectionJid(fullJid);\n    participant.setRole(role);\n    participant.setBotType(botType);\n    participant.setFeatures(features);\n    participant.setIsReplacing(isReplaceParticipant);\n\n    // Set remote tracks on the participant if source signaling was received before presence.\n    const remoteTracks = this.isP2PActive()\n        ? this.p2pJingleSession?.peerconnection.getRemoteTracks(id) ?? []\n        : this.jvbJingleSession?.peerconnection.getRemoteTracks(id) ?? [];\n\n    for (const track of remoteTracks) {\n        participant._tracks.push(track);\n    }\n\n    this.participants.set(id, participant);\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    // maybeStart only if we had finished joining as then we will have information for the number of participants\n    if (this.isJoined()) {\n        this._maybeStartOrStopP2P();\n    }\n\n    this._maybeSetSITimeout();\n    const { startAudioMuted, startVideoMuted } = this.options.config;\n\n    // Ignore startAudio/startVideoMuted settings if the media session has already been established.\n    // Apply the policy if the number of participants exceeds the startMuted thresholds.\n    if ((this.jvbJingleSession && this.getActiveMediaSession() === this.jvbJingleSession)\n        || ((typeof startAudioMuted === 'undefined' || startAudioMuted === -1)\n            && (typeof startVideoMuted === 'undefined' || startVideoMuted === -1))) {\n        return;\n    }\n\n    let audioMuted = false;\n    let videoMuted = false;\n    const numberOfParticipants = this.getParticipantCount();\n\n    if (numberOfParticipants > this.options.config.startAudioMuted) {\n        audioMuted = true;\n    }\n\n    if (numberOfParticipants > this.options.config.startVideoMuted) {\n        videoMuted = true;\n    }\n\n    if ((audioMuted && !this.startMutedPolicy.audio) || (videoMuted && !this.startMutedPolicy.video)) {\n        this._updateStartMutedPolicy(audioMuted, videoMuted);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Get notified when we joined the room.\n *\n * @private\n */\nJitsiConference.prototype._onMucJoined = function() {\n    this._numberOfParticipantsOnJoin = this.getParticipantCount();\n    this._maybeStartOrStopP2P();\n};\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has(FEATURE_JIGASI)) {\n                participant.setProperty('features_jigasi', true);\n            }\n\n            if (features.has(FEATURE_E2EE)) {\n                participant.setProperty('features_e2ee', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant.setBotType(botType);\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant.getBotType()) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid, reason) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const mediaSessions = this.getMediaSessions();\n    let tracksToBeRemoved = [];\n\n    for (const session of mediaSessions) {\n        const remoteTracks = session.peerconnection.getRemoteTracks(id);\n\n        remoteTracks && (tracksToBeRemoved = [ ...tracksToBeRemoved, ...remoteTracks ]);\n\n        // Update the SSRC owners list.\n        session._signalingLayer.updateSsrcOwnersOnLeave(id);\n        if (!FeatureFlags.isSsrcRewritingSupported()) {\n            // Remove the ssrcs from the remote description and renegotiate.\n            session.removeRemoteStreamsOnLeave(id);\n        }\n    }\n\n    tracksToBeRemoved.forEach(track => {\n        // Fire the event before renegotiation is done so that the thumbnails can be removed immediately.\n        this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n\n        if (FeatureFlags.isSsrcRewritingSupported()) {\n            track.setSourceName(null);\n            track.setOwner(null);\n        }\n    });\n\n    const participant = this.participants.get(id);\n\n    if (participant) {\n        this.participants.delete(id);\n        this.eventEmitter.emit(JitsiConferenceEvents.USER_LEFT, id, participant, reason);\n    }\n\n    if (this.room !== null) { // Skip if we have left the room already.\n        this._maybeStartOrStopP2P(true /* triggered by user left event */);\n        this._maybeClearSITimeout();\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n * @param {string} reason - reason of the participant to kick\n * @param {boolean?} isReplaceParticipant - whether this is a server initiated kick in order\n * to replace it with a participant with same jwt.\n */\nJitsiConference.prototype.onMemberKicked = function(\n        isSelfPresence,\n        actorId,\n        kickedParticipantId,\n        reason,\n        isReplaceParticipant) {\n    let actorParticipant;\n\n    if (actorId === this.myUserId()) {\n        // When we kick someone we also want to send the PARTICIPANT_KICKED event, but there is no\n        // JitsiParticipant object for ourselves so create a minimum fake one.\n        actorParticipant = {\n            getId: () => actorId\n        };\n    } else {\n        actorParticipant = this.participants.get(actorId);\n    }\n\n    if (isSelfPresence) {\n        this.leave().finally(() => this.xmpp.disconnect());\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant, reason, isReplaceParticipant);\n\n        return;\n    }\n\n    const kickedParticipant = this.participants.get(kickedParticipantId);\n\n    kickedParticipant.setIsReplaced(isReplaceParticipant);\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant, reason);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant.setRole(role);\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\nJitsiConference.prototype.onSilentStatusChanged = function(jid, isSilent) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    participant.setIsSilent(isSilent);\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.SILENT_STATUS_CHANGED,\n        id,\n        isSilent);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added to the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this JitsiConference.\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info('Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info('Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    // Add track to JitsiParticipant.\n    if (participant) {\n        participant._tracks.push(track);\n    } else {\n        logger.info(`Source signaling received before presence for ${id}`);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.isAudioTrack() && track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED, id, audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n\n        this.p2pJingleSession.setAnswer(answer)\n            .then(() => {\n                this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\n            })\n            .catch(error => {\n                logger.error('Error setting P2P answer', error);\n                if (this.p2pJingleSession) {\n                    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                        JitsiConferenceErrors.OFFER_ANSWER_FAILED, error);\n                }\n            });\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(jingleSession, jingleOffer) {\n    let rejectReason;\n    const contentName = jingleOffer.find('>content').attr('name');\n    const peerUsesUnifiedPlan = contentName === '0' || contentName === '1';\n\n    // Reject P2P between endpoints that are not running in the same mode w.r.t to SDPs (plan-b and unified plan).\n    if (!peerUsesUnifiedPlan) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P across two endpoints in different SDP modes is disabled'\n        };\n    } else if ((!this.isP2PEnabled() && !this.isP2PTestModeEnabled())\n        || (browser.isFirefox() && !this._firefoxP2pEnabled)) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration or browser unsupported'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(jingleSession, jingleOffer, now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(jingleSession, jingleOffer, now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(JitsiConferenceEvents.SERVER_REGION_CHANGED, serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n\n    try {\n        jingleSession.initialize(\n            this.room,\n            this.rtc,\n            this._signalingLayer,\n            {\n                ...this.options.config,\n                codecSettings: {\n                    mediaType: MediaType.VIDEO,\n                    codecList: this.qualityController.codecController.getCodecPreferenceList('jvb'),\n                    screenshareCodec: this.qualityController.codecController.getScreenshareCodec('jvb')\n                },\n                enableInsertableStreams: this.isE2EEEnabled() || FeatureFlags.isRunInLiteModeEnabled()\n            });\n    } catch (error) {\n        logger.error(error);\n\n        return;\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    const localTracks = this.getLocalTracks();\n\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n\n                this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, jingleSession);\n                if (!this.isP2PActive()) {\n                    this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, jingleSession);\n                }\n\n                jingleSession.addEventListener(MediaSessionEvents.VIDEO_CODEC_CHANGED, () => {\n                    this.eventEmitter.emit(JitsiConferenceEvents.VIDEO_CODEC_CHANGED);\n                });\n            },\n            error => {\n                logger.error('Failed to accept incoming JVB Jingle session', error);\n                this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, error);\n            },\n            localTracks\n        );\n\n        // Set the capture fps for screenshare if it is set through the UI.\n        this._desktopSharingFrameRate\n            && jingleSession.peerconnection.setDesktopSharingFrameRate(this._desktopSharingFrameRate);\n\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    const ignoreDomain = this.connection?.options?.bridgeChannel?.ignoreDomain;\n    const preferSctp = this.connection?.options?.bridgeChannel?.preferSctp ?? true;\n    const sctpOffered = $(offerIq).find('>content[name=\"data\"]')\n        .first().length === 1;\n    let wsUrl = null;\n\n    logger.info(`SCTP: offered=${sctpOffered}, prefered=${preferSctp}`);\n\n    if (!(sctpOffered && preferSctp)) {\n        $(offerIq).find('>content>transport>web-socket')\n            .toArray()\n            .map(e => e.getAttribute('url'))\n            .forEach(url => {\n                if (!wsUrl && (!ignoreDomain || ignoreDomain !== new URL(url).hostname)) {\n                    wsUrl = url;\n                    logger.info(`Using colibri-ws url ${url}`);\n                } else if (!wsUrl) {\n                    logger.info(`Ignoring colibri-ws url with domain ${ignoreDomain}`);\n                }\n            });\n\n        if (!wsUrl) {\n            const firstWsUrl = $(offerIq).find('>content>transport>web-socket')\n                .first();\n\n            if (firstWsUrl.length === 1) {\n                wsUrl = firstWsUrl[0].getAttribute('url');\n                logger.info(`Falling back to ${wsUrl}`);\n            }\n        }\n    }\n\n    if (wsUrl && !(sctpOffered && preferSctp)) {\n        // If the offer contains a websocket and we don't prefer SCTP use it.\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    } else if (sctpOffered) {\n        // Otherwise, fall back to an attempt to use SCTP.\n        this.rtc.initializeBridgeChannel(pc, null);\n    } else {\n        logger.warn('Neither SCTP nor a websocket is available. Will not initialize bridge channel.');\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(jingleSession, options) {\n    if (options?.errorMsg) {\n        logger.warn(options.errorMsg);\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(jingleSession, reasonCondition, reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        const stopOptions = {};\n\n        if (reasonCondition === 'connectivity-error' && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and terminates the session, before we get the event\n            // on our side. But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        } else if (reasonCondition === 'success' && reasonText === 'restart') {\n            // When we are restarting media sessions we don't want to switch the tracks to the JVB just yet.\n            stopOptions.requestRestart = true;\n        }\n        this._stopP2PSession(stopOptions);\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    return this.room?.xmpp?.moderator?.isSipGatewayEnabled() ?? false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return Promise.resolve();\n};\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nJitsiConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    const session = this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\n\n    return session ? session.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        logger.warn(`Failed to set start muted policy, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n\n        return;\n    }\n\n    logger.info(`Setting start muted policy: ${JSON.stringify(policy)} in presence and in conference metadata`);\n\n    // TODO: to remove using presence for startmuted policy after old clients update to using metadata always.\n    this.room.addOrReplaceInPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    }) && this.room.sendPresence();\n\n    this.getMetadataHandler().setMetadata('startMuted', {\n        audio: policy.audio,\n        video: policy.video\n    });\n};\n\n/**\n * Updates conference startMuted policy if needed and fires an event.\n *\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype._updateStartMutedPolicy = function(audio, video) {\n    // Update the start muted policy for the conference only if the meta data is received before conference join.\n    if (this.isJoined()) {\n        return;\n    }\n\n    let updated = false;\n\n    if (audio !== this.startMutedPolicy.audio) {\n        this.startMutedPolicy.audio = audio;\n        updated = true;\n    }\n\n    if (video !== this.startMutedPolicy.video) {\n        this.startMutedPolicy.video = video;\n        updated = true;\n    }\n\n    if (updated) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n            this.startMutedPolicy\n        );\n    }\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    if (this.room) {\n        this.room.sendPresence();\n    }\n};\n\n/**\n * Sets the transcription language.\n * NB: Unlike _init_ here we don't check for the default value since we want to allow\n * the value to be reset.\n *\n * @param lang the new transcription language to be used.\n */\nJitsiConference.prototype.setTranscriptionLanguage = function(lang) {\n    this.setLocalParticipantProperty('transcription_language', lang);\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(overallFeedback, detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * @returns false, since callstats in not supported anymore.\n * @deprecated\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    logger.warn('Callstats is no longer supported');\n\n    return false;\n};\n\n/**\n * Finds the SSRC of a given track\n *\n * @param track\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\n */\nJitsiConference.prototype.getSsrcByTrack = function(track) {\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\n};\n\n/**\n * This is a no-op since callstats is no longer supported.\n */\n// eslint-disable-next-line no-empty-function\nJitsiConference.prototype.sendApplicationLog = function() { };\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype.isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends local stats via the bridge channel which then forwards to other endpoints selectively.\n * @param {Object} payload The payload of the message.\n * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\n */\nJitsiConference.prototype.sendEndpointStatsMessage = function(payload) {\n    this.rtc.sendEndpointStatsMessage(payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(message, to = '', sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTARTED} event. This happens when the bridge goes down\n * and Jicofo moves conferences away to a different bridge.\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onConferenceRestarted = function(session) {\n    if (!session.isP2P && this.options.config.enableForcedReload) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, JitsiConferenceErrors.CONFERENCE_RESTARTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession({\n            reason: 'connectivity-error',\n            reasonDescription: 'ICE FAILED'\n        });\n    } else if (session && this.jvbJingleSession === session && this._iceRestarts < MAX_CONNECTION_RETRIES) {\n        // Use an exponential backoff timer for ICE restarts.\n        const jitterDelay = getJitterDelay(this._iceRestarts, 1000 /* min. delay */);\n\n        this._delayedIceFailed = new IceFailedHandling(this);\n        setTimeout(() => {\n            logger.error(`triggering ice restart after ${jitterDelay} `);\n            this._delayedIceFailed.start(session);\n            this._iceRestarts++;\n        }, jitterDelay);\n    } else if (this.jvbJingleSession === session) {\n        logger.warn('ICE failed, force reloading the conference after failed attempts to re-establish ICE');\n        Statistics.sendAnalyticsAndLog(\n            createJvbIceFailedEvent(\n                ACTION_JVB_ICE_FAILED,\n                {\n                    participantId: this.myUserId(),\n                    userRegion: this.options.config.deploymentInfo?.userRegion\n                }));\n        this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED, JitsiConferenceErrors.ICE_FAILED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(jingleSession, jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            codecSettings: {\n                mediaType: MediaType.VIDEO,\n                codecList: this.qualityController.codecController.getCodecPreferenceList('p2p'),\n                screenshareCodec: this.qualityController.codecController.getScreenshareCodec('p2p')\n            },\n            enableInsertableStreams: this.isE2EEEnabled() || FeatureFlags.isRunInLiteModeEnabled()\n        });\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n\n            this.eventEmitter.emit(\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n                jingleSession);\n\n            jingleSession.addEventListener(MediaSessionEvents.VIDEO_CODEC_CHANGED, () => {\n                this.eventEmitter.emit(JitsiConferenceEvents.VIDEO_CODEC_CHANGED);\n            });\n        },\n        error => {\n            logger.error('Failed to accept incoming P2P Jingle session', error);\n            if (this.p2pJingleSession) {\n                this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, error);\n            }\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks('JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks('P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        if (this.participants.has(track.ownerEndpointId)) {\n            logger.info(`Adding remote ${logName} track: ${track}`);\n            this.onRemoteTrackAdded(track);\n        }\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    }\n\n    if (isValidNumber(this.p2pEstablishmentDuration)\n            && isValidNumber(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(JitsiConferenceEvents.PROPERTIES_CHANGED, this.properties);\n\n        const audioLimitReached = this.properties['audio-limit-reached'] === 'true';\n        const videoLimitReached = this.properties['video-limit-reached'] === 'true';\n\n        if (this._audioSenderLimitReached !== audioLimitReached) {\n            this._audioSenderLimitReached = audioLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_UNMUTE_PERMISSIONS_CHANGED, audioLimitReached);\n            logger.info(`Audio unmute permissions set by Jicofo to ${audioLimitReached}`);\n        }\n\n        if (this._videoSenderLimitReached !== videoLimitReached) {\n            this._videoSenderLimitReached = videoLimitReached;\n            this.eventEmitter.emit(JitsiConferenceEvents.VIDEO_UNMUTE_PERMISSIONS_CHANGED, videoLimitReached);\n            logger.info(`Video unmute permissions set by Jicofo to ${videoLimitReached}`);\n        }\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n\n        // Handle changes to aggregate list of visitor codecs.\n        let publishedCodecs = this.properties['visitor-codecs']?.split(',');\n\n        if (publishedCodecs?.length) {\n            publishedCodecs = publishedCodecs.filter(codec => typeof codec === 'string'\n                && codec.trim().length\n                && Object.values(CodecMimeType).find(val => val === codec));\n        }\n\n        if (this._visitorCodecs !== publishedCodecs) {\n            this._visitorCodecs = publishedCodecs;\n            this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_VISITOR_CODECS_CHANGED, this._visitorCodecs);\n        }\n\n        const oldValue = this._hasVisitors;\n\n        this._hasVisitors = this.properties['visitor-count'] > 0;\n\n        oldValue !== this._hasVisitors && this._maybeStartOrStopP2P(true);\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(sessionNickname, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.onRemoteTrackRemoved(track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true)\n        .then(() => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        })\n        .catch(error => {\n            logger.error('Failed to resume media transfer over the JVB connection:', error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.getLastN() !== 0;\n\n        this.p2pJingleSession.setP2pVideoTransferActive(isVideoActive)\n            .catch(error => {\n                logger.error(`Failed to sync up P2P video transfer status (${isVideoActive}), ${error}`);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n    this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED, this.getActiveMediaSession());\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(\n        this.room,\n        this.rtc,\n        this._signalingLayer,\n        {\n            ...this.options.config,\n            codecSettings: {\n                mediaType: MediaType.VIDEO,\n                codecList: this.qualityController.codecController.getCodecPreferenceList('p2p'),\n                screenshareCodec: this.qualityController.codecController.getScreenshareCodec('p2p')\n            },\n            enableInsertableStreams: this.isE2EEEnabled() || FeatureFlags.isRunInLiteModeEnabled()\n        });\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks)\n        .then(() => {\n            this.p2pJingleSession.addEventListener(MediaSessionEvents.VIDEO_CODEC_CHANGED, () => {\n                this.eventEmitter.emit(JitsiConferenceEvents.VIDEO_CODEC_CHANGED);\n            });\n        })\n        .catch(error => {\n            logger.error('Failed to start P2P Jingle session', error);\n\n            if (this.p2pJingleSession) {\n                this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, error);\n            }\n        });\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false)\n        .then(() => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        })\n        .catch(error => {\n            logger.error('Failed to suspend media transfer over the JVB connection:', error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!this.isP2PEnabled()\n            || this.isP2PTestModeEnabled()\n            || (browser.isFirefox() && !this._firefoxP2pEnabled)\n            || this.isE2EEEnabled()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n        const jid = peer.getJid();\n\n        // Force initiator or responder mode for testing if option is passed to config.\n        if (this.options.config.testing?.forceInitiator) {\n            logger.debug(`Forcing P2P initiator, will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        } else if (this.options.config.testing?.forceResponder) {\n            logger.debug(`Forcing P2P responder, will wait for the other peer ${jid} to start P2P`);\n        } else {\n            if (myId > peersId) {\n                logger.debug('I\\'m the bigger peersId - the other peer should start P2P', myId, peersId);\n\n                return;\n            } else if (myId === peersId) {\n                logger.error('The same IDs ? ', myId, peersId);\n\n                return;\n            }\n\n            if (userLeftEvent) {\n                if (this.deferredStartP2PTask) {\n                    logger.error('Deferred start P2P task\\'s been set already!');\n\n                    return;\n                }\n                logger.info(`Will start P2P with: ${jid} after ${this.backToP2PDelay} seconds...`);\n                this.deferredStartP2PTask = setTimeout(\n                    this._startP2PSession.bind(this, jid),\n                    this.backToP2PDelay * 1000);\n            } else {\n                logger.info(`Will start P2P with: ${jid}`);\n                this._startP2PSession(jid);\n            }\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nJitsiConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p.getBotType() === 'poltergeist' || p.hasFeature(FEATURE_JIGASI)) !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer && !this._hasVisitors;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current JVB jingle session.\n *\n * @param {Object} options - options for stopping JVB session.\n * @param {string} options.reason - One of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} options.reasonDescription - Text description that will be included in the session terminate message.\n * @param {boolean} options.requestRestart - Whether this is due to a session restart, in which case, session will be\n * set to null.\n * @param {boolean} options.sendSessionTerminate - Whether session-terminate needs to be sent to Jicofo.\n */\nJitsiConference.prototype._stopJvbSession = function(options = {}) {\n    const {\n        requestRestart = false,\n        sendSessionTerminate = false\n    } = options;\n\n    if (!this.jvbJingleSession) {\n        logger.error('No JVB session to be stopped');\n\n        return;\n    }\n\n    // Remove remote JVB tracks.\n    !this.isP2PActive() && this._removeRemoteJVBTracks();\n\n    logger.info('Stopping stats for jvb connection');\n    this.statistics.stopRemoteStats(this.jvbJingleSession.peerconnection);\n\n    this.jvbJingleSession.terminate(\n        () => {\n            if (requestRestart && sendSessionTerminate) {\n                logger.info('session-terminate for ice restart - done');\n            }\n            this.jvbJingleSession = null;\n        },\n        error => {\n            if (requestRestart && sendSessionTerminate) {\n                logger.error('session-terminate for ice restart failed: reloading the client');\n\n                // Initiate a client reload if Jicofo responds to the session-terminate with an error.\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.ICE_FAILED);\n            }\n            logger.error(`An error occurred while trying to terminate the JVB session', reason=${error.reason},`\n                + `msg=${error.msg}`);\n        },\n        options);\n};\n\n/**\n * Stops the current P2P session.\n * @param {Object} options - Options for stopping P2P.\n * @param {string} options.reason - One of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} options.reasonDescription - Text description that will be included in the session terminate message.\n * @param {boolean} requestRestart - Whether this is due to a session restart, in which case\n * media will not be resumed on the JVB.\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(options = {}) {\n    const {\n        reason = 'success',\n        reasonDescription = 'Turning off P2P session',\n        requestRestart = false\n    } = options;\n\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession && !requestRestart) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n            this.p2pJingleSession = null;\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE: whilst this is an error callback,  'success' as a reason is\n            // considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason !== 'success') {\n                logger.error('An error occurred while trying to terminate P2P Jingle session', error);\n            }\n        }, {\n            reason,\n            reasonDescription,\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession && !requestRestart) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Updates room presence if needed and send the packet in case of a modification.\n * @param {JingleSessionPC} jingleSession the session firing the event, contains the peer connection which\n * tracks we will check.\n * @param {Object|null} ctx a context object we can distinguish multiple calls of the same pass of updating tracks.\n */\nJitsiConference.prototype._updateRoomPresence = function(jingleSession, ctx) {\n    if (!jingleSession) {\n        return;\n    }\n\n    // skips sending presence twice for the same pass of updating ssrcs\n    if (ctx) {\n        if (ctx.skip) {\n            return;\n        }\n        ctx.skip = true;\n    }\n\n    let presenceChanged = false;\n    let muteStatusChanged, videoTypeChanged;\n    const localTracks = jingleSession.peerconnection.getLocalTracks();\n\n    // Set presence for all the available local tracks.\n    for (const track of localTracks) {\n        const muted = track.isMuted();\n\n        muteStatusChanged = this._setTrackMuteStatus(track.getType(), track, muted);\n        muteStatusChanged && logger.debug(`Updating mute state of ${track} in presence to muted=${muted}`);\n        if (track.getType() === MediaType.VIDEO) {\n            videoTypeChanged = this._setNewVideoType(track);\n            videoTypeChanged && logger.debug(`Updating videoType in presence to ${track.getVideoType()}`);\n        }\n        presenceChanged = presenceChanged || muteStatusChanged || videoTypeChanged;\n    }\n\n    presenceChanged && this.room.sendPresence();\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n/**\n * Configures the peerconnection so that a given framre rate can be achieved for desktop share.\n *\n * @param {number} maxFps The capture framerate to be used for desktop tracks.\n * @returns {boolean} true if the operation is successful, false otherwise.\n */\nJitsiConference.prototype.setDesktopSharingFrameRate = function(maxFps) {\n    if (!isValidNumber(maxFps)) {\n        logger.error(`Invalid value ${maxFps} specified for desktop capture frame rate`);\n\n        return false;\n    }\n\n    const fps = Number(maxFps);\n\n    this._desktopSharingFrameRate = fps;\n\n    // Set capture fps for screenshare.\n    this.jvbJingleSession && this.jvbJingleSession.peerconnection.setDesktopSharingFrameRate(fps);\n\n    // Set the capture rate for desktop sharing.\n    this.rtc.setDesktopSharingFrameRate(fps);\n\n    return true;\n};\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.stopP2PSession = function(options) {\n    this._stopP2PSession(options);\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sends a face landmarks object to the xmpp server.\n * @param {Object} payload\n */\nJitsiConference.prototype.sendFaceLandmarks = function(payload) {\n    if (payload.faceExpression) {\n        this.xmpp.sendFaceLandmarksEvent(this.room.roomjid, payload);\n    }\n};\n\n/**\n * Sets the constraints for the video that is requested from the bridge.\n *\n * @param {Object} videoConstraints The constraints which are specified in the following format. The message updates\n * the fields that are present and leaves the rest unchanged on the bridge. Therefore, any field that is not applicable\n * anymore should be cleared by passing an empty object or list (whatever is applicable).\n * {\n *      'lastN': 20,\n *      'selectedSources': ['A', 'B', 'C'],\n *      'onStageSources': ['A'],\n *      'defaultConstraints': { 'maxHeight': 180 },\n *      'constraints': {\n *          'A': { 'maxHeight': 720 }\n *      }\n * }\n * Where A, B and C are source-names of the remote tracks that are being requested from the bridge.\n */\nJitsiConference.prototype.setReceiverConstraints = function(videoConstraints) {\n    this.qualityController.receiveVideoController.setReceiverConstraints(videoConstraints);\n};\n\n/**\n * Sets the assumed bandwidth bps for the video that is requested from the bridge.\n *\n * @param {Number} assumedBandwidthBps - The bandwidth value expressed in bits per second.\n */\nJitsiConference.prototype.setAssumedBandwidthBps = function(assumedBandwidthBps) {\n    this.qualityController.receiveVideoController.setAssumedBandwidthBps(assumedBandwidthBps);\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\n    this.qualityController.receiveVideoController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Sets the maximum video size the local participant should send to remote\n * participants.\n * @param {number} maxFrameHeight - The user preferred max frame height.\n * @returns {Promise} promise that will be resolved when the operation is\n * successful and rejected otherwise.\n */\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\n    return this.qualityController.sendVideoController.setPreferredSendMaxFrameHeight(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession = function(sipAddress, displayName) {\n    if (!this.room) {\n        return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n    }\n\n    return this.videoSIPGWHandler\n        .createVideoSIPGWSession(sipAddress, displayName);\n};\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    const conferenceConnectionTimes = this.getConnectionTimes();\n    const xmppConnectionTimes = this.connection.getConnectionTimes();\n    const gumStart = window.connectionTimes['firstObtainPermissions.start'];\n    const gumEnd = window.connectionTimes['firstObtainPermissions.end'];\n    const globalNSConnectionTimes = window.JitsiMeetJS?.app?.connectionTimes ?? {};\n    const connectionTimes = {\n        ...conferenceConnectionTimes,\n        ...xmppConnectionTimes,\n        ...globalNSConnectionTimes,\n        gumDuration: safeSubtract(gumEnd, gumStart),\n        xmppConnectingTime: safeSubtract(xmppConnectionTimes.connected, xmppConnectionTimes.connecting),\n        connectedToMUCJoinedTime: safeSubtract(\n            conferenceConnectionTimes['muc.joined'], xmppConnectionTimes.connected),\n        connectingToMUCJoinedTime: safeSubtract(\n            conferenceConnectionTimes['muc.joined'], xmppConnectionTimes.connecting),\n        numberOfParticipantsOnJoin: this._numberOfParticipantsOnJoin\n    };\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        ...connectionTimes,\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = Date.now();\n};\n\n/**\n * Sends conference.left analytics event.\n * @private\n */\nJitsiConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\n\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('left', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`,\n        stats: {\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\n            perf: this.getPerformanceStats()\n        }\n    }));\n};\n\n/**\n * Restarts all active media sessions.\n *\n * @returns {void}\n */\nJitsiConference.prototype._restartMediaSessions = function() {\n    if (this.p2pJingleSession) {\n        this._stopP2PSession({\n            reasonDescription: 'restart',\n            requestRestart: true\n        });\n    }\n\n    if (this.jvbJingleSession) {\n        this._stopJvbSession({\n            reason: 'success',\n            reasonDescription: 'restart required',\n            requestRestart: true,\n            sendSessionTerminate: true\n        });\n    }\n\n    this._maybeStartOrStopP2P(false);\n};\n\n/**\n * Returns whether End-To-End encryption is enabled.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EEEnabled = function() {\n    return Boolean(this._e2eEncryption && this._e2eEncryption.isEnabled());\n};\n\n/**\n * Returns whether End-To-End encryption is supported. Note that not all participants\n * in the conference may support it.\n *\n * @returns {boolean}\n */\nJitsiConference.prototype.isE2EESupported = function() {\n    return E2EEncryption.isSupported(this.options.config);\n};\n\n/**\n * Enables / disables End-to-End encryption.\n *\n * @param {boolean} enabled whether to enable E2EE or not.\n * @returns {void}\n */\nJitsiConference.prototype.toggleE2EE = function(enabled) {\n    if (!this.isE2EESupported()) {\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\n\n        return;\n    }\n\n    this._e2eEncryption.setEnabled(enabled);\n};\n\n/**\n * Sets the key and index for End-to-End encryption.\n *\n * @param {CryptoKey} [keyInfo.encryptionKey] - encryption key.\n * @param {Number} [keyInfo.index] - the index of the encryption key.\n * @returns {void}\n */\nJitsiConference.prototype.setMediaEncryptionKey = function(keyInfo) {\n    this._e2eEncryption.setEncryptionKey(keyInfo);\n};\n\n/**\n * Starts the participant verification process.\n *\n * @param {string} participantId The participant which will be marked as verified.\n * @returns {void}\n */\nJitsiConference.prototype.startVerification = function(participantId) {\n    const participant = this.getParticipantById(participantId);\n\n    if (!participant) {\n        return;\n    }\n\n    this._e2eEncryption.startVerification(participant);\n};\n\n/**\n * Marks the given participant as verified. After this is done, MAC verification will\n * be performed and an event will be emitted with the result.\n *\n * @param {string} participantId The participant which will be marked as verified.\n * @param {boolean} isVerified - whether the verification was succesfull.\n * @returns {void}\n */\nJitsiConference.prototype.markParticipantVerified = function(participantId, isVerified) {\n    const participant = this.getParticipantById(participantId);\n\n    if (!participant) {\n        return;\n    }\n\n    this._e2eEncryption.markParticipantVerified(participant, isVerified);\n};\n\n/**\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\n *\n * @returns {boolean} whether lobby is supported in the backend.\n */\nJitsiConference.prototype.isLobbySupported = function() {\n    return Boolean(this.room && this.room.getLobby().isSupported());\n};\n\n/**\n * Returns <tt>true</tt> if the room has members only enabled.\n *\n * @returns {boolean} whether conference room is members only.\n */\nJitsiConference.prototype.isMembersOnly = function() {\n    return Boolean(this.room && this.room.membersOnlyEnabled);\n};\n\n/**\n * Returns <tt>true</tt> if the room supports visitors feature.\n *\n * @returns {boolean} whether conference room has visitors support.\n */\nJitsiConference.prototype.isVisitorsSupported = function() {\n    return Boolean(this.room && this.room.visitorsSupported);\n};\n\n/**\n * Enables lobby by moderators\n *\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\n */\nJitsiConference.prototype.enableLobby = function() {\n    if (this.room && this.isModerator()) {\n        return this.room.getLobby().enable();\n    }\n\n    return Promise.reject(\n        new Error('The conference not started or user is not moderator'));\n};\n\n/**\n * Disabled lobby by moderators\n *\n * @returns {void}\n */\nJitsiConference.prototype.disableLobby = function() {\n    if (this.room && this.isModerator()) {\n        this.room.getLobby().disable();\n    } else {\n        logger.warn(`Failed to disable lobby, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator'}`);\n    }\n};\n\n/**\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\n *\n * @param {string} displayName Display name should be set to show it to moderators.\n * @param {string} email Optional email is used to present avatar to the moderator.\n * @returns {Promise<never>}\n */\nJitsiConference.prototype.joinLobby = function(displayName, email) {\n    if (this.room) {\n        return this.room.getLobby().join(displayName, email);\n    }\n\n    return Promise.reject(new Error('The conference not started'));\n};\n\n/**\n * Gets the local id for a participant in a lobby room.\n * Returns undefined when current participant is not in the lobby room.\n * This is used for lobby room private chat messages.\n *\n * @returns {string}\n */\nJitsiConference.prototype.myLobbyUserId = function() {\n    if (this.room) {\n        return this.room.getLobby().getLocalId();\n    }\n};\n\n/**\n * Sends a message to a lobby room.\n * When id is specified it sends a private message.\n * Otherwise it sends the message to all moderators.\n * @param {message} Object The message to send\n * @param {string} id The participant id.\n *\n * @returns {void}\n */\nJitsiConference.prototype.sendLobbyMessage = function(message, id) {\n    if (this.room) {\n        if (id) {\n            return this.room.getLobby().sendPrivateMessage(id, message);\n        }\n\n        return this.room.getLobby().sendMessage(message);\n    }\n};\n\n/**\n * Adds a message listener to the lobby room\n * @param {Function} listener The listener function,\n * called when a new message is received in the lobby room.\n *\n * @returns {Function} Handler returned to be able to remove it later.\n */\nJitsiConference.prototype.addLobbyMessageListener = function(listener) {\n    if (this.room) {\n        return this.room.getLobby().addMessageListener(listener);\n    }\n};\n\n/**\n * Removes a message handler from the lobby room\n * @param {Function} handler The handler function  to remove.\n *\n * @returns {void}\n */\nJitsiConference.prototype.removeLobbyMessageHandler = function(handler) {\n    if (this.room) {\n        return this.room.getLobby().removeMessageHandler(handler);\n    }\n};\n\n/**\n * Denies an occupant in the lobby room access to the conference.\n * @param {string} id The participant id.\n */\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\n    if (this.room) {\n        this.room.getLobby().denyAccess(id);\n    }\n};\n\n/**\n * Approves the request to join the conference to a participant waiting in the lobby.\n *\n * @param {string|Array<string>} param The participant id or an array of ids.\n */\nJitsiConference.prototype.lobbyApproveAccess = function(param) {\n    if (this.room) {\n        this.room.getLobby().approveAccess(param);\n    }\n};\n\n/**\n * Returns <tt>true</tt> if AV Moderation support is enabled in the backend.\n *\n * @returns {boolean} whether AV Moderation is supported in the backend.\n */\nJitsiConference.prototype.isAVModerationSupported = function() {\n    return Boolean(this.room && this.room.getAVModeration().isSupported());\n};\n\n/**\n * Enables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.enableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(true, mediaType);\n    } else {\n        logger.warn(`Failed to enable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Disables AV Moderation.\n * @param {MediaType} mediaType \"audio\" or \"video\"\n */\nJitsiConference.prototype.disableAVModeration = function(mediaType) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n        this.room.getAVModeration().enable(false, mediaType);\n    } else {\n        logger.warn(`Failed to disable AV moderation, ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Approve participant access to certain media, allows unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationApprove = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().approve(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation approve skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Reject participant access to certain media, blocks unmuting audio or video.\n *\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param id the id of the participant.\n */\nJitsiConference.prototype.avModerationReject = function(mediaType, id) {\n    if (this.room && this.isModerator()\n        && (mediaType === MediaType.AUDIO || mediaType === MediaType.VIDEO)) {\n\n        const participant = this.getParticipantById(id);\n\n        if (!participant) {\n            return;\n        }\n\n        this.room.getAVModeration().reject(mediaType, participant.getJid());\n    } else {\n        logger.warn(`AV moderation reject skipped , ${this.room ? '' : 'not in a room, '}${\n            this.isModerator() ? '' : 'participant is not a moderator, '}${\n            this.room && this.isModerator() ? 'wrong media type passed' : ''}`);\n    }\n};\n\n/**\n * Returns the breakout rooms manager object.\n *\n * @returns {Object} the breakout rooms manager.\n */\nJitsiConference.prototype.getBreakoutRooms = function() {\n    return this.room?.getBreakoutRooms();\n};\n\n/**\n * Returns the metadata handler object.\n *\n * @returns {Object} the room metadata handler.\n */\nJitsiConference.prototype.getMetadataHandler = function() {\n    return this.room?.getMetadataHandler();\n};\n","import { getLogger } from '@jitsi/logger';\n\nimport JitsiConference from './JitsiConference';\nimport { JitsiConnectionEvents } from './JitsiConnectionEvents';\nimport RTCStats from './modules/RTCStats/RTCStats';\nimport FeatureFlags from './modules/flags/FeatureFlags';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\nimport {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\n\nconst logger = getLogger('JitsiConnection');\n\nexport interface IConnectionOptions {\n    analytics?: any;\n    disableFocus?: boolean;\n    enableWebsocketResume: boolean;\n    flags?: Record<string, any>;\n    name?: string;\n    p2pStunServers: any[];\n    serviceUrl: string;\n    websocketKeepAlive?: number;\n    websocketKeepAliveUrl?: number;\n    xmppPing?: any;\n}\n\nexport interface IConnectOptions {\n    id?: string;\n    name?: string;\n    password?: string;\n}\n\nexport interface IAttachOptions {\n    jid: string;\n    rid: string;\n    sid: string;\n}\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n */\nexport default class JitsiConnection {\n    private appID?: string;\n    private token: string | null;\n    readonly options: IConnectionOptions;\n    private xmpp: XMPP;\n\n    /**\n     * Creates a new JitsiConnection instance.\n     * @param appID - Identification for the provider of Jitsi Meet video conferencing services.\n     * @param token - The JWT token used to authenticate with the server (optional).\n     * @param options - Object with properties / settings related to connection with the server.\n     */\n    constructor(appID: string, token: string | null, options: IConnectionOptions) {\n        this.appID = appID;\n        this.token = token;\n        this.options = options;\n\n        // Initialize the feature flags so that they are advertised through the disco-info.\n        FeatureFlags.init(options.flags || {});\n\n        this.xmpp = new XMPP(options, token);\n\n        this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n            (errType: string, msg: string, credentials: any, details: any) => {\n                Statistics.sendAnalyticsAndLog(\n                    createConnectionFailedEvent(errType, msg, details));\n            });\n\n        this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n            (msg: string) => {\n                // we can see disconnects from normal tab closing of the browser\n                // and then there are no msgs, but we want to log only disconnects\n                // when there is real error\n                // XXX Do we need the difference in handling between the log and\n                // analytics event here?\n                if (msg) {\n                    Statistics.sendAnalytics(\n                        ANALYTICS_CONNECTION_DISCONNECTED,\n                        { message: msg });\n                }\n            });\n    }\n\n    /**\n     * Connect the client with the server.\n     * @param options - Connecting options (for example authentications parameters).\n     * @param options.id - The username to use when connecting, if any.\n     * @param options.password - The password to use when connecting with username, if any.\n     * @param options.name - The name of the room/conference we will be connecting to. This is needed on connection\n     * time to be able to send conference-request over http. If missing the flow where we send conference-iq to jicofo over\n     * the established xmpp connection will be used, even in the case where we have configured conference http request url\n     * to be used.\n     */\n    connect(options: IConnectOptions = {}): void {\n\n        RTCStats.startWithConnection(this);\n\n        // if we get redirected, we set disableFocus to skip sending the conference request twice\n        if (this.xmpp.moderator.targetUrl && !this.options.disableFocus && options.name) {\n            // The domain (optional) will uses this.options.hosts.muc.toLowerCase() if not provided\n            this.xmpp.moderator.sendConferenceRequest(this.xmpp.getRoomJid(options.name, undefined))\n                .then(() => {\n                    this.xmpp.connect(options.id, options.password);\n                })\n                .catch(e => logger.trace('sendConferenceRequest rejected', e));\n        } else {\n            this.xmpp.connect(options.id, options.password);\n        }\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For example:\n     * if the connection is created on the server we can attach to it and start\n     * using it.\n     *\n     * @param options - Connecting options - rid, sid and jid.\n     */\n    attach(options: IAttachOptions): void {\n        this.xmpp.attach(options);\n    }\n\n    /**\n     * Disconnect the client from the server.\n     * @param args - Optional arguments to be passed to XMPP.disconnect\n     * @returns Promise that resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(...args: [string?]): Promise<void> {\n        // XXX Forward any arguments passed to JitsiConnection.disconnect to\n        // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n        // may optionally pass the event which triggered the disconnect in order to\n        // provide the implementation with finer-grained context.\n        return this.xmpp.disconnect(...args);\n    }\n\n    /**\n     * Returns the jid of the participant associated with the XMPP connection.\n     *\n     * @returns The jid of the participant.\n     */\n    getJid(): string {\n        return this.xmpp.getJid();\n    }\n\n    /**\n     * This method allows renewal of the tokens if they are expiring.\n     * @param token - The new token.\n     */\n    setToken(token: string): void {\n        this.token = token;\n    }\n\n    /**\n     * Creates and joins new conference.\n     * @param name - The name of the conference; if null - a generated name will be\n     * provided from the api\n     * @param options - Object with properties / settings related to the conference\n     * that will be created.\n     * @returns The new conference object.\n     */\n    initJitsiConference(name: string | null, options: Record<string, any>): JitsiConference {\n        return new JitsiConference({\n            name,\n            config: options,\n            connection: this\n        });\n    }\n\n    /**\n     * Subscribes the passed listener to the event.\n     * @param event - The connection event.\n     * @param listener - The function that will receive the event\n     */\n    addEventListener(event: JitsiConnectionEvents, listener: (...args: any[]) => void): void {\n        this.xmpp.addListener(event, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     * @param event - The connection event.\n     * @param listener - The function that will receive the event\n     */\n    removeEventListener(event: JitsiConnectionEvents, listener: (...args: any[]) => void): void {\n        this.xmpp.removeListener(event, listener);\n    }\n\n    /**\n     * Returns measured connectionTimes.\n     * @returns Object containing connection timing information\n     */\n    getConnectionTimes(): Record<string, any> {\n        return this.xmpp.connectionTimes;\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant.\n     * @param feature - The name of the feature.\n     * @param submit - If true - the new list of features will be\n     * immediately submitted to the others.\n     */\n    addFeature(feature: string, submit: boolean = false): void {\n        this.xmpp.caps.addFeature(feature, submit, true);\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param feature - The name of the feature.\n     * @param submit - If true - the new list of features will be\n     * immediately submitted to the others.\n     */\n    removeFeature(feature: string, submit: boolean = false): void {\n        this.xmpp.caps.removeFeature(feature, submit, true);\n    }\n\n    /**\n     * Get object with internal logs.\n     * @returns Object containing connection logs and metadata\n     */\n    getLogs(): Record<string, any> {\n        const data = this.xmpp.getJingleLog();\n\n        const metadata: Record<string, any> = {};\n\n        metadata.time = new Date();\n        metadata.url = window.location.href;\n        metadata.ua = navigator.userAgent;\n\n        const log = this.xmpp.getXmppLog();\n\n        if (log) {\n            metadata.xmpp = log;\n        }\n\n        data.metadata = metadata;\n\n        return data;\n    }\n}\n","/**\n * The events for the media devices.\n */\n\nexport enum JitsiMediaDevicesEvents {\n\n    /**\n     * Indicates that the list of available media devices has been changed. The\n     * event provides the following parameters to its listeners:\n     *\n     * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n     *  MediaDeviceInfo-like objects that are currently connected.\n     *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n     */\n    DEVICE_LIST_CHANGED = 'mediaDevices.devicechange',\n\n    /**\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    PERMISSIONS_CHANGED = 'rtc.permissions_changed',\n\n    /**\n     * Indicates that the environment is currently showing permission prompt to\n     * access camera and/or microphone. The event provides the following\n     * parameters to its listeners:\n     *\n     * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n     *  |'react-native'|'android'} environmentType - type of browser or\n     *  other execution environment.\n     */\n    PERMISSION_PROMPT_IS_SHOWN = 'mediaDevices.permissionPromptIsShown'\n}\n\n// exported for backward compatibility\nexport const DEVICE_LIST_CHANGED = JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED;\nexport const PERMISSIONS_CHANGED = JitsiMediaDevicesEvents.PERMISSIONS_CHANGED;\nexport const PERMISSION_PROMPT_IS_SHOWN = JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN;\n","import * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport Listenable from './modules/util/Listenable';\nimport { MediaType } from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices extends Listenable {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        super();\n        this._initialized = false;\n        this._permissions = {};\n    }\n\n    /**\n     * Initialize. Start listening for device changes and initialize permissions checks.\n     */\n    init() {\n        if (this._initialized) {\n            return;\n        }\n        this._initialized = true;\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this.eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n\n        // We would still want to update the permissions cache in case the permissions API is not supported.\n        RTC.addListener(\n            RTCEvents.PERMISSIONS_CHANGED,\n            permissions => this._handlePermissionsChange(permissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and 'microphone' permissions are\n        // implemented. If supported add onchange listeners.\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            const self = this;\n\n            const promises = [];\n\n            promises.push(navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.VIDEO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.VIDEO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            promises.push(navigator.permissions.query({ name: AUDIO_PERMISSION_NAME })\n                .then(status => {\n                    this._handlePermissionsChange({\n                        [MediaType.AUDIO]: this._parsePermissionState(status)\n                    });\n                    status.onchange = function() {\n                        try {\n                            self._handlePermissionsChange({\n                                [MediaType.AUDIO]: self._parsePermissionState(this)\n                            });\n                        } catch (error) {\n                            // Nothing to do.\n                        }\n                    };\n\n                    return true;\n                })\n                .catch(() => false));\n\n            Promise.all(promises).then(results => resolve(results.every(supported => supported)));\n\n        });\n    }\n\n    /**\n     * Parses a PermissionState object and returns true for granted and false otherwise.\n     *\n     * @param {PermissionState} permissionStatus - The PermissionState object retrieved from the Permissions API.\n     * @returns {boolean} - True for granted and false for denied.\n     * @throws {TypeError}\n     */\n    _parsePermissionState(permissionStatus = {}) {\n        // The status attribute is deprecated, and state\n        // should be used instead, but check both for now\n        // for backwards compatibility.\n        const status = permissionStatus.state || permissionStatus.status;\n\n        if (typeof status !== 'string') {\n            throw new TypeError();\n        }\n\n        return status === PERMISSION_GRANTED_STATUS;\n    }\n\n    /**\n     * Updates the local granted/denied permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} permissions - Object with the permissions.\n     */\n    _handlePermissionsChange(permissions) {\n        const hasPermissionsChanged\n            = [ MediaType.AUDIO, MediaType.VIDEO ]\n                .some(type => type in permissions && permissions[type] !== this._permissions[type]);\n\n        if (hasPermissionsChanged) {\n            this._permissions = {\n                ...this._permissions,\n                ...permissions\n            };\n            this.eventEmitter.emit(JitsiMediaDevicesEvents.PERMISSIONS_CHANGED, this._permissions);\n\n            if (this._permissions[MediaType.AUDIO] || this._permissions[MediaType.VIDEO]) {\n                // Triggering device list update when the permissions are granted in order to update\n                // the labels the devices.\n                // eslint-disable-next-line no-empty-function\n                this.enumerateDevices(() => {});\n            }\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._permissions) {\n                resolve(this._permissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        try {\n                            return this._parsePermissionState(permissionStatus);\n                        } catch {\n                            return false;\n                        }\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !(\n            (browser.isFirefox() && browser.isVersionLessThan('101'))\n            || browser.isIosBrowser()\n        );\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n}\n\nexport default new JitsiMediaDevices();\n","import { getLogger } from '@jitsi/logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger('modules/detection/ActiveDeviceDetector');\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n\n                    Statistics.startLocalStats(track, track.setAudioLevel.bind(track));\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided JitsiLocalTracks.\n *\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport SignalingLayer from '../../service/RTC/SignalingLayer';\n\nconst logger = getLogger('modules/proxyconnection/CustomSignalingLayer');\n\n/**\n * Custom semi-mock implementation for the Proxy connection service.\n */\nexport default class CustomSignalingLayer extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams.\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType, sourceName) { // eslint-disable-line no-unused-vars\n        return {};\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerSourceInfo(owner, sourceName) { // eslint-disable-line no-unused-vars\n        return undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getTrackSourceName(ssrc) { // eslint-disable-line no-unused-vars\n        return undefined;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    removeSSRCOwners(ssrcList) {\n        if (!ssrcList?.length) {\n            return;\n        }\n\n        for (const ssrc of ssrcList) {\n            this.ssrcOwners.delete(ssrc);\n        }\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        this.chatRoom = room;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\n        const existingOwner = this.ssrcOwners.get(ssrc);\n\n        if (existingOwner && existingOwner !== endpointId) {\n            logger.error(`SSRC owner re-assigned from ${existingOwner} to ${endpointId}`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackMuteStatus(sourceName, muted) { // eslint-disable-line no-unused-vars\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setTrackVideoType(sourceName, videoType) { // eslint-disable-line no-unused-vars\n        return false;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    updateSsrcOwnersOnLeave(id) {\n        const ssrcs = Array.from(this.ssrcOwners)\n            .filter(entry => entry[1] === id)\n            .map(entry => entry[0]);\n\n        if (!ssrcs?.length) {\n            return;\n        }\n\n        this.removeSSRCOwners(ssrcs);\n    }\n}\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport enum ACTIONS {\n    ACCEPT = 'session-accept',\n    CONNECTION_ERROR = 'connection-error-encountered',\n    INITIATE = 'session-initiate',\n    TERMINATE = 'session-terminate',\n    TRANSPORT_INFO = 'transport-info',\n    UNAVAILABLE = 'unavailable'\n}\n","import { getLogger } from '@jitsi/logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\nimport RTC from '../RTC/RTC';\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport CustomSignalingLayer from './CustomSignalingLayer';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger('modules/proxyconnection/ProxyConnectionPC');\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should send offers. If false, the local\n     * client should send answers. Defaults to false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote media stream has been received\n     * through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which the peer connection is being establish\n     * and which should receive direct messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer connection should accept incoming video\n     * streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            pcConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real.\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { },\n\n            // eslint-disable-next-line no-empty-function\n            addCancellableListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const pcConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.pcConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@link JingleSessionPC} expects an instance of\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addEventListener: () => { /* no op */ },\n            addPresenceListener: () => { /* no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            removeEventListener: () => { /* no op */ },\n            removePresenceListener: () => { /* no-op */ }\n        };\n\n        /**\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\n         * @type {Object}\n         */\n        const conferenceStub = {\n            myUserId: () => ''\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(conferenceStub, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            pcConfigStub, // pcConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        const signalingLayer = new CustomSignalingLayer();\n\n        signalingLayer.setChatRoom(roomStub);\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, signalingLayer, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occurred.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @param {Function} callback - Callback when the IQ was acknowledged.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq, callback) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n\n        if (callback) {\n            // Fake some time to receive the acknowledge.\n            setTimeout(callback, 250);\n        }\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            ),\n            []\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","import { getLogger } from '@jitsi/logger';\nimport $ from 'jquery';\nimport { $iq } from 'strophe.js';\n\nimport { MediaType } from '../../service/RTC/MediaType';\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\nimport { VideoType } from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger('modules/proxyconnection/ProxyConnectionService');\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied video should be returned as a desktop\n     * stream. Defaults to false.\n     * @param {Object} [options.pcConfig] - The {@code RTCConfiguration} to use for the WebRTC peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The {@code JitsiConnection} which will be used to fetch\n     * TURN credentials for the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a remote video stream has been received and\n     * converted to a {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a message has to be sent (signaled) out. The\n     * arguments passed in are the jid to send the message to and the message.\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            pcConfig: jitsiConnection && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        localTracks.forEach((localTrack, localTrackIndex) => {\n            const localSourceNameTrack = getSourceNameForJitsiTrack('peer', localTrack.getType(), localTrackIndex);\n\n            localTrack.setSourceName(localSourceNameTrack);\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            pcConfig: this._options.pcConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occurred.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.createLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","/** Class for providing information about an ICE candidate */\nclass ParsedIceCandidate {\n  /** Create a new object\n   * @param {Object} iceCandidate the ice candidate */\n  constructor(iceCandidate) {\n    this.iceCandidateStr = iceCandidate.candidate;\n\n    this.parse();\n  }\n\n  /** Parse the ICE candidate\n   * @private\n   */\n  parse() {\n    let parsed = this.iceCandidateStr.split(' ');\n    if (parsed.length < 8) {\n      return;\n    }\n\n    /* Candidate string examples with indices:\n               0            1  2    3           4           5\n       \"candidate:911959162 1 udp 2113937151 192.168.1.175 49977\n        6   7     8        9   10   11    12         13\n       typ host generation 0 ufrag WBVw network-cost 50\"\n\n               0             1  2    3           4          5\n       \"candidate:3941065291 1 udp 33562367   172.18.0.2   30704\n        6   7     8        9   10   11    12      13  14    15   16         17\n       typ relay raddr 0.0.0.0 rport 0 generation 0 ufrag 2R2F network-cost 50\"\n    */\n\n    this.protocol = (parsed[1] === '1' ? 'rtp' : 'rtcp');\n    this.transport = parsed[2];\n    this.typeTransport = this.extractTypeTransport(parsed[3]);\n\n    this.ipv6 = parsed[4].indexOf(':') !== -1;\n    this.ipAddress = parsed[4];\n    this.port = parsed[5];\n\n    this.type = parsed[7];\n  }\n\n  /** get the type of transport from the preference\n   * @param {String} preference the preference from the ICE candidate\n   * @return {String} UDP, TCP, or TLS\n   * @private\n   */\n  extractTypeTransport(preference) {\n    let ret = 'None';\n\n    let tmp = (preference >> 24);\n    if (this.protocol === 'rtp' && tmp >= 0 && tmp <= 2) {\n      switch (tmp) {\n        case 0:\n          ret = 'TLS';\n          break;\n        case 1:\n          ret = 'TCP';\n          break;\n        case 2:\n          ret = 'UDP';\n          break;\n      }\n    }\n\n    return ret;\n  };\n\n  /** the candidate as string\n   * @return {String} the candidate\n   * @public\n   */\n  getString() {\n    return this.iceCandidateStr;\n  }\n\n  /* --------- Type --------- */\n\n  /** Type\n   * @return {String} type\n   * @public\n   */\n  getType() {\n    return this.type;\n  }\n\n  /** host candidate or not\n   * @return {Boolean} host or not\n   * @public\n   */\n  isHost() {\n    return this.type.toLowerCase() === 'host';\n  }\n\n  /** server reflexive candidate or not\n   * @return {Boolean} reflexive or not\n   * @public\n   */\n  isServerReflexive() {\n    return this.type.toLowerCase() === 'srflx';\n  }\n\n  /** peer reflexive candidate or not\n   * @return {Boolean} reflexive or not\n   * @public\n   */\n  isPeerReflexive() {\n    return this.type.toLowerCase() === 'prflx';\n  }\n\n  /** relay candidate or not\n   * @return {Boolean} relay or not\n   * @public\n   */\n  isRelay() {\n    return this.type.toLowerCase() === 'relay' || this.type.toLowerCase() === 'relayed';\n  }\n\n  /** public candidate or not\n   * @return {Boolean} relay or not\n   * @public\n   */\n  isPublicIp() {\n    return this.type.toLowerCase() === 'srflx' || this.type.toLowerCase() === 'prflx';\n  }\n\n  /* --------- Type transport --------- */\n\n  /** type transport\n   * @return {String} type transport (UDP, TCP, or TLS)\n   * @public\n   */\n  getTypeTransport() {\n    return this.typeTransport;\n  }\n\n  /** Type transport UDP\n   * @return {Boolean} if UDP or not\n   */\n  isTypeTransportUdp() {\n    return this.typeTransport === 'UDP';\n  }\n\n  /** Type transport TCP\n   * @return {Boolean} if TCP or not\n   */\n  isTypeTransportTcp() {\n    return this.typeTransport === 'TCP';\n  }\n\n  /** Type transport TLS\n   * @return {Boolean} if TLS or not\n   */\n  isTypeTransportTls() {\n    return this.typeTransport === 'TLS';\n  }\n\n  /* --------- Transport --------- */\n\n  /** Transport used\n   * @return {String} transport (udp or tcp)\n   * @public\n   */\n  getTransport() {\n    return this.transport;\n  }\n\n  /** UDP\n   * @return {Boolean} UDP or not\n   * @public\n   */\n  isUdp() {\n    return this.transport.toLowerCase() === 'udp';\n  }\n\n  /** TCP\n   * @return {Boolean} TCP or not\n   * @public\n   */\n  isTcp() {\n    return this.transport.toLowerCase() === 'tcp';\n  }\n\n\n  /* --------- Protocol --------- */\n\n  /** Protocol used\n   * @return {String} protocol (rtp or rtcp)\n   * @public\n   */\n  getProtocol() {\n    return this.protocol;\n  }\n\n  /** RTP\n   * @return {Boolean} RTP or not\n   * @public\n   */\n  isRtp() {\n    return this.protocol === 'rtp';\n  }\n\n  /** RTCP\n   * @return {Boolean} RTCP or not\n   * @public\n   */\n  isRtcp() {\n    return this.protocol === 'rtcp';\n  }\n\n\n  /* --------- IP/port --------- */\n\n  /** IPv6 or not\n   * @return {Boolean} ipv6 or not\n   */\n  isIpv6() {\n    return this.ipv6;\n  }\n\n  /** IP address\n   * @return {String} IP address\n   * @public\n   */\n  getIpAddress() {\n    return this.ipAddress;\n  }\n\n  /** port\n   * @return {String} port\n   * @public\n   */\n  getPort() {\n    return this.port;\n  }\n}\n\nexport {ParsedIceCandidate};\n","export const Constants = {\n  codeBaseType: {\n    chrome: 'Chrome',\n    firefox: 'Firefox',\n    edge: 'Edge',\n    plugin: 'Plugin',\n  },\n\n  browserName: {\n    chrome: 'Chrome',\n    firefox: 'Firefox',\n    edge: 'Edge',\n    msie: 'Microsoft Internet Explorer',\n    safari: 'Safari',\n  },\n\n  osName: {\n    windows: 'Windows',\n    mac: 'Mac OS X',\n    android: 'Android',\n    ios: 'iOS',\n  },\n};\n\n/**\n * detect - Detect the browser related inforamtion\n * @public\n * @return {Object} Browser and OS information\n */\nexport function detect() {\n  let browserName = Constants.browserName.chrome;\n  let osName = null;\n  let osVersion = null;\n  let userAgent = null;\n  let agentVersion = null;\n\n  let codeBaseType = Constants.codeBaseType.chrome;\n\n  if (window && (!window.navigator || !window.navigator.userAgent || window.csioReactNative)) {\n    if (window && window.csioGetOsName) {\n      osName = window.csioGetOsName();\n    }\n\n    if (window && window.csioGetOsVer) {\n      osVersion = window.csioGetOsVer();\n    }\n\n    if (window && window.csioReactNative) {\n      userAgent = 'react-native';\n    }\n\n    return {\n      browserName: browserName,\n      codeBase: codeBaseType,\n      os: osName,\n      osVersion: osVersion,\n      userAgent: userAgent,\n    };\n  }\n\n  userAgent = navigator.userAgent;\n  let nAgt = userAgent.toLowerCase();\n\n  agentVersion = navigator.appVersion;\n  let nVer;\n  let fullVersion;\n  if (agentVersion) {\n    nVer = agentVersion.toLowerCase();\n    fullVersion = '' + parseFloat(nVer);\n  }\n  let verOffset;\n  let version = 'version';\n\n\n  // In Opera, the true version is after \"Opera\" or after \"Version\"\n  if ((verOffset = nAgt.indexOf('opera')) !== -1) {\n    browserName = Constants.browserName.opera;\n    fullVersion = nAgt.substring(verOffset + 6);\n    if ((verOffset = nAgt.indexOf(version)) !== -1) {\n      fullVersion = nAgt.substring(verOffset + 8);\n    }\n    codeBaseType = Constants.codeBaseType.chrome;\n  } else if ((verOffset = nAgt.indexOf('opr')) !== -1) {\n    browserName = Constants.browserName.opera;\n    fullVersion = nAgt.substring(verOffset + 4);\n    if ((verOffset = nAgt.indexOf(version)) !== -1) {\n      fullVersion = nAgt.substring(verOffset + 8);\n    }\n    codeBaseType = Constants.codeBaseType.chrome;\n  } else if ((verOffset = nAgt.indexOf('msie')) !== -1) { // In MSIE, the true version is after \"MSIE\" in userAgent\n    browserName = Constants.browserName.msie;\n    fullVersion = nAgt.substring(verOffset + 5);\n    codeBaseType = Constants.codeBaseType.chrome;\n  } else if ((verOffset = nAgt.indexOf('edge')) !== -1) {\n    browserName = Constants.browserName.edge;\n    fullVersion = nAgt.substring(verOffset + 5);\n    codeBaseType = Constants.codeBaseType.edge;\n  } else if ((verOffset = nAgt.indexOf('edg')) !== -1) {\n    browserName = Constants.browserName.edge;\n    fullVersion = nAgt.substring(verOffset + 4);\n    codeBaseType = Constants.codeBaseType.chrome;\n  } else if ((verOffset = nAgt.indexOf('chrome')) !== -1) { // In Chrome, the true version is after \"Chrome\"\n    browserName = Constants.browserName.chrome;\n    fullVersion = nAgt.substring(verOffset + 7);\n    codeBaseType = Constants.codeBaseType.chrome;\n  } else if ((verOffset = nAgt.indexOf('safari')) !== -1) { // In Safari, the true version is after \"Safari\" or after \"Version\"\n    browserName = Constants.browserName.safari;\n    fullVersion = nAgt.substring(verOffset + 7);\n    if ((verOffset = nAgt.indexOf(version)) !== -1) {\n      fullVersion = nAgt.substring(verOffset + 8);\n      if (fullVersion) {\n        let version = fullVersion.split(' ');\n        if (version && version.length > 0) {\n          fullVersion = version[0];\n        }\n      }\n    }\n    codeBaseType = Constants.codeBaseType.chrome;\n  } else if ((verOffset = nAgt.indexOf('firefox')) !== -1) { // In Firefox, the true version is after \"Firefox\"\n    browserName = Constants.browserName.firefox;\n    fullVersion = nAgt.substring(verOffset + 8);\n    codeBaseType = Constants.codeBaseType.firefox;\n  } else if ((verOffset = nAgt.indexOf('trident')) !== -1) { // IE 11 has no MSIE\n    browserName = Constants.browserName.msie;\n    verOffset = nAgt.indexOf('rv'); // In IE11, the true version is after \"rv\"\n    fullVersion = nAgt.substring(verOffset + 3, verOffset + 7);\n    codeBaseType = Constants.codeBaseType.chrome;\n  }\n\n  // system\n  // source: http://jsfiddle.net/ChristianL/AVyND/\n  let clientStrings = [\n    {s: 'Windows 3.11', r: /win16/},\n    {s: 'Windows 95', r: /(windows 95|win95|windows_95)/},\n    {s: 'Windows ME', r: /(win 9x 4.90|windows me)/},\n    {s: 'Windows 98', r: /(windows 98|win98)/},\n    {s: 'Windows CE', r: /windows ce/},\n    {s: 'Windows 2000', r: /(windows nt 5.0|windows 2000)/},\n    {s: 'Windows XP', r: /(windows nt 5.1|windows xp)/},\n    {s: 'Windows Server 2003', r: /windows nt 5.2/},\n    {s: 'Windows Vista', r: /windows nt 6.0/},\n    {s: 'Windows 7', r: /(windows 7|windows nt 6.1)/},\n    {s: 'Windows 8.1', r: /(windows 8.1|windows nt 6.3)/},\n    {s: 'Windows 8', r: /(windows 8|windows nt 6.2)/},\n    {s: 'Windows 10', r: /(windows 10|windows nt 10.0)/},\n    {s: 'Windows NT 4.0', r: /(windows nt 4.0|winnt4.0|winnt|windows nt)/},\n    {s: 'Windows ME', r: /windows me/},\n    {s: 'Android', r: /android/},\n    {s: 'Open BSD', r: /openbsd/},\n    {s: 'Sun OS', r: /sunos/},\n    {s: 'Linux', r: /(linux|x11)/},\n    {s: 'iOS', r: /(iphone|ipad|ipod)/},\n    {s: 'Mac OS X', r: /mac os x/},\n    {s: 'Mac OS', r: /(macppc|macintel|mac_powerpc|macintosh)/},\n    {s: 'QNX', r: /qnx/},\n    {s: 'UNIX', r: /unix/},\n    {s: 'BeOS', r: /beos/},\n    {s: 'OS/2', r: /os\\/2/},\n    {s: 'Search Bot', r: /(nuhk|googlebot|yammybot|openbot|slurp|msnbot|ask jeeves\\/teoma|ia_archiver)/},\n  ];\n\n  let id;\n  let cs;\n  for (id in clientStrings) {\n    if (!clientStrings.hasOwnProperty(id)) {\n      continue;\n    }\n    cs = clientStrings[id];\n    if (cs.r.test(nAgt)) {\n      osName = cs.s;\n      break;\n    }\n  }\n\n\n  if (osName && (/Windows/.test(osName))) {\n    osVersion = /Windows (.*)/.exec(osName)[1];\n    osName = Constants.osName.windows;\n  }\n\n  switch (osName) {\n    case Constants.osName.mac:\n      osVersion = /mac os x (1[\\.\\_\\d]+)/.exec(nAgt);\n      if (!osVersion) {\n        break;\n      }\n      osVersion = osVersion[1];\n      break;\n    case Constants.osName.android:\n      osVersion = /android ([\\.\\_\\d]+)/.exec(nAgt);\n      if (!osVersion) {\n        break;\n      }\n      osVersion = osVersion[1];\n      break;\n    case Constants.osName.ios:\n      if (!nVer) {\n        break;\n      }\n      osVersion = /os (\\d+)_(\\d+)_?(\\d+)?/.exec(nVer);\n      if (!osVersion) {\n        break;\n      }\n      osVersion = osVersion[1] + '.' + osVersion[2] + '.' + (osVersion[3] | 0);\n      break;\n  }\n\n  const splitWords = fullVersion.split(' ');\n  let browserVersion = fullVersion;\n  if (splitWords && splitWords.length > 0) {\n    browserVersion = splitWords[0];\n  }\n\n  return {\n    browserName: browserName,\n    browserVersion: browserVersion,\n    os: osName,\n    osVersion: osVersion,\n    codeBase: codeBaseType,\n    userAgent: userAgent,\n  };\n};\n","import {Constants} from './detectbrowser';\n\n\n/** Represents a adapter for the result of getStats*/\nclass StatsAdapter {\n  /**\n  * Create a StatsAdapter Component for parsing WebRTC getStats\n  * @param {Object} codeBase The codebase for the stats\n  * @param {Object} browser The browser for the stats\n  * @constructor\n  */\n  constructor(codeBase, browser) {\n    this.codeBase = codeBase;\n    this.browser = browser;\n  }\n\n  /**\n   * getIceCandidates - Obtains ice candidates from stats\n   *\n   * @param {Object} rawData - Raw data by browser on getstats call/promise.\n   *\n   * @return {Object} Ice candidate information\n   */\n  getIceCandidates(rawData) {\n    if (!rawData) {\n      return {localCandidates: [], remoteCandidates: [],\n        iceCandidatePairs: []};\n    }\n    let rawStats = this.extractRawStats(rawData);\n    let result = this.processRawStatsForIceInfo(rawStats);\n    return result;\n  }\n\n  /**\n   * extractRawStats - extracts the objects from raw stats\n   * @private\n   * @param {Object} rawStats raw stats from browser\n   *\n   * @return {Object[]} Array of Objects from raw stats\n   */\n  extractRawStats(rawStats) {\n    let results = [];\n    let key;\n\n    let firefox = Constants.codeBaseType.firefox;\n    let chrome = Constants.codeBaseType.chrome;\n    let safari = Constants.browserName.safari;\n    if (this.codeBase === firefox && this.browser !== safari) {\n      rawStats.forEach(function(item) {\n        results.push(item);\n      });\n    } else if (this.codeBase === chrome && this.browser !== safari) {\n      if (rawStats && rawStats.result) {\n        results = rawStats.result();\n      } else if (rawStats && rawStats.forEach) {\n        results = [];\n        rawStats.forEach(function(item) {\n          results.push(item);\n        });\n      }\n    } else {\n      for (key in rawStats) {\n        if (rawStats.hasOwnProperty(key)) {\n          results.push(rawStats[key]);\n        }\n      }\n    }\n    return results;\n  }\n\n  /**\n   * processRawStatsForIceInfo - process the raw stats to obtain ICE related information\n   *\n   * @param {Object} rawStats extracted raw stats\n   *\n   * @return {Object} Ice information\n   */\n  processRawStatsForIceInfo(rawStats) {\n    let localCandidates = [];\n    let remoteCandidates = [];\n    let candidatePairs = [];\n    let selectedCandidatePairId;\n\n    if (!rawStats) {\n      return {localCandidates: localCandidates, remoteCandidates: remoteCandidates,\n        iceCandidatePairs: candidatePairs};\n    }\n\n    for (let i = 0; i < rawStats.length; ++i) {\n      let parsedStats = this.getParsedStats(rawStats[i]);\n      let classifiedStats = this.statsClassifier(parsedStats);\n      if (classifiedStats.candidatePair) {\n        candidatePairs.push(classifiedStats.candidatePair);\n      } else if (classifiedStats.transportStats) {\n        if (classifiedStats.transportStats.type === 'transport') {\n          selectedCandidatePairId = classifiedStats.transportStats.selectedCandidatePairId;\n          continue;\n        }\n        candidatePairs.push(classifiedStats.transportStats);\n      } else if (classifiedStats.localCandidate) {\n        let cand = classifiedStats.localCandidate;\n        if (cand.candidateType == 'relay' || cand.candidateType == 'relayed') {\n          if (!cand.mozLocalTransport) {\n            // assume Chrome, get it from the priority\n            let relayType = cand.priority >> 24;\n            cand.mozLocalTransport = this.formatRelayType(relayType);\n          }\n          cand.mozLocalTransport = cand.mozLocalTransport.toLowerCase();\n        }\n        localCandidates.push(cand);\n      } else if (classifiedStats.remoteCandidate) {\n        remoteCandidates.push(classifiedStats.remoteCandidate);\n      }\n    }\n\n    if (selectedCandidatePairId) {\n      for (let i=0; i < candidatePairs.length; ++i) {\n        if (candidatePairs[i].id === selectedCandidatePairId) {\n          candidatePairs[i].googActiveConnection = 'true';\n        }\n      }\n    }\n\n    return {localCandidates: localCandidates, remoteCandidates: remoteCandidates,\n      iceCandidatePairs: candidatePairs};\n  }\n\n  /**\n   * getParsedStats - Parse the each raw stats object to dictionary\n   * @private\n   * @param {Object} rawStats raw stats object from browser\n   * @return {Object} parsed stats dictionary\n   */\n  getParsedStats(rawStats) {\n    let stats = {};\n    if (rawStats.timestamp instanceof Date) {\n      stats.timestamp = rawStats.timestamp.getTime().toString();\n    }\n\n    if (rawStats.type) {\n      stats.type = rawStats.type;\n    }\n\n    if (rawStats.names) {\n      let names = rawStats.names();\n      for (let i = 0; i < names.length; ++i) {\n        stats[names[i]] = rawStats.stat(names[i]);\n      }\n    } else {\n      Object.assign(stats, rawStats);\n    }\n\n    // for react-native, values is a array of objects each contains a single -\n    // stat value\n    if (stats.values) {\n      for (let i = 0; i < stats.values.length; i++) {\n        let values = stats.values[i];\n        Object.assign(stats, values);\n      }\n      delete stats.values;\n    }\n    return stats;\n  }\n\n  /**\n   * statsClassifier - classifies the parsed stats dictionary\n   * @private\n   * @param {Object} stats dictionary\n   * @return {Object} stats dictionary after on classification\n   */\n  statsClassifier(stats) {\n    let result = {};\n    let isType = (...expectedTypes) => {\n      for (let i = 0; i < expectedTypes.length; i++) {\n        let expectedType = expectedTypes[i];\n        if (stats.type === expectedType) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    let typeIsInbound = isType('inbound-rtp', 'inboundrtp');\n    let isRemote = (stats.isRemote === 'true' || stats.isRemote === true);\n    if (typeIsInbound || isType('outbound-rtp', 'outboundrtp')) {\n      result.tracks = {};\n      result.tracks.data = stats;\n      result.tracks.ssrc = stats.ssrc;\n      result.tracks.streamType = typeIsInbound ? 'inbound' : 'outbound';\n      result.tracks.reportType = 'local';\n      if (stats.isRemote !== undefined) {\n        result.tracks.reportType = isRemote ? 'remote' : 'local';\n      }\n    } else if (isType('candidatepair') && stats.selected) {\n      result.transportStats = stats;\n    } else if (isType('localcandidate', 'local-candidate')) {\n      result.localCandidate = stats;\n    } else if (isType('remotecandidate', 'remote-candidate')) {\n      result.remoteCandidate = stats;\n    } else if (isType('transport', 'googCandidatePair')) {\n      result.transportStats = stats;\n    } else if (isType('VideoBwe')) {\n      result.bwe = stats;\n    } else if (isType('track')) {\n      result.trackStats = stats;\n    } else if (isType('candidate-pair')) {\n      result.candidatePair = stats;\n    } else if (isType('codec')) {\n      result.codec = stats;\n    } else if (isType('ssrc')) {\n      result.tracks = {};\n      result.tracks.data = stats;\n      result.tracks.ssrc = stats.ssrc;\n      result.tracks.reportType = 'local';\n      result.tracks.streamType = (stats.bytesSent) ? 'outbound' : 'inbound';\n    }\n    return result;\n  }\n\n   /**\n    * formatRelayType - returns the formated realayType\n    *\n    * @param {Number} relayType\n    *\n    * @return {String} formated relayType string\n    */\n   formatRelayType(relayType) {\n    let ret = 'none';\n    switch (relayType) {\n      case 0:\n        ret = 'tls';\n        break;\n      case 1:\n        ret = 'tcp';\n        break;\n      case 2:\n        ret = 'udp';\n        break;\n    }\n    return ret;\n  }\n}\n\nexport {StatsAdapter};\n","import {Constants} from './detectbrowser';\nimport {StatsAdapter} from './statsadapter';\n\n/** Class that handles getStats */\nclass GetStatsHandler {\n  /**\n   * Creates an instance of GetStatsHandler.\n   * @param {Object} browserInfo\n   * @constructor\n   */\n  constructor(browserInfo) {\n    this.codeBase = browserInfo.codeBase;\n    this.browserName = browserInfo.browserName;\n\n    this.adapter = new StatsAdapter(this.codeBase, this.browserName);\n\n    this.isPromiseBased = true;\n  }\n\n  /**\n   * getIceCandidates - gets ice candiates information from getstats\n   * @param {Object} pc\n   * @public\n   * @return {Promise} promise resolves when the ice candiates are obtained from getstats\n   */\n  getIceCandidates(pc) {\n    let self = this;\n    return new Promise( function(resolve, reject) {\n      self.csioGetStats(self.iceCandidatesHandler.bind(self), pc, (candidatesObj) => {\n        resolve(candidatesObj);\n      });\n    });\n  }\n\n\n  /**\n   * iceCandidatesHandler - getstats callback handler for getting ice candidate information\n   * @param {Object} stats\n   * @param {Function} callback\n   * @private\n   */\n  iceCandidatesHandler(stats, callback) {\n    let candidatesObj = this.adapter.getIceCandidates(stats);\n    callback(candidatesObj);\n  }\n\n  /**\n   * Calls the broswer getStats promise or function\n   * @private\n   * @param {Function} statsHandler\n   * @param {Object} pc\n   * @param {Function} callback\n   *\n   */\n  csioGetStats(statsHandler, pc, callback) {\n    let firefox = Constants.codeBaseType.firefox;\n    let chrome = Constants.codeBaseType.chrome;\n    let edge = Constants.codeBaseType.edge;\n    let safari = Constants.browserName.safari;\n\n    if (!pc) {\n      return;\n    }\n\n    if (this.codeBase === firefox) {\n      this.getStatsFirefox(statsHandler, pc, callback);\n    } else if (this.browserName === safari) {\n      this.getStatsSafari(statsHandler, pc, callback);\n    } else if (this.codeBase === chrome) {\n      this.getStatsChrome(statsHandler, pc, callback);\n    } else if (this.codeBase === edge) {\n      this.getStatsEdge(statsHandler, pc, callback);\n    }\n  }\n\n  /**\n   * Calls the broswer getStats promise or function for firefox\n   * @private\n   * @memberof GetStatsHandler\n   * @param {Function} statsHandler\n   * @param {Object} pc\n   * @param {Function} callback\n   */\n  getStatsFirefox(statsHandler, pc, callback) {\n    let self = this;\n\n    if (!self.isPromiseBased) {\n      pc.getStats(null, (stats) => {\n        statsHandler(stats, callback);\n      }, () => {});\n      return;\n    }\n\n    try {\n      pc.getStats()\n      .then((stats) => {\n        statsHandler(stats, callback);\n      })\n      .catch(function(e) {\n        self.isPromiseBased = false;\n        pc.getStats(null, (stats)=>{\n          statsHandler(stats, callback);\n        }, () => {});\n      });\n    } catch (e) {\n      self.isPromiseBased = false;\n      pc.getStats(null, (stats) => {\n        statsHandler(stats, callback);\n      }, () => {});\n    }\n  }\n\n  /**\n   * Calls the broswer getStats promise or function for chrome\n   * @private\n   * @memberof GetStatsHandler\n   * @param {Function} statsHandler\n   * @param {Object} pc\n   * @param {Function} callback\n   */\n  getStatsChrome(statsHandler, pc, callback) {\n    let self = this;\n\n    if (window && window.csioReactNative) {\n      pc.getStats(null, (stats) => {\n        statsHandler(stats, callback);\n      },\n      function logError(e) {\n      });\n      return;\n    }\n\n    if (!self.isPromiseBased) {\n      pc.getStats((stats) => {\n        statsHandler(stats, callback);\n      });\n      return;\n    }\n\n    try {\n      pc.getStats()\n      .then((stats) => {\n        statsHandler(stats, callback);\n      })\n      .catch(function(e) {\n         // console.error('Error ', e);\n        self.isPromiseBased = false;\n        pc.getStats((stats) => {\n          statsHandler(stats, callback);\n        });\n      });\n    } catch (e) {\n      // todo @karthik can you please check whether it will be self.isPromiseBased or not ?\n      self.isPromiseBased = false;\n      pc.getStats((stats) => {\n        statsHandler(stats, callback);\n      });\n    }\n  }\n\n  /**\n   * Calls the broswer getStats for edge\n   * @private\n   * @memberof GetStatsHandler\n   * @param {Function} statsHandler\n   * @param {Object} pc\n   * @param {Function} callback\n   */\n  getStatsEdge(statsHandler, pc, callback) {\n    pc.getStats()\n    .then((stats) => {\n      statsHandler(stats, callback);\n    })\n    .catch(function(e) {\n    });\n  }\n\n  /**\n   * Calls the broswer getStats for safari\n   * @private\n   * @memberof GetStatsHandler\n   * @param {Function} statsHandler\n   * @param {Object} pc\n   * @param {Function} callback\n   */\n  getStatsSafari(statsHandler, pc, callback) {\n    pc.getStats()\n    .then((stats) => {\n       statsHandler(stats, callback);\n    })\n    .catch(function(e) {\n    });\n  }\n}\n\nexport {GetStatsHandler};\n","import {ParsedIceCandidate} from './utility/parsedIceCandidate';\nimport {GetStatsHandler} from './utility/stats/getstatshandler';\nimport {Constants} from './utility/stats/detectbrowser';\n\nconst ICE_CHECKING_TIMEOUT = 10000;\nconst CONNECTION_TIMEOUT = 30000;\n\nclass TurnConnection {\n  /**\n   * Create a new instance\n   * @param {Object} browserInfo\n   */\n  constructor(browserInfo) {\n    this.reset();\n\n    this.statshandler = new GetStatsHandler(browserInfo);\n  }\n\n  /**\n   * Reset the module\n   */\n  reset() {\n    this.disconnect();\n\n    this.iceServers = null;\n\n    this.pctpc1 = null;\n    this.pctpc2 = null;\n\n    this.sendChannel = null;\n\n    this.messageCallback = null;\n    this.errorCallback = null;\n\n    this.parsedIceResults = {};\n\n    this.resolveCb = null;\n    this.rejectCb = null;\n    this.localIpAddressInfo = [];\n    this.localIpAddresses = [];\n    this.localIp = null;\n    this.localIpType = null;\n    this.numberOfLocalIp = 0;\n  }\n\n  setMessageCallback(func) {\n    this.messageCallback = func;\n  }\n\n  setErrorCallback(func) {\n    this.errorCallback = func;\n  }\n\n  send(data) {\n    if (this.sendChannel && this.sendChannel.readyState === 'open') {\n      try {\n        this.sendChannel.send(data);\n      } catch (error) {\n        this.raiseSendError(new Error('Send channel Error'));\n      }\n    } else {\n      this.raiseSendError(new Error('No send channel'));\n    }\n  }\n\n  raiseSendError(error) {\n    if (this.errorCallback) {\n      this.errorCallback(error);\n    }\n    // console.error('sendChannel error:', error);\n  }\n\n  assignEvent(obj, ev, func) {\n    if (obj.addEventListener) {\n      obj.addEventListener(ev, func.bind(this), false);\n    } else if (obj.attachEvent) {\n      ev = 'on' + ev;\n      obj.attachEvent(ev, func.bind(this));\n    }\n  }\n\n  /**\n   * Start the TURN connection\n   * @param {JSON} iceServers\n   * @return {Promise} resolves when the datachannel is open\n   */\n  connect(iceServers) {\n    this.reset();\n\n    let promise = new Promise((resolve, reject) => {\n      this.resolveCb = resolve;\n      this.rejectCb = reject;\n    });\n\n    this.iceServers = iceServers;\n\n    let CSRTCPeerConnection = null;\n    try {\n      if (RTCPeerConnection) {\n        CSRTCPeerConnection = RTCPeerConnection;\n      } else if (webkitRTCPeerConnection) {\n        CSRTCPeerConnection = webkitRTCPeerConnection;\n      } else if (mozRTCPeerConnection) {\n        CSRTCPeerConnection = mozRTCPeerConnection;\n      } else if (window && window.RTCPeerConnection) {\n        CSRTCPeerConnection = window.RTCPeerConnection;\n      }\n\n      if (!CSRTCPeerConnection) {\n        let err = new Error('RTCPeerConnection not found');\n        err.continueFlag = false,\n        this.rejectCb(err);\n        return promise;\n      }\n    } catch (err) {\n        err.continueFlag = false,\n        this.rejectCb(err);\n        return promise;\n    }\n\n    // Settings\n    let datachannelLabel = 'precalltest';\n    let datachannelSettings = {\n      ordered: false,\n      maxRetransmits: 0,\n    };\n    let servers = {\n      'iceTransportPolicy': 'all',\n      'iceServers': this.iceServers,\n    };\n    // console.log('ICE servers:', servers);\n\n    // PeerConnection objects\n    try {\n      this.pctpc1 = new CSRTCPeerConnection(servers);\n      this.pctpc2 = new CSRTCPeerConnection(servers);\n    } catch (err) {\n      // console.error('Error creating PCs:', err);\n      this.rejectDisconnect(false, new Error('Error creating PCs'));\n      return promise;\n    }\n\n    // console.log('created pcs:', this.pctpc1, this.pctpc2);\n\n    // make sure the connection gets closed at some point\n    this.connectionTimer = setTimeout(() => {\n      // console.error('Connection timeout');\n      delete this.connectionTimer;\n      this.rejectDisconnect(false, new Error('Connection timeout'));\n    }, CONNECTION_TIMEOUT);\n\n    try {\n      // Datachannel as only source\n      this.sendChannel = this.pctpc1.createDataChannel(datachannelLabel, datachannelSettings);\n       // console.log('created datachannel');\n      this.sendChannel.binaryType = 'arraybuffer';\n      this.assignEvent(this.sendChannel, 'error', (error) => {\n        // console.error('Datachannel error:', error);\n        this.raiseSendError(new Error('Datachannel error'));\n        this.rejectDisconnect(true, new Error('Datachannel error'));\n      });\n       // console.log('add onerror event');\n      this.assignEvent(this.pctpc2, 'datachannel', (event) => {\n        let channel = event.channel;\n        this.assignEvent(channel, 'open', (event) => {\n          if (this.resolveCb) {\n            this.resolveCb();\n            this.resolveCb = null;\n          }\n        });\n        this.assignEvent(channel, 'close', (event) => {\n          if (this && this.disconnect) {\n            // console.log('datachannel close');\n            this.disconnect();\n          }\n        });\n        this.assignEvent(channel, 'message', (event) => {\n          if (this.messageCallback) {\n            this.messageCallback(event.data);\n          }\n        });\n        this.assignEvent(channel, 'error', (error) => {\n          if (this.errorCallback) {\n            this.errorCallback(error);\n          }\n          // console.error('receiveChannel error:', error);\n          this.rejectDisconnect(true, new Error('receiveChannel error'));\n        });\n      });\n    } catch (err) {\n      // console.error('Error adding datachannel:', err);\n      this.rejectDisconnect(false, new Error('Error adding datachannel'));\n      return promise;\n    }\n\n    try {\n      // Set callbacks for connection procedure\n      this.assignEvent(this.pctpc1, 'icecandidate', (e) => {\n        this.onIceCandidate(this.pctpc1, e);\n      });\n      this.assignEvent(this.pctpc1, 'iceconnectionstatechange', (e) => {\n        this.onIceStateChange(this.pctpc1, e);\n      });\n\n      this.assignEvent(this.pctpc2, 'icecandidate', (e) => {\n        this.onIceCandidate(this.pctpc2, e);\n      });\n      this.assignEvent(this.pctpc2, 'iceconnectionstatechange', (e) => {\n        this.onIceStateChange(this.pctpc2, e);\n      });\n\n      // Start connection procedure\n      // console.log('pctpc1 createOffer start');\n      this.pctpc1.createOffer()\n      .then(\n        (desc, test) => {\n          this.onCreateOfferSuccess(desc);\n        },\n        (e) => {\n          this.onCreateOfferError(this.pctpc1, e);\n        }\n      );\n    } catch (err) {\n      // console.error('Error starting connection:', err);\n      this.rejectDisconnect(false, new Error('Error starting connection'));\n      return promise;\n    }\n\n    return promise;\n  }\n\n  /**\n   * Reject and disconnect\n   * @param {Boolean} continueFlag indicate if it should be tried again\n   * @param {Error} err the occured error\n   */\n  rejectDisconnect(continueFlag, err) {\n    this.disconnect();\n    if (this.rejectCb) {\n      // console.log('rejectDisconnect');\n      err.continueFlag = continueFlag;\n      this.rejectCb(err);\n    }\n\n    this.resolveCb = null;\n    this.rejectCb = null;\n  }\n\n  /**\n   * Stop the precall tests\n   */\n  disconnect() {\n    // console.log('disconnect');\n    clearTimeout(this.connectionTimer);\n    clearTimeout(this.iceTimer);\n    if (this.sendChannel) {\n      try {\n        this.sendChannel.close();\n      } catch (err) {\n        // console.error(err);\n      }\n    }\n\n    if (this.pctpc1) {\n      try {\n        this.pctpc1.close();\n      } catch (err) {\n        // console.error(err);\n      }\n    }\n    this.pctpc1 = null;\n\n    if (this.pctpc2) {\n      try {\n        this.pctpc2.close();\n      } catch (err) {\n        // console.error(err);\n      }\n    }\n    this.pctpc2 = null;\n  }\n\n  /*\n   * PRIVATE: Methods for connection procedure\n   */\n  getName(pc) {\n    return (pc === this.pctpc1) ? 'pctpc1' : 'pctpc2';\n  }\n\n  getOtherPc(pc) {\n    return (pc === this.pctpc1) ? this.pctpc2 : this.pctpc1;\n  }\n\n  onCreateOfferError(pc, error) {\n    // console.error('Failed to create offer: ' + error.toString());\n    this.rejectDisconnect(false, new Error('Failed to create offer'));\n  }\n\n  onCreateAnswerError(pc, error) {\n    // console.error('Failed to create answer: ' + error.toString());\n    this.rejectDisconnect(false, new Error('Failed to create answer'));\n  }\n\n  onCreateOfferSuccess(desc) {\n    try {\n      // console.log('Offer from pctpc1, pctpc1 setLocalDescription start', this.pctpc1);\n      this.pctpc1.setLocalDescription(desc).then(\n        () => {\n          this.onSetLocalSuccess(this.pctpc1);\n        },\n        (e) => {\n          this.onSetSessionDescriptionError(this.pctpc1, e);\n        }\n      );\n       // console.log('pctpc2 setRemoteDescription start');\n      this.pctpc2.setRemoteDescription(desc).then(\n        () => {\n          this.onSetRemoteSuccess(this.pctpc2);\n        },\n        (e) => {\n          this.onSetRemoteSessionDescriptionError(this.pctpc2, e);\n        }\n      );\n      // console.log('pctpc2 createAnswer start');\n      // Since the 'remote' side has no media stream we need\n      // to pass in the right constraints in order for it to\n      // accept the incoming offer of audio and video.\n      this.pctpc2.createAnswer().then(\n        (desc) => {\n          this.onCreateAnswerSuccess(desc);\n        },\n        (e) => {\n          this.onCreateAnswerError(this.pctpc2, e);\n        }\n      );\n    } catch (err) {\n      // console.error('Error processing offer:', err);\n      this.rejectDisconnect(false, new Error('Error processing offer'));\n    }\n  }\n\n  onSetLocalSuccess(pc) {\n     (this.getName(pc) + ' setLocalDescription complete');\n  }\n\n  onSetRemoteSuccess(pc) {\n     (this.getName(pc) + ' setRemoteDescription complete');\n  }\n\n  onSetSessionDescriptionError(pc, error) {\n    // console.error('Failed to set session description: ' + error.toString());\n    this.rejectDisconnect(false, new Error('Failed to set session description'));\n  }\n\n  onSetRemoteSessionDescriptionError(pc, error) {\n    // console.error('Failed to set session description: ' + error.toString());\n    this.rejectDisconnect(false, new Error('Failed to set session description'));\n  }\n\n  onCreateAnswerSuccess(desc) {\n    try {\n      // console.log('Answer from pctpc2, pctpc2 setLocalDescription start');\n      this.pctpc2.setLocalDescription(desc).then(\n        () => {\n          this.onSetLocalSuccess(this.pctpc2);\n        },\n        (e) => {\n          this.onSetSessionDescriptionError(this.pctpc2, e);\n        }\n      );\n      // console.log('pctpc1 setRemoteDescription start');\n      this.pctpc1.setRemoteDescription(desc).then(\n        () => {\n          this.onSetRemoteSuccess(this.pctpc1);\n        },\n        (e) => {\n          this.onSetRemoteSessionDescriptionError(this.pctpc1, e);\n        }\n      );\n    } catch (err) {\n      // console.error('Error processing answer:', err);\n      this.rejectDisconnect(false, new Error('Error processing answer'));\n    }\n  }\n\n  onIceCandidate(pc, event) {\n    try {\n      // null - indicates iceGatheringState is complete\n      if (!event.candidate) {\n        return;\n      }\n      // end-of-candidates -  indicates end of generation of candidates\n      // https://github.com/w3c/webrtc-pc/issues/1952#issuecomment-416645360\n      if (!event.candidate.candidate) {\n        return;\n      }\n\n      // only add relay candidates\n      let parsed = new ParsedIceCandidate(event.candidate);\n\n      if (pc == this.pctpc1) {\n        // console.log('candidate:', parsed.getType(), parsed);\n\n        if (this.statshandler.codeBase == Constants.codeBaseType.chrome) {\n          // check seen candidates for Chrome (doesn't work reliably with getStats)\n          if (parsed.isRelay()) {\n            if (parsed.isTypeTransportUdp()) {\n              this.parsedIceResults.relayUdpGathered = true;\n            }\n            if (parsed.isTypeTransportTcp()) {\n              this.parsedIceResults.relayTcpGathered = true;\n            }\n            if (parsed.isTypeTransportTls()) {\n              this.parsedIceResults.relayTlsGathered = true;\n            }\n          }\n\n          if (parsed.isServerReflexive()) {\n            this.parsedIceResults.srflxGathered = true;\n          }\n        }\n      }\n\n      if (!parsed.isRelay()) {\n        if (!this.localIpAddresses.includes(parsed.getIpAddress())) {\n          this.localIpAddresses.push(parsed.getIpAddress());\n          this.localIpAddressInfo.push({\n            ip: parsed.getIpAddress(),\n            candidateType: parsed.getType(),\n            networkType: 'unknown',\n          });\n          if (parsed.isPublicIp()) {\n            this.numberOfLocalIp++;\n          }\n        }\n        if (parsed.isPublicIp() && this.localIp === null) {\n          this.localIp = parsed.getIpAddress();\n          this.localIpType = parsed.getType();\n        }\n        return;\n      }\n\n      this.getOtherPc(pc).addIceCandidate(event.candidate)\n      .then(\n        () => {\n          this.onAddIceCandidateSuccess(pc);\n        },\n        (err) => {\n          this.onAddIceCandidateError(pc, err, parsed.isRelay());\n        }\n      );\n    } catch (err) {\n      // console.error('Error processing ICE candidate:', err);\n      this.rejectDisconnect(false, err);\n    }\n  }\n\n  onAddIceCandidateSuccess(pc) {\n     (this.getName(pc) + ' addIceCandidate success');\n  }\n\n  onAddIceCandidateError(pc, error, isRelay) {\n    // console.error(this.getName(pc) + ' failed to add ICE Candidate: ' + error.toString());\n    if (isRelay) {\n      this.rejectDisconnect(false, new Error('failed to add ICE Candidate'));\n    }\n  }\n\n  onIceStateChange(pc, event) {\n    try {\n      let newstate = '(?)';\n      if (pc) {\n        newstate = pc.iceConnectionState;\n      }\n      if (newstate === 'failed') {\n        // console.error('ICE failure');\n        this.rejectDisconnect(true, new Error('ICE failure'));\n      }\n\n      // timeout, since chrome seems to be stuck in checking\n      if (newstate === 'checking' && !this.iceTimer) {\n        this.iceTimer = setTimeout(() => {\n          delete this.iceTimer;\n          // console.error('ICE timeout');\n          this.rejectDisconnect(true, new Error('ICE timeout'));\n        }, ICE_CHECKING_TIMEOUT);\n      }\n      if (newstate === 'completed' || newstate === 'connected') {\n        clearTimeout(this.iceTimer);\n        delete this.iceTimer;\n      }\n\n      // console.warn('ICE state change:', newstate);\n    } catch (err) {\n      // console.error('Error processing ICE state change:', err);\n      this.rejectDisconnect(false, new Error('Error processing ICE state change'));\n    }\n  }\n\n  getIceResults() {\n    return new Promise((resolve, reject) => {\n      let iceServers = JSON.parse(JSON.stringify(this.iceServers)); // deepcopy, needed for react native\n      for (let i = 0; i < iceServers.length; i++) {\n        let server = iceServers[i];\n        if (!iceServers.hasOwnProperty(server)) {\n          delete server.credential;\n        }\n      };\n\n      let iceResults = {\n        turnIpAddress: '',\n        turnIpVersion: '',\n        turnTransport: '',\n        iceServers: iceServers,\n        ipv6Supported: false,\n        ipv4Supported: false,\n        relayTlsGathered: false,\n        relayTcpGathered: false,\n        relayUdpGathered: false,\n        srflxGathered: false,\n        relayTlsSuccess: false,\n        relayTcpSuccess: false,\n        relayUdpSuccess: false,\n        srflxSuccess: false,\n        localIpAddressInfo: [],\n        localIP: '',\n        numberOfLocalIPs: 0,\n        localIPType: '',\n        localIPNetworkType: '',\n      };\n\n      // merge results from parsed ICE candidates (to get Chrome's seen candidates)\n      for (let entry in this.parsedIceResults) {\n        if (this.parsedIceResults.hasOwnProperty(entry)) {\n          iceResults[entry] = this.parsedIceResults[entry];\n        }\n      }\n\n      // get stats\n      if (!this.pctpc1) {\n        reject(new Error('PC not available for stats'));\n        return;\n      }\n      this.statshandler.getIceCandidates(this.pctpc1).then((results) => {\n         // console.log('ICE results:', results);\n        iceResults.localIP = this.localIp;\n        iceResults.localIPType = this.localIpType;\n        iceResults.numberOfLocalIPs = this.numberOfLocalIp;\n        for (let j = 0; j < this.localIpAddressInfo.length; j++) {\n          let ipInfo = this.localIpAddressInfo[j];\n          for (let i = 0; i < results.localCandidates.length; i++) {\n            let candidate = results.localCandidates[i];\n            let ip = null;\n            if (candidate.ip) {\n              ip = candidate.ip;\n            } else if (candidate.address) {\n              ip = candidate.address;\n            } else {\n              ip = candidate.ipAddress;\n            }\n            if (ip === ipInfo.ip && candidate.networkType !== 'unknown') {\n              ipInfo.networkType = candidate.networkType;\n            }\n          }\n          iceResults.localIpAddressInfo.push(ipInfo);\n        }\n\n        let foundActiveCand = false;\n        for (let i = 0; i < results.iceCandidatePairs.length; i++) {\n          let pair = results.iceCandidatePairs[i];\n          const googActiveConnection = typeof pair.googActiveConnection === 'string' ?\n              pair.googActiveConnection === 'true' : pair.googActiveConnection;\n          const selected = typeof pair.selected === 'string' ?\n              pair.selected === 'true' : pair.selected;\n          if (googActiveConnection || selected) {\n            for (let i = 0; i < results.localCandidates.length; i++) {\n              let cand = results.localCandidates[i];\n              // figure out IP address\n              let ip = null;\n              if (cand.ip) {\n                ip = cand.ip;\n              } else if (cand.address) {\n                ip = cand.address;\n              } else {\n                ip = cand.ipAddress;\n              }\n\n              // fill infos for active pair\n              if (cand.id == pair.localCandidateId) {\n                 // console.log('Active candidate local transport:', cand);\n\n                iceResults.turnIpAddress = ip;\n                iceResults.turnNetworkType = cand.networkType;\n                iceResults.localIPNetworkType = cand.networkType;\n                let ipv6 = ip.indexOf(':') !== -1;\n                iceResults.turnIpVersion = ipv6?'ipv6':'ipv4';\n\n                iceResults.turnTransport = cand.mozLocalTransport;\n\n                foundActiveCand = true;\n              }\n              /* For Chrome, the active candidate sometimes is not in 'succeeded' state,\n                  so it would not trigger the normal relay*Succeeded setting below ..\n              */\n              if (cand.candidateType === 'relay' || cand.candidateType === 'relayed') {\n                if (cand.mozLocalTransport === 'udp') {\n                  iceResults.relayUdpSuccess = true;\n                }\n                if (cand.mozLocalTransport === 'tcp') {\n                  iceResults.relayTcpSuccess = true;\n                }\n                if (cand.mozLocalTransport === 'tls') {\n                  iceResults.relayTlsSuccess = true;\n                }\n              }\n\n              if (!ip) {\n                continue;\n              }\n              // IPv6 candidate seen?\n              if (ip.indexOf(':') !== -1) {\n                iceResults.ipv6Supported = true;\n              } else {\n                iceResults.ipv4Supported = true;\n              }\n            }\n          }\n        }\n\n        // NOTE candidate and pair checking is unreliable for getStats (e.g. chrome doesnt necessarily generate stats for all candidates)\n\n        // check for existing candidates\n        for (let i = 0; i < results.localCandidates.length; i++) {\n          let cand = results.localCandidates[i];\n          if (cand.candidateType === 'relay' || cand.candidateType === 'relayed') {\n            if (cand.mozLocalTransport === 'udp') {\n              iceResults.relayUdpGathered = true;\n            }\n            if (cand.mozLocalTransport === 'tcp') {\n              iceResults.relayTcpGathered = true;\n            }\n            if (cand.mozLocalTransport === 'tls') {\n              iceResults.relayTlsGathered = true;\n            }\n          }\n\n          if (cand.candidateType === 'srflx' || cand.candidateType === 'serverreflexive') {\n            iceResults.srflxGathered = true;\n          }\n        }\n\n        // check for successful pairs\n        for (let i = 0; i < results.iceCandidatePairs.length; i++) {\n          let pair = results.iceCandidatePairs[i];\n          if (pair.state === 'succeeded') {\n            for (let i = 0; i < results.localCandidates.length; i++) {\n              let cand = results.localCandidates[i];\n              if (cand.id == pair.localCandidateId) {\n                if (cand.candidateType === 'relay' || cand.candidateType === 'relayed') {\n                  if (cand.mozLocalTransport === 'udp') {\n                    iceResults.relayUdpSuccess = true;\n                  }\n                  if (cand.mozLocalTransport === 'tcp') {\n                    iceResults.relayTcpSuccess = true;\n                  }\n                  if (cand.mozLocalTransport === 'tls') {\n                    iceResults.relayTlsSuccess = true;\n                  }\n                }\n\n                if (cand.candidateType === 'srflx' || cand.candidateType === 'serverreflexive') {\n                  iceResults.srflxSuccess = true;\n                }\n              }\n            }\n          }\n        }\n\n        if (!foundActiveCand) {\n          // console.error('Active ICE candidate pair not found.');\n        }\n        resolve(iceResults);\n      },\n      (e) => {\n        reject(e);\n      });\n    },\n    (e) => {\n      reject(e);\n    });\n  }\n}\n\nexport {TurnConnection};\n","/** @module Timestamps */\n\n/** Return the current timestamp with millisecond accuracy if available\n * @return {Number} The timestamp\n * @public */\nexport function getCurrent() {\n  if (!window || !window.performance || !window.performance.now) {\n    return Date.now();\n  }\n  if (!window.performance.timing || !window.performance.timing.navigationStart) {\n    return Date.now();\n  }\n  return window.performance.now() + window.performance.timing.navigationStart;\n}\n","/** A base class for tests that need the TURN server */\nclass TurnTest {\n  /** Create a new instance (normally with super())\n   * @param {TurnConnection} connection the connection to the TURN server\n   */\n  constructor(connection) {\n    this.connection = connection;\n    this.active = false;\n\n    this.results = {};\n  }\n\n  /*\n   * Public functions\n   */\n\n  /** Returns the obtained results from the test\n   * @return {Object} the results\n   * @public\n   */\n  getResults() {\n    return this.results;\n  }\n\n  /** Start the tests\n   * @return {Promise} resolve when test is completed successfully\n   * @public\n   */\n  start() {\n    let promise = new Promise((resolve, reject) => {\n      this.resolveCb = resolve;\n      this.rejectCb = reject;\n    });\n\n    this.connection.setMessageCallback(this.handleMessage.bind(this));\n    this.connection.setErrorCallback(this.handleError.bind(this));\n\n    this.active = true;\n    this.forceStopped = false;\n    this.initiate();\n\n    return promise;\n  }\n\n  /** Stop the test\n   * @protected */\n  stop() {\n    this.active = false;\n  }\n\n  /** Force the test to stop\n   * @public\n   */\n  forceStop() {\n    this.forceStopped = true;\n    this.stop();\n    this.finished();\n  }\n\n  /** Returns if this test is currently running\n   * @return {Boolean} active or not\n   * @public\n   */\n  isActive() {\n    return this.active;\n  }\n\n  /*\n   * Override functions\n   */\n\n  /** Initiate the test sequence\n   * @protected\n   */\n  initiate() {\n    // console.error('initiate not implemented');\n  }\n\n  /** Handle the response for a sent msg\n   * @param {String} msg The received message\n   * @protected\n   */\n  handleMessage(msg) {\n    // console.error('handleMessage not implemented');\n  }\n\n  /** Handle an error occuring on the connection's datachannel\n   * @param {Error} error The received message\n   * @protected\n   */\n  handleError(error) {\n    // console.error('handleError not implemented');\n  }\n\n  /*\n   * Protected functions\n   */\n\n  /** Send data through the connection\n   * @param {String} msg The message to send\n   * @protected\n   */\n  send(msg) {\n    this.connection.send(msg);\n  }\n\n  /** The test finished successful.\n   * WARNING finished() or failed() HAS to be called by the inherited class\n   * @protected\n   */\n  finished() {\n    this.active = false;\n    if (this.resolveCb) {\n      this.resolveCb();\n      this.resolveCb = null;\n    }\n  }\n\n  /** The test failed.\n   * WARNING finished() or failed() HAS to be called by the inherited class\n   * @param {Error} error The error that was raised\n   * @protected\n   */\n  failed(error) {\n    this.active = false;\n    if (this.rejectCb) {\n      this.rejectCb(error);\n      this.rejectCb = null;\n    }\n  }\n}\n\nexport {TurnTest};\n","import * as Timestamps from '../utility/timestamps';\n/* eslint require-jsdoc: 0 */\n\nimport {TurnTest} from './turnTest';\n\nconst RTTSAMPLES = 10;\nconst TIMEOUT = 100; // ms\nconst LAST_TIMEOUT = 500; // ms\n\nclass RttTest extends TurnTest {\n  constructor(connection) {\n    super(connection);\n\n    this.sendTimer = null;\n    this.countSent = 0;\n    this.rtts = [];\n  }\n\n  /*\n   * Override functions\n   */\n  initiate() {\n    this.results.startTimestamp = Timestamps.getCurrent();\n    this.sendPing();\n  }\n\n  handleMessage(msg) {\n    if (!this.isActive()) {\n      return;\n    }\n\n    let sentTs = parseInt(msg, 10);\n    let rtt = this.calculateRtt(sentTs); // ms\n\n    this.rtts.push(rtt);\n    if (this.countSent < RTTSAMPLES) {\n      this.sendPing();\n      return;\n    }\n\n    // enough samples arrived\n    this.calculateMetrics();\n  }\n\n  handleError(error) {\n    this.fillResults();\n\n    this.failed(error);\n  }\n\n  /*\n   * Private functions\n   */\n  sendPing() {\n    if (!this.isActive()) {\n      return;\n    }\n\n    let now = Timestamps.getCurrent(); // ms\n    this.send(now.toString());\n    this.countSent += 1;\n\n    // cancel timer\n    if (this.sendTimer) {\n      clearTimeout(this.sendTimer);\n      this.sendTimer = null;\n    }\n    // setup timer\n    if (this.countSent < RTTSAMPLES) {\n      this.sendTimer = setTimeout(this.sendPing.bind(this), TIMEOUT);\n      return;\n    }\n    this.sendTimer = setTimeout(this.calculateMetrics.bind(this), LAST_TIMEOUT);\n  }\n\n  calculateRtt(sentTs) {\n    let now = Timestamps.getCurrent();\n    return now - sentTs;\n  }\n\n  calculateMetrics() {\n    if (this.sendTimer) {\n      clearTimeout(this.sendTimer);\n      this.sendTimer = null;\n    }\n\n    this.fillResults();\n\n    this.finished();\n  }\n\n  fillResults() {\n    this.results.sentMessages = this.countSent;\n    this.results.unAckedMessages = this.countSent - this.rtts.length;\n    this.results.maxMessages = RTTSAMPLES;\n    this.results.forceStopped = this.forceStopped;\n\n    this.results.median = this.median();\n    this.results.average = this.average();\n\n    /* use standard deviation instead of variance\n    when calculating jitter\n    ToDo: clean up the code so that key 'variance'\n    is not used instead of std  */\n    this.results.variance = this.std();\n\n    this.results.endTimestamp = Timestamps.getCurrent();\n  }\n\n  median() {\n    if (this.rtts.length == 0) {\n      return LAST_TIMEOUT;\n    }\n\n    // the middle entry of the sorted list\n    this.rtts.sort();\n    let half = Math.floor(this.rtts.length/2);\n    return this.rtts[half];\n  }\n\n  average() {\n    if (this.rtts.length == 0) {\n      return LAST_TIMEOUT;\n    }\n\n    let sum = 0;\n    for (let i = 0; i < this.rtts.length; i++ ) {\n      sum += this.rtts[i];\n    }\n    return sum / this.rtts.length;\n  }\n\n  variance() {\n    if (this.rtts.length == 0) {\n      return LAST_TIMEOUT;\n    }\n\n    let variance = 0;\n    let average = this.average();\n    for (let i = 0; i < this.rtts.length; i++) {\n      let rtt = this.rtts[i];\n      variance += Math.pow(rtt - average, 2);\n    }\n    variance /= this.rtts.length;\n    return variance;\n  }\n\n  std() {\n    let variance = this.variance();\n    if (variance <= 0) {\n      return 0;\n    }\n    let std = Math.sqrt(variance);\n    return std;\n  }\n\n  stop() {\n    if (!this.isActive()) {\n      return;\n    }\n    super.stop();\n    this.fillResults();\n  }\n}\n\nexport {RttTest};\n","import * as Timestamps from '../utility/timestamps';\n\n\n/** Create a random string\n * @param {Integer} length The length of the string\n * @return {String} The string of a certain length\n */\nfunction randomAsciiString(length) {\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    // Visible ASCII chars are between 35 and 93.\n    result += String.fromCharCode(35 + Math.random() * (93-35));\n  }\n  return result;\n}\n\n/** Class produces strings of a certain length that contain a timestamp.\n * Due to the timestamp, the message is always unique, although the padding is constant.\n * The random padding ensures that the effect of compression in the network is mitigated.\n * Since the timestamp should be kept in float, the size of the message might vary by a few bytes. */\nclass MessageMaker {\n  /** Create a new object\n   * @param {Integer} size The total size of the message\n   */\n  constructor(size = 1200) {\n    this.message = {timestamp: '', sentBytes: 10000, padding: ''};\n\n    const TIMESTAMP_BYTES = Timestamps.getCurrent().toString().length;\n    const MESSAGE_BYTES = JSON.stringify(this.message).length;\n    const PADDING = randomAsciiString(size - TIMESTAMP_BYTES - MESSAGE_BYTES);\n\n    // NOTE somehow this creates slightly too big messages?\n    this.message.padding = PADDING;\n  }\n\n  /** Make a new message\n   * @param {Number} sentBytes the amount of bytes sent so far\n   * @return {String} The message\n   * @public\n   */\n  make(sentBytes) {\n    this.message.timestamp = Timestamps.getCurrent();\n    this.message.sentBytes = sentBytes;\n    return JSON.stringify(this.message);\n  }\n}\n\nexport {MessageMaker, randomAsciiString};\n","import * as Timestamps from '../utility/timestamps';\nimport {MessageMaker} from '../utility/messageMaker';\n/* eslint require-jsdoc: 0 */\n\nimport {TurnTest} from './turnTest';\n\nclass ThroughputTest extends TurnTest {\n  constructor(connection, rtt, loss) {\n    super(connection);\n\n    this.sentBytes = 0;\n    this.receivedBytes = 0;\n    this.secondHalfBytes = 0;\n    this.secondHalfStart = null;\n    this.bufferEmpty = 1;\n\n    this.chunkSize = 1200;\n    this.messageMaker = new MessageMaker(this.chunkSize);\n\n    this.duration = 5000; // ms\n    if (rtt != null) {\n      // duration is dependent on RTT, upper bound 10 s, lower bound 1 s\n      // it seems 50 RTTs is needed for reliable testing\n      let duration = 50 * rtt;\n      this.duration = Math.max(Math.min(duration, 10*1000), 1*1000);\n    }\n    this.sendTimer = null;\n\n    this.intervals = [];\n    this.intervalStart = 0;\n    this.intervalLength = 100; // ms\n    this.intervalBytes = 0;\n    this.loss = loss;\n    this.lastReceivedTimestamp = 0;\n  }\n\n  /*\n   * Override functions\n   */\n  initiate() {\n    if (window && window.csioReactNative) {\n      /* NOTE react-native does not support RTCDataChannel.bufferedAmount, so it\n          is stuck in a loop when putting data to the buffer.\n          Also, when it is ever supported, there is no removeEventListener which has be taken care of */\n      let errMsg = 'Not running throughput test for react-native';\n      // console.error(errMsg);\n      this.handleError(new Error(errMsg));\n      return;\n    }\n    // console.log('start', this.duration);\n    this.startSend();\n  }\n\n  handleMessage(msg) {\n    if (!this.isActive()) {\n      return;\n    }\n\n    // save last received message for loss calculations\n    this.lastMessage = msg;\n\n    // count the total received bytes\n    this.receivedBytes += msg.length;\n\n    // record start time, and set timer to stop\n    let now = Timestamps.getCurrent();\n    this.lastReceivedTimestamp = now;\n    if (!this.sendTimer) {\n      this.results.startTimestamp = now;\n      this.sendTimer = setTimeout(() => {\n        this.stop();\n        this.finished();\n      }, this.duration);\n    }\n\n    // calculate intervals\n    if (this.intervalStart == 0) {\n      this.intervalStart = now;\n    }\n    this.intervalBytes += msg.length;\n    if (now - this.intervalStart >= this.intervalLength) {\n      // average throughput\n      let intervalDuration = now - this.intervalStart; // ms\n      let intervalAvg = this.averageThroughput(this.intervalBytes, intervalDuration);\n\n      // RTT\n      let rtt = null;\n      try {\n        let msgJson = JSON.parse(this.lastMessage);\n        rtt = now - msgJson.timestamp;\n      } catch (e) {\n        // console.error('Error parsing msg:', msg, e);\n      }\n\n      // add and reset\n      this.intervals.push({\n        'startTimestamp': this.intervalStart,\n        'endTimestamp': now,\n        'bytesReceived': this.intervalBytes,\n        'average': intervalAvg,\n        'rtt': rtt,\n      });\n\n      this.intervalStart = now;\n      this.intervalBytes = 0;\n    }\n\n    // calculation for second half of the connection\n    if (this.results.startTimestamp && now - this.results.startTimestamp > this.duration/2) {\n      if (!this.secondHalfStart) {\n        this.secondHalfStart = now;\n      }\n      this.secondHalfBytes += msg.length;\n    }\n  }\n\n  handleError(error) {\n    this.stop();\n\n    this.failed(error);\n  }\n\n  /*\n   * Private functions\n   */\n  averageThroughput(bytes, milliseconds) {\n    if (milliseconds === 0) {\n      return 0;\n    }\n    let seconds = milliseconds/1000.0;\n    let avg = ((bytes / seconds) * 8.0 ) / 1024.0; // kbps\n    return avg;\n  }\n\n   // Listen for one bufferedamountlow event.\n  bufferListener() {\n    this.sendChannel.removeEventListener('bufferedamountlow', this.bufferListener.bind(this));\n    this.fillBuffer();\n  }\n\n  fillBuffer() {\n    // NOTE bufferedAmount might be 0 when the event is processed too late\n    if (this.sendChannel.bufferedAmount == 0) {\n      this.bufferEmpty += 1;\n    }\n\n    while (this.isActive()) {\n      if (this.sentBytes > 1000000) {\n        break;\n      }\n      if (this.sendChannel.bufferedAmount > this.bufferFullThreshold) {\n        if (this.usePolling) {\n          setTimeout(this.fillBuffer.bind(this), 250); // max rate: 11Mbps <= (300 * 1200 Bytes) / 0.25 s\n        } else {\n          this.sendChannel.addEventListener('bufferedamountlow', this.bufferListener.bind(this));\n        }\n        return;\n      }\n      let message = this.messageMaker.make(this.sentBytes);\n      this.sentBytes += message.length;\n      this.send(message);\n    }\n    this.sendChannel.removeEventListener('bufferedamountlow', this.bufferListener.bind(this));\n  }\n\n  startSend() {\n    if (!this.isActive()) {\n      return;\n    }\n\n    // the amount of data to be buffered\n    this.bufferFullThreshold = 1000 * this.chunkSize;\n    this.sendChannel = this.connection.sendChannel;\n    this.usePolling = true;\n    if (typeof this.sendChannel.bufferedAmountLowThreshold === 'number') {\n       // console.log('Using the bufferedamountlow event for flow control');\n      this.usePolling = false;\n\n      this.sendChannel.bufferedAmountLowThreshold = this.bufferFullThreshold/10;\n    }\n    setTimeout(this.fillBuffer.bind(this), 0);\n  }\n\n  fillResults() {\n    this.results.endTimestamp = this.lastReceivedTimestamp;\n    this.results.maxDuration = this.duration;\n    this.results.forceStopped = this.forceStopped;\n    this.results.bufferEmpty = this.bufferEmpty;\n    this.results.intervals = this.intervals;\n\n    this.results.bytesPrepared = this.sentBytes;\n    this.results.bytesReceived = this.receivedBytes;\n\n    if (!this.results.startTimestamp) {\n      this.results.startTimestamp = this.results.endTimestamp;\n    }\n    // calculate average throughput\n    let duration = 0;\n    let average = 0;\n    if (this.secondHalfStart) {\n      duration = this.results.endTimestamp - this.secondHalfStart; // ms\n      average = this.averageThroughput(this.secondHalfBytes, duration);\n    }\n    // fallback if there is no data for second half\n    let allDuration = this.results.endTimestamp - this.results.startTimestamp; // ms\n    let allAverage = this.averageThroughput(this.receivedBytes, allDuration);\n    if (allAverage > average) {\n      average = allAverage;\n    }\n\n    this.results.average = average;\n    this.results.fractionLostBytes = this.loss;\n  }\n\n  stop() {\n    if (!this.isActive()) {\n      return;\n    }\n    clearTimeout(this.sendTimer);\n    this.sendTimer = null;\n\n    super.stop();\n    this.fillResults();\n  }\n}\n\nexport {ThroughputTest};\n","import * as Timestamps from '../utility/timestamps';\nimport {MessageMaker} from '../utility/messageMaker';\n/* eslint require-jsdoc: 0 */\n\nimport {TurnTest} from './turnTest';\n\nconst MAX_BUFFER_FILL = 2;\nclass LossTest extends TurnTest {\n  constructor(connection) {\n    super(connection);\n\n    this.sentBytes = 0;\n    this.receivedBytes = 0;\n\n    this.chunkSize = 1024;\n    this.messageMaker = new MessageMaker(this.chunkSize);\n\n    this.duration = 3000; // ms\n    this.sendTimer = null;\n    this.lastMessage = null;\n    this.numBufferFill = 0;\n  }\n\n  /*\n   * Override functions\n   */\n  initiate() {\n    if (window && window.csioReactNative) {\n      /* NOTE react-native does not support RTCDataChannel.bufferedAmount, so it\n          is stuck in a loop when putting data to the buffer.\n          Also, when it is ever supported, there is no removeEventListener which has be taken care of */\n      let errMsg = 'Not running loss test for react-native';\n       (errMsg);\n      this.handleError(new Error(errMsg));\n      return;\n    }\n     // console.log('LossTest start', this.duration);\n    let now = Timestamps.getCurrent();\n    this.results.startTimestamp = now;\n    this.startSend();\n  }\n\n  handleMessage(msg) {\n    if (!this.isActive()) {\n      return;\n    }\n    this.lastMessage = msg;\n    // count the total received bytes\n    this.receivedBytes += msg.length;\n\n    // record start time, and set timer to stop\n    if (!this.sendTimer) {\n      this.sendTimer = setTimeout(() => {\n        this.stop();\n        this.finished();\n      }, this.duration);\n    }\n  }\n\n  handleError(error) {\n    this.stop();\n    this.failed(error);\n  }\n\n  fillBuffer() {\n    let sentData = 0;\n    while (this.isActive()) {\n      if (sentData > this.bufferFullThreshold) {\n        break;\n      }\n      let message = this.messageMaker.make(this.sentBytes);\n      this.sentBytes += message.length;\n      sentData += message.length;\n      setTimeout(this.send(message), 8); // sending by pacing, making sure we send 1Mbps\n    }\n    sentData = 0;\n    this.numBufferFill++;\n    if (this.numBufferFill >= MAX_BUFFER_FILL) {\n      return;\n    } else {\n      this.startSend();\n    }\n  }\n\n  startSend() {\n    if (!this.isActive()) {\n      return;\n    }\n    // the amount of data to be buffered\n    this.bufferFullThreshold = (1000 * this.chunkSize) / 8; // The threshold is 1 Mbps\n    this.sendChannel = this.connection.sendChannel;\n    setTimeout(this.fillBuffer.bind(this), 250);\n  }\n\n  fillResults() {\n    this.results.endTimestamp = Timestamps.getCurrent();\n    this.results.maxDuration = this.duration;\n    this.results.forceStopped = this.forceStopped;\n    this.results.sentBytes = this.sentBytes;\n    this.results.bytesReceived = this.receivedBytes;\n\n    let msgJson = null;\n    try {\n      msgJson = JSON.parse(this.lastMessage);\n    } catch (e) {\n      // console.error('Error parsing msg:', msg, e);\n      return;\n    }\n    if (msgJson) {\n      let totalBytes = msgJson.sentBytes + this.lastMessage.length;\n\n      this.results.bytesSent = totalBytes;\n      this.results.fractionLostBytes = 1 - this.receivedBytes/totalBytes;\n    } else {\n      this.results.bytesSent = -1;\n      this.results.fractionLostBytes = -1;\n    }\n     // console.log('Loss Results are ', this.results);\n  }\n\n  stop() {\n    if (!this.isActive()) {\n      return;\n    }\n    clearTimeout(this.sendTimer);\n    this.sendTimer = null;\n\n    super.stop();\n    this.fillResults();\n  }\n}\n\nexport {LossTest};\n","import * as Timestamps from './timestamps';\nimport {randomAsciiString} from './messageMaker';\n\nlet status = {\n  'success': 'success',\n  'stopped': 'stopped',\n  'failed': 'failed',\n};\n\n/** Stores results for tests and failures, and returns a complete results object.\n * The tests themselves are responsible for the format of their own results. */\nclass ResultsHandler {\n  /** Creates a new object */\n  constructor() {\n    this.start = Timestamps.getCurrent();\n    this.id = `${Math.trunc(this.start)}-${randomAsciiString(20)}`;\n    this.version = '@@pctVersion';\n    this.failures = [];\n    this.results = {};\n    this.status = status.success;\n  }\n\n  /** Sets status to stopped\n   */\n  setStatusStopped() {\n    if (this.status === status.failed) {\n      return;\n    }\n    this.status = status.stopped;\n  }\n\n  /** Sets status to failed\n   */\n  setStatusFailed() {\n    this.status = status.failed;\n  }\n\n  /** Sets status to success\n   */\n  setStatusSuccess() {\n    if (this.status === status.stopped) {\n      return;\n    }\n    this.status = status.success;\n  }\n\n  /** Returns the overall result of the PreCallTest\n   * @return {Object} the results\n   */\n  getResults() {\n    let results = {\n      id: this.id,\n      version: this.version,\n      status: this.status,\n      startTimestamp: this.start,\n      endTimestamp: Timestamps.getCurrent(),\n      failures: this.failures,\n      tests: this.results,\n    };\n\n    return results;\n  }\n\n  /** Return the number of failures that have occured\n   * @return {Number} the number of failures\n   */\n  getFailureNumber() {\n    return this.failures.length;\n  }\n\n  /** Returns the current ID\n   * @return {String} the ID\n   */\n  getId() {\n    return this.id;\n  }\n\n  /** adds test result\n   * @param {String} testName the name of the test\n   * @param {Object} result the test result\n   */\n  add(testName, result) {\n    this.results[testName] = result;\n    if (result.hasOwnProperty('forceStopped') && result.forceStopped == true) {\n      this.setStatusStopped();\n    }\n  }\n\n  /** adds a failure to start a PreCallTest, e.g. no connection to TURN server\n   * @param {Error} reason A description for the failure\n   */\n  failure(reason) {\n    if (typeof reason === 'object') {\n      reason = reason.toString();\n    }\n    let failure = {\n      timestamp: Timestamps.getCurrent(),\n      reason: reason,\n    };\n    this.failures.push(failure);\n  }\n}\n\nexport {ResultsHandler};\n","import * as Timestamps from './timestamps';\n\n/** ---- Online checks ---- */\nclass OnlineCheck {\n  /**\n   * constructor\n   */\n  constructor() {\n    this.active = false; // added, because react-native does not support removeEventListener\n  }\n\n  /** checks if the browser has a connection\n   * @private\n   */\n  start() {\n    this.active = true;\n    this.onlineCheck = [];\n\n    if (!window || !window.addEventListener || typeof window.addEventListener != 'function') {\n      return;\n    }\n\n    window.addEventListener('offline', () => {\n      this.addEntry();\n    });\n    window.addEventListener('online', () => {\n      this.addEntry();\n    });\n\n    this.addEntry();\n  }\n\n  /** adds an entry for online check\n   * @private\n   */\n  addEntry() {\n    if (!this.active) {\n      return;\n    }\n\n    let now = Timestamps.getCurrent();\n    if (navigator && navigator.onLine) {\n      let entry = navigator.onLine;\n\n      this.onlineCheck.push({'timestamp': now, 'online': entry});\n    }\n  }\n\n  /** stops checking for browser connection\n   * @return {Object} online check results\n   * @private\n   */\n  stop() {\n    this.active = false;\n\n    if (window && window.removeEventListener && typeof window.removeEventListener === 'function') {\n      window.removeEventListener('offline', () => {\n        this.addEntry();\n      });\n      window.removeEventListener('online', () => {\n        this.addEntry();\n      });\n    }\n\n    return this.onlineCheck;\n  }\n}\n\nexport {OnlineCheck};\n","import {TurnConnection} from './turnConnection';\nimport {RttTest} from './tests/rttTest';\nimport {ThroughputTest} from './tests/throughputTest';\nimport {LossTest} from './tests/lossTest';\nimport {ResultsHandler} from './utility/resultsHandler';\nimport {OnlineCheck} from './utility/onlineCheck';\nimport {detect, Constants} from './utility/stats/detectbrowser';\n\n/** the names of the tests */\nconst TEST_NAMES = {\n  RTT: 'rtt',\n  LOSS: 'loss',\n  THROUGHPUT: 'throughput',\n};\n\n/** the number of times the connection to the TURN server is retried if failed */\nconst FAILURE_RETRIES = 10;\n\n/**\n * Main class for PreCallTest. It performs a series of tests to measure the\n * user's connectivity.\n */\nclass PreCallTest {\n  /** Create a new instance */\n  constructor() {\n    this.browserInfo = detect();\n    this.onlineCheck = new OnlineCheck();\n    this.callsInProgress = 0;\n\n    /* The sequence of TURN tests */\n    this.turnTests = [\n      TEST_NAMES.RTT,\n      TEST_NAMES.LOSS,\n      TEST_NAMES.THROUGHPUT,\n    ];\n    this.active = false;\n    this.rtt = null;\n    this.fractionLostBytes = -1;\n    this.resultsHandler = null;\n    this.startResolve = null;\n    this.startReject = null;\n  }\n\n  /*\n   * Public methods\n   */\n\n  /** Start the precall tests\n   * @param {JSON} iceServers an RTCIceServer object/array\n   * @public\n   */\n  start(iceServers) {\n    this.iceServers = iceServers;\n\n    return new Promise((resolve, reject) => {\n      this.startResolve = resolve;\n      this.startReject = reject;\n\n      if (this.browserInfo.browserName === Constants.browserName.msie) {\n        // console.warn('precalltest: disable for IE');\n        // this.callback(null, 'Not started: disabled for IE');\n        this.startReject(new Error('Not started: disabled for IE'));\n        \n        return;\n      }\n\n      if (this.active) {\n        // console.warn('Not started: already in progress');\n        // this.callback(null, 'Not started: already in progress');\n        this.startReject(new Error('Not started: already in progress'));\n        \n        return;\n      }\n\n      if (this.callsInProgress > 0) {\n        // console.warn('Not started: call in progress');\n        // this.callback(null, 'Not started: call in progress');\n        this.startReject(new Error('Not started: call in progress'));\n        \n        return;\n      }\n\n      if (!iceServers) {\n        // console.warn('Not started: no ICE servers given');\n        // this.callback(null, 'Not started: no ICE servers given');\n        this.startReject(new Error('Not started: no ICE servers given'));\n        \n        return;\n      }\n\n      // console.log('PreCallTest start');\n      this.turnTestCounter = 0;\n      this.resultsHandler = new ResultsHandler();\n\n      let endpointInfo = {\n        type: 'browser',\n        os: this.browserInfo.os,\n        osVersion: this.browserInfo.osVersion,\n        buildName: this.browserInfo.browserName,\n        buildVersion: this.browserInfo.browserVersion,\n        userAgent: this.browserInfo.userAgent,\n      };\n      this.resultsHandler.add('endpointInfo', endpointInfo);\n\n      this.onlineCheck.start();\n\n      this.active = true;\n\n      this._start();\n    });\n  }\n\n  /** Internal start function\n   * @private\n   */\n  _start() {\n    if (!this.active) {\n      return;\n    }\n    this.turnConnection = new TurnConnection(this.browserInfo);\n    this.turnConnection.connect(this.iceServers).then(\n      () => {\n        // console.log('TURN connected.');\n        if (!this.active) {\n          this.stop();\n          return;\n        }\n\n        if (this.resultsHandler) {\n          this.resultsHandler.setStatusSuccess();\n        }\n        this.startTurnTests().then(() => {\n          // console.log('All TURN tests completed');\n          this.stop();\n        }, (e) => {\n          // console.error(e);\n          this.stop();\n        });\n      }, (e) => {\n        let continueFlag = e.continueFlag;\n        // console.log('TURN connection failed:', e);\n        if (this.resultsHandler) {\n          this.resultsHandler.failure(e);\n        }\n        if (!continueFlag) {\n          this.turnConnection.disconnect();\n          this.active = false;\n          let message = '';\n          try {\n            message = e.stack;\n          } catch (err) {\n            message = e.toString();\n          }\n          if (!message || message === '') {\n            message = e.toString();\n          }\n\n          if (this.resultsHandler) {\n            this.resultsHandler.setStatusFailed();\n          }\n\n          // console.warn('Error:', message);\n          // this.callback(null, message);\n          this.startReject(new Error(message));\n\n          return;\n        }\n        if (this.resultsHandler) {\n          this.resultsHandler.setStatusFailed();\n          if (this.resultsHandler.getFailureNumber() >= FAILURE_RETRIES) {\n            this.stop();\n            return;\n          }\n        } else {\n          this.stop();\n          return;\n        }\n        // restart if it hasn't failed too often already\n        this.turnConnection.disconnect();\n        setTimeout(() => {\n          // console.warn('PreCallTest REstart');\n          this._start();\n        }, 0);\n      });\n  }\n\n  /** Stop the precall tests\n   * @private */\n  stop() {\n    if (!this.active) {\n      return;\n    }\n\n    this.active = false;\n    if (this.activeTurnTest) {\n       // console.warn('Stopping active test');\n      this.activeTurnTest.forceStop();\n    }\n    // console.log('PreCallTest stop');\n\n    let onlineCheckResults = this.onlineCheck.stop();\n    if (this.resultsHandler) {\n      this.resultsHandler.add('onlineStatus', onlineCheckResults);\n    }\n\n    this.turnConnection.getIceResults().then((iceResults) => {\n      if (this.resultsHandler) {\n        this.resultsHandler.add('ice', iceResults);\n      }\n\n      // stop everything\n      // console.log('ICE obtained');\n      this.turnConnection.disconnect();\n\n      // send results\n      this.sendResults();\n    }, (err) => {\n      if (this.resultsHandler) {\n        this.resultsHandler.failure(err);\n      }\n\n      // stop everything\n      // console.log('ICE failure');\n      this.turnConnection.disconnect();\n\n      // send results\n      this.sendResults();\n    });\n  }\n\n  /** Start the precall tests\n   * @param {JSON} results full pct results\n   * @return {JSON}\n   * @private\n   */\n  getPublicPrecalltestResults(results) {\n    const publicResults = {\n      mediaConnectivity: false,\n      throughput: null,\n      fractionalLoss: null,\n      rtt: null,\n      jitter: null,\n      timestamp: Date.now(),\n    };\n    if (!results || !results.tests) {\n      return publicResults;\n    }\n\n    publicResults.startTimestamp = results.startTimestamp;\n    publicResults.endTimestamp = results.endTimestamp;\n\n    if (results.tests.rtt) {\n      publicResults.rtt = results.tests.rtt.median;\n      publicResults.mediaConnectivity = true;\n      publicResults.jitter = results.tests.rtt.variance;\n    }\n\n    if (results.tests.throughput) {\n      publicResults.throughput = results.tests.throughput.average;\n      publicResults.fractionalLoss = Math.max(results.tests.throughput.fractionLostBytes, 0);\n      publicResults.mediaConnectivity = true;\n      // publicResults.bytesSent = results.tests.throughput.bytesSent;\n    }\n\n    if (results.tests.ice) {\n      if (results.tests.ice.relayTcpSuccess ||\n          results.tests.ice.relayTlsSuccess ||\n          results.tests.ice.relayUdpSuccess) {\n        publicResults.mediaConnectivity = true;\n      }\n    }\n    return publicResults;\n  }\n\n  /** Send results via callback\n   * @private\n   */\n  sendResults() {\n    if (!this.resultsHandler) {\n        // this.callback(null, 'No results present');\n        this.startReject(new Error('No results present'));\n        return;\n    }\n\n    const results = this.resultsHandler.getResults();\n    const resultsMin = this.getPublicPrecalltestResults(results);\n    // console.log('**** Results ', results, resultsMin);\n      //this.callback(resultsMin, null);\n    this.startResolve(resultsMin);\n  }\n\n  /** Call starts\n   * @public */\n  callStarts() {\n    this.callsInProgress += 1;\n\n    if (this.resultsHandler) {\n      this.resultsHandler.setStatusStopped();\n    }\n\n    this.stop();\n  }\n\n  /** Call finished\n   * @public */\n  callFinished() {\n    this.callsInProgress -= 1;\n    // NOTE tests could be restarted here, if callsInProgress is 0\n  }\n\n  /**\n   * Disconnect the peer connection (used only when some crash occurs)\n   */\n  crashDisconnect() {\n    try {\n       // console.error('something crashed');\n      this.turnConnection.disconnect();\n    } catch (err) {\n       (err);\n    }\n  }\n\n  /*\n   * Private methods\n   */\n\n  /** Start TURN tests. The tests are serialized, the sequence given in this.turnTests\n   * @return {Promise} all tests completed or error, does not reject if a single test fails\n   * @private */\n  startTurnTests() {\n    if (this.turnTestCounter >= this.turnTests.length) {\n      return new Promise((resolve, reject) => {\n        resolve();\n      });\n    }\n\n    let testName = this.turnTests[this.turnTestCounter];\n    let test = null;\n    switch (testName) {\n      case TEST_NAMES.RTT:\n        test = new RttTest(this.turnConnection);\n        break;\n      case TEST_NAMES.LOSS:\n        test = new LossTest(this.turnConnection);\n        break;\n      case TEST_NAMES.THROUGHPUT:\n        test = new ThroughputTest(this.turnConnection, this.rtt, this.fractionLostBytes);\n        break;\n      default:\n        return new Promise((resolve, reject) => {\n          reject(new Error(`Unknown test: ${testName}`));\n        });\n    }\n\n    this.activeTurnTest = test;\n    if (!this.active) {\n      return new Promise((resolve, reject) => {\n        reject(new Error('Test trying to start while testing is not active'));\n      });\n    }\n    return test.start() // returns the Promise\n    .then(() => {\n      // console.info('Test succeeded', testName);\n      this.handleTestResults(testName, test.getResults());\n\n      this.turnTestCounter += 1;\n      this.activeTurnTest = null;\n      return this.startTurnTests();\n    }, (e) => {\n      // console.error('Test failed', testName, e);\n      this.handleTestResults(testName, test.getResults(), e);\n\n      this.turnTestCounter += 1;\n      this.activeTurnTest = null;\n      return this.startTurnTests();\n    });\n  }\n\n  /** handle the results from a test\n   * @param {String} testName the name of the test\n   * @param {Object} results the results of the test\n   * @param {Error=} error if the test failed\n   */\n  handleTestResults(testName, results, error=null) {\n    if (error == null && testName == TEST_NAMES.RTT) {\n      this.rtt = results.median;\n    } else if (error == null && testName == TEST_NAMES.LOSS) {\n      this.fractionLostBytes = results.fractionLostBytes;\n    }\n    if (this.resultsHandler) {\n      this.resultsHandler.add(testName, results);\n    }\n  }\n}\n\nexport default PreCallTest;\n\n// for standlone browserify based testing\n// (function() {\n//   if (('function' === typeof define) && (define.amd)) {/* AMD support */\n//     define('PreCallTest', [], PreCallTest);\n//   } else {/* Browsers and Web Workers*/\n//     global.PreCallTest = PreCallTest;\n//   }\n//   module.exports = PreCallTest;\n// })(typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : this); // eslint-disable-line\n","import currentExecutingScript from 'current-executing-script';\n\n/* eslint-disable max-params */\n\nexport interface ILoadScriptOptions {\n    async: boolean;\n    errorCallback?: () => void;\n    loadCallback?: () => void;\n    prepend: boolean;\n    relativeURL: boolean;\n    src: string;\n}\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript({\n        src,\n        async,\n        prepend,\n        relativeURL,\n        loadCallback,\n        errorCallback\n    }: ILoadScriptOptions): void {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nexport default ScriptUtil;\n","import { getLogger } from '@jitsi/logger';\n\nimport { createAudioContext } from './WebAudioUtils';\n\nconst logger = getLogger('modules/webaudio/AudioMixer');\n\n/**\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\n * MediaStream.\n */\nexport default class AudioMixer {\n    /**\n     * Create AudioMixer instance.\n     */\n    constructor() {\n        this._started = false;\n        this._streamsToMix = [];\n        this._streamMSSArray = [];\n    }\n\n    /**\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\n     *\n     * @param {MediaStream} stream - MediaStream to be mixed.\n     */\n    addMediaStream(stream) {\n        if (!stream.getAudioTracks()) {\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\n        }\n\n        this._streamsToMix.push(stream);\n    }\n\n    /**\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\n     * it; the resulting mixed MediaStream is returned.\n     *\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\n     * is added.\n     */\n    start() {\n        // If the mixer was already started just return the existing mixed stream.\n        if (this._started) {\n            return this._mixedMSD.stream;\n        }\n\n        this._audioContext = createAudioContext();\n\n        if (!this._streamsToMix.length) {\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\n\n            return null;\n        }\n\n        this._started = true;\n\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\n\n        for (const stream of this._streamsToMix) {\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\n\n            streamMSS.connect(this._mixedMSD);\n\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\n            this._streamMSSArray.push(streamMSS);\n        }\n\n        return this._mixedMSD.stream;\n    }\n\n    /**\n     * Disconnect MediaStreamAudioSourceNode and clear references.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._started = false;\n        this._streamsToMix = [];\n\n        // Clean up created MediaStreamAudioSourceNode.\n        for (const streamMSS of this._streamMSSArray) {\n            streamMSS.disconnect();\n        }\n\n        this._streamMSSArray = [];\n\n        if (this._audioContext) {\n            this._audioContext = undefined;\n        }\n    }\n}\n","// This file is auto-generated during build\nexport const COMMIT_HASH = '575f6738';\n","import Logger from '@jitsi/logger';\nimport { merge } from 'lodash-es';\n\nimport JitsiConference from './JitsiConference';\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport { JitsiConnectionEvents } from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport JitsiLocalTrack from './modules/RTC/JitsiLocalTrack';\nimport RTC from './modules/RTC/RTC';\nimport RTCStats from './modules/RTCStats/RTCStats';\nimport * as RTCStatsEvents from './modules/RTCStats/RTCStatsEvents';\nimport browser from './modules/browser';\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\nimport { TrackStreamingStatus } from './modules/connectivity/TrackStreamingStatus';\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport Settings from './modules/settings/Settings';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport runPreCallTest, { IIceServer, IPreCallResult } from './modules/statistics/PreCallTest';\nimport Statistics from './modules/statistics/statistics';\nimport Deferred from './modules/util/Deferred';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport AudioMixer from './modules/webaudio/AudioMixer';\nimport { MediaType } from './service/RTC/MediaType';\nimport { VideoType } from './service/RTC/VideoType';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\nimport { COMMIT_HASH } from './version';\n\nconst logger = Logger.getLogger('JitsiMeetJS');\n\n// Settin the default log levels to info early so that we avoid overriding a log level set externally.\nLogger.setLogLevel(Logger.levels.INFO);\n\n/**\n * Indicates whether GUM has been executed or not.\n */\nlet hasGUMExecuted = false;\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes: any = {};\n\n    /* eslint-disable */\n\n    attributes.audio_requested = options.devices.includes(MediaType.AUDIO);\n    attributes.video_requested = options.devices.includes(MediaType.VIDEO);\n    attributes.screen_sharing_requested = options.devices.includes(VideoType.DESKTOP);\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    /* eslint-enable */\n\n    return attributes;\n}\n\ninterface ICreateLocalTrackOptions {\n    cameraDeviceId?: string;\n    devices?: any[];\n    fireSlowPromiseEvent?: boolean;\n    micDeviceId?: string;\n    resolution?: string;\n}\n\ntype desktopSharingSourceType = 'screen' | 'window';\n\ninterface IJitsiMeetJSOptions {\n    analytics?: {\n        rtcstatsLogFlushSizeBytes?: number;\n        rtcstatsStoreLogs?: boolean;\n    };\n    desktopSharingSources?: Array<desktopSharingSourceType>;\n    enableAnalyticsLogging?: boolean;\n    enableWindowOnErrorHandler?: boolean;\n    externalStorage?: Storage;\n    flags?: {\n        runInLiteMode?: boolean;\n        ssrcRewritingEnabled?: boolean;\n    };\n}\n\ninterface ICreateLocalTrackFromMediaStreamOptions {\n    mediaType: MediaType;\n    sourceType: string;\n    stream: MediaStream;\n    track: any;\n    videoType?: VideoType;\n}\n\nexport interface IJoinConferenceOptions {\n    conferenceOptions?: any;\n    connectionOptions?: any;\n    jaas?: {\n        release?: boolean;\n        useStaging?: boolean;\n    };\n    tracks?: JitsiLocalTrack[];\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default {\n\n    version: COMMIT_HASH,\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n\n    constants: {\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus,\n        trackStreamingStatus: TrackStreamingStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        detection: DetectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents,\n        rtcstats: RTCStatsEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices as unknown,\n    analytics: Statistics.analytics as unknown,\n    init(options: IJitsiMeetJSOptions = {}) {\n        // Start capturing and sending logs to the rtcstats server as soon as possible.\n        const {\n            analytics: {\n                rtcstatsStoreLogs,\n                rtcstatsLogFlushSizeBytes\n            } = {}\n        } = options;\n\n        if (rtcstatsStoreLogs) {\n            Logger.addGlobalTransport(RTCStats.getDefaultLogCollector(rtcstatsLogFlushSizeBytes));\n        }\n\n        // @ts-ignore\n        logger.info(`This appears to be ${browser.getName()}, ver: ${browser.getVersion()}`);\n\n        JitsiMediaDevices.init();\n        Settings.init(options.externalStorage);\n        Statistics.init(options);\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Expose rtcstats to the public API.\n     */\n    rtcstats: {\n        /**\n         * Checks if the rtcstats trace is available.\n         * The trace is the abstraction for the underlying rtcstats websocket connection.\n         *\n         * @returns {boolean} <tt>true</tt> if the rtcstats trace is available or\n         * <tt>false</tt> otherwise.\n         */\n        isTraceAvailable() {\n            return RTCStats.isTraceAvailable();\n        },\n\n        /**\n         * Sends identity data to the rtcstats server. This data is used\n         * to identify the specifics of a particular client, it can be any object\n         * and will show in the generated rtcstats dump under \"identity\" entries.\n         *\n         * @param {Object} identityData - Identity data to send.\n         * @returns {void}\n         */\n        sendIdentityEntry(identityData) {\n            RTCStats.sendIdentity(identityData);\n        },\n\n        /**\n         * Sends a stats entry to rtcstats server.\n         * @param {string} statsType - The type of stats to send.\n         * @param {Object} data - The stats data to send.\n         */\n        sendStatsEntry(statsType, data) {\n            RTCStats.sendStatsEntry(statsType, null, data);\n        },\n\n        /**\n         * Events generated by rtcstats, such as PeerConnections state,\n         * and websocket connection state.\n         *\n         * @param {RTCStatsEvents} event - The event name.\n         * @param {function} handler - The event handler.\n         */\n        on(event, handler) {\n            RTCStats.events.on(event, handler);\n        }\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates local media tracks.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     *\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(options: ICreateLocalTrackOptions = {}) {\n        let isFirstGUM = false;\n        const startTS = window.performance.now();\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (!hasGUMExecuted) {\n            hasGUMExecuted = true;\n            isFirstGUM = true;\n            window.connectionTimes['firstObtainPermissions.start'] = startTS;\n        }\n        window.connectionTimes['obtainPermissions.start'] = startTS;\n\n        return RTC.obtainAudioAndVideoPermissions(options)\n            .then(tracks => {\n                const endTS = window.performance.now();\n\n                window.connectionTimes['obtainPermissions.end'] = endTS;\n\n                if (isFirstGUM) {\n                    window.connectionTimes['firstObtainPermissions.end'] = endTS;\n                }\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(options)));\n\n                if (this.isCollectingLocalStats()) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(track,\n                                track.setAudioLevel.bind(track));\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                if (error.name === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                const endTS = window.performance.now();\n\n                window.connectionTimes['obtainPermissions.end'] = endTS;\n\n                if (isFirstGUM) {\n                    window.connectionTimes['firstObtainPermissions.end'] = endTS;\n                }\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Manually create JitsiLocalTrack's from the provided track info, by exposing the RTC method\n     *\n     * @param {Array<ICreateLocalTrackFromMediaStreamOptions>} tracksInfo - array of track information\n     * @returns {Array<JitsiLocalTrack>} - created local tracks\n     */\n    createLocalTracksFromMediaStreams(tracksInfo: ICreateLocalTrackFromMediaStreamOptions[]) {\n        return RTC.createLocalTracks(tracksInfo.map(trackInfo => {\n            const tracks = trackInfo.stream.getTracks()\n                .filter(track => track.kind === trackInfo.mediaType);\n\n            if (!tracks || tracks.length === 0) {\n                // eslint-disable-next-line @typescript-eslint/only-throw-error\n                throw new JitsiTrackError(JitsiTrackErrors.TRACK_NO_STREAM_TRACKS_FOUND, null, null);\n            }\n\n            if (tracks.length > 1) {\n                // eslint-disable-next-line @typescript-eslint/only-throw-error\n                throw new JitsiTrackError(JitsiTrackErrors.TRACK_TOO_MANY_TRACKS_IN_STREAM, null, null);\n            }\n\n            trackInfo.track = tracks[0];\n\n            return trackInfo;\n        }));\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\n     * user to mix multiple MediaStreams into a single one.\n     *\n     * @returns {AudioMixer}\n     */\n    createAudioMixer() {\n        return new AudioMixer();\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Simple way to create a {JitsiConference}. All options are optional and sane defaults\n     * will be chosen for JaaS users.\n     *\n     * @param roomName - The name of the conference.\n     * @param appId - The application id (also known as tenant).\n     * @param token - The token (JWT) to use for authentication.\n     * @param options - The options to use for joining the conference.\n     */\n    async joinConference(\n            roomName: string,\n            appId: string = '',\n            token: string | null = null,\n            options: IJoinConferenceOptions = {}): Promise<JitsiConference> {\n        const d = new Deferred();\n        let connectionOptions = options.connectionOptions ?? {};\n\n        // Provide a solid default config in case of JaaS.\n        if (appId.startsWith('vpaas-magic-cookie')) {\n            // Initialize RTCStats logging.\n            Logger.addGlobalTransport(RTCStats.getDefaultLogCollector());\n\n            const useStage = options.jaas?.useStaging ?? false;\n            const jaasDomain = useStage ? 'staging.8x8.vc' : '8x8.vc';\n            const opts = {\n                hosts: {\n                    domain: jaasDomain,\n                    muc: `conference.${appId}.${jaasDomain}`\n                },\n                conferenceRequestUrl: `https://${jaasDomain}/${appId}/conference-request/v1?room=${roomName}`,\n                serviceUrl: `wss://${jaasDomain}/${appId}/xmpp-websocket?room=${roomName}`,\n                websocketKeepAliveUrl: `https://${jaasDomain}/${appId}/_unlock?room=${roomName}`,\n                analytics: {\n                    rtcstatsEnabled: true,\n                    rtcstatsEndpoint: `wss://rtcstats-server-${useStage ? 'pilot' : '8x8'}.jitsi.net/`,\n                    rtcstatsSendSdp: true,\n                },\n            };\n\n            connectionOptions = merge(connectionOptions, opts);\n        }\n\n        const conn = new JitsiConnection(appId, token, connectionOptions);\n\n        function cleanupListeners() {\n            conn.removeEventListener(\n                JitsiConnectionEvents.CONNECTION_ESTABLISHED, onConnectionEstablished);\n            conn.removeEventListener(\n                JitsiConnectionEvents.CONNECTION_FAILED, onConnectionFailed);\n        }\n\n        function onConnectionEstablished() {\n            cleanupListeners();\n\n            const conf = conn.initJitsiConference(roomName, options.conferenceOptions ?? {});\n\n            d.resolve(conf);\n\n            // Make sure this runs after the promise was resolved so that local track events can be\n            // listened to.\n            queueMicrotask(() => {\n                for (const track of options.tracks || []) {\n                    conf.addTrack(track);\n                }\n\n                conf.join();\n\n                // Default to receiving 720p for everyone.\n                conf.setReceiverConstraints({\n                    lastN: -1,\n                    defaultConstraints: { maxHeight: 720 },\n                });\n            });\n        }\n\n        function onConnectionFailed(error: string) {\n            cleanupListeners();\n            d.reject(error);\n        }\n\n        conn.addEventListener(\n            JitsiConnectionEvents.CONNECTION_ESTABLISHED, onConnectionEstablished);\n        conn.addEventListener(\n            JitsiConnectionEvents.CONNECTION_FAILED, onConnectionFailed);\n        conn.connect({ name: roomName });\n\n        return d as unknown as Promise<JitsiConference>;\n    },\n\n    /**\n     * Informs lib-jitsi-meet about the current network status.\n     *\n     * @param {object} state - The network info state.\n     * @param {boolean} state.isOnline - {@code true} if the internet connectivity is online or {@code false}\n     * otherwise.\n     */\n    setNetworkInfo({ isOnline }) {\n        NetworkInfo.updateNetworkInfo({ isOnline });\n    },\n\n    /**\n     * Run a pre-call test to check the network conditions.\n     *\n     * @param {IIceServer} iceServers  - The ICE servers to use for the test,\n     * @returns {Promise<PreCallResult | any>} - A Promise that resolves with the test results or rejects with an error\n     * message.\n     */\n    runPreCallTest(iceServers: IIceServer[]): Promise<IPreCallResult | any> {\n        return runPreCallTest(iceServers);\n    },\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        ScriptUtil,\n        browser\n    }\n};\n","export interface IRecordingConstants {\n    error: {\n        BUSY: string;\n        ERROR: string;\n        POLICY_VIOLATION: string;\n        RESOURCE_CONSTRAINT: string;\n        SERVICE_UNAVAILABLE: string;\n        UNEXPECTED_REQUEST: string;\n    };\n    mode: {\n        FILE: string;\n        STREAM: string;\n    };\n    status: {\n        OFF: string;\n        ON: string;\n        PENDING: string;\n    };\n}\n\nconst recordingConstants: IRecordingConstants = {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        POLICY_VIOLATION: 'policy-violation',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        UNEXPECTED_REQUEST: 'unexpected-request',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n\nexport default recordingConstants;\n","import PreCallTest from '@jitsi/precall-test';\n\n\nexport interface IPreCallResult {\n\n    // Maximum bandwidth reached in kbps  (kilo bits per second).\n    fractionalLoss: number;\n\n    // Round trip time in milliseconds.\n    jitter: number;\n\n    // Variation in packet arrival times during the transmission of media.\n    mediaConnectivity: boolean;\n\n    // Packet loss percentage over all the test traffic.\n    rtt: number;\n    throughput: number; // Whether the data channel was able to send data or not.\n}\n\n// Same interface as a PeerConnection configuration object.\nexport interface IIceServer {\n    credential?: string;\n    urls: Array<string> | string;\n    username?: string;\n}\n\n/**\n * Run a pre-call test to check the network conditions. It uses a TURN server to establish\n * a connection between two PeerConnections using the server as a relay. Afterwards it sends\n * some test traffic through a data channel to measure the network conditions, these are\n * recorded and returned through a Promise.\n *\n * @param {Array<IIceServer>} - The ICE servers to use for the test, these are passes to the PeerConnection constructor.\n * @returns {Promise<IPreCallResult | any>} - A Promise that resolves with the test results or rejects with an error.\n */\nexport default async function runPreCallTest(iceServers: Array<IIceServer>): Promise<IPreCallResult | string> {\n    const test = new PreCallTest();\n\n    return await test.start(iceServers);\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 3) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            try {\n                l.bind(t).apply(t, fullLogParts);\n            } catch (error) {\n                // It would be nice to send the error to the logger but this could send us into an endless loop.\n                // That's why we use only console for logging here.\n                console.error(\"An error occured when trying to log with one of the available transports\", error);\n            }\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","const Resolutions = {\n    '2160': {\n        width: 3840,\n        height: 2160\n    },\n    '4k': {\n        width: 3840,\n        height: 2160\n    },\n    '1080': {\n        width: 1920,\n        height: 1080\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080\n    },\n    '720': {\n        width: 1280,\n        height: 720\n    },\n    'hd': {\n        width: 1280,\n        height: 720\n    },\n    '540': {\n        width: 960,\n        height: 540\n    },\n    'qhd': {\n        width: 960,\n        height: 540\n    },\n    '480': {\n        width: 640,\n        height: 480\n    },\n    'vga': {\n        width: 640,\n        height: 480\n    },\n    '360': {\n        width: 640,\n        height: 360\n    },\n    '240': {\n        width: 320,\n        height: 240\n    },\n    '180': {\n        width: 320,\n        height: 180\n    }\n};\n\nmodule.exports = Resolutions;\n","export const LOCAL_JID = 'local';\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.amdO = {};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(154);\n"],"names":["root","factory","exports","module","define","amd","self","ljm","require","window","JitsiMeetJS","_mergeNamespaceAndModule","ERROR","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","process","versions","node","global","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","ArrayBuffer","HEX_CHARS","split","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","buffer","Uint8Array","Uint32Array","Array","isArray","obj","Object","prototype","toString","call","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","constructor","createOutputMethod","outputType","message","Md5","update","createMethod","method","nodeWrap","create","i","length","type","crypto","eval","Buffer","nodeMethod","createHash","digest","sharedMemory","this","h0","h1","h2","h3","start","bytes","hBytes","finalized","hashed","first","notString","code","index","charCodeAt","lastByteIndex","hash","finalize","a","b","c","d","bc","da","hex","array","arrayBuffer","base64","v1","v2","v3","base64Str","md5","IDENTITY_UPDATED","ap","Tk","Vk","b1","zP","$j","dL","aM","vP","xt","Zt","UN","IO","zl","v6","S1","n","r","e","initSDK","setConfig","setUserRating","addKeys","disableDataCollection","enableDataCollection","addEvent","mapStream","mapTrack","connect","disconnect","registerOnStatsListener","persistentEnd","persistentStart","registerStateListener","default","init","addTags","addStatsListener","addStateListener","qualityrtc","run","qrtcRun","stop","qrtcStop","__assign","assign","arguments","o","hasOwnProperty","apply","__awaiter","Promise","g","next","t","throw","done","value","then","__generator","label","sent","trys","ops","return","Symbol","iterator","TypeError","pop","push","__spreadArray","slice","concat","defineProperty","sdkLogWithoutTrace","sdkLog","m","s","l","p","v","u","f","x","h","mozRTCPeerConnection","RTCPeerConnection","navigator","webkitGetUserMedia","y","k","w","rtcRoomId","rtcPeerId","projectId","q","S","C","z","T","I","L","_","P","R","j","O","getSdkLogger","logLevel","getSdkLogWithoutTrace","D","kind","id","readyState","muted","E","M","forceRecreate","reconnecting","pcId","nailUp","isDisabledDataCollection","isManualDisconnect","isManualConnect","tryingToConnectSocket","watchrtcConfig","JSON","stringify","disabled","openChannels","connection","WebSocket","OPEN","isRoomIdOrPeerIdChanged","close","countOfValidConnections","connectionCount","validateConfig","keys","forEach","rtcToken","getConnectionData","rtcApiKey","proxyUrl","Date","now","U","url","key","options","cleanOldTraces","onData","entries","allowBrowserLogCollection","Boolean","collectConsoleLogEnabled","console","override","collectConsoleLogLevel","setConsoleLevel","restoreOriginalConsoleMethods","filter","connectionId","interval","collectionInterval","W","data","oldInterval","sdkVersion","watchRTCSessionId","onError","onOpen","connectionStatus","clearInterval","onClose","reason","wasClean","authFailed","reconnectTimerId","setInterval","pc","signalingState","getStats","map2obj","nailUpRef","parse","values","logGetStats","connections","streams","A","peer","prev","res","applyPatchForRTT","subtractNailUpReferenceStats","deltaCompression","timestamp","exposeApplicationStatsForPC","watchRTCInitialized","indexOf","generateID","setTimeout","getHardwareInfo","hardwareInfo","catch","URLSearchParams","location","search","has","get","socketService","httpService","trace","wsUrl","debug","watchrtc","__rtcStatsId","validConnection","nullConfig","iceServers","credential","browserType","config","constraints","addEventListener","candidate","errorCode","errorText","stream","getTracks","map","track","iceConnectionState","iceGatheringState","connectionState","channel","HTMLMediaElement","setSinkId","mediaDevices","enumerateDevices","find","deviceId","error","RTCRtpTransceiver","setCodecPreferences","__pcId","RTCRtpSender","setParameters","replaceTrack","join","sender","getTransceivers","sdp","parameterless","localDescription","generateCertificate","bind","dumpStream","name","F","getUserMedia","reject","getDisplayMedia","level","newWatchrtcConfig","resolve","validateRating","rating","ratingComment","promiseFuncs","N","wasConnected","validateEvent","J","document","createElement","src","onload","onerror","head","appendChild","K","progressCallback","codeUrl","configUrl","log","all","fetch","json","codeLoad","configAnswer","__qualityRTC","Error","jsonConfig","URL","origin","isProbe","wakeLock","netlifyBaseUrl","configData","qualityRTC","answer","getStreamsFromStats","getTransportFromStats","nominated","localCandidateId","remoteCandidateId","candidateType","transport","relayProtocol","address","port","remoteId","direction","peerId","frameWidth","frameHeight","framerate","framesPerSecond","jitter","mappedName","trackIdentifier","bytesReceived","packetsReceived","packetsLost","packetsLoss","bitrate","roundTripTime","bytesSent","packetsSent","fractionLost","mediaSourceId","codecId","mimeType","codec","includes","mangleChromeStats","logPrefix","getMonth","getDate","getFullYear","getHours","getMinutes","getSeconds","getMilliseconds","_original_log","getTime","result","names","stat","tracks","enabled","replace","old","new","parameters","Math","round","toFixed","shift","err","stack","fileName","getGPUTier","loadBenchmarks","cores_count","hardwareConcurrency","performance","memory","jsHeapSizeLimit","totalJSHeapSize","usedJSHeapSize","originalMethodPrefix","methodsToPatch","text","WeakSet","add","roundTripTimeMeasurements","NaN","max","bandwidth","cpu","other","none","random","substring","_instance","mode","cache","credentials","headers","body","sendInterval","dataCollection","sendPromises","prevMessageTs","abs","timeSinceLastMessage","compressToEncodedURIComponent","send","filteredCount","onopen","onclose","onmessage","setPrototypeOf","__proto__","toLowerCase","userAgent","platform","maxTouchPoints","test","MSStream","isIpad","isMobile","isSafari12","String","mobileTiers","desktopTiers","glContext","failIfMajorPerformanceCaveat","benchmarksURL","tier","screenSize","screen","parseInt","renderer","match","sort","Number","MAX_VALUE","devicePixelRatio","width","height","device","fps","gpu","alpha","antialias","depth","powerPreference","stencil","getContext","getExtension","getParameter","UNMASKED_RENDERER_WEBGL","createShader","createProgram","shaderSource","compileShader","attachShader","linkProgram","detachShader","deleteShader","useProgram","createBuffer","bindBuffer","bufferData","Float32Array","getAttribLocation","vertexAttribPointer","enableVertexAttribArray","clearColor","clear","viewport","drawArrays","readPixels","deleteProgram","deleteBuffer","charAt","fromCharCode","compressToBase64","_compress","decompressFromBase64","_decompress","compressToUTF16","decompressFromUTF16","compressToUint8Array","compress","decompressFromUint8Array","decompress","decompressFromEncodedURIComponent","pow","val","position","globalThis","Function","XMPPEvents","getPrototypeOf","flat","nodeType","item","nonce","noModule","getAttribute","setAttribute","parentNode","removeChild","fn","jquery","toArray","pushStack","merge","prevObject","each","eq","last","even","grep","odd","end","splice","extend","isPlainObject","expando","isReady","noop","isEmptyObject","globalEval","makeArray","inArray","guid","support","ue","H","B","RegExp","$","V","X","Q","ID","CLASS","TAG","ATTR","PSEUDO","CHILD","bool","needsContext","Y","G","Z","ee","te","ne","re","ie","oe","ae","xe","nodeName","dir","childNodes","se","ownerDocument","exec","getElementById","getElementsByTagName","getElementsByClassName","qsa","ye","scope","be","querySelectorAll","removeAttribute","cacheLength","le","ce","fe","attrHandle","de","sourceIndex","nextSibling","pe","he","ge","isDisabled","ve","isXML","namespaceURI","documentElement","setDocument","defaultView","top","attachEvent","attributes","className","createComment","getById","getElementsByName","getAttributeNode","innerHTML","matchesSelector","matches","webkitMatchesSelector","mozMatchesSelector","oMatchesSelector","msMatchesSelector","disconnectedMatch","compareDocumentPosition","contains","sortDetached","unshift","attr","specified","escape","uniqueSort","detectDuplicates","sortStable","getText","textContent","firstChild","nodeValue","selectors","createPseudo","relative","preFilter","lastChild","uniqueID","pseudos","setFilters","not","lang","target","focus","activeElement","hasFocus","href","tabIndex","checked","selected","selectedIndex","empty","parent","header","input","button","lt","gt","nth","radio","checkbox","file","password","image","submit","reset","me","we","Ce","Te","Ee","filters","tokenize","compile","selector","select","defaultValue","expr","unique","isXMLDoc","escapeSelector","is","parseHTML","ready","children","contents","closest","prevAll","addBack","parents","parentsUntil","nextAll","nextUntil","prevUntil","siblings","contentDocument","content","reverse","promise","fail","Callbacks","once","stopOnFalse","remove","disable","lock","locked","fireWith","fire","fired","Deferred","state","always","pipe","progress","notify","notifyWith","resolveWith","exceptionHook","stackTrace","rejectWith","getStackHook","when","warn","readyException","removeEventListener","readyWait","doScroll","toUpperCase","uid","configurable","set","access","hasData","removeData","_data","_removeData","queue","dequeue","_queueHooks","clearQueue","source","composed","getRootNode","style","display","css","show","hide","toggle","createDocumentFragment","checkClone","cloneNode","noCloneChecked","option","thead","col","tr","td","_default","tbody","tfoot","colgroup","caption","th","optgroup","htmlPrefilter","createTextNode","off","event","namespace","handler","isTrigger","special","delegateType","stopPropagation","stopImmediatePropagation","preventDefault","trigger","Event","events","handle","triggered","dispatch","bindType","origType","delegateCount","setup","teardown","removeEvent","fix","delegateTarget","preDispatch","handlers","isPropagationStopped","currentTarget","elem","isImmediatePropagationStopped","rnamespace","handleObj","postDispatch","addProp","enumerable","originalEvent","writable","load","noBubble","click","beforeunload","returnValue","isDefaultPrevented","defaultPrevented","relatedTarget","timeStamp","isSimulated","altKey","bubbles","cancelable","changedTouches","ctrlKey","detail","eventPhase","metaKey","pageX","pageY","shiftKey","view","charCode","keyCode","buttons","clientX","clientY","offsetX","offsetY","pointerId","pointerType","screenX","screenY","targetTouches","toElement","touches","which","blur","mouseenter","mouseleave","pointerenter","pointerleave","on","one","Ae","Ne","Se","ke","De","Le","je","qe","html","clone","_evalUrl","Oe","cleanData","detach","append","prepend","insertBefore","before","after","replaceWith","replaceChild","appendTo","prependTo","insertAfter","replaceAll","Pe","He","Ie","opener","getComputedStyle","Re","Be","Me","We","Fe","getPropertyValue","pixelBoxStyles","minWidth","maxWidth","$e","cssText","marginLeft","right","offsetWidth","parseFloat","backgroundClip","clearCloneStyle","boxSizingReliable","pixelPosition","reliableMarginLeft","scrollboxSize","reliableTrDimensions","borderTopWidth","borderBottomWidth","offsetHeight","ze","_e","Ue","Ve","cssProps","Xe","Qe","Ye","Ge","visibility","Ke","letterSpacing","fontWeight","Je","Ze","ceil","et","getClientRects","cssHooks","opacity","cssNumber","animationIterationCount","columnCount","fillOpacity","flexGrow","flexShrink","gridArea","gridColumn","gridColumnEnd","gridColumnStart","gridRow","gridRowEnd","gridRowStart","lineHeight","order","orphans","widows","zIndex","zoom","setProperty","isFinite","getBoundingClientRect","left","margin","padding","border","expand","delay","fx","speeds","clearTimeout","checkOn","optSelected","radioValue","tt","nt","removeAttr","prop","attrHooks","rt","it","ot","at","st","removeProp","propFix","propHooks","addClass","removeClass","toggleClass","hasClass","ut","valHooks","focusin","ct","parentWindow","simulate","triggerHandler","parseXML","DOMParser","parseFromString","ft","dt","pt","ht","vt","param","encodeURIComponent","serialize","serializeArray","wrapAll","firstElementChild","wrapInner","wrap","unwrap","hidden","visible","createHTMLDocument","implementation","offset","setOffset","using","pageYOffset","pageXOffset","offsetParent","scrollLeft","scrollTop","scrollTo","Height","Width","unbind","delegate","undelegate","hover","yt","proxy","holdReady","parseJSON","isFunction","isWindow","camelCase","isNumeric","isNaN","trim","mt","jQuery","bt","noConflict","Logger","LogCollector","idLoggers","loggers","curLevel","levels","TRACE","addGlobalTransport","removeGlobalTransport","setGlobalOptions","getLogger","transports","logger","getUntrackedLogger","setLogLevelById","setLevel","setLogLevel","VideoType","grammar","reg","format","encoding","rate","subtype","sessionConfig","str","raddr","tcptype","generation","attribute","maxMessageSize","params","dir2","logStorage","stringifyObjects","storeInterval","maxEntryLength","_log","storeLogsIntervalID","totalLen","outputCache","someObject","formatLogMessage","msg","len","arg","prevMessage","count","_flush","_reschedulePublishInterval","flush","_storeLogs","logs","storeLogs","force","reschedule","logStorageReady","cachedQueue","parser","writer","write","parseFmtpConfig","parseParams","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","RTCEvents","BRIDGE_BWE_STATS_RECEIVED","DATA_CHANNEL_OPEN","DATA_CHANNEL_CLOSED","ENDPOINT_CONN_STATUS_CHANGED","DOMINANT_SPEAKER_CHANGED","FORWARDED_SOURCES_CHANGED","PERMISSIONS_CHANGED","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","ENDPOINT_MESSAGE_RECEIVED","ENDPOINT_STATS_RECEIVED","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","VIDEO_SSRCS_REMAPPED","AUDIO_SSRCS_REMAPPED","formatRegExp","formatStr","args","makeLine","defaultOuterOrder","defaultInnerOrder","session","opts","version","media","mLine","payloads","outerOrder","innerOrder","el","global$1","WebSocketImplementation","getWebSocketImplementation","getDOMParserImplementation","DOMParserImplementation","getDummyXMLDOMDocument","createDocument","undefined","documentMode","doc","docStrings","ActiveXObject","_getIEXmlDom","safe_add$1","lsw","str2binl","bin","md5_cmn","num","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","hex_tab","binl2hex","binl2str","SASLMechanism","isClientFirst","priority","mechname","onStart","_connection","onChallenge","challenge","clientChallenge","onFailure","onSuccess","utils","out","cookies","cookieName","expires","domain","path","cookieObj","isObj","cookieValue","unescape","cookie","core_sha1","olde","rol","safe_add","sha1_ft","sha1_kt","core_hmac_sha1","bkey","str2binb","ipad","opad","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","$build","attrs","Strophe","Builder","$msg","$iq","$pres","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","STREAM","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","validTag","tag","validAttribute","validCSS","Status","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","CONNECTED","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ATTACHFAIL","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","DEBUG","INFO","WARN","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","TIMEOUT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elemName","func","childNode","isTagEqual","tagName","_xmlGenerator","xmlGenerator","xmlElement","xmlTextNode","xmlescape","xmlunescape","xmlHtmlNode","async","loadXML","copyElement","createHtml","cssAttrs","cssName","cssValue","escapeNode","unescapeNode","getNodeFromJid","jid","getDomainFromJid","bare","getBareJidFromJid","parts","getResourceFromJid","_handleError","fatal","sourceURL","line","lineNumber","_console","info","tree","reduce","getNamedItem","child","_requestId","_connectionPlugins","addConnectionPlugin","ptype","xmlns","nodeTree","up","moreattrs","cnode","impNode","xmlGen","importNode","newElem","fragment","xhtml","ns","from","matchBare","matchBareFromJid","user","Handler","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","nsMatch","isMatch","elem_type","TimedHandler","period","lastCalled","Connection","service","setProtocol","features","_sasl_data","do_bind","do_session","mechanisms","timedHandlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","connected","disconnecting","do_authentication","paused","restored","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","maxRetries","_onIdle","registerSASLMechanisms","iqFallbackHandler","iq","proto","protocol","worker","_proto","WorkerWebsocket","Websocket","Bosh","_reset","_requests","pause","resume","getUniqueId","suffix","uuid","addProtocolErrorHandler","status_code","callback","pass","wait","hold","route","authcid","disconnection_timeout","authzid","connect_callback","_changeConnectStatus","_connect","attach","sid","rid","wind","_attach","restore","_sessionCachingSupported","_restore","sessionStorage","setItem","removeItem","xmlInput","xmlOutput","rawInput","rawOutput","nextValidRid","_queueData","_send","sendPresence","errback","timeout","timeoutHandler","addHandler","stanza","deleteTimedHandler","addTimedHandler","deleteHandler","sendIQ","iqtype","element","_sendRestart","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","registerSASLMechanism","Mechanism","mechanism","pres","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","_abortAllRequests","_doDisconnect","status","condition","plugin","statusChanged","_dataRecv","req","raw","_reqToData","strip","_emptyQueue","cond","conflict","UNKOWN_REASON","_connect_cb","_callback","bodyWrap","hasFeatures","getElementsByTagNameNS","_no_auth_received","matched","authenticate","sortMechanismsByPriority","higher","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","_addSysHandler","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","request_auth_exchange","response","btoa","atob","_onLegacyAuthIQResult","_auth2_cb","serverSignature","attribMatch","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","resource","jidNode","_establishSession","_onSessionResultIQ","newList","super","auth_str","salt","iter","Hi","U_old","responseText","authMessage","cnonce","clientKey","serverKey","clientSignature","test_cnonce","core","Request","sends","xmlData","origFunc","date","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","querySelector","XMLHttpRequest","overrideMimeType","onreadystatechange","_conn","floor","errors","inactivity","lastResponseHeaders","_buildBody","keepalive","_cacheSession","_onRequestStateChange","_throttledRequestHandler","getItem","typ","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","getAllResponseHeaders","reqIs0","reqIs1","valid_request","too_many_retries","_removeRequest","_restartRequest","_processRequest","primary_timeout","secondary_timeout","server_error","content_type","contentType","open","sync","setRequestHeader","withCredentials","e2","sendFunc","customHeaders","backoff","min","new_service","host","pathname","_buildStream","_checkStreamError","connectstatus","errorString","_closeSocket","socket","_onOpen","_onError","_onClose","_onInitialMessage","_handleStreamStart","ver","streamStart","parsedMessage","see_uri","_replaceMessageHandler","string","_streamWrap","_onMessage","CLOSED","closeString","rawStanza","startString","lmap","SharedWorker","postMessage","_messageHandler","ev","_onWorkerMessage","_attachCallback","method_name","ReflectOwnKeys","Reflect","ReflectApply","receiver","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","EventEmitter","emitter","errorListener","removeListener","resolver","eventTargetAgnosticAddListener","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","listener","_getMaxListeners","that","_addListener","existing","warning","newListener","emit","warned","onceWrapper","wrapFn","_onceWrap","wrapped","_listeners","evlistener","arr","ret","unwrapListeners","arrayClone","listenerCount","copy","flags","wrapListener","RangeError","setMaxListeners","getMaxListeners","doError","er","context","listeners","addListener","prependListener","prependOnceListener","list","originalListener","spliceOne","removeAllListeners","rawListeners","eventNames","FUNC_TYPE","UNDEF_TYPE","OBJ_TYPE","STR_TYPE","MAJOR","MODEL","NAME","TYPE","VENDOR","ARCHITECTURE","CONSOLE","MOBILE","TABLET","SMARTTV","WEARABLE","EMBEDDED","AMAZON","APPLE","ASUS","BLACKBERRY","BROWSER","CHROME","FIREFOX","GOOGLE","HUAWEI","LG","MICROSOFT","MOTOROLA","OPERA","SAMSUNG","SHARP","SONY","XIAOMI","ZEBRA","FACEBOOK","CHROMIUM_OS","MAC_OS","enumerize","enums","str1","str2","lowerize","rgxMapper","ua","arrays","regex","props","strMapper","windowsVersionMap","regexes","browser","engine","EDGE","os","UAParser","extensions","getResult","_navigator","_ua","_uach","userAgentData","_rgxmap","mergedRegexes","_isSelfNav","getBrowser","_browser","brave","isBrave","getCPU","_cpu","getDevice","_device","mobile","standalone","getEngine","_engine","getOS","_os","getUA","setUA","CPU","DEVICE","ENGINE","OS","Zepto","randomInt","randomElement","RandomUtil","randomHexDigit","randomHexString","randomAlphanumStr","internals","firstOptions","reviver","protoAction","scan","nodes","SyntaxError","safeParse","ignoreError","SDPUtils","substr","localCName","generateIdentifier","splitLines","blob","splitSections","part","getDescription","sections","getMediaSections","matchPrefix","prefix","parseCandidate","foundation","component","ip","relatedAddress","relatedPort","tcpType","ufrag","usernameFragment","writeCandidate","parseIceOptions","parseRtpMap","parsed","payloadType","clockRate","channels","numChannels","writeRtpMap","preferredPayloadType","parseExtmap","uri","writeExtmap","headerExtension","preferredId","parseFmtp","kv","writeFmtp","parseRtcpFb","parameter","writeRtcpFb","lines","rtcpFeedback","fb","parseSsrcMedia","sp","ssrc","colon","parseSsrcGroup","semantics","ssrcs","getMid","mediaSection","mid","parseFingerprint","algorithm","getDtlsParameters","sessionpart","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","pwd","writeIceParameters","iceLite","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","mline","rtpmapline","fmtps","writeRtpDescription","caps","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","primarySsrc","secondarySsrc","flows","apt","encParam","codecPayloadType","rtx","fec","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","cname","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","planB","msidParts","parseSctpDescription","parseMLine","maxSizeLine","sctpPort","fmt","sctpMapLines","writeSctpDescription","sctp","output","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","sessionId","getDirection","getKind","isRejected","parseOLine","username","sessionVersion","netType","addressType","isValidSDP","toIntIfInt","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","rtp","fmtp","paramReducer","acc","candidates","scid","ListCache","entry","__data__","size","assocIndexOf","freeSelf","freeGlobal","objectProto","nativeObjectToString","symToStringTag","toStringTag","isOwn","unmasked","getRawTag","objectToString","isObject","baseGetTag","maskSrcKey","coreJsData","IE_PROTO","funcToString","reIsHostCtor","funcProto","reIsNative","toSource","object","getValue","baseIsNative","getNative","Hash","nativeCreate","MapCache","Map","getMapData","Stack","pairs","LARGE_ARRAY_SIZE","baseAssignValue","iteratee","keysFunc","iterable","freeExports","freeModule","allocUnsafe","isDeep","byteLength","typedArray","cloneArrayBuffer","byteOffset","objectCreate","transform","overArg","Ctor","isPrototype","baseCreate","getPrototype","isObjectLike","propertyIsEnumerable","baseIsArguments","isLength","isBuffer","objectCtorString","typedArrayTags","freeProcess","types","binding","nodeIsTypedArray","nodeUtil","isTypedArray","baseUnary","objValue","customizer","isNew","newValue","assignValue","reIsUint","inherited","isArr","isArg","isArguments","isBuff","isType","skipIndexes","baseTimes","isIndex","nativeKeysIn","isProto","isArrayLike","arrayLikeKeys","baseKeysIn","srcIndex","mergeFunc","safeGet","srcValue","stacked","assignMergeValue","isCommon","isTyped","copyArray","cloneBuffer","cloneTypedArray","copyObject","keysIn","toPlainObject","initCloneObject","baseMerge","baseFor","baseMergeDeep","nativeMax","identity","nativeNow","baseSetToString","stamp","remaining","setToString","otherArgs","thisArg","overRest","assigner","baseRest","sources","guard","isIterateeCall","JitsiConferenceErrors","AUTH_ERROR_TYPES","AUTHENTICATION_REQUIRED","CHAT_ERROR","SETTINGS_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","CONFERENCE_RESTARTED","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","DISPLAY_NAME_REQUIRED","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","PASSWORD_REQUIRED","RESERVATION_ERROR","VIDEOBRIDGE_NOT_AVAILABLE","JitsiConferenceEvents","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","AUDIO_INPUT_STATE_CHANGE","AUDIO_UNMUTE_PERMISSIONS_CHANGED","AUTH_STATUS_CHANGED","AV_MODERATION_APPROVED","AV_MODERATION_CHANGED","AV_MODERATION_PARTICIPANT_APPROVED","AV_MODERATION_PARTICIPANT_REJECTED","AV_MODERATION_REJECTED","BEFORE_STATISTICS_DISPOSED","BOT_TYPE_CHANGED","BREAKOUT_ROOMS_MOVE_TO_ROOM","BREAKOUT_ROOMS_UPDATED","CONFERENCE_CREATED_TIMESTAMP","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOIN_IN_PROGRESS","CONFERENCE_JOINED","CONFERENCE_LEFT","CONFERENCE_UNIQUE_ID_SET","CONFERENCE_VISITOR_CODECS_CHANGED","CONNECTION_ESTABLISHED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","DATA_CHANNEL_OPENED","DISPLAY_NAME_CHANGED","DTMF_SUPPORT_CHANGED","E2EE_VERIFICATION_AVAILABLE","E2EE_VERIFICATION_COMPLETED","E2EE_VERIFICATION_READY","ENCODE_TIME_STATS_RECEIVED","JVB121_STATUS","KICKED","LAST_N_ENDPOINTS_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_LEFT","LOBBY_USER_UPDATED","LOCK_STATE_CHANGED","MEMBERS_ONLY_CHANGED","MESSAGE_RECEIVED","METADATA_UPDATED","NO_AUDIO_INPUT","NOISY_MIC","NON_PARTICIPANT_MESSAGE_RECEIVED","P2P_STATUS","PARTICIPANT_KICKED","PARTICIPANT_SOURCE_UPDATED","PERMISSIONS_RECEIVED","PRIVATE_MESSAGE_RECEIVED","PARTCIPANT_FEATURES_CHANGED","PARTICIPANT_PROPERTY_CHANGED","PHONE_NUMBER_CHANGED","PROPERTIES_CHANGED","REACTION_RECEIVED","RECORDER_STATE_CHANGED","SERVER_REGION_CHANGED","SILENT_STATUS_CHANGED","START_MUTED_POLICY_CHANGED","SUBJECT_CHANGED","SUSPEND_DETECTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","TRACK_UNMUTE_REJECTED","TRANSCRIPTION_STATUS_CHANGED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","VIDEO_CODEC_CHANGED","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","VIDEO_UNMUTE_PERMISSIONS_CHANGED","VISITORS_SUPPORTED_CHANGED","VISITORS_MESSAGE","VISITORS_REJECTION","SetCache","predicate","bitmask","equalFunc","isPartial","arrLength","othLength","arrStacked","othStacked","seen","arrValue","othValue","compared","arraySome","othIndex","symbolProto","symbolValueOf","valueOf","symbolsFunc","arrayPush","nativeGetSymbols","resIndex","arrayFilter","symbol","stubArray","nativeKeys","baseKeys","baseGetAllKeys","getSymbols","mapTag","promiseTag","setTag","weakMapTag","dataViewTag","dataViewCtorString","DataView","mapCtorString","promiseCtorString","setCtorString","Set","weakMapCtorString","WeakMap","getTag","ctorString","argsTag","arrayTag","objectTag","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","mapToArray","setToArray","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","getAllKeys","objLength","objStacked","skipCtor","objCtor","othCtor","equalObjects","baseIsEqual","baseIsEqualDeep","JitsiTrackEvents","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","TRACK_OWNER_SET","TRACK_STREAMING_STATUS_CHANGED","AnalyticsEvents","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JVB_ICE_FAILED","ACTION_P2P_DECLINED","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","FEEDBACK","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createConferenceEvent","action","createConnectionStageReachedEvent","stage","actionSubject","createGetUserMediaEvent","createJingleEvent","createP2PEvent","createRemotelyMutedEvent","mediaType","createRtpStatsEvent","Events","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","ENCODE_TIME_STATS","LONG_TASKS_STATS","SAFARI","ELECTRON","REACT_NATIVE","PARSER_TO_JITSI_NAME","BLINK","WEBKIT","GECKO","ENGINES","_getJitsiBrowserInfo","browserInfo","engineVersion","BrowserDetection","_parser","reactNativeInfo","product","_detectReactNative","_detect","_name","_version","_engineVersion","isChrome","isFirefox","isSafari","isElectron","isReactNative","isChromiumBased","isWebKitBased","getName","getVersion","getEngineVersion","getOSVersion","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","isEngineVersionGreaterThan","isEngineVersionLessThan","isEngineVersionEqualTo","oldStats","newStatsArg","newStats","report","getRandomValues","rnds8","rng","msCrypto","byteToHex","REGEX","validate","buf","rnds","MAX_RECONNECT_TIME","CUSTOM_ERROR_CODES","obfuscateIP","obfuscateCandidate","cand","_ref","parentStatsSessionId","keepAliveInterval","reconnectTimeout","endpoint","meetingFqn","onCloseCallback","useLegacy","obfuscate","pingInterval","statsSessionId","uuidv4","reconnectSpentTime","canSendMessage","sequenceNumber","protocolVersion","setTransportParams","sendMessage","copyMsg","isConnected","isClosed","_len","_key","statsEntry","_len2","_key2","myData","jsonRepr","stats","splitBy","obfuscator","keepAlive","isBreakoutRoom","isReconnect","closeEvent","reconnectTimeoutTimeCandidate","reconnectTimeoutTime","firstSN","lastSN","lastReceivedSNIndex","findIndex","DummyLocalStorage","_storage","keyName","keyValue","ignore","storageCopy","jitsiLocalStorage","localStorage","_localStorageDisabled","isLocalStorageDisabled","setLocalStorageDisabled","dontEmitChangedEvent","localStorageContent","_callStatsUserName","_machineId","externalStorage","callStatsUserName","_generateStatsId","machineId","amDid","jitsiMeetId","generateJitsiMeetId","NodeEventEmitter","DefaultLogStorage","rtcStats","isTraceAvailable","logEntries","RTCStats","sendStatsEntry","RTCStatsEvents","RTC_STATS_WC_DISCONNECTED","RTC_STATS_PC_EVENT","_defineProperty","_trace","startWithConnection","_options$name","_this$_defaultLogColl","analytics","rtcstatsEndpoint","rtcstatsEnabled","rtcstatsPollInterval","pollInterval","rtcstatsSendSdp","sendSdp","_initialized","_ref2","connectionFilter","prefixesToWrap","eventCallback","peerconnectioncounter","browserDetection","OrigPeerConnection","peerconnection","origConfig","optional","isP2P","some","rtcStatsSFUP2P","server","__dtlsTransport","base","standardReport","standardStats","nativeMethod","streamInfo","trackOrKind","rtcStatsId","endsWith","getSenders","newstate","origGetUserMedia","cb","eb","gum","origGetDisplayMedia","gdm","rtcstatsInit","traceOptions","_connectTrace","_defaultLogCollector","sendIdentity","confName","_startedWithNewConnection","attachToConference","conference","_Settings$callStatsUs","confConfig","_statsCurrentId","displayName","localId","Settings","_conference$getBreako","getBreakoutRooms","endpointId","myUserId","meetingUniqueId","getMeetingUniqueId","_this$_defaultLogColl2","identityData","_this$_defaultLogColl3","traceOptionsComplete","traceInit","_this$_trace","_this$_defaultLogColl4","_this$_trace2","statsType","_this$_trace3","getDefaultLogCollector","doesVideoMuteByStreamRemove","isAndroidBrowser","isIosBrowser","isMobileDevice","isTwa","matchMedia","isSupported","_navigator2","_getSafariVersion","MIN_REQUIRED_CHROME_VERSION","MIN_REQUIRED_FIREFOX_VERSION","isSupportedAndroidBrowser","isSupportedIOSBrowser","_getIOSVersion","isUserInteractionRequiredForUnmute","supportsVideoMuteOnConnInterrupted","supportsBandwidthStatistics","supportsCodecPreferences","RTCRtpReceiver","getCapabilities","supportsCodecSelectionAPI","supportsDDExtHeaders","supportsDeviceChangeEvent","ondevicechange","supportsPerformanceObserver","PerformanceObserver","supportedEntryTypes","supportsReceiverStats","supportsRTTStatistics","supportsScalabilityModeAPI","supportsTrackBasedStats","supportsVP9","supportsSVC","usesSdpMungingForSimulcast","usesRidsForSimulcast","supportsGetDisplayMedia","supportsEncodedTransform","RTCRtpScriptTransform","supportsInsertableStreams","createEncodedStreams","ReadableStream","supportsAudioRed","supportsVADDetection","supportsRTX","_analytics$watchRTCEn","watchRTCEnabled","isWatchRTCEnabled","disableThirdPartyRequests","isAnalyticsEnabled","_options$watchRTCConf","watchRTCConfigParams","watchRTC","roomName","userName","disposed","analyticsHandlers","permanentProperties","conferenceName","addPermanentProperties","dispose","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","properties","setConferenceName","sendEvent","eventName","_verifyRequiredFields","objectType","containerType","containerId","objectId","_maybeCacheEvent","AudioContext","webkitAudioContext","LocalStatsCollector","intervalId","intervalMilis","audioLevel","analyser","safeCounterIncrement","number","nextValue","MAX_SAFE_INTEGER","calculateAverage","valueArray","filterPositiveValues","isLocalStatsSupported","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","_this$analyser","_this$source","connectAudioContext","_window","disconnectAudioContext","suspend","RunningAverage","average","addNext","getAverage","safeSubtract","isValidNumber","PerformanceObserverStats","statsInterval","eventEmitter","longTasks","maxDuration","performanceStatsInterval","getLongTasksStats","avgRatePerMinute","maxDurationMs","startObserver","longTaskEventHandler","getEntries","task","duration","observer","observe","buffered","startTime","longTasksIntervalId","_lastTimeStamp","StatisticsEvents","stopObserver","MediaType","_runInLiteMode","runInLiteMode","_ssrcRewriting","ssrcRewritingEnabled","isRunInLiteModeEnabled","isSsrcRewritingSupported","calculatePacketLoss","lostPackets","totalPackets","SsrcStats","loss","download","upload","resolution","ConferenceStats","packetLoss","StatsCollector","audioLevelsInterval","currentStatsReport","previousStatsReport","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","speakerList","statsIntervalId","statsIntervalMilis","ssrc2stats","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","setEncodeStats","encodeStats","setSpeakerList","errorCallback","startAudioLevelStats","audioLevels","getAudioLevels","processStats","processStatsReport","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","ssrcStats","_codecs$participantId","isDownloadStream","packetsTotal","ssrcBitrateDownload","ssrcBitrateUpload","getTrackBySSRC","audioCodec","videoCodec","isAudioTrack","participantId","getParticipantId","FeatureFlags","userCodecs","audio","video","isVideoTrack","userResolutions","isLocal","doesTrueSimulcast","localSsrcs","getLocalVideoSSRCs","localSsrc","_this$ssrc2stats$get","ssrcResolution","userFramerates","total","getNonNegativeValue","_calculateBitrate","fieldName","bytesNow","bytesBefore","bytesProcessed","timeMs","bitrateKbps","_calculateFps","frameRate","byteSentStats","encodedTimeStatsPerSsrc","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","localUsedCandidate","localip","conferenceStatsTransport","p2p","localCandidateType","remoteCandidateType","networkType","rtt","currentRoundTripTime","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","_now$active","isStreamActive","active","codecShortType","totalEncodeTime","framesEncoded","encodeTimeStats","encodeTime","qualityLimitationReason","VIDEO","remoteSource","localVideoTracks","getLocalTracks","getSsrcByTrackId","_instances","Statistics","rtpStatsMap","xmpp","instances","WatchRTC","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","longTasksStatsInterval","LocalStats","startRemoteStats","stopRemoteStats","rtpStats","RTPStats","localStats","startLocalStats","localStat","stopLocalStats","getOriginalStream","addAudioLevelListener","removeAudioLevelListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addEncodeTimeStatsListener","removeEncodeTimeStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","performanceObserverStats","removeLongTasksStatsListener","tpcId","_stopRemoteStats","delete","tpc","sendFeedback","overall","comment","LOCAL_JID","sendAnalyticsAndLog","eventToLog","sendAnalytics","EventEmitterForwarder","dest","forward","srcEvent","removeListeners","JitsiConferenceEventManager","xmppListeners","setupChatRoomListeners","chatRoom","room","chatRoomForwarder","PARTICIPANT_FEATURES_CHANGED","participant","getParticipantById","setFeatures","AUDIO_MUTED_BY_FOCUS","actor","AUDIO","mutedByFocusActor","rtc","setAudioMute","isMutedByFocus","VIDEO_MUTED_BY_FOCUS","mutedVideoByFocusActor","setVideoMute","isVideoMutedByFocus","MUC_JOINED","MUC_JOIN_IN_PROGRESS","MEETING_ID_SET","CONFERENCE_TIMESTAMP_RECEIVED","_onMucJoined","isJvbConnectionInterrupted","connectionTimes","owner","sourceName","videoType","getSourceName","setOwner","setSourceName","_setVideoType","ROOM_JOIN_ERROR","ROOM_CONNECT_ERROR","ROOM_CONNECT_NOT_ALLOWED_ERROR","ROOM_CONNECT_MEMBERS_ONLY_ERROR","ROOM_MAX_USERS_ERROR","BRIDGE_DOWN","CONNECTION_RESTARTED","jingleSession","_onConferenceRestarted","MUC_DESTROYED","CHAT_ERROR_RECEIVED","SETTINGS_ERROR_RECEIVED","SESSION_ACCEPT_TIMEOUT","getStatus","setTerminator","setInitiator","setParticipantPropertyListener","onMemberKicked","onSuspendDetected","MUC_LOCK_CHANGED","MUC_MEMBERS_ONLY_CHANGED","MUC_VISITORS_SUPPORTED_CHANGED","MUC_MEMBER_JOINED","onMemberJoined","MUC_LOBBY_MEMBER_JOINED","MUC_LOBBY_MEMBER_UPDATED","MUC_LOBBY_MEMBER_LEFT","MUC_MEMBER_BOT_TYPE_CHANGED","_onMemberBotTypeChanged","MUC_MEMBER_LEFT","onMemberLeft","MUC_LEFT","MUC_DENIED_ACCESS","onDisplayNameChanged","onSilentStatusChanged","LOCAL_ROLE_CHANGED","onLocalRoleChanged","MUC_ROLE_CHANGED","onUserRoleChanged","AuthenticationEvents","authEnabled","authIdentity","txt","myJid","ts","nick","isGuest","messageId","reactionList","PRESENCE_STATUS","_status","JSON_MESSAGE_RECEIVED","payload","ROOM_METADATA_UPDATED","metadata","startMuted","_updateStartMutedPolicy","setupRTCListeners","onRemoteTrackAdded","onRemoteTrackRemoved","dominant","previous","silence","lastDominantSpeaker","dominantSpeakerIsSilent","statistics","sendDominantSpeakerEvent","roomjid","jvbJingleSession","processSourceMap","bwe","removeXMPPListeners","setupXMPPListeners","_addConferenceXMPPListener","CALL_INCOMING","onIncomingCall","CALL_ACCEPTED","onCallAccepted","TRANSPORT_INFO","onTransportInfo","CALL_ENDED","onCallEnded","actorJid","actorParticipant","getParticipants","getJid","setupStatisticsListeners","setAudioLevel","startSilent","getLocalSSRC","onByteSentStatsReceived","JitsiParticipant","statsID","isReplacing","isReplaced","isSilent","_jid","_id","_conference","_displayName","_supportsDTMF","_tracks","_role","_hidden","_statsID","_properties","_identity","_isReplacing","_isReplaced","_isSilent","_features","_sources","_isMediaTypeMuted","getType","isMuted","_setSources","_sourceByMediaType","sourceByMediaType","sourceInfo","getBotType","_botType","getConference","getConnectionJid","_connectionJid","getDisplayName","getFeatures","getId","getIdentity","getProperty","getRole","getSources","getStatsID","getTracksByMediaType","hasFeature","feature","isAudioMuted","isHidden","isHiddenFromRecorder","_this$_identity","isModerator","isVideoMuted","setBotType","newBotType","setConnectionJid","newJid","newFeatures","setIsReplaced","newIsReplaced","setIsReplacing","newIsReplacing","setIsSilent","newIsSilent","oldValue","setRole","newRole","supportsDTMF","JitsiTrackErrors","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_NOT_SUPPORTED_ERROR","SCREENSHARING_USER_CANCELED","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","TRACK_TOO_MANY_TRACKS_IN_STREAM","TRACK_NO_STREAM_TRACKS_FOUND","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackError","devices","constraintName","constraint","getResolutionFromFailedConstraint","failedConstraintName","_constraints$video","mandatory","minHeight","JitsiConnectionEvents","CONNECTION_FAILED","CONNECTION_REDIRECTED","PROPERTIES_UPDATED","safeJsonParse","Bourne","symbolToString","baseToString","arrayMap","isSymbol","reEscapedHtml","reHasEscapedHtml","unescapeHtmlChar","JitsiConnectionErrors","CONFERENCE_REQUEST_FAILED","CONNECTION_DROPPED_ERROR","NOT_LIVE_ERROR","OTHER_ERROR","SERVER_ERROR","XEP","_this","clearRejectTimeout","_timeout","setRejectTimeout","ms","Listenable","addCancellableListener","kJitsiE2EE","E2EEcontext","sharedKey","baseUrl","idx","lastIndexOf","workerUrl","workerBlob","Blob","createObjectURL","_worker","Worker","operation","cleanup","cleanupAll","handleReceiver","receiverStreams","readableStream","readable","writableStream","handleSender","senderStreams","setEnabled","setKey","keyIndex","KeyHandler","e2eeCtx","E2EEContext","_enabling","_firstEnable","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","isEnabled","_setEnabled","setLocalParticipantProperty","_restartMediaSessions","getMediaSessions","_setupSenderE2EEForTrack","localTracks","findReceiverForTrack","findSenderForTrack","ExternallyManagedKeyHandler","keyInfo","encryptionKey","reWhitespace","reTrimStart","trimmedEndIndex","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","baseTrim","isBinary","nativeMin","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","time","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","timeWaiting","remainingWait","debounced","isInvoking","leadingEdge","toNumber","cancel","E2EEErrors","emojiMapping","sasGenerators","decimal","sasBytes","emoji","REQ_TIMEOUT","OLM_MESSAGE_TYPE","OLM_MESSAGE_TYPES","OLM_KEY_VERIFICATION_MAC_INFO","OLM_KEY_VERIFICATION_MAC_KEY_IDS","kOlmData","OlmAdapterEvents","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_SAS_AVAILABLE","PARTICIPANT_SAS_READY","PARTICIPANT_KEY_UPDATED","PARTICIPANT_VERIFICATION_COMPLETED","OlmAdapter","_conf","_init","_mediaKey","_mediaKeyIndex","_reqs","_sessionInitialization","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceLeft","_onParticipantLeft","_onParticipantPropertyChanged","myId","initSessions","promises","localParticipantId","FEATURE_E2EE","_sendSessionInit","allSettled","Olm","updateKey","pId","olmData","_getParticipantOlmData","JITSI_MEET_MUC_TYPE","olm","ciphertext","_encryptKeyInfo","_sendMessage","updateCurrentMediaKey","clearParticipantSession","free","clearAllParticipantsSessions","markParticipantVerified","isVerified","sasVerification","E2EE_SAS_CHANNEL_VERIFICATION_FAILED","E2EE_SAS_INVALID_SAS_VERIFICATION","sas","sasMacSent","is_their_key_set","_sendSasMac","_olmAccount","Account","_idKeys","_safeJsonParse","identity_keys","get_library_version","_onIdKeysReady","startVerification","SAS","transactionId","startContent","isInitiator","startMessage","idKeys","keyType","_onParticipantE2EEChannelReady","base64js","encrypt","_sendError","Session","create_outbound","idKey","otKey","ack","pendingSessionUuid","create_inbound","remove_one_time_keys","decrypt","lastKey","isEqual","_olmData$sasVerificat","pubKey","get_pubkey","commitment","_computeCommitment","acceptMessage","sasCommitment","keyMessage","keySent","theirKey","E2EE_SAS_COMMITMENT_MISMATCHED","set_their_key","myInfo","theirInfo","generatedSas","generateSas","generate_bytes","mac","baseInfo","calculate_mac","E2EE_SAS_KEYS_MAC_MISMATCH","ed25519","E2EE_SAS_MISSING_KEY","computedMac","E2EE_SAS_MAC_MISMATCH","isE2EEEnabled","generate_one_time_keys","otKeys","one_time_keys","curve25519","mark_keys_as_published","keyList","deviceKeyId","macMessage","olmUtil","Utility","sha256","ManagedKeyHandler","_conferenceJoined","_olmAdapter","_rotateKey","debounce","_rotateKeyImpl","_ratchetKey","_ratchetKeyImpl","_onParticipantKeyUpdated","_onParticipantSasReady","_onParticipantSasAvailable","_onParticipantVerificationCompleted","_onParticipantJoined","_generateKey","material","keyBytes","subtle","importKey","newKey","textEncoder","TextEncoder","deriveBits","encode","ratchet","success","E2EEncryption","e2ee","_externallyManaged","externallyManagedKey","_keyHandler","_config$testing","testing","disableE2EE","enableEncodedTransformSupport","setEncryptionKey","_this$_keyHandler$sas","_this$_keyHandler$sas2","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","parseDiscoInfo","identities","category","Caps","disco","rooms","externalFeatures","emuc","EMUC_ROOM_ADDED","_addChatRoom","EMUC_ROOM_REMOVED","_removeChatRoom","addFeature","CAPS","external","_generateVersion","_updateRoomWithExternalFeatures","removeFeature","removeFromPresence","addOrReplaceInPresence","getFeaturesAndIdentities","_getDiscoInfo","_fixChatRoomPresenceMap","_notifyVersionChanged","sortedIdentities","accumulatedValue","tmp","sortedFeatures","sha1","generateSha","_identities","NETWORK_INFO_EVENT","_current","isOnline","updateNetworkInfo","getJitterDelay","retry","minDelay","ResumeTask","stropheConnection","_stropheConn","_resumeRetryN","_retryDelay","_resumeTimeout","_networkOnlineListener","retryCount","retryDelay","schedule","_cancelResume","_removeNetworkOnlineListener","NetworkInfo","_scheduleResume","_resumeConnection","streamManagement","resumeToken","getResumeToken","pattern","oldToken","LastRequestTracker","_lastSuccess","_lastFailedMessage","startTracking","xmppConnection","originalRawInput","rawMessage","getLastFailedMessage","getTimeSinceLastSuccess","getConnectionPluginDefinition","ConnectionPluginListenable","PingConnectionPlugin","ConnectionPlugin","getTimeSinceLastServerResponse","onPingThresholdExceeded","pingOptions","failedPings","_onPingThresholdExceeded","_getTimeSinceLastServerResponse","pingTimeout","pingThreshold","threshold","pingTimestampsToKeep","pingExecIntervals","ping","_addPingExecutionTimestamp","to","PING","sendIQ2","startInterval","remoteJid","_lastServerCheck","errmsg","stopInterval","getPingSuspendTime","pingIntervals","maxInterval","previousTS","currentInterval","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","enable","_connectionStatus","_resumeToken","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","conn","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","delta","_throwError","XmppConnection","CONN_STATUS_CHANGED","CONN_SHARD_CHANGED","enableWebsocketResume","websocketKeepAlive","websocketKeepAliveUrl","serviceUrl","shard","xmppPing","_options","_usesWebsocket","startsWith","_rawInputTracker","LastSuccessTracker","_resumeTask","_deferredIQs","_onPingErrorThresholdExceeded","_oneSuccessfulConnect","websocket","isUsingWebSocket","pingDomain","_this$_options$pingOp","_maybeStartWSKeepAlive","_stropheConnectionCb","targetCallback","blockCallback","_this$_options$pingOp2","_maybeEnableStreamResume","_keepAliveAndCheckShard","_processDeferredIQs","_tryResumingConnection","_wsKeepAlive","_len3","_key3","_clearDeferredIQs","deferred","closeWebsocket","intervalWithJitter","responseShard","timeLeft","_this$_stropheConn","sendUnavailableBeacon","sendBeacon","createExpBackoffTimer","step","Moderator","_this$options$hosts","_this$options$hosts2","getNextTimeout","getNextErrorTimeout","sipGatewayEnabled","targetJid","hosts","targetUrl","conferenceRequestUrl","focusUserJids","focusUserJid","isFocusJid","focusJid","isSipGatewayEnabled","_createConferenceRequest","roomJid","_config$analytics$rtc","_config$analytics","startAudioMuted","startVideoMuted","conferenceRequest","machineUid","iAmRecorder","iAmSipGateway","preferVisitor","visitor","_createConferenceIq","_parseConferenceIq","resultIq","vnode","authentication","externalAuth","live","sendConferenceRequest","conferenceRequestSent","_handleIqSuccess","_handleIqError","ok","resultJson","_handleSuccess","statusText","sessionError","notAuthorized","finally","_breakoutMovingToMain","authenticationEnabled","waitMs","reservationErr","errorTextNode","errorMsg","invalidSession","errorIq","logout","_items","_onDiscoInfo","_onDiscoItems","addIdentity","var_name","addItem","call_back","items","_buildIQResult","query_attrs","iqresult","JitsiTranscriptionStatus","ON","OFF","AVModeration","_xmpp","_mainRoom","_moderationEnabledByType","_whitelistAudio","_whitelistVideo","AV_MODERATION_RECEIVED","avModerationComponentAddress","approve","jidToWhitelist","jidToBlacklist","removed","approved","whitelists","newWhitelists","oldList","FEATURE_KEY","BREAKOUT_ROOM_ACTIONS","ADD","MOVE_TO_ROOM","REMOVE","RENAME","BREAKOUT_ROOM_EVENTS","BreakoutRooms","_handleMessages","BREAKOUT_ROOMS_EVENT","_rooms","createBreakoutRoom","subject","removeBreakoutRoom","breakoutRoomJid","renameBreakoutRoom","sendParticipantToRoom","participantJid","isFeatureSupported","breakoutRoomsFeatures","getComponentAddress","breakoutRoomsComponentAddress","_setIsBreakoutRoom","_isBreakoutRoom","myroomjid","_setMainRoomJid","_mainRoomJid","getMainRoomJid","filteredPayload","_filterUpdatePayload","hiddenDomain","filteredRooms","participants","filteredParticipants","EMAIL_COMMAND","Lobby","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoomJid","lobbySupported","initialDiscoRoomInfoReceived","membersOnlyEnabled","setMembersOnly","unsubscribers","unsubscribe","ROOM_DISCO_INFO_UPDATED","ROOM_DISCO_INFO_FAILED","lobbyRoom","sendPrivateMessage","getLocalId","addMessageListener","removeMessageHandler","leave","setLobbyRoomJid","joined","email","customDomain","createRoom","disableDiscoInfo","disableFocus","enableLobby","addPresenceListener","isHiddenDomain","botType","members","avatar","clean","isSelfPresence","INVITE_MESSAGE_RECEIVED","invitePassword","_this$lobbyRoom","denyAccess","kick","approveAccess","mainRoomJid","membersToApprove","ids","memberRoomJid","msgToSend","RoomMetadata","ROOM_METADATA_EVENT","_metadata","setMetadata","getMetadata","roomMetadataComponentAddress","packet2JSON","json2packet","packet","filterNodeFromPresenceJSON","MEMBERS_AFFILIATIONS","extractIdentityInformation","hiddenFromRecorderFeatureEnabled","userInfo","groupInfo","group","ChatRoom","replaceParticipant","presMap","presHandlers","_removeConnListeners","inProgressEmitted","focusMucJid","noBridgeAvailable","eventsForwarder","moderator","lobby","avModeration","breakoutRooms","roomMetadata","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","transcriptionStatus","xns","statsId","presenceUpdateTime","onConnStatusChanged","fromJoin","presenceSyncTime","doLeave","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","meetingCreatedTSValEl","membersOnly","lobbyRoomField","isBreakoutField","breakoutMainRoomField","visitorsSupported","roomMetadataEl","roomMetadataText","meetingId","createNonAnonymousRoom","getForm","form","formSubmit","onPresence","member","statusEl","hasStatusUpdate","hasVersionUpdate","xElement","mucUserItem","isReplaceParticipant","affiliation","isFocus","PRESENCE_RECEIVED","fromHiddenDomain","presence","xEl","_extractFeatures","region","_this$options","deploymentInfo","userRegion","permissions","permissionsMap","_initFocus","memberOfThis","participantProperties","displayJids","CONFERENCE_PROPERTIES_CHANGED","FEATURE_TRANSCRIBER","att","phone","pin","processNode","var","focusFeatures","_this$presHandlers$no","elementName","SENDING_CHAT_MESSAGE","sendReaction","reaction","receiverId","SENDING_PRIVATE_CHAT_MESSAGE","setSubject","valueToProcess","onPresenceUnavailable","destroySelect","reasonSelect","isKick","membersKeys","actorSelect","actorNick","onMessage","settingsErrorMsg","reactions","reactionElem","subjectText","dateParts","invite","passwordSelect","jsonMessage","parsedJson","tryParseJSONAndVerify","nickEl","onPresenceError","errorDescriptionNode","anonymousdomain","txtNode","ROOM_CREATION_RESTRICTION","_roomCreationRetries","NO_MAIN_PARTICIPANTS","PROMOTION_NOT_ALLOWED","NO_VISITORS_LOBBY","lobbyRoomNode","waitingForHost","_errorDescriptionNode","setAffiliation","grantIQ","kickIQ","lockRoom","onNotSupported","formsubmit","affiliationsIq","sendIq","formToSubmit","addToPresence","matchingNodes","getFromPresence","tagHandlers","removePresenceListener","handlerIdx","mucJid","getMediaPresenceInfo","CAMERA","mutedNode","codecTypeNode","videoTypeNode","codecType","getMemberRole","peerJid","getLastPresence","mucNick","dial","rayo","hangup","getLobby","getAVModeration","getMetadataHandler","getPhoneNumber","getPhonePin","getMeetingId","muteParticipant","mute","iqToFocus","onMute","onMuteVideo","_this$lobby","onMucLeft","doReject","endConferenceComponentAddress","MucConnectionPlugin","onVisitors","isRoomCreated","visitors","getSymbolsIn","reFlags","regexp","dataView","cloneDataView","lastIndex","nodeIsMap","isMap","nodeIsSet","isSet","funcTag","cloneableTags","baseClone","isFlat","isFull","initCloneArray","isFunc","copySymbolsIn","baseAssignIn","copySymbols","baseAssign","initCloneByTag","subValue","getAllKeysIn","arrayEach","CLONE_DEEP_FLAG","CodecMimeType","DEFAULT_LAST_N","SIM_LAYERS","scaleFactor","SSRC_GROUP_SEMANTICS","STANDARD_CODEC_SETTINGS","av1","maxBitratesVideo","low","standard","high","fullHd","ultraHd","ssHigh","scalabilityModeEnabled","useSimulcast","useKSVC","h264","vp8","vp9","VIDEO_CODECS_BY_COMPLEXITY","AV1","VP9","VP8","VIDEO_QUALITY_LEVELS","VIDEO_QUALITY_SETTINGS","_createSourceExtension","sourceCompactJson","isVideo","DESKTOP","SOURCE_ATTRIBUTES","_createSsrcGroupExtension","ssrcGroupCompactJson","FID","SIM","_getOrCreateRtpDescription","jingle","descriptionElements","RTP_MEDIA","expandSourcesFromJson","jsonMessageXml","_json","audioRtpDescription","videoRtpDescription","ssrcMap","ownerSources","videoSources","videoSsrcGroups","audioSources","audioSsrcGroups","_videoSources$i","_audioSources$i","MediaDirection","obtainStream","_createObtainStreamMethod","_electronSkipDisplayMedia","obtainScreenOnElectron","obtainScreenFromGetDisplayMediaRN","obtainScreenFromGetDisplayMedia","_getAudioConstraints","audioQuality","stereo","autoGainControl","channelCount","echoCancellation","noiseSuppression","_window$JitsiMeetScre","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingFrameRate","desktopSharingResolution","desktopSharingSources","streamId","streamType","_desktopSharingFrameR","_desktopSharingFrameR2","_desktopSharingResolu","_desktopSharingResolu2","_desktopSharingResolu3","_desktopSharingResolu4","_desktopSharingResolu5","_desktopSharingResolu6","audioConstraints","optionalConstraints","chromeMediaSource","chromeMediaSourceId","minFrameRate","maxFrameRate","maxHeight","setContentHint","sourceId","sourceType","_this$options2","_this$options3","constraintOpts","screenShareSettings","preferCurrentTab","desktopPreferCurrentTab","systemAudio","desktopSystemAudio","surfaceSwitching","desktopSurfaceSwitching","desktopDisplaySurface","displaySurface","selfBrowserSurface","desktopSelfBrowserSurface","cursor","_track$getSettings","_this$options$testing","getVideoTracks","minFps","trackConstraints","testMode","applyConstraints","videoTracks","getSettings","_errorDetails$errorMs","errorDetails","errorName","errorStack","DOMException","NOT_SUPPORTED_ERR","desktopTrack","contentHint","setDesktopSharingFrameRate","maxFps","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","findLine","parseICEUfrag","parseICEPwd","buildICEUfrag","frag","buildICEPwd","parseMID","parseMSIDAttribute","ssrcLines","msidLine","buildMLine","parseRTPMap","clockrate","parseSCTPMap","parseSCTPPort","buildRTPMap","parseCrypto","fingerprint","parseICECandidate","elems","network","buildICECandidate","hasOwnAttribute","parseSSRC","desc","parseSSRCGroupLine","parseSourceNameLine","sourceNameLine","ssrcSdpLine","parseVideoTypeLine","videoTypeLine","parseRTCPFB","haystack","needle","findLines","needles","candidateToJingle","candidateFromJingle","parsePrimaryVideoSsrc","videoMLine","numSsrcs","ssrcInfo","numGroups","ssrcGroups","fidGroup","simGroup","generateSsrc","getSsrcAttribute","attributeName","ssrcLine","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","getUfrag","ufragLines","preferCodec","codecName","sortPayloadTypes","matchingPayloadTypes","H264","payloadsWithMode0","payloadTypes","payloadIndex","stripCodec","highProfile","highProfileCodecs","removePts","rtxApts","rtxPts","keepPts","INACTIVE","rtcpFb","SDP","_updateSessionAndMediaSections","failICE","removeTcpCandidates","removeUdpCandidates","_adjustMsidSemantic","msid","mediaI","updateRemoteSources","sourceMap","isAdd","updatedMidIndices","ssrcList","groups","addMlineForNewSource","updatedMsid","SENDONLY","isRemote","cloneDeep","RECVONLY","mids","fromJingle","BUNDLE_MEDIA","jingle2media","newSession","newMedia","_mLine$ssrcs","APPLICATION","newMline","_mLine$ssrcGroups","_mline$ssrcs","bundleOnly","ssrcId","otherSsrc","otherSource","msidSemantic","semantic","token","getMediaSsrcMap","mediaItem","mediaindex","linessrc","ICE_UDP_TRANSPORT","SCTP_DATA_CHANNEL","DTLS_SRTP","hasAttribute","SENDRECV","__","rtcpFbFromJingle","RTP_HEADER_EXTENSIONS","hdrExt","userSources","nonUserSources","isUserSource","sourceStr","_value","payloadtype","feedbackElementTrrInt","RTP_FEEDBACK","rtcpFbToJingle","mediaIndex","feedback","toJingle","thecreator","mediaTypes","assrcline","isRecvOnly","availableSsrc","ssrcParameters","creator","initialLastN","rtpmap","afmtpline","ridLines","rids","ridLine","extmapLine","extmap","senders","transportToJingle","sctpport","sctpmap","sctpAttrs","setupLine","iceParameters","SDPDiffer","mySdp","othersSdp","getNewMedia","mySources","othersSources","othersSource","mySource","othersSsrcs","modify","modified","diffSourceInfo","ssrcNum","mediaSsrc","onlyOnce","callFn","_defer","hasQueueMicrotask","queueMicrotask","hasSetImmediate","setImmediate","hasNextTick","nextTick","defer","DLL","tail","removeLink","newNode","setInitial","cur","testFn","curr","dll","handlePromise","invokeCallback","isAsync","asyncFn","asyncify","concurrency","wrapAsync","numRunning","workersList","drain","saturated","unsaturated","processingScheduled","_insert","insertAtFront","rejectOnError","rej","promiseCallback","started","_createTaskItem","_tasks","_createCB","tasks","idle","_maybeDrain","eventMethod","handleAndRemove","isProcessing","datum","pushAsync","kill","unshiftAsync","running","defineProperties","ClearedQueueError","AsyncQueue","_queue","_processQueueTasks","_stopped","_taskCallbacks","finishedCallback","shutdown","JingleSessionState","PENDING","ACTIVE","ENDED","JingleSession","localJid","mediaConstraints","pcConfig","usedrip","dripContainer","_signalingLayer","initiatorJid","responderJid","initialize","signalingLayer","doInitialize","addIceCandidates","getState","addSources","removeSources","terminate","failure","acceptOffer","MediaSessionEvents","IQ_TIMEOUT","_addSourceElement","ssrc_","_s$videoType","JingleSessionPC","parseVideoSenders","jingleContents","videoContents","parseSourceMaxFrameHeight","receiverConstraints","sourceFrameHeightSel","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","_sourceReceiverConstraints","_localSendReceiveVideoActive","_remoteSendReceiveVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","numRemoteVideoSources","numRemoteAudioSources","remoteSourceMaxFrameHeights","modificationQueue","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_addOrRemoveRemoteStream","_this$peerconnection$","remoteDescription","errMsg","currentRemoteSdp","sourceDescription","_processSourceMapFromJingle","modifiedMids","desiredDirection","getDesiredMediaDirection","_renegotiate","_addRemoveTrack","isRemove","operationName","workFunction","removeTrackFromPc","addTrackToPc","shouldRenegotiate","_assertNotEnded","_processNewJingleOfferIq","offerIq","remoteSdp","webrtcIceTcpDisable","webrtcIceUdpDisable","sourceElement","sourceElementArray","descriptionsWithSources","removeSsrcs","_sourceDescription$ge","DESKTOP_HIGH_FPS","setSSRCOwner","jidOrEndpointId","removeSSRCOwners","groupSsrcs","optionalRemoteSdp","oldLocalSDP","setRemoteDescription","createAnswer","setLocalDescription","notifyMySSRCUpdate","_sendContentModify","sessionModify","initiator","newJingleErrorHandler","_sendIceCandidate","localSDP","ice","sdpMLineIndex","jcand","_sendIceCandidates","cands","sdpMid","fingerprintLine","required","_sendSessionAccept","accept","responder","channelLastN","_sendSessionInitiate","offerSdp","jingleOffer","setOfferAnswerCycle","SESSION_ACCEPT","addTracks","SESSION_ACCEPT_ERROR","iceCandidates","rtcCandidate","RTCIceCandidate","iceCandidate","addIceCandidate","outerHTML","addRemoteStream","replaceTracks","recvOnlyTransceiver","currentDirection","configureVideoSenderEncodings","onicecandidate","oniceconnectionstatechange","onnegotiationneeded","onsignalingstatechange","finishCallback","_options$testing","_options$testing$enab","_options$testing2","wasstable","pcOptions","disableRtx","gatherStats","maxstats","capScreenshareBitrate","codecSettings","enableInsertableStreams","usesCodecSelectionAPI","enableCodecSelectionAPI","videoQuality","settings","fromEntries","_options$desktopShari","forceTurnRelay","disableSimulcast","createPeerConnection","phase","isStable","reconnect","ICE_CONNECTION_STATE_CHANGED","iceStarted","CONNECTION_ICE_FAILED","onconnectionstatechange","icestate","configureAudioSenderEncodings","getIceConnectionState","getConnectionState","getRemoteSourcesRecvMaxFrameHeight","addTrack","createOffer","processLocalSdpForTransceiverInfo","modifyContents","newVideoSenders","sourceMaxFrameHeights","REMOTE_SOURCE_CONSTRAINTS_CHANGED","isRemoteVideoActive","setVideoTransferActive","request","failureCb","errResponse","errorElSel","errorReasonSel","errorMsgSel","oldSDP","newSDP","getSignaledSourceInfo","sdpDiffer","signaledSsrcs","ctx","removedSsrcInfo","SOURCE_REMOVE","SOURCE_REMOVE_ERROR","addedSsrcInfo","SOURCE_ADD","SOURCE_ADD_ERROR","onTerminated","reasonCondition","reasonText","getRemoteTracks","newSsrcs","mappedSources","addRemoteSsrc","oldSsrc","remoteSources","oldSourceName","getRemoteSourceInfoBySourceName","getPeerMediaInfo","_sourceMutedChanged","removeRemoteStream","removeRemoteStreamsOnLeave","removeSsrcInfo","getRemoteSourceInfoByParticipant","newRemoteSdp","oldTrack","newTrack","setAnswer","jingleAnswer","oldLocalSdp","newLocalSdp","setMediaTransferActive","audioTransferActive","videoTransferActive","jingleOfferAnswerIq","audioTracks","bridgeSessionId","setP2pVideoTransferActive","videoActive","setReceiverVideoConstraint","sourceReceiverConstraints","setSenderVideoConstraint","maxFrameHeight","jitsiLocalTrack","getLocalVideoTracks","getLocalVideoTrack","setSenderVideoConstraints","setVideoCodecs","codecList","screenshareCodec","currentCodecOrder","getConfiguredVideoCodecs","every","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","JingleConnectionPlugin","iceConfig","sessions","jvbIceConfig","jvb","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","onJingle","fromJid","sess","jsonMessages","_audioVideoSsrcs","audioVideoSsrcs","logMessage","parseCandidates","candidateAttrs","_parseIceCandidates","newP2PJingleSession","getStunAndTurnCredentials","v2Res","onReceiveStunAndTurnCredentials","v1Res","iceservers","dict","urls","iceServersOverride","targetType","temp","useTurnUdp","getLog","updateLog","StropheLogger","logIncoming","logOutgoing","RAYO_XMLNS","RayoConnectionPlugin","onRayo","roomPass","callResource","lastErrorStatus","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","FAILURE_REGEX","DEFAULT_STUN_SERVERS","FEATURE_JIGASI","XMPP","bosh","disconnectInProgress","authenticatedUser","_components","_preComponentsMsgs","errStatusCapture","getLastErrorStatus","getStatusString","createConnection","details","shard_changed","suspend_time","time_since_last_success","_initStrophePlugins","initFeaturesList","disableBeforeUnloadHandlers","_onPrivateMessage","JINGLE","RTP_AUDIO","RTP_VIDEO","enableOpusRed","enableRemb","enableTcc","getConnection","connectionHandler","statusStr","CONNECTION_STATUS_CHANGED","_maybeSendDeploymentInfoStat","_sysMessageHandler","sendDiscoInfo","_resetState","sendDeploymentInfo","_processDiscoInfoIdentities","anonymousConnectionFailed","connectionFailed","lastErrorMsg","wasIntentionalDisconnect","_getConnectionFailedReasonDetails","lastFailedRawMessage","_parseConnectionFailedMessage","speakerStatsComponentAddress","processLobbyFeatures","fr","_ref3","backendRelease","processBreakoutRoomsFeatures","rename","_ref4","_onSystemMessage","foundIceServers","attaching","configDomain","hostname","_startConnecting","onCreateResource","getRoomJid","mucNickname","muc","getJingleLog","getXmppLog","getSessions","disconnectListener","_cleanupXmppConnection","evType","p2pStunServers","stunServers","iceTransportPolicy","headersArr","sendFaceLandmarksEvent","faceExpression","jsonString","users","SPEAKER_STATS_RECEIVED","acceptedStatuses","aprops","logObject","authenticateAndUpgradeRole","rejectPromise","onLoginSuccessful","canceled","authenticationError","connectionError","BridgeChannel","_channel","_connected","_eventEmitter","_mode","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","isOpen","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","createBridgeChannelClosedEvent","sendEndpointStatsMessage","colibriClass","msgPayload","sendSetLastNMessage","lastN","sendReceiverVideoConstraintsMessage","sendSourceVideoTypeMessage","estimatedDownlinkBandwidth","dominantSpeakerEndpoint","previousSpeakers","isActive","forwardedSources","getParticipantCount","jsonObject","CameraFacingMode","logDisabled_","deprecationWarnings_","extractVersion","uastring","pos","wrapPeerConnectionEvent","eventNameToWrap","nativeAddEventListener","nativeEventName","wrappedCallback","modifiedEvent","handleEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","disableLog","disableWarnings","deprecated","oldMethod","newMethod","compactObject","accumulator","walkStats","resultSet","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","trackId","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","ideal","exact","oldname_","oc","mix","advanced","shimConstraints_","remap","face","facingMode","getSupportedFacingModeLies","getSupportedConstraints","dev","shimError_","PermissionDeniedError","PermissionDismissedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","cs","getAudioTracks","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","shimMediaStream","MediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","getReceivers","transceiver","dispatchEvent","shimGetSendersWithDtmf","shimSenderWithDtmf","dtmf","_dtmf","createDTMFSender","_pc","_senders","origAddTrack","origRemoveTrack","removeTrack","origAddStream","addStream","origRemoveStream","removeStream","origGetSenders","shimGetStats","origGetStats","onSucc","onErr","fixChromeStats_","localcandidate","remotecandidate","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","receivers","srcElement","MediaStreamTrack","shimAddTrackRemoveTrackWithNative","getLocalStreams","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","newStream","replaceInternalStreamId","internalId","externalStream","internalStream","RTCSessionDescription","oldStream","methodObj","origSetLocalDescription","replaceExternalStreamId","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","webkitRTCPeerConnection","fixNegotiationNeeded","getConfiguration","sdpSemantics","nativeGetUserMedia","nativeGetSettings","nativeApplyConstraints","preferredMediaSource","mediaSource","RTCTrackEvent","modernStatsTypes","inboundrtp","outboundrtp","candidatepair","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","addTransceiver","setParametersPromises","initParameters","shouldPerformCheck","sendEncodings","encodingParam","scaleResolutionDownBy","maxFramerate","getParameters","encodings","shimGetParameters","origGetParameters","shimCreateOffer","origCreateOffer","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","getRemoteStreams","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","successCallback","failureCallback","withCallback","_getUserMedia","shimConstraints","errcb","shimRTCIceServerUrls","pcConstraints","newIceServers","shimTrackEventTransceiver","shimCreateOfferLegacy","offerOptions","audioTransceiver","setDirection","videoTransceiver","shimAudioContext","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","toJSON","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","canSendMMS","remoteIsFirefox","canSendMaxMessageSize","getCanSendMaxMessageSize","remoteMMS","getMaxMessageSize","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","dataChannel","shimConnectionState","completed","checking","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeExtmapAllowMixed","nativeSRD","shimAddIceCandidateNullOrEmpty","nativeAddIceCandidate","shimParameterlessSetLocalDescription","nativeSetLocalDescription","shimChrome","shimFirefox","shimSafari","mozGetUserMedia","isSecureContext","RTCIceGatherer","supportsUnifiedPlan","adapter","commonShim","chromeShim","browserShim","firefoxShim","safariShim","adapterFactory","DEFAULT_CONSTRAINTS","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","availableDevicesPollTimer","availableDevices","emptyFuncton","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","groupId","_initOnce","_options$audioQuality","screenObtainer","ds","attachMediaStream","srcObject","isDeviceChangeAvailable","getAudioOutputDevice","ex","_updateKnownDevices","umDevices","gumTimeout","timeoutExpired","_updateGrantedPermissions","jitsiError","_getDesktopMedia","_getMissingTracks","requestedDevices","missingDevices","audioDeviceRequested","audioTracksReceived","videoDeviceRequested","videoTracksReceived","_onMediaDevicesListChanged","devicesReceived","pds","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","um","grantedPermissions","obtainAudioAndVideoPermissions","otherOptions","mediaStreamsMetaData","maybeRequestDesktopDevice","desktopSharingSourceDevice","matchingDevice","deviceConstraints","maybeRequestCaptureDevices","requestedCaptureDevices","Resolutions","cameraDeviceId","USER","micDeviceId","getConstraints","desktopStream","desktopAudioTracks","desktopAudioStream","desktopVideoTracks","desktopVideoStream","avStream","audioStream","effects","videoStream","stopMediaStream","deviceType","mediaStream","release","isDesktopSharingEnabled","setAudioOutputDevice","getCurrentlyAvailableMediaDevices","getEventDataForActiveDevice","deviceData","isUserStreamById","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_attachTTFMTracker","container","_onTrackAttach","_onTrackDetach","_setHandler","_unregisterHandlers","videoTrack","RTCUtils","getStreamId","getSsrc","getTrack","getTrackLabel","getTrackId","getUsageLabel","getVideoType","getHeight","getWidth","isLocalAudioTrack","isWebRTCTrackMuted","newAudioLevel","setAudioOutput","JitsiLocalTrack","rtcId","_setEffectInProgress","effect","_startStreamEffect","_this$_constraints$he","_constraints","maxEnabledResolution","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_sourceName","_ssrc","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","_addStreamToConferenceAsUnmute","_addLocalTrackToPc","_fireNoDataFromSourceEvent","isReceivingData","createNoDataFromSourceEvent","_isNoDataFromSourceEventsEnabled","_queueSetMuted","setMuted","_setMuted","_removeStreamFromConferenceAsMute","_removeLocalTrackFromPc","_sendMuteStatus","_setTrackMuteStatus","logMuteInfo","_streamEffect","_stopStreamEffect","stopStream","streamOptions","getDeviceId","getCameraFacingMode","streamsInfo","cont","_sendBridgeVideoTypeMessage","_originalStream","startEffect","stopEffect","_switchCamera","ENVIRONMENT","_switchStreamEffect","setEffect","_this$track$getSettin","_this$track","trackSettings","getCaptureResolution","getDuration","isEnded","_stopStreamInProgress","_effectEnabled","setConference","setSsrc","unmute","SignalingEvents","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","SOURCE_MUTED_CHANGED","SOURCE_UPDATED","SOURCE_VIDEO_TYPE_CHANGED","getSourceNameForJitsiTrack","trackIdx","getMediaTypeFromSourceName","firstLetterOfMediaTypeIdx","firstLetterOfMediaType","getSourceIndexFromSourceName","nameParts","SignalingLayer","getPeerSourceInfo","getSSRCOwner","getTrackSourceName","setTrackMuteStatus","setTrackVideoType","updateSsrcOwnersOnLeave","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","removeGroupsWithSSRC","removeGroupsBySemantics","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","selectMedia","selectedMLines","toRawSDP","LocalSdpMunger","localEndpointId","_transformMediaIdentifiers","_mediaSection$mLine$s","_mediaSection$mLine$m","mediaDirection","sortedSources","trackSsrcs","_this$tpc$getLocalVid","generatedMsid","existingMsid","_hasHadVideoTrack","_hasHadAudioTrack","transformStreamIdentifiers","sessionDesc","_transformer$selectMe","transformer","audioMLine","videoMlines","updateAssociatedRtxStream","primarySsrcInfo","rtxSsrc","primarySsrcMsid","primarySsrcCname","previousRtxSSRC","RtxModifier","correspondingRtxSsrcs","clearSsrcCache","setSsrcCache","ssrcMapping","modifyRtxSsrcs","sdpStr","sdpTransformer","videoMLines","modifyRtxSsrcs2","primaryVideoSsrcs","correspondingRtxSsrc","stripRtx","fidGroups","SdpSimulcast","_ssrcCache","_numOfLayers","_fillSsrcsFromCache","cachedSsrcs","_parseSimLayers","newMsid","_getSsrcAttribute","newCname","_generateNewSsrcsForSimulcast","simSsrcs","simSsrc","_generateSsrc","_mLine$ssrcs2","mungeLocalDescription","_media$ssrcs","_media$ssrcGroups$len","_media$ssrcGroups","_media$ssrcs$","simulcastSsrcs","TrackStreamingStatus","TrackStreamingStatusImpl","_getNewStateForJvbMode","isInForwardedSources","isRestoringTimedout","isVideoTrackFrozen","INTERRUPTED","RESTORING","_getNewStateForP2PMode","restoringTimer","rtcMutedTimestamp","streamingStatusMap","trackTimer","outOfForwardedSourcesTimeout","p2pRtcMuteTimeout","rtcMuteTimeout","_getVideoFrozenTimeout","isP2PActive","_onP2PStatus","figureOutStreamingStatus","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onForwardedSourcesChanged","onForwardedSourcesChanged","_onLastNValueChanged","clearRtcMutedTimestamp","maybeSendTrackStreamingStatusEvent","_changeStreamingStatus","newStatus","getTrackStreamingStatus","_setTrackStreamingStatus","isVideoRTCMuted","inP2PMode","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","newState","_clearRestoringTimer","oldStreamingStatus","streamingStatus","nowMs","startedMs","trackStreamingStatus","createTrackStreamingStatusEvent","leavingForwardedSources","enteringForwardedSources","_clearEnteredForwardedSourcesTimestamp","_setEnteredForwardedSourcesTimestamp","rTimer","enteredForwardedSourcesTimestamp","_getEnteredForwardedSourcesTimestamp","_isCurrentTrack","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","JitsiRemoteTrack","ownerEndpointId","_trackStreamingStatus","_trackStreamingStatusImpl","_enteredForwardedSourcesTimestamp","_addEventListener","_removeEventListener","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","_initTrackStreamingStatus","_disposeTrackStreamingStatus","setMute","getSSRC","_playCallback","getConnectionTimes","gumStart","gumEnd","gumDuration","ttfm","_getStatus","_p2pConnStatusRtcMuteTimeout","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","VideoEncoderScalabilityMode","VIDEO_CODECS","TPCUtils","supportsDDHeaderExt","videoQualitySettings","_codecConfig$maxBitra","codecConfig","bitrateSettings","maxbitratesvideo","_calculateActiveEncodingParams","localVideoTrack","newHeight","_this$options$videoQu","codecBitrates","trackCaptureHeight","effectiveNewHeight","desktopShareBitrate","desktopbitrate","isScreenshare","scalabilityMode","L3T3_KEY","L3T3","lvl","_isScreenshareBitrateCapped","L1T3","ULTRA","FULL","HIGH","STANDARD","L2T3_KEY","L2T3","_getConfiguredVideoCodecsImpl","parsedSdp","_getVideoStreamEncodings","localTrack","captureResolution","cameraMaxbitrate","effectiveScaleFactors","sim","effectiveBitrates","standardSimulcastEncodings","_isRunningInFullSvcMode","_capScreenshareBitrate","calculateEncodingsActiveState","videoStreamEncodings","activeState","isSpatialScalabilityOn","_videoStreamEncodings","calculateEncodingsBitrates","_this$options$videoQu2","calculateEncodingsScalabilityMode","scalabilityModes","calculateEncodingsScaleFactor","isRunningInSimulcastMode","ensureCorrectOrderOfSsrcs","reorderedSsrcs","getConfiguredVideoCodec","_this$pc$remoteDescri","rtpSender","localTrackTransceiverMids","_this$pc$localDescrip","currentSdp","isAddOperation","hasLocalSource","getStreamEncodings","injectSsrcGroupForSimulcast","simulcast","simulcast_03","insertUnifiedPlanSimulcastReceive","simulcastLine","mLines","senderMids","mungeCodecOrder","mungedSdp","currentCodecs","ULPFEC","RED","mungeOpus","enableOpusDtx","opusMaxAverageBitrate","OPUS","fmtpOpus","fmtpConfig","sdpChanged","maxaveragebitrate","usedtx","mungedConfig","setMaxBitrates","isLocalSdp","pcCodecSettings","currentCodec","codecScalabilityModeSettings","isDoingVp9KSvc","limit","TraceablePeerConnection","_dtmfSender","_dtmfTonesQueue","remoteTracksBySsrc","remoteTracks","localSSRCs","remoteSSRCs","localUfrag","remoteUfrag","_dtlsTransport","_peerVideoTypeChanged","_peerMutedChanged","_sourceVideoTypeChanged","safeConstraints","tpcUtils","statsinterval","_usesCodecSelectionAPI","localSdpMunger","getLocalEndpointId","rtxModifier","_senderMaxHeights","_localSsrcMap","_remoteSsrcMap","what","onTrack","evt","_remoteTrackAdded","_remoteTrackRemoved","ondatachannel","results","_processStat","_lastVideoSenderUpdatePromise","statValue","endTime","times","dumpSDP","_getReceiversByEndpointIds","endpoints","remoteTrackIds","remote","_remote$track","h264SimulcastEnabled","getSynchronizationSources","_this$localSSRCs$get","remoteTrack","endpointTracksByMediaType","primarySsrcs","_sourceInfo$ssrcList","getTargetVideoBitrates","_this$localSSRCs$get2","findTrackById","_peerMediaInfo$muted","remoteSDP","mediaLine","mls","trackSsrc","peerMediaInfo","trackDetails","_createRemoteTrack","remoteTracksMap","userTracksByMediaType","_userTracksByMediaTyp","jitsiTrack","toBeRemoved","_removeRemoteTrack","_userTracksByMediaTyp2","_processAndExtractSourceInfo","_ssrcs","trackIndex","oldSsrcInfo","_extractPrimarySSRC","newSsrc","_getSSRC","getters","_adjustRemoteMediaDirection","isSharingLowFpsScreen","_isSharingScreen","_transceiver","webrtcStream","mediaStreamTrack","transceiverInit","_setEncodings","_assertTrackBelongs","methodName","doesBelong","lowFps","updated","webRtcStream","_this$localDescriptio","localSdp","_newTrack$getType","_newTrack$getTrack","isMuteOperation","isNewLocalSource","stopped","_newTrack$getSourceNa","transceiverMid","_transceiver2","oldTrackSSRC","oldSsrcNum","localSources","_getPreferredCodecForScreenshare","defaultCodec","_initializeDtlsTransport","onstatechange","calculateExpectedSendResolution","maxValue","localAudioTrack","_configureSenderEncodings","_transceiver$sender","_parameters$encodings","_t$sender","_t$receiver","_enableSenderEncodings","_parameters$encodings2","preferredCodec","_this$_senderMaxHeigh","_this$_senderMaxHeigh2","_updateVideoSenderParameters","_mungeDescription","mungedDescription","_updateVideoSenderEncodings","nextFunction","nextPromise","_parameters$encodings3","videoSender","isScreensharingTrack","preference","degradationPreference","codecForCamera","bitrates","scaleFactors","needsUpdate","expectedPattern","matchingCodec","settledResult","changed","sendTones","tones","interToneGap","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","peerTracks","_removePeerConnection","_createOfferOrAnswer","isOffer","logName","handleSuccess","resultSdp","resolveFn","rejectFn","handleFailure","_RTCRtpReceiver$getCa","transceivers","_t$receiver2","capabilities","oaPromise","peerConnectionIdCounter","rtcTrackIdCounter","_createLocalTracks","metaData","RTC","peerConnections","_lastN","_forwardedSources","_forwardedSourcesChangeListener","_onDeviceListChanged","_updateAudioOutputForAudioTracks","destroy","_channelOpenListener","createLocalTracks","tracksInfo","initializeBridgeChannel","logError","msgType","_receiverVideoConstraints","oldForwardedSources","setReceiverVideoConstraints","sendSourceVideoType","eventType","signaling","encodedInsertableStreams","bundlePolicy","newConnection","traceablePeerConnection","addLocalTrack","getForwardedSources","localVideo","getLocalAudioTrack","localAudio","pcRemoteTracks","mutePromises","audioTrack","removeLocalTrack","elSelector","isWebRtcSupported","closeBridgeChannel","sendChannelMessage","setLastN","remoteAudioTracks","ConnectionQualityEvents","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","startBitrate","ConnectionQuality","_this$_options$config","_localStats","connectionQuality","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","ConferenceEvents","_this$_localStats","_updateLocalConnectionQuality","_broadcastLocalStats","_updateRemoteStats","disableLocalStats","_updateLocalStats","_maybeUpdateUnmuteTime","_resetVideoUnmuteTime","serverRegion","bridgeCount","_calculateConnectionQuality","resolutionName","quality","activeTPC","getActivePeerConnection","_this$_options$config2","_this$_options$config3","millisSinceStart","qualityLevel","targetHeight","rampUp","getTarget","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","disableLocalStatsBroadcast","updateLocalConnectionQuality","isConnectionInterrupted","IceFailedHandling","_actOnIceFailed","enableForcedReload","jvbConnection","jvbConnIceState","_stopJvbSession","_canceled","_iceFailedTimeout","DetectionEvents","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","NoAudioSignalDetection","_timeoutTrigger","_hasAudioInput","_trackAdded","_clearTriggerTimeout","_handleAudioInputStateChange","_handleNoAudioInputDetection","_eventFired","_audioLevel","_audioTrack","P2PDominantSpeakerDetection","myUserID","createAudioContext","AudioContextImpl","TrackVADEmitter","procNodeSampleRate","vadProcessor","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","_audioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","score","pcmData","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","getDeviceLabel","_destroyed","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","VADNoiseDetection","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","VADTalkMutedDetection","_calculateVADScore","E2ePingEvents","E2E_RTT_CHANGED","E2E_PING_REQUEST","E2E_PING_RESPONSE","ParticipantWrapper","e2eping","requests","lastRequestId","sendRequest","handleResponse","maybeLogRttAndStop","scheduleNext","getDelay","removeParticipant","conferenceSize","totalSeconds","numRequests","maxMessagesPerSecond","requestId","requestMessage","timeSent","Infinity","numRequestsWithResponses","totalNumRequests","JitsiE2EPingEvents","E2ePing","maxConferenceSize","participantJoined","participantLeft","messageReceived","conferenceJoined","handleRequest","participantWrapper","Jvb121EventGenerator","_jvb121","evaluateStatus","oldStatus","kJitsiLiteMode","LiteModeContext","_setupLiteModeForTrack","transformStream","TransformStream","pipeThrough","pipeTo","DESKTOP_VIDEO_CODEC_ORDER","MOBILE_P2P_VIDEO_CODEC_ORDER","MOBILE_VIDEO_CODEC_ORDER","CodecSelection","codecPreferenceOrder","visitorCodecs","connectionType","disabledCodec","preferenceOrder","enableAV1ForFF","supportedCodecs","_getSupportedVideoCodecs","selectedOrder","_disabledCodec","_preferredCodec","isVp9EncodeSupported","selectedCodec","_window$RTCRtpReceive","_window$RTCRtpReceive2","_window$RTCRtpReceive3","supportedCodec","getCodecPreferenceList","getScreenshareCodec","selectPreferredCodec","mediaSession","_this$screenshareCode","localPreferredCodecOrder","remoteParticipants","remoteCodecsPerParticipant","selectedCodecOrder","localCodec","codecNotSupportedByRemote","remoteCodecs","participantCodec","changeCodecPreferenceOrder","getActiveMediaSession","codecOrder","codecsByVideoType","codecIndex","newCodec","updateVisitorCodecs","ReceiveVideoController","_config$startLastN","_rtc","startLastN","_maxFrameHeight","_assumedBandwidthBps","_lastNLimitedByCpu","_receiveResolutionLimitedByCpu","assumedBandwidthBps","_getDefaultSourceReceiverConstraints","_mediaSession$peercon","remoteVideoTracks","_updateIndividualConstraints","individualConstraints","defaultConstraints","getCurrentReceiverConstraints","isLastNLimitedByCpu","onMediaSessionStarted","setAssumedBandwidthBps","setLastNLimitedByCpu","setPreferredReceiveMaxFrameHeight","setReceiverConstraints","_constraints$assumedB","p2pSession","mappedConstraints","setReceiveResolutionLimitedByCpu","SendVideoController","_preferredSendMaxFrameHeight","_sourceSenderConstraints","_propagateSendMaxFrameHeight","sendMaxFrameHeight","_selectSendMaxFrameHeight","configureConstraintsForLocalSources","sourceConstraints","onSenderConstraintsReceived","videoConstraints","_this$_conference$get","setPreferredSendMaxFrameHeight","QualityLimitationReason","FixedSizeArray","_maxSize","QualityController","_options$enableAdapti","_codecController","_enableAdaptiveMode","enableAdaptiveMode","_encodeTimeStats","_isLastNRampupBlocked","_lastNRampupTime","lastNRampupTime","_receiveVideoController","_sendVideoController","debouncedSelectCodec","_debounce","_processOutboundRtpStats","_timer","_lowerOrRaiseLastN","cpuLimited","receiveVideoController","newLastN","videoStreamsReceived","isStillLimitedByCpu","_maybeLowerReceiveResolution","currentLevel","_maybeSwitchVideoCodec","encodeResolution","_limitedByCpuTimeout","updatedStats","latestSourceStats","expectedSendResolution","codecController","_performQualityOptimizations","sourceStats","NONE","_lastNRampupTimeout","statsPerTrack","existingStats","_trackStats$find","avgEncodeTime","totalValue","currentValue","exisitingStats","sendVideoController","getFocusRecordingUpdate","jibriStatus","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","JibriSession","_jibriJid","_statusFromJicofo","_setSessionID","setStatus","_focusMucJid","getError","_error","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getJibriJid","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","setStatusFromJicofo","setJibriJid","jibriJid","appData","broadcastId","_this$_connection","_createIQ","recordingXMLUtils","_setErrorFromIq","_this$_connection2","_chatRoom","getSession","_sessions","getSessionByJibriJid","_handleFocusPresence","_handleJibriPresence","prevStatus","_emitSessionUpdate","startRecording","_addSession","stopRecording","_createSession","AverageStatReport","sum","calculate","appendReport","ConnectionAvgStats","avgRtpStatsReporter","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","AvgRTPStatsReporter","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","peerCount","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","userId","isLocalStats","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_isDominantSpeaker","_hasLeft","_faceLandmarks","getUserId","newName","isDominantSpeaker","isNowDominantSpeaker","timeElapsed","getTotalDominantSpeakerTime","hasLeft","markAsHasLeft","getFaceLandmarks","setFaceLandmarks","faceLandmarks","addFaceLandmarks","SpeakerStatsCollector","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_onFaceLandmarkAdd","_updateStats","oldDominantSpeaker","newDominantSpeaker","savedUser","speakerStatsToUpdate","newParticipant","ComponentsVersions","addCommandListener","_processVersions","getComponentVersion","componentName","VideoSIPGWStatusConstants","VideoSIPGWStateConstants","VideoSIPGWErrorConstants","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","STATE_CHANGED","JitsiVideoSIPGWSession","sipAddress","VideoSIPGWConstants","_sendJibriIQ","setState","failureReason","oldState","removeStateListener","sipaddress","displayname","VideoSIPGW","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","failure_reason","createVideoSIPGWSession","SOURCE_INFO_PRESENCE_ELEMENT","SignalingLayerImpl","ssrcOwners","_localSourceState","_remoteSourceState","_addLocalSourceInfoToPresence","_bindChatRoomEventHandlers","emitAudioMutedEvent","_audioMuteHandler","_doesEndpointSendNewSourceInfo","emitVideoMutedEvent","_videoMuteHandler","emitVideoTypeEvent","_videoTypeHandler","_sourceInfoHandler","sourceInfoJSON","emitEventsFromHere","endpointSourceState","_sourceInfoJSON$sourc","sourceChanged","newMutedState","oldSourceState","newVideoType","newSourceNames","_memberLeftHandler","_this$chatRoom","_logOwnerChangedMessage","_this$chatRoom2","lastPresence","legacyGetPeerMediaInfo","mediaInfo","codecListNode","_codecListNode$0$valu","_codecListNode$0$valu2","_this$_remoteSourceSt","_this$ssrcOwners$get","_this$ssrcOwners$get2","setChatRoom","oldChatRoom","newEndpointId","newSourceName","existingOwner","BridgeVideoType","DEFAULT_TRANSCRIPTION_LANGUAGE","_getCodecMimeType","JitsiConference","_this$connection","_options$config$p2p","_this$options$config$","_this$options$config$2","additionalLogMsg","eventManager","componentsVersions","dtmfManager","somebodySupportsDTMF","startMutedPolicy","wasStopped","avgRtpStatsN","speakerStatsCollector","deferredStartP2PTask","backToP2PDelay","isP2PConnectionInterrupted","p2pJingleSession","videoSIPGWHandler","recordingManager","RecordingManager","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","_liteModeContext","_audioSenderLimitReached","_videoSenderLimitReached","_firefoxP2pEnabled","enableFirefoxP2p","_iceRestarts","resourceCreator","isAuthenticatedUser","_Strophe$getNodeFromJ","_config$e2eping","_config$videoQuality","_config$testing$lastN","_config$videoQuality2","_config$videoQuality3","_config$videoQuality4","_config$videoQuality5","_config$videoQuality6","_config$videoQuality7","_config$testing2","_config$p2p","_config$p2p2","_config$p2p3","_config$p2p4","_config$p2p5","_config$p2p6","_config$transcription","statisticsId","_onIceConnectionEstablished","_onIceConnectionFailed","_onIceConnectionInterrupted","_onIceConnectionRestored","_updateProperties","_sendConferenceJoinAnalyticsEvent","_removeLocalSourceOnReject","_updateRoomPresence","_registerRtcListeners","qualityOptions","mobileCodecPreferenceOrder","mobileScreenshareCodec","qualityController","aliasName","statisticsDisplayName","confID","applicationName","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","enableNoisyMicDetection","vadNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","hasAudioSignal","jvb121Status","p2pDominantSpeakerDetection","transcriptionLanguage","setTranscriptionLanguage","_maybeSetSITimeout","isJoined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","_this$getBreakoutRoom","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","_maybeClearSITimeout","mJid","leaveError","_this$connection2","isEndConferenceSupported","localtrack","_desktopSharingFrameRate","isAuthEnabled","isLoggedIn","getAuthLogin","getPerformanceStats","longTasksStats","eventId","command","removeCommandListener","sendTextMessage","sendPrivateTextMessage","sendCommand","sendCommandOnce","removeCommand","nickKey","silent","getTranscriptionStatus","_this$options$config$3","allowMultipleTracks","_this$getLocalTracks","addTrackPromises","_setupNewTrack","_fireMuteChangeEvent","_fireAudioLevelChangeEvent","activeTpc","actorId","muteHandler","audioLevelHandler","oldVideoType","_this$getLocalTracks2","oldTrackBelongsToConference","_doReplaceTrack","replaceTrackPromises","_this$getLocalTracks3","_setNewVideoType","videoTypeChanged","presenceChanged","addPromises","removePromises","unlock","isInteger","isVideoActive","countHidden","grantOwner","revokeOwner","isMyself","isMembersOnly","kickParticipant","_sessionInitiateTimeout","muteMediaType","fullJid","_this$p2pJingleSessio","_this$p2pJingleSessio2","_this$jvbJingleSessio","_this$jvbJingleSessio2","_updateFeatures","_maybeStartOrStopP2P","audioMuted","videoMuted","numberOfParticipants","_numberOfParticipantsOnJoin","updateDTMFSupport","botParticipant","mediaSessions","tracksToBeRemoved","kickedParticipantId","kickedParticipant","transportInfo","removedTrack","_onIncomingCallP2P","rejectReason","contentName","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","_acceptJvbIncomingCall","_setBridgeChannel","_suspendMediaTransferForJvbConnection","_this$connection3","_this$connection$opti","_this$connection4","ignoreDomain","bridgeChannel","preferSctp","sctpOffered","firstWsUrl","stopOptions","p2pFailed","_stopP2PSession","isDTMFSupported","peerConnection","isSIPCallingSupported","_this$room$xmpp$moder","_this$room","setStartMutedPolicy","policy","getStartMutedPolicy","removeLocalParticipantProperty","getLocalParticipantProperty","property","overallFeedback","detailedFeedback","isCallstatsEnabled","getSsrcByTrack","_this$getActivePeerCo","sendApplicationLog","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","jitterDelay","_this$options$config$4","createJvbIceFailedEvent","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","p2pEstablishmentDuration","jvbEstablishmentDuration","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","_this$properties$visi","_publishedCodecs","audioLimitReached","videoLimitReached","publishedCodecs","_visitorCodecs","_hasVisitors","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","userLeftEvent","peers","shouldBeInP2P","_this$options$config$5","_this$options$config$6","peersId","forceInitiator","forceResponder","hasBotPeer","wasP2PEstablished","skip","muteStatusChanged","getP2PConnectionState","startP2PSession","stopP2PSession","getSpeakerStats","sendFaceLandmarks","_window$JitsiMeetJS$a","_window$JitsiMeetJS","conferenceConnectionTimes","xmppConnectionTimes","globalNSConnectionTimes","app","xmppConnectingTime","connecting","connectedToMUCJoinedTime","connectingToMUCJoinedTime","numberOfParticipantsOnJoin","perf","toggleE2EE","setMediaEncryptionKey","isLobbySupported","isVisitorsSupported","disableLobby","joinLobby","myLobbyUserId","sendLobbyMessage","addLobbyMessageListener","removeLobbyMessageHandler","lobbyDenyAccess","lobbyApproveAccess","isAVModerationSupported","enableAVModeration","disableAVModeration","avModerationApprove","avModerationReject","_this$room2","_this$room3","JitsiConnection","appID","errType","createConnectionFailedEvent","errorType","errorMessage","ANALYTICS_CONNECTION_DISCONNECTED","setToken","initJitsiConference","getLogs","JitsiMediaDevicesEvents","PERMISSION_PROMPT_IS_SHOWN","AUDIO_PERMISSION_NAME","VIDEO_PERMISSION_NAME","_permissions","_handlePermissionsChange","_permissionsApiSupported","query","_parsePermissionState","onchange","supported","permissionStatus","isDevicePermissionGranted","isMultipleAudioInputSupported","stopActiveDevices","CustomSignalingLayer","ACTIONS","ProxyConnectionPC","receiveAudio","receiveVideo","_peerConnection","_onRemoteStream","_onSendMessage","getPeerJid","processMessage","$jingle","ACCEPT","_onSessionAccept","INITIATE","_onSessionInitiate","TERMINATE","_onSessionTerminate","_onTransportInfo","_createPeerConnection","connectionStub","pcConfigStub","roomStub","jitsiRemoteTrack","onRemoteStream","onSendMessage","ParsedIceCandidate","iceCandidateStr","typeTransport","extractTypeTransport","ipv6","ipAddress","getString","isHost","isServerReflexive","isPeerReflexive","isRelay","isPublicIp","getTypeTransport","isTypeTransportUdp","isTypeTransportTcp","isTypeTransportTls","getTransport","isUdp","isTcp","getProtocol","isRtp","isRtcp","isIpv6","getIpAddress","getPort","codeBaseType","chrome","firefox","edge","browserName","msie","safari","osName","windows","android","ios","StatsAdapter","codeBase","getIceCandidates","rawData","localCandidates","remoteCandidates","iceCandidatePairs","rawStats","extractRawStats","processRawStatsForIceInfo","selectedCandidatePairId","candidatePairs","parsedStats","getParsedStats","classifiedStats","statsClassifier","candidatePair","localCandidate","mozLocalTransport","relayType","formatRelayType","remoteCandidate","googActiveConnection","expectedType","typeIsInbound","reportType","GetStatsHandler","isPromiseBased","csioGetStats","iceCandidatesHandler","candidatesObj","statsHandler","getStatsFirefox","getStatsSafari","getStatsChrome","getStatsEdge","csioReactNative","TurnConnection","statshandler","pctpc1","pctpc2","sendChannel","messageCallback","parsedIceResults","resolveCb","rejectCb","localIpAddressInfo","localIpAddresses","localIp","localIpType","numberOfLocalIp","setMessageCallback","setErrorCallback","raiseSendError","assignEvent","CSRTCPeerConnection","continueFlag","datachannelSettings","ordered","maxRetransmits","servers","rejectDisconnect","connectionTimer","binaryType","onIceCandidate","onIceStateChange","onCreateOfferSuccess","onCreateOfferError","iceTimer","getOtherPc","onCreateAnswerError","onSetLocalSuccess","onSetSessionDescriptionError","onSetRemoteSuccess","onSetRemoteSessionDescriptionError","onCreateAnswerSuccess","relayUdpGathered","relayTcpGathered","relayTlsGathered","srflxGathered","onAddIceCandidateSuccess","onAddIceCandidateError","getIceResults","iceResults","turnIpAddress","turnIpVersion","turnTransport","ipv6Supported","ipv4Supported","relayTlsSuccess","relayTcpSuccess","relayUdpSuccess","srflxSuccess","localIP","numberOfLocalIPs","localIPType","localIPNetworkType","ipInfo","foundActiveCand","pair","turnNetworkType","getCurrent","timing","navigationStart","TurnTest","getResults","handleMessage","handleError","forceStopped","initiate","forceStop","finished","failed","LAST_TIMEOUT","RttTest","sendTimer","countSent","rtts","startTimestamp","Timestamps","sendPing","sentTs","calculateRtt","calculateMetrics","fillResults","sentMessages","unAckedMessages","maxMessages","median","variance","std","endTimestamp","half","sqrt","randomAsciiString","MessageMaker","sentBytes","PADDING","make","ThroughputTest","receivedBytes","secondHalfBytes","secondHalfStart","bufferEmpty","chunkSize","messageMaker","intervals","intervalStart","intervalLength","intervalBytes","lastReceivedTimestamp","startSend","lastMessage","intervalDuration","intervalAvg","averageThroughput","milliseconds","bufferListener","fillBuffer","bufferedAmount","bufferFullThreshold","usePolling","bufferedAmountLowThreshold","bytesPrepared","allDuration","allAverage","fractionLostBytes","LossTest","numBufferFill","sentData","msgJson","totalBytes","ResultsHandler","trunc","failures","setStatusStopped","setStatusFailed","setStatusSuccess","tests","getFailureNumber","testName","OnlineCheck","onlineCheck","addEntry","onLine","TEST_NAMES","osVersion","agentVersion","csioGetOsName","csioGetOsVer","nVer","fullVersion","verOffset","nAgt","appVersion","opera","clientStrings","splitWords","browserVersion","detect","callsInProgress","turnTests","resultsHandler","startResolve","startReject","turnTestCounter","endpointInfo","buildName","buildVersion","_start","turnConnection","startTurnTests","activeTurnTest","onlineCheckResults","sendResults","getPublicPrecalltestResults","publicResults","mediaConnectivity","throughput","fractionalLoss","resultsMin","callStarts","callFinished","crashDisconnect","handleTestResults","loadScript","relativeURL","loadCallback","script","referenceNode","scriptEl","currentExecutingScript","scriptSrc","baseScriptSrc","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","hasGUMExecuted","getAnalyticsAttributesFromOptions","audio_requested","video_requested","screen_sharing_requested","ProxyConnectionService","jitsiConnection","_onFatalError","_convertStringToXML","UNAVAILABLE","_selfCloseConnection","localTrackIndex","localSourceNameTrack","xml","xmlDom","convertVideoToDesktop","jitsiLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","constants","recording","BUSY","POLICY_VIOLATION","RESOURCE_CONSTRAINT","UNEXPECTED_REQUEST","SERVICE_UNAVAILABLE","FILE","sipVideoGW","detection","rtcstats","errorTypes","logLevels","JitsiMediaDevices","rtcstatsStoreLogs","rtcstatsLogFlushSizeBytes","enableAnalyticsLogging","sendIdentityEntry","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","isFirstGUM","startTS","endTS","isCollectingLocalStats","currentlyAvailableMediaDevices","createLocalTracksFromMediaStreams","trackInfo","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","deviceLabel","joinConference","_options$connectionOp","appId","connectionOptions","_options$jaas$useStag","_options$jaas","useStage","jaas","useStaging","jaasDomain","cleanupListeners","onConnectionEstablished","onConnectionFailed","_options$conferenceOp","conf","conferenceOptions","setNetworkInfo","runPreCallTest","PreCallTest","util","ScriptUtil","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","maxChunkLength","len2","encodeChunk","lookup","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","getScriptUrlFromStack","skipStackDepth","ignoreMessage","_nearestExecutingScript","eligibleScripts","getScriptFromUrl","getSoleInlineScript","currentScript","thrownErr","near","far","consoleTransport","globalTransports","transportIdx","globalOptions","callerInfo","disableCallerInfo","fileLocation","column","getCallerInfo","logPrefixes","toISOString","fullLogParts","methods","LOG","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","amdO","getter","__esModule","definition","__webpack_exports__"],"sourceRoot":""}